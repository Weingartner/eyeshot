<?xml version="1.0"?>
<doc>
    <assembly>
        <name>devDept.Eyeshot.Control.Wpf</name>
    </assembly>
    <members>
        <member name="T:devDept.Eyeshot.Converters.BoundingBoxConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.MouseButtonConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.MouseButtonConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.MouseButtonConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.MouseButtonConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.MouseButtonConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <exclude/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.RotateConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.ShortcutKeysSettingsConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.ZoomConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.PanConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.Mouse3DConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.MultiTouchConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.NavigationSettingsConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.SelectionBoxColorsConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.SelectionBoxColorsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.SelectionBoxColorsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <exclude/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.MagnifyingGlassConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.MagnifyingGlassConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.MagnifyingGlassConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <exclude/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.EnumDescriptionConverter">
            <summary>
            EnumConverter supporting System.ComponentModel.DescriptionAttribute
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.SavedViewsConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.BorderConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.CameraConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.DisplayModeSettingsBaseConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.DisplayModeSettingsFlatConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.DisplayModeSettingsConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.DisplayModeSettingsShadedConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.DisplayModeSettingsRenderedConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.HiddenLinesConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.HiddenLinesConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.HiddenLinesConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.HiddenLinesConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <exclude/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.GridConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.LegendConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.ObjectManipulatorPartPropertiesConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.ObjectManipulatorConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.CoordinateSystemIconConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.CoordinateSystemIconConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.CoordinateSystemIconConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <exclude/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.OriginSymbolConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.ProgressBarConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.ToolBarConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.ToolBarConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.ToolBarConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.ToolBarConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.ToolBarConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <exclude/>
            
        </member>
        <member name="T:devDept.Eyeshot.Converters.ButtonSettingsConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.ButtonSettingsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.ButtonSettingsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.ButtonSettingsConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.ButtonSettingsConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <exclude/>
            
        </member>
        <member name="T:devDept.Eyeshot.Converters.ToolBarButtonConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.DefaultToolBarButtonConverter`1">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.ViewCubeConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.ViewCubeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <exclude/>
        </member>
        <member name="M:devDept.Eyeshot.Converters.ViewCubeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <exclude/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.ViewportConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Converters.ClippingPlaneConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Geometry.VertexBuffer">
            <summary>
            Used to effectively store vertices beyond.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:devDept.Geometry.VertexBuffer.EnsureCapacity">
            <summary>
            Size matters.
            </summary>
        </member>
        <member name="M:devDept.Geometry.VertexBuffer.Add(devDept.Geometry.VertexWrap)">
            <summary>
            Adds a vertex to the buffer.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:devDept.Geometry.VertexBuffer.Clear">
            <summary>
            Sets the Count to 0, otherwise does nothing.
            </summary>
        </member>
        <member name="P:devDept.Geometry.VertexBuffer.Count">
            <summary>
            Number of elements present in the buffer.
            </summary>
        </member>
        <member name="P:devDept.Geometry.VertexBuffer.Item(System.Int32)">
            <summary>
            Get the i-th element.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:devDept.Geometry.FaceList">
            <summary>
            A priority based linked list.
            </summary>
        </member>
        <member name="M:devDept.Geometry.FaceList.AddFirst(devDept.Geometry.ConvexFaceInternal)">
            <summary>
            Adds the element to the beginning.
            </summary>
            <param name="face"></param>
        </member>
        <member name="M:devDept.Geometry.FaceList.Add(devDept.Geometry.ConvexFaceInternal)">
            <summary>
            Adds a face to the list.
            </summary>
            <param name="face"></param>
        </member>
        <member name="M:devDept.Geometry.FaceList.Remove(devDept.Geometry.ConvexFaceInternal)">
            <summary>
            Removes the element from the list.
            </summary>
            <param name="face"></param>
        </member>
        <member name="P:devDept.Geometry.FaceList.First">
            <summary>
            Get the first element.
            </summary>
        </member>
        <member name="T:devDept.Geometry.ConnectorList">
            <summary>
            Connector list.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConnectorList.Add(devDept.Geometry.FaceConnector)">
            <summary>
            Adds a face to the list.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:devDept.Geometry.ConnectorList.Remove(devDept.Geometry.FaceConnector)">
            <summary>
            Removes the element from the list.
            </summary>
            <param name="connector"></param>
        </member>
        <member name="P:devDept.Geometry.ConnectorList.First">
            <summary>
            Get the first element.
            </summary>
        </member>
        <member name="F:devDept.Geometry.Constants.PlaneDistanceTolerance">
            <summary>
            A value used to determine if a vertex lies on a plane.
            </summary>
        </member>
        <member name="T:devDept.Geometry.ConvexFace`2">
            <summary>
            A convex face representation containing adjacency information.
            </summary>
        </member>
        <member name="P:devDept.Geometry.ConvexFace`2.Adjacency">
            <summary>
            Adjacency. Array of length "dimension".
            If F = Adjacency[i] then the vertices shared with F are Vertices[j] where j != i.
            In the context of triangulation, can be null (indicates the cell is at boundary).
            </summary>
        </member>
        <member name="P:devDept.Geometry.ConvexFace`2.Vertices">
            <summary>
            The vertices stored in clockwise order (for dimensions 2 - 4, higher dimensions the order is arbitrary).
            Unless I accidentally switch some index somewhere in which case the order is CCW. Either way, it is consistent.
            3D Normal = (V[1] - V[0]) x (V[2] - V[1]).
            </summary>
        </member>
        <member name="P:devDept.Geometry.ConvexFace`2.Normal">
            <summary>
            The normal vector of the face. Null if used in triangulation.
            </summary>
        </member>
        <member name="T:devDept.Geometry.DefaultConvexFace`1">
            <summary>
            A default convex face representation.
            </summary>
            <typeparam name="TVertex"></typeparam>
        </member>
        <member name="T:devDept.Geometry.VertexWrap">
            <summary>
            Wraps each IVertex to allow marking of nodes.
            </summary>
        </member>
        <member name="F:devDept.Geometry.VertexWrap.Vertex">
            <summary>
            Ref. to the original vertex.
            </summary>
        </member>
        <member name="F:devDept.Geometry.VertexWrap.PositionData">
            <summary>
            Direct reference to PositionData makes IsVertexOverFace faster.
            </summary>
        </member>
        <member name="F:devDept.Geometry.VertexWrap.Index">
            <summary>
            Vertex index.
            </summary>
        </member>
        <member name="F:devDept.Geometry.VertexWrap.Marked">
            <summary>
            Used mostly to enumerate unique vertices.
            </summary>
        </member>
        <member name="T:devDept.Geometry.VertexWrapComparer">
            <summary>
            Compare vertices based on their indices.
            </summary>
        </member>
        <member name="T:devDept.Geometry.DeferredFace">
            <summary>
            For deferred face addition.
            </summary>
        </member>
        <member name="F:devDept.Geometry.DeferredFace.Face">
            <summary>
            The faces.
            </summary>
        </member>
        <member name="F:devDept.Geometry.DeferredFace.Pivot">
            <summary>
            The faces.
            </summary>
        </member>
        <member name="F:devDept.Geometry.DeferredFace.OldFace">
            <summary>
            The faces.
            </summary>
        </member>
        <member name="F:devDept.Geometry.DeferredFace.FaceIndex">
            <summary>
            The indices.
            </summary>
        </member>
        <member name="F:devDept.Geometry.DeferredFace.PivotIndex">
            <summary>
            The indices.
            </summary>
        </member>
        <member name="T:devDept.Geometry.FaceConnector">
            <summary>
            A helper class used to connect faces.
            </summary>
        </member>
        <member name="F:devDept.Geometry.FaceConnector.Face">
            <summary>
            The face.
            </summary>
        </member>
        <member name="F:devDept.Geometry.FaceConnector.EdgeIndex">
            <summary>
            The edge to be connected.
            </summary>
        </member>
        <member name="F:devDept.Geometry.FaceConnector.Vertices">
            <summary>
            The vertex indices.
            </summary>
        </member>
        <member name="F:devDept.Geometry.FaceConnector.HashCode">
            <summary>
            The hash code computed from indices.
            </summary>
        </member>
        <member name="F:devDept.Geometry.FaceConnector.Previous">
            <summary>
            Prev node in the list.
            </summary>
        </member>
        <member name="F:devDept.Geometry.FaceConnector.Next">
            <summary>
            Next node in the list.
            </summary>
        </member>
        <member name="M:devDept.Geometry.FaceConnector.#ctor(System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="dimension"></param>
        </member>
        <member name="M:devDept.Geometry.FaceConnector.Update(devDept.Geometry.ConvexFaceInternal,System.Int32,System.Int32)">
            <summary>
            Updates the connector.
            </summary>
            <param name="face"></param>
            <param name="edgeIndex"></param>
            <param name="dim"></param>
        </member>
        <member name="M:devDept.Geometry.FaceConnector.AreConnectable(devDept.Geometry.FaceConnector,devDept.Geometry.FaceConnector,System.Int32)">
            <summary>
            Can two faces be connected.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.FaceConnector.Connect(devDept.Geometry.FaceConnector,devDept.Geometry.FaceConnector)">
            <summary>
            Connect two faces.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="T:devDept.Geometry.ConvexFaceInternal">
            <summary>
            This internal class manages the faces of the convex hull. It is a 
            separate class from the desired user class.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexFaceInternal.#ctor(System.Int32,devDept.Geometry.VertexBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:devDept.Geometry.ConvexFaceInternal"/> class.
            </summary>
        </member>
        <member name="F:devDept.Geometry.ConvexFaceInternal.AdjacentFaces">
            <summary>
            Gets or sets the adjacent face data.
            </summary>
        </member>
        <member name="F:devDept.Geometry.ConvexFaceInternal.VerticesBeyond">
            <summary>
            Gets or sets the vertices beyond.
            </summary>
        </member>
        <member name="F:devDept.Geometry.ConvexFaceInternal.FurthestVertex">
            <summary>
            The furthest vertex.
            </summary>
        </member>
        <member name="F:devDept.Geometry.ConvexFaceInternal.Vertices">
            <summary>
            Gets or sets the vertices.
            </summary>
        </member>
        <member name="F:devDept.Geometry.ConvexFaceInternal.Normal">
            <summary>
            Gets or sets the normal vector.
            </summary>
        </member>
        <member name="F:devDept.Geometry.ConvexFaceInternal.IsNormalFlipped">
            <summary>
            Is the normal flipped?
            </summary>
        </member>
        <member name="F:devDept.Geometry.ConvexFaceInternal.Offset">
            <summary>
            Face plane constant element.
            </summary>
        </member>
        <member name="F:devDept.Geometry.ConvexFaceInternal.Tag">
            <summary>
            Used to traverse affected faces and create the Delaunay representation.
            </summary>
        </member>
        <member name="F:devDept.Geometry.ConvexFaceInternal.Previous">
            <summary>
            Prev node in the list.
            </summary>
        </member>
        <member name="F:devDept.Geometry.ConvexFaceInternal.Next">
            <summary>
            Next node in the list.
            </summary>
        </member>
        <member name="F:devDept.Geometry.ConvexFaceInternal.InList">
            <summary>
            Is it present in the list.
            </summary>
        </member>
        <member name="T:devDept.Geometry.ConvexHull">
            <summary>
            Factory class for computing convex hulls.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a convex hull of the input data.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:devDept.Geometry.ConvexHull`2">
            <summary>
            Representation of a convex hull.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TFace"></typeparam>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.Create(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates the convex hull.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.#ctor">
            <summary>
            Can only be created using a factory method.
            </summary>
        </member>
        <member name="P:devDept.Geometry.ConvexHull`2.Points">
            <summary>
            Points of the convex hull.
            </summary>
        </member>
        <member name="P:devDept.Geometry.ConvexHull`2.Faces">
            <summary>
            Faces of the convex hull.
            </summary>
        </member>
        <member name="F:devDept.Geometry.ConvexHull`2.ConvexHullInternal.Center">
            <summary>
            The centroid of the currently computed hull.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.Initialize">
            <summary>
            Initialize buffers and lists.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.DetermineDimension">
            <summary>
            Check the dimensionality of the input data.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.InitiateFaceDatabase">
            <summary>
            Create the first faces from (dimension + 1) vertices.
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.CalculateFacePlane(devDept.Geometry.ConvexFaceInternal)">
            <summary>
            Calculates the normal and offset of the hyper-plane given by the face's vertices.
            </summary>
            <param name="face"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.TagAffectedFaces(devDept.Geometry.ConvexFaceInternal)">
            <summary>
            Tags all faces seen from the current vertex with 1.
            </summary>
            <param name="currentFace"></param>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.TraverseAffectedFaces(devDept.Geometry.ConvexFaceInternal)">
            <summary>
            Recursively traverse all the relevant faces.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.UpdateAdjacency(devDept.Geometry.ConvexFaceInternal,devDept.Geometry.ConvexFaceInternal)">
            <summary>
            Check if 2 faces are adjacent and if so, update their AdjacentFaces array.
            </summary>
            <param name="l"></param>
            <param name="r"></param>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.MakeDeferredFace(devDept.Geometry.ConvexFaceInternal,System.Int32,devDept.Geometry.ConvexFaceInternal,System.Int32,devDept.Geometry.ConvexFaceInternal)">
            <summary>
            Creates a new deferred face.
            </summary>
            <param name="face"></param>
            <param name="faceIndex"></param>
            <param name="pivot"></param>
            <param name="pivotIndex"></param>
            <param name="oldFace"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.ConnectFace(devDept.Geometry.FaceConnector)">
            <summary>
            Connect faces using a connector.
            </summary>
            <param name="connector"></param>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.CreateCone">
            <summary>
            Removes the faces "covered" by the current vertex and adds the newly created ones.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.CommitCone">
            <summary>
            Commits a cone and adds a vertex to the convex hull.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.IsBeyond(devDept.Geometry.ConvexFaceInternal,devDept.Geometry.VertexBuffer,devDept.Geometry.VertexWrap)">
            <summary>
            Check whether the vertex v is beyond the given face. If so, add it to beyondVertices.
            </summary>
            <param name="face"></param>
            <param name="beyondVertices"></param>
            <param name="v"></param>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.FindBeyondVertices(devDept.Geometry.ConvexFaceInternal)">
            <summary>
            Used in the "initialization" code.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.FindBeyondVertices(devDept.Geometry.ConvexFaceInternal,devDept.Geometry.VertexBuffer,devDept.Geometry.VertexBuffer)">
            <summary>
            Used by update faces.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.UpdateCenter">
            <summary>
            Recalculates the centroid of the current hull.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.RollbackCenter">
            <summary>
            Removes the last vertex from the center.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.InitConvexHull">
            <summary>
            Find the (dimension+1) initial points and create the simplexes.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.FindInitialPoints(System.Collections.Generic.List{devDept.Geometry.VertexWrap})">
            <summary>
            Finds (dimension + 1) initial points.
            </summary>
            <param name="extremes"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.GetSquaredDistanceSum(devDept.Geometry.VertexWrap,System.Collections.Generic.List{devDept.Geometry.VertexWrap})">
            <summary>
            Computes the sum of square distances to the initial points.
            </summary>
            <param name="pivot"></param>
            <param name="initialPoints"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.FindExtremes">
            <summary>
            Finds the extremes in all dimensions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.ThrowSingular">
            <summary>
            The exception thrown if singular input data detected.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.HandleSingular">
            <summary>
            Handles singular vertex.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.FindConvexHull">
            <summary>
            Fins the convex hull.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.#ctor(System.Collections.Generic.IEnumerable{devDept.Geometry.IVertex})">
            <summary>
            Wraps the vertices and determines the dimension if it's unknown.
            </summary>
            <param name="vertices"></param>
            <param name="dim"></param>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.GetConvexHullInternal``1(System.Boolean)">
            <summary>
            Finds the vertices on the convex hull and optionally converts them to the TVertex array.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <param name="onlyCompute"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.GetConvexFacesInternal``2">
            <summary>
            Finds the convex hull and creates the TFace objects.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TFace"></typeparam>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.ConvexHull`2.ConvexHullInternal.GetConvexHullAndFaces``2(System.Collections.Generic.IEnumerable{devDept.Geometry.IVertex})">
            <summary>
            This is called by the "ConvexHull" class.
            </summary>
            <typeparam name="TVertex"></typeparam>
            <typeparam name="TFace"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:devDept.Geometry.MathHelper">
            <summary>
            A helper class mostly for normal computation. If convex hulls are computed
            in higher dimensions, it might be a good idea to add a specific
            FindNormalVectorND function.
            </summary>
        </member>
        <member name="M:devDept.Geometry.MathHelper.GaussElimination(System.Int32,System.Double[][],System.Double[],System.Double[])">
            <summary>
            does gaussian elimination.
            </summary>
            <param name="nDim"></param>
            <param name="pfMatr"></param>
            <param name="pfVect"></param>
            <param name="pfSolution"></param>
        </member>
        <member name="M:devDept.Geometry.MathHelper.LengthSquared(System.Double[])">
            <summary>
            Squared length of the vector.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.MathHelper.SubtractFast(System.Double[],System.Double[],System.Double[])">
            <summary>
            Subtracts vectors x and y and stores the result to target.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="target"></param>
        </member>
        <member name="M:devDept.Geometry.MathHelper.FindNormalVector4D(devDept.Geometry.VertexWrap[],System.Double[])">
            <summary>
            Finds 4D normal vector.
            </summary>
            <param name="vertices"></param>
            <param name="normal"></param>
        </member>
        <member name="M:devDept.Geometry.MathHelper.FindNormalVector3D(devDept.Geometry.VertexWrap[],System.Double[])">
            <summary>
            Finds 3D normal vector.
            </summary>
            <param name="vertices"></param>
            <param name="normal"></param>
        </member>
        <member name="M:devDept.Geometry.MathHelper.FindNormalVector2D(devDept.Geometry.VertexWrap[],System.Double[])">
            <summary>
            Finds 2D normal vector.
            </summary>
            <param name="vertices"></param>
            <param name="normal"></param>
        </member>
        <member name="M:devDept.Geometry.MathHelper.FindNormalVector(devDept.Geometry.VertexWrap[],System.Double[])">
            <summary>
            Finds normal vector of a hyper-plane given by vertices.
            Stores the results to normalData.
            </summary>
            <param name="vertices"></param>
            <param name="normalData"></param>
        </member>
        <member name="M:devDept.Geometry.MathHelper.GetVertexDistance(devDept.Geometry.VertexWrap,devDept.Geometry.ConvexFaceInternal)">
            <summary>
            Check if the vertex is "visible" from the face.
            The vertex is "over face" if the return value is > Constants.PlaneDistanceTolerance.
            </summary>
            <param name="v"></param>
            <param name="f"></param>
            <returns>The vertex is "over face" if the result is positive.</returns>
        </member>
        <member name="T:devDept.Geometry.ObjectManager">
            <summary>
            A helper class for object allocation/storage. 
            This helps the GC a lot as it prevents the creation of about 75% of 
            new face objects (in the case of ConvexFaceInternal). In the case of
            FaceConnectors and DefferedFaces, the difference is even higher (in most
            cases O(1) vs O(number of created faces)). 
            </summary>
        </member>
        <member name="T:devDept.Geometry.UtilityEx">
            <summary>
            Contains a collection of utility methods and constants.
            </summary>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.SmartAdd(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            Returns a CompositeCurve if the number of curves is bigger than one.
            </summary>
            <param name="curveList">The list of curves</param>
            <returns>The curve itself or a CompositeCurve if the curve number is bigger than one.</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.Unlock(System.String)">
            <summary>
            Validates the license in Console applications (without user interface).
            </summary>
            <param name="serialNumber">A valid serial number</param>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.IsOrientedClockwise(devDept.Geometry.Plane,devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Detects polygon orientation (the points are always projected on XY plane).
            </summary>
            <param name="plane">The curve plane</param>
            <param name="curve">The curve to analyze</param>
            <returns>True if the polygon orientation is clockwise.</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.GetCpuCount(System.Int32,System.Int32[]@,System.Int32[]@)">
            <summary>
            Gets the number of logical processors.
            </summary>
            <param name="len">Total number of the items to process</param>
            <param name="startIndex">Array of start indices</param>
            <param name="endIndex">Array of end indices</param>
            <returns>The number of logical processors</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.GetSubstrings(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Gets substring between starting and ending chars.
            </summary>
            <param name="input">The input string.</param>
            <param name="start">The string that identifies the beginning.</param>
            <param name="end">The string that identifies the end.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> for the string comparison.</param>
            <returns>The string between the start and the end.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:devDept.Geometry.UtilityEx.ReplaceString(System.String,System.String,System.String,System.StringComparison)" -->
        <member name="M:devDept.Geometry.UtilityEx.IsOrientedClockwise(devDept.Geometry.Transformation,devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Checks if the closed curve orientation is clockwise.
            </summary>
            <param name="t">The transformation needed to project all points on the curve plane.</param>
            <param name="curve">The curve to analyze</param>
            <returns>True if the curve is oriented clockwise, false otherwise.</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.AllVerticesInScreenPolygon(devDept.Eyeshot.ScreenPolygonParams,System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32)">
            <summary>
            Tells if a collection of vertices is fully contained inside a polygon defined in screen coordinates. 
            </summary>
            <param name="data">The screen polygon params</param>
            <param name="vertices">The collection of vertices</param>
            <param name="count">The number of vertices to consider</param>
            <returns>True if all the vertices are contained in the screen polygon.</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.VertexInScreenPolygon(devDept.Geometry.Point3D,System.Collections.Generic.IList{devDept.Geometry.Point2D},devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double[],System.Int32[])">
            <summary>
            Checks whether a 3D vertex is inside the given screen polygon.
            </summary>
            <param name="pt">The 3D vertex</param>
            <param name="screenPolygon">The 2D screen polygon</param>
            <param name="min">The minimum value of the 2D polygon</param>
            <param name="max">The maximum value of the 2D polygon</param>
            <param name="modelViewProj">The modelview projection matrix</param>
            <param name="viewFrame">The viewport bounds</param>
            <returns>True if the vertex is inside the polygon.</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.SortAndOrient(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            Chains curves using the minimum distance between individual curve ends.
            </summary>
            <param name="curveList">The list of curves</param>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.SortAndOrient(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double)">
            <summary>
            Chains curves using the minimum distance between individual curve ends keeping the first curve first.
            </summary>
            <param name="curveList">The list of curves</param>
            <param name="closureTol">The max distance between the contour start and end points to assume the curve as closed.</param>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.GetSortedCurves(System.Int32,System.Collections.Generic.List{devDept.Eyeshot.Entities.ICurve},System.Boolean)">
            <summary>
            Returns a list of curves starting from the first one and connecting one by one the closer curve on the left or right.
            </summary>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.CheckContourOrderAndOrientation(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            Checks if every curve after current one is properly oriented.
            </summary>
            <param name="contour">The list of curves</param>
            <returns>True if the curve list is sorted and oriented properly</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.SortAndOrient(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Solid3D.OrientedEdge},devDept.Geometry.Point3D[],devDept.Eyeshot.Entities.Solid3D.Edge[])">
            <summary>
            Chains curves using the minimum distance between individual curve ends.
            </summary>
            <param name="curveList">The list of curves</param>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.FixLoopEdgeOrderAndOrientation(devDept.Eyeshot.Entities.Solid3D)">
            <summary>
            Loops over every face's loop and check edge order and orientation. If inconsistent we rebuild it correctly.
            </summary>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.GetConnectedCurves(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double)">
            <summary>
            Groups the curves that are connected into CompositeCurves. 
            </summary>
            <param name="unsorted">The list of curves</param>
            <param name="gap">The distance necessary to consider two curves disconnected</param>
            <remarks>Two curves are considered connected if the distance between their endpoints is smaller than gap.</remarks>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.FindClosestCurve(devDept.Geometry.Point3D,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Boolean,System.Double@,System.Boolean@)">
            <summary>
            Finds the closest curve to the specified previous curve 3D end point.
            </summary>
            <param name="endPoint">The previous curve 3D end point</param>
            <param name="curveList">The available curve list</param>
            <param name="isPrevStart">True if the end point is the previous curve start point, false if it is the previous curve end point.</param>
            <param name="minGapSqr">Minimum - squared - gap between curves</param>
            <param name="needReverse">True if the closest curve needs reversal</param>
            <returns>The index of the position of the closest curve in the curve list.</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.GetOuterIndex(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double)">
            <summary>
            Returns the outer contour index.
            </summary>
            <param name="loops">The list of 2D contours</param>
            <param name="tolerance">The tolerance used to tessellate contours</param>
            <returns>The outer loop index</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.InsideOrCrossingFrustumQuad(devDept.Eyeshot.FrustumParams,System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Checks whether the quad are inside or crossing the frustum defined by the given planes.
            </summary>
            <param name="myParams">The frustum parameters</param>
            <param name="vertices">Vertices list</param>
            <returns>True if the quad is inside or crossing the frustum.</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.InsideOrCrossingFrustum(devDept.Eyeshot.FrustumParams,System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.IndexTriangle})">
            <summary>
            Checks whether the triangles are inside or crossing the frustum defined by the given planes.
            </summary>
            <param name="myParams">The frustum parameters</param>
            <param name="vertices">Vertices list</param>
            <param name="triangles">Triangles list</param>
            <returns>True if the triangles are inside or crossing the frustum.</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.InsideOrCrossingScreenPolygonQuad(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Eyeshot.ScreenPolygonParams)">
            <summary>
            Checks whether the quad is inside or crossing the given screen polygon.
            </summary>
            <param name="pt1">The first vertex</param>
            <param name="pt2">The second vertex</param>
            <param name="pt3">The third vertex </param>
            <param name="pt4">The fourth vertex </param>
            <param name="myParams">The screen polygon parameters</param>
            <returns>True if the quad is inside or is crossing the screen polygon.</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.InsideOrCrossingScreenPolygon(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Eyeshot.ScreenPolygonParams)">
            <summary>
            Checks whether the triangle is inside or crossing the given screen polygon.
            </summary>
            <param name="pt1">The first  triangle vertex</param>
            <param name="pt2">The second triangle vertex</param>
            <param name="pt3">The third triangle vertex </param>
            <param name="myParams">Screen polygon parameters</param>
            <returns>True if the triangle is inside or is crossing the screen polygon.</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.GetNearFar(devDept.Eyeshot.Camera,devDept.Geometry.Point3D[],System.Double@,System.Double@)">
            <summary>
            Return the near and far values to fit the given 3D points.
            </summary>
            <param name="camera"></param>
            <param name="pts"></param>
            <param name="minNear"></param>
            <param name="maxFar"></param>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.CopyProperties(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity)">
            <summary>
            Copies a number of properties from source entity to destination entity. The copied properties are: <see cref="P:devDept.Eyeshot.Entities.Entity.Color"/>, <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod"/>, <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeight"/>, <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypePattern"/>, <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod"/>, <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeight"/>, <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeightMethod"/> and <see cref="P:devDept.Eyeshot.Entities.Entity.LayerIndex"/>.
            </summary>
            <param name="dest">The destination entity</param>
            <param name="source">The source entity</param>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.CheckPattern(System.Single[],System.Boolean,System.Single@)">
            <summary>
            Checks if the pattern has: more than one value, alternate sign for penDown/penUp or values are not all zero.
            </summary>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.NeedToFlipTrianglesForRotation(System.Collections.Generic.IList{devDept.Geometry.IndexTriangle},System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Boolean)">
            <summary>
            Tells if a face triangles must be inverted, considering a rotation of a positive angle.
            </summary>
            <param name="triangles"></param>
            <param name="vertices"></param>
            <param name="nVertices"></param>
            <param name="axis"></param>
            <param name="rotationCenter"></param>
            <param name="isPoint3D"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.ColorsModulatedByIntensity(System.Single[],System.Byte[])">
            <summary>
            Tells if the Colors are modulated by intensity. Usefull for FastPointCloud and BallPivoting
            </summary>
            <param name="pointArray">array of points</param>
            <param name="rgbArray">array of rgb colors or intesity of colors</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.ConvexHull2D(System.Collections.Generic.IList{devDept.Geometry.Point2D})">
            <summary>
            Computes the Convex Hull of a set of 2D points.
            </summary>
            <param name="points">The 2D point list</param>
            <returns>The resulting LinearPath object.</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.ConvexHull2D(System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Boolean)">
            <summary>
            Computes the Convex Hull of a set of 2D points.
            </summary>
            <param name="points">The 2D point list</param>
            <param name="sorted">When true, the resulting array of points is sorted.</param>
            <returns>The resulting array of 2D points.</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.IsLine(devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Checks if the curve is a line or a linear nurbs segment (Nurbs and Ultimate editions only).
            </summary>
            <param name="itfCurve">The curve to be checked</param>
            <returns>True if the curve is a <see cref="T:devDept.Eyeshot.Entities.Line"/> or a Nurbs curve with two control points and degree one</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.GetPointsToModelUnitsFactor(System.Drawing.GraphicsUnit,devDept.Geometry.linearUnitsType)">
            <summary>
            Gets the conversion factor from graphics units to model units.
            </summary>
            <param name="pageUnits">Measure unit of the page to print</param>
            <param name="modelUnits">Units of the model</param>
            <returns>The conversion factor</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.GetUnitsToMmFactor(devDept.Geometry.linearUnitsType)">
            <summary>
            Gets the factor to convert from units to mm.
            </summary>
            <param name="units">The model units</param>
            <returns>The conversion factor.</returns>
        </member>
        <member name="M:devDept.Geometry.UtilityEx.GetPointsToMMFactor(System.Drawing.GraphicsUnit)">
            <summary>
            Gets the conversion factor from graphics units to mm.
            </summary>
            <param name="unit">Measure unit of the page to print</param>
            <returns>The conversion factor</returns>
        </member>
        <member name="T:devDept.Geometry.lineWeightPrintingUnitsType">
            <summary>
            Line weight unit system type used for printing.
            </summary>
            <seealso cref="T:devDept.Eyeshot.HiddenLinesViewOnPaper"/>
            <seealso cref="T:devDept.Eyeshot.HiddenLinesViewOnPaperPreview"/>
            <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeight"/>
        </member>
        <member name="F:devDept.Geometry.lineWeightPrintingUnitsType.Inches">
            <summary>
            The line weight is treated as inches
            </summary>
        </member>
        <member name="F:devDept.Geometry.lineWeightPrintingUnitsType.Millimeters">
            <summary>
            The line weight is treated as millimeters
            </summary>
        </member>
        <member name="F:devDept.Geometry.lineWeightPrintingUnitsType.Pixels">
            <summary>
            The line weight is treated as pixels
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.DrawParams">
            <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.Draw(devDept.Eyeshot.DrawParams)"/> and other draw methods.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.DrawParams.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.DrawParams.#ctor(devDept.Eyeshot.ViewportLayout,devDept.Eyeshot.Viewport)">
            <summary>
            Constructor.
            </summary>
            <param name="viewportLayout">The viewportLayout</param>
            <param name="viewport">The viewport</param>
        </member>
        <member name="M:devDept.Eyeshot.DrawParams.#ctor(devDept.Eyeshot.ViewportLayout,System.Single,System.Single[],System.Single,System.Int32,devDept.Geometry.Transformation,devDept.Eyeshot.FontDataDictionary,devDept.Eyeshot.TextStyleDictionary)">
            <summary>
            Standard constructor.
            </summary>
            <param name="viewportLayout">The viewportLayout</param>
            <param name="screenToWorld">The screen to world conversion factor</param>
            <param name="patternLength"></param>
            <param name="maxPatternRepetitions">Maximum number of pattern repetitions allowed between two vertices of a curve.</param>
            <param name="transformation">The transformation</param>
            <param name="fontDefs">The fonts dictionary</param>
            <param name="textStyles">The text styles</param>
        </member>
        <member name="P:devDept.Eyeshot.DrawParams.Viewport">
            <summary>
            Gets or sets the Viewport.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawParams.parent">
            <summary>
            The parent entity. If not null, the entity being drawn is inside a BlockReference.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:devDept.Eyeshot.DrawParams.ScreenToWorld" -->
        <member name="P:devDept.Eyeshot.DrawParams.FontDefs">
            <summary>
            Gets or sets the fonts definitions.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawParams.TextStyles">
            <summary>
            Gets or sets the text style dictionary.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawParams.Transformation">
            <summary>
            Gets or sets the transformation applied to the object.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawParams.ShaderParams">
            <summary>
            Gets or sets the shader parameters.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawParams.Blocks">
            <summary>
            The Blocks dictionary.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawParams.ForceGray">
            <summary>
            If true, the entity is drawn with a grayed color.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawParams.Selected">
            <summary>
            The selected status.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.RenderParams">
            <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.Render(devDept.Eyeshot.RenderParams)"/>.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.RenderParams.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.RenderParams.#ctor(devDept.Eyeshot.ViewportLayout,devDept.Eyeshot.Viewport)">
            <summary>
            Constructor.
            </summary>
            <param name="viewportLayout">The viewportLayout</param>
        </member>
        <member name="F:devDept.Eyeshot.RenderParams.hqrData">
            <summary>
            Gets or sets the 
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.RenderParams.materials">
            <summary>
            Gets or sets the materials dictionary.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.DrawSilhouettesParams">
            <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.DrawSilhouettes(devDept.Eyeshot.DrawSilhouettesParams)"/>.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.DrawSilhouettesParams.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.DrawSilhouettesParams.#ctor(devDept.Eyeshot.ViewportLayout,devDept.Graphics.projectionType,System.Double[],System.Int32[],System.Single,devDept.Eyeshot.FontDataDictionary,devDept.Eyeshot.TextStyleDictionary,devDept.Geometry.Transformation,System.Collections.Generic.Dictionary{System.String,devDept.Eyeshot.Block})">
            <summary>
            Standard constructor.
            </summary>
            <param name="viewportLayout">The viewportLayout</param>
            <param name="projectionMode">The camera projection mode</param>
            <param name="modelViewProj">The modelViewProjection matrix</param>
            <param name="viewFrame">The viewport bounds</param>
            <param name="screenToWorld">The screen to world conversion factor</param>
            <param name="fontDefs">The fonts definitions</param>
            <param name="transformation"></param>
            <param name="blocks"></param>
        </member>
        <member name="P:devDept.Eyeshot.DrawSilhouettesParams.ProjectionMode">
            <summary>
            Gets or sets the camera projection mode.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawSilhouettesParams.ModelViewProj">
            <summary>
            Gets or sets the modelViewProjection matrix.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawSilhouettesParams.ViewFrame">
            <summary>
            Gets or sets the viewport bounds.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawSilhouettesParams.Blocks">
            <summary>
            Gets or sets the Blocks dictionary,
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.DrawDirectionParams">
            <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.DrawDirection(devDept.Eyeshot.DrawDirectionParams)"/>.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawDirectionParams.Camera">
            <summary>
            Gets or sets the Camera.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawDirectionParams.Height">
            <summary>
            Gets or sets the height of the ViewportLayout control.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawDirectionParams.ViewFrame">
            <summary>
            Gets or sets the viewport bounds.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawDirectionParams.ViewNormal">
            <summary>
            Gets or sets the view normal.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawDirectionParams.ArrowPoints">
            <summary>
            Gets or sets the points or the arrow.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.CompileParams">
            <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.Compile(devDept.Eyeshot.CompileParams)"/>.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.CompileParams.#ctor(devDept.Graphics.RenderContextBase,System.Int32)">
            <summary>
            RenderContextBase constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.CompileParams.#ctor(devDept.Graphics.RenderContextBase,System.Int32,devDept.Eyeshot.Legend)">
            <summary>
            Legend constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.CompileParams.#ctor(devDept.Eyeshot.ViewportLayout)">
            <summary>
            Standard constructor.
            </summary>
            <param name="viewportLayout"></param>
        </member>
        <member name="M:devDept.Eyeshot.CompileParams.#ctor(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.ViewportLayout)">
            <summary>
            Constructor.
            </summary>
            <param name="entity">The entity</param>
            <param name="viewportLayout">The ViewportLayout</param>
        </member>
        <member name="M:devDept.Eyeshot.CompileParams.UpdatePattern(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.ViewportLayout)">
            <summary>
            Updates the current pattern with the pattern of the entity.
            </summary>
            <param name="entity">The entity</param>
            <param name="viewportLayout">The ViewportLayout</param>
        </member>
        <member name="P:devDept.Eyeshot.CompileParams.Legend">
            <summary>
            Gets or sets the Legend object.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.CompileParams.Layers">
            <summary>
            Gets or sets the layers list.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.CompileParams.Blocks">
            <summary>
            Gets or sets the blocks dictionary.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.DrawOnScreenWireframeParams">
            <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.DrawOnScreenWireframe(devDept.Eyeshot.DrawOnScreenWireframeParams)"/>.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.DrawOnScreenWireframeParams.#ctor(devDept.Eyeshot.Camera,System.Int32[],devDept.Graphics.TextureMosaic)">
            <summary>
            Constructor.
            </summary>
            <param name="camera">The camera</param>
            <param name="viewFrame">The viewport bounds</param>
            <param name="digitsTexture">The <see cref="T:devDept.Graphics.TextureMosaic"/> used to draw the vertices numbers</param>        
        </member>
        <member name="P:devDept.Eyeshot.DrawOnScreenWireframeParams.Camera">
            <summary>
            Gets of set the Camera.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawOnScreenWireframeParams.ViewFrame">
            <summary>
            Gets or sets the viewport bounds.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawOnScreenWireframeParams.DigitsTexture">
            <summary>
            Gets or sets the texture used to draw the vertices numbers.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawOnScreenWireframeParams.RenderContext">
            <summary>
            Gets or sets the render context.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawOnScreenWireframeParams.ModelViewProj">
            <summary>
            Gets the ModelView projection matrix.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.DrawOnScreenParams">
            <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.DrawOnScreen(devDept.Eyeshot.DrawOnScreenParams)"/>.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.DrawOnScreenParams.#ctor(devDept.Graphics.RenderContextBase,devDept.Eyeshot.Camera,System.Int16[],System.Int32,System.Int32[],devDept.Graphics.TextureMosaic,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="renderContext">The render context</param>
            <param name="camera">The viewport camera</param>
            <param name="depthValues">The depth values of the scene</param>
            <param name="stride">The stride of each row of depth values</param>
            <param name="viewFrame">The viewport bounds</param>
            <param name="digitsTexture">The <see cref="T:devDept.Graphics.TextureMosaic"/> used to draw the vertices numbers</param>
            <param name="leftBorder">The viewport left border minus the vertex size</param>
            <param name="rightBorder">The viewport right border minus the vertex size</param>
            <param name="bottomBorder">The viewport bottom border minus the vertex size</param>
            <param name="topBorder">The viewport top border minus the vertex size</param>
        </member>
        <member name="P:devDept.Eyeshot.DrawOnScreenParams.DepthValues">
            <summary>
            Gets or sets the depth values of the scene.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawOnScreenParams.Stride">
            <summary>
            Gets or sets the stride of each row of depth values.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawOnScreenParams.LeftBorder">
            <summary>
            Gets or sets the viewport left border minus the vertex size.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawOnScreenParams.RightBorder">
            <summary>
            Gets or sets the viewport right border minus the vertex size.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawOnScreenParams.BottomBorder">
            <summary>
            Gets or sets the viewport bottom border minus the vertex size.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DrawOnScreenParams.TopBorder">
            <summary>
            Gets or sets the viewport top border minus the vertex size.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.RegenParams">
            <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.Regen(devDept.Eyeshot.RegenParams)"/>.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.TraversalParams">
            <summary>
            Base class that holds the data for many Entity methods.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.TraversalParams.#ctor(devDept.Geometry.Transformation,devDept.Eyeshot.ViewportLayout)">
            <summary>
            Standard constructor.
            </summary>
            <param name="transform">The initial transformation to apply to the vertices</param>
            <param name="viewportLayout">The viewportLayout</param>
        </member>
        <member name="M:devDept.Eyeshot.TraversalParams.#ctor(devDept.Eyeshot.displayType,System.Single,devDept.Geometry.Transformation,devDept.Eyeshot.ViewportLayout)">
            <summary>
            Standard Constructor.
            </summary>
            <param name="displayMode">The display mode</param>
            <param name="screenToWorld">The screen to world conversion factor</param>
            <param name="transform">The initial transformation to apply to the vertices</param>
            <param name="layers">The layers list</param>
            <param name="blocks">The blocks dictionary</param>
        </member>
        <member name="F:devDept.Eyeshot.TraversalParams.transformations">
            <summary>
            The stack of transformations to apply to the vertices.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.TraversalParams.PushTransformation(devDept.Eyeshot.Entities.BlockReference)">
            <summary>
            Mutiplies the transformation of the blockReference by the current transformation and pushes the resulting transformation on the stack.
            </summary>
            <param name="blockReference">The BlockReference</param>
        </member>
        <member name="M:devDept.Eyeshot.TraversalParams.PopTransformation">
            <summary>
            Pops the last transformation from the stack.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.TraversalParams.DisplayMode">
            <summary>
            Gets or sets the display mode.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.TraversalParams.ScreenToWorld">
            <summary>
            Gets or sets the screen to world conversion factor.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.TraversalParams.Transformation">
            <summary>
            Gets the transformation to apply to the vertices.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.TraversalParams.ViewportLayout">
            <summary>
            Gets or sets the ViewportLayout object.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.RegenParams.#ctor(devDept.Eyeshot.EntityList)">
            <summary>
            Constructor.
            </summary>
            <param name="entities">The entity collection</param>
        </member>
        <member name="M:devDept.Eyeshot.RegenParams.#ctor(System.Double,devDept.Eyeshot.ViewportLayout)">
            <summary>
            Constructor.
            </summary>
            <param name="chordalErr">The chordal error</param>
            <param name="viewportLayout">The viewportLayout</param>
        </member>
        <member name="P:devDept.Eyeshot.RegenParams.Parallel">
            <summary>
            Gets or sets the parallel state of the regen.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.RegenParams.ChordalErr">
            <summary>
            Gets or sets the chordal error.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.RegenParams.renderContext">
            <summary>
             Gets or sets the render context.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.RegenParams.FontDefs">
            <summary>
            Gets or sets the text style dictionary.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.RegenParams.TextStyles">
            <summary>
            Gets or sets the text style dictionary.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.RegenParams.AttributeValue">
            <summary>
            Gets or sets the Attribute Value.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.RegenParams.Parents">
            <summary>
            Gets the BlockReference parents stack.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.FrustumParams">
            <summary>
            Data for Entity methods doing operations based on the camera frustum.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.FrustumParams.#ctor(devDept.Geometry.PlaneEquation[],devDept.Geometry.Segment3D[],devDept.Eyeshot.displayType,System.Single,System.Single[],devDept.Geometry.Transformation,devDept.Eyeshot.ViewportLayout)">
            <summary>
            Standard constructor.
            </summary>
            <param name="frustum">The six frustum planes</param>
            <param name="selectionEdges">The four edges surrounding the selection area</param>
            <param name="displayMode">The display mode</param>
            <param name="screenToWorld">The screen to world conversion factor</param>
            <param name="pattern">The line pattern</param>
            <param name="transform">The initial transformation to apply to the vertices</param>
            <param name="viewportLayout">The viewport layout</param>
        </member>
        <member name="P:devDept.Eyeshot.FrustumParams.SelectionEdges">
            <summary>
            Gets or sets the four edges surrounding the selection area.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.FrustumParams.Frustum">
            <summary>
            Gets or sets the six planes surrounding the selection area.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.FrustumParams.Pattern">
            <summary>
            Gets or sets the line pattern.
            </summary>        
        </member>
        <member name="T:devDept.Eyeshot.ScreenPolygonParams">
            <summary>
            Data for Entity methods doing operations based on a screen polygon.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ScreenPolygonParams.#ctor(System.Int32[],System.Double[],System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{devDept.Geometry.Segment2D},devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Transformation,devDept.Eyeshot.displayType,System.Single,devDept.Eyeshot.ViewportLayout)">
            <summary>
            Standard constructor.
            </summary>
            <param name="viewFrame">Tee viewport bounds</param>
            <param name="modelViewProj">The modelview projection matrix</param>
            <param name="screenPolygon">The 2D points defining the screen polygon</param>
            <param name="screenSegments">The segments defining the polygon in screen coordinates</param>
            <param name="min">The minimum value of the polygon points</param>
            <param name="max">The maximum value of the polygon points</param>
            <param name="transform">The initial transformation to apply to the verices</param>
            <param name="displayMode">The display mode</param>
            <param name="screenToWorld">The screen to world conversion factor</param>
            <param name="layers">The layers list</param>
            <param name="blocks">The blocks dictionary</param>
        </member>
        <member name="P:devDept.Eyeshot.ScreenPolygonParams.ViewportSize">
            <summary>
            Gets or sets the size of the viewport.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ScreenPolygonParams.ScreenPolygon">
            <summary>
            Gets or sets the 2D points defining the screen polygon (0 on bottom).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ScreenPolygonParams.ScreenSegments">
            <summary>
            Gets or sets the segments defining the polygon in screen coordinates.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ScreenPolygonParams.Min">
            <summary>
            Gets or sets the minimum value of the polygon points.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ScreenPolygonParams.Max">
            <summary>
            Gets or sets the maximum value of the polygon points.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ScreenPolygonParams.ViewFrame">
            <summary>
            Gets or sets the viewport bounds.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ScreenPolygonParams.ModelViewProj">
            <summary>
            Gets or sets the the modelView projection matrix.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.OffsetOnCameraAxesParams">
            <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.ComputeOffsetOnCameraAxes(devDept.Eyeshot.OffsetOnCameraAxesParams)"/>.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.OffsetOnCameraAxesParams.m1">
            <summary>
            Gets or sets the angular coefficients of right and top frustum lines.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.OffsetOnCameraAxesParams.m2">
            <summary>
            Gets or sets the angular coefficients of left and bottom frustum lines.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.OffsetOnCameraAxesParams.MinQ">
            <summary>
            Gets or sets the minimum offset of the lines intersections on X and Y camera axes;
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.OffsetOnCameraAxesParams.MaxQ">
            <summary>
            Gets or sets the maximum offset of the lines intersections on X and Y camera axes.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.FindClosestVertexParams">
            <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.FindClosestVertex(devDept.Eyeshot.FindClosestVertexParams)"/>
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.IsSmallParams">
            <summary>
            Data for the <see cref="M:devDept.Eyeshot.Entities.Entity.IsSmall(devDept.Eyeshot.IsSmallParams)"/> method.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.IsSmallParams.ModelViewProj">
            <summary>
            Gets or sets the modelview projection matrix.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.IsSmallParams.ViewFrame">
            <summary>
            Gets or sets the viewport bounds.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.IsSmallParams.SmallSize">
            <summary>
            Gets or sets the <see cref="P:devDept.Eyeshot.ViewportLayout.SmallSize"/>.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.IsSmallParams.RenderContext">
            <summary>
            Gets or sets the render context.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.PreProcessSilhouettesParams">
            <summary>
            Data for the <see cref="M:devDept.Eyeshot.HiddenLinesView.PreProcessHDL``1(devDept.Graphics.GfxEnvironmentParams,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Geometry.PlaneEquation[],devDept.Eyeshot.LayerList,devDept.Eyeshot.MaterialDictionary,devDept.Eyeshot.PreProcessSilhouettesParams,devDept.Geometry.Transformation,System.Double,devDept.Eyeshot.ViewportLayout,System.Boolean,devDept.Eyeshot.ViewportLayout.GfxAttributesWire)"/> method.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.PreProcessSilhouettesParams.Blocks">
            <summary>
            The blocks dictionary.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.PreProcessSilhouettesParams.Parents">
            <summary>
            The parents.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.KnotVectorExtender">
            <summary>Knot vector definition.</summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.Left(System.Double[])">
            <summary>
            First value of this knot vector.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.Right(System.Double[])">
            <summary>
            Last value of this knot vector.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.Width(System.Double[])">
            <summary>
            Knot vector domain (lastValue - firstValue).
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.Offset(System.Double[],System.Double)">
            <summary>
            Adds the specifies delta to all the values of the array.
            </summary>
            <param name="delta">The offset amount</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.Scale(System.Double[],System.Double)">
            <summary>
            Scales all the values of the array of the specified scale factor.
            </summary>
            <param name="factor">Scale factor</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.Normalize(System.Double[])">
            <summary>
            Normalize the values in the array.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.IsClamped(System.Double[],System.Int32,System.Int32,System.Boolean@,System.Boolean@)">
            <summary>
            Checks if the knot vector is clamped.
            </summary>
            <param name="p">Degree</param>
            <param name="n">Number of control points</param>
            <param name="start">Outputs start clamped status</param>
            <param name="end">Outputs end clamped status</param>
            <remarks>If the first and last p+1 knots are almost equal, we make them equal to the first or last knot.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.IsClamped(System.Double[],System.Int32,System.Int32)">
            <summary>
            Checks if the knot vector is clamped.
            </summary>
            <param name="p">Degree</param>
            <param name="n">Number of control points</param>
            <returns>True if the know vector is clamped, false otherwise.</returns>
            <remarks>If the first and last p+1 knots are almost equal, we make them equal to the first or last knot.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.SpanCount(System.Double[],System.Int32,System.Int32)">
            <summary>
            Computes number of non-empty spans
            </summary>
            <param name="p">Degree</param>
            <param name="n">Number of control points</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.Multiplicity(System.Double[],System.Int32)">
            <summary>
            Computes the multiplicity of the spcified knot value.
            </summary>
            <param name="knotIndex">The knot index</param>
            <returns>The knot multiplicity</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.IsValid(System.Double[],System.Int32,System.Int32)">
            <summary>
            Checks knot vector for incorrect multiplicity and monotonicity. 
            The knot vector must have p+1 equal knots at the beginning and at the end. (Clamped curve)
            </summary>
            <param name="p">Degree</param>
            <param name="n">Number of control points</param>
            <returns>True if the knot vector is valid, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.IsValid(System.Double[],System.Int32)">
            <summary>
            Checks knot vector for incorrect multiplicity and monotonicity.
            The knot vector is considered valid even if it doesn't have p+1 equal knots at the beginning and at the end. (UNclamped curve)
            </summary>
            <param name="p">Degree</param>
            <returns>True if the knot vector is valid, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.FindSpan(System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Determines the knot span index.
            </summary>
            <returns>The knot span index.</returns>
            <param name="n">Number of control points</param>
            <param name="p">Degree</param>
            <param name="u">Parametric value</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.FindSpanMult(System.Double[],System.Double,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Given a double u in the inteval [u_k, u_k+1), finds the index k and the multiplicity s 
            </summary>
            <param name="u">The knot to observe</param>
            <param name="p">The degree</param>
            <param name="k">The knot index</param>
            <param name="s">The knot multiplicity</param>
            <remarks>The highest multiplicity detected is p+1.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.FindSpanMult(System.Double[],System.Double@,System.Int32,System.Double,System.Int32@,System.Int32@)">
            <summary>
            Given a double u in the inteval [u_k, u_k+1), finds the index k and the multiplicity s 
            </summary>
            <param name="u">The knot to observe</param>
            <param name="p">The degree</param>
            <param name="minKnotDist">Minumum Knot distance: if u is closer to a knot than minKnotdist, then u becomes equal to that knot</param>
            <param name="k">The knot index</param>
            <param name="s">The knot multiplicity</param>
            <remarks>The highest multiplicity detected is p+1.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.GetFirstSimilarKnotIndex(System.Double[],System.Int32,System.Double,System.Int32@,System.Int32@)">
            <summary>
            Gets the index of the first similar knot vector (within prescribed tolerance).
            </summary>
            <param name="p">Degree</param>
            <param name="minDist">The min acceptable dist between knots</param>
            <param name="index">The knot to be removed index</param>
            <param name="mult">The knot to be removed multiplicity</param>
            <returns>True if two similar know were found, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.MinAcceptableKnotDistance(System.Double[],System.Int32)">
            <summary>
            Computes the minimum acceptable knot distance.
            </summary>
            <param name="p">Degree</param>
            <returns>The minimum acceptable knot distance.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.Reverse(System.Double[])">
            <summary>
            Reverts the knot vector.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.Reverse(System.Double[],System.Double)">
            <summary>
            Reverts the knot vector.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.GetStyle(System.Double[],System.Int32,System.Int32)">
            <summary>
            Gets the knot vector style.
            </summary>
            <param name="p">Degree</param>
            <param name="n">Number of control points</param>
            <returns>The knot vector style.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.Split(System.Double[],System.Int32,System.Int32,System.Int32@,System.Double@)">
            <summary>
            Split a knot vector at the center, by adding multiplicity k knots near
            the middle of the parameter range. Tries to start with an existing knot,
            but will add a new knot value if there's nothing in "the middle" (e.g. a Bezier curve).
            </summary>
            <param name="m">Index of the last control point</param>
            <param name="k">The parent curve degree</param>
            <param name="splitPt">Index of the mid value</param>
            <param name="midVal">The domain range mid value</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.BasisFuns(System.Double[],System.Int32,System.Double,System.Int32)">
            <summary>
            Compute the non vanishing basis functions.
            </summary>
            <returns>The non-zero basis functions.</returns>
            <param name="i">The non-zero span of the basis functions</param>
            <param name="u">The parametric value</param>
            <param name="p">The degree</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.OneBasisFun(System.Double[],System.Int32,System.Double,System.Int32)">
            <summary>
            Computes the basis function Nip.
            </summary>
            <param name="i">The non-zero span of the basis functions</param>
            <param name="u">The parametric value</param>
            <param name="p">The degree</param>
            <returns>The Nip basis funtion</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.KnotVectorExtender.DersBasisFuns(System.Double[],System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Compute nonzero basis functions and their derivatives
            </summary>
            <remarks>i, u, and n must be valid values</remarks>
            <returns>The derivatives, ders[k,j] is the kth derivative of the function Ni-p+j,p</returns>
            <param name="i">The span for the basis functions</param>
            <param name="u">The parametric value</param>
            <param name="p">The degree</param>
            <param name="n">The degree of the derivation</param>
        </member>
        <member name="T:devDept.Eyeshot.Entities.knotVectorType">
            <summary>
            Knot vector style type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.knotVectorType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.knotVectorType.ClampedUniform">
            <summary> 
            Examples: {0,0,0,0, 1,2,3, 4,4,4,4}, {-0.5,-0.5,-0.5, 1,2.5, 4,4,4}
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.knotVectorType.ClampedNonUniform">
            <summary>
            Examples: {0,0,0, 2,3,6, 7,7,7}, {0,0,0,0, 1,2,2,3,4, 5,5,5,5}
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.knotVectorType.UnClampedUniform">
            <summary>
            Examples: {-3,-2,-1,0,1,2,3,4}, {0,1,2,3,4,5,6,7,8,9,10,11}
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.knotVectorType.UnClampedNonUniform">
            <summary>
            Examples: {0,0,1,2,3,4}, {-2,-1,0,4,5,6,7}
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.knotVectorType.PiecewiseBezier">
            <summary>
            Another common knot vector format is for piecewise Bézier curves. 
            These are usually used when a bunch of simple primitives, such as 
            arcs, lines or simple curve segments are strung together into a single 
            large curve. Again, if k is the order, then the curve passes through 
            each k’th point on the curve, and passes near all of the others. In 
            other words, the curve is broken into segments of k points each. 
            Moving any control point within a particular segment affects only 
            that segment, and moving a point where two segments join affects 
            both. If the joint and the control points on either side of it are in a 
            straight line, then the two segments form a smooth continuous 
            curve.3 Otherwise a sharp “kink” or discontinuity occurs.
            Example: {0,0,0, 1,1, 2,2, 3,3,3}
            </summary>
        </member>
        <member name="T:StepTranslator.FaceBrep">
            <summary>
            </summary>
        </member>
        <member name="T:StepTranslator.StepEntity">
            <summary>
            This class represents base class for all major entities from step format.
            It contains common data and related common methods.
            </summary>
        </member>
        <member name="M:StepTranslator.StepEntity.ExtractEntityData">
            <summary>
            This is a virtual method which must be implemented for each of the supported step data type.
            </summary>
        </member>
        <member name="T:StepTranslator.Face_Surface">
            <summary>
             
            </summary>
        </member>
        <member name="M:StepTranslator.Face_Surface.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual line data. 
            </summary>
        </member>
        <member name="T:StepTranslator.Mapped_Item">
            <summary>
            This class represents location of geometry in 3D space.
            </summary>
        </member>
        <member name="T:StepTranslator.Representation_Map">
            <summary>
            This class represents location of geometry in 3D space.
            </summary>
        </member>
        <member name="T:StepTranslator.StepFacetedBrepShapeRep">
            <summary>
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewCubeIcon">
            <summary>View Cube icon settings. This user interface element will never be added to images and printouts.</summary>
        </member>
        <member name="T:devDept.Eyeshot.UserInterfaceSymbolBase">
            <summary>
             Base class for <see cref="T:devDept.Eyeshot.CoordinateSystemIcon"/>, <see cref="T:devDept.Eyeshot.OriginSymbol"/> and <see cref="T:devDept.Eyeshot.ViewCubeIcon"/>.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.UserInterfaceBase">
            <summary>
            Base class for <see cref="T:devDept.Eyeshot.Legend"/> and <see cref="T:devDept.Eyeshot.Viewport"/>.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.DisposableBase">
            <summary>
            Base class providing IDisposable interface.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.IUserInterfaceElement">
            <summary>
            Interface used for Designer purposes.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.IUserInterfaceElement.GetThumbnail(devDept.Eyeshot.Viewport,System.Drawing.Size,System.Drawing.Color)">
            <summary>
            Gets a bitmap of the user interface element.
            </summary>
            <param name="viewport">The viewport it belongs to</param>
            <param name="size">The desired bitmap size</param>
            <param name="backgroundColor">The color desired for the background</param>
            <returns>The bitmap of the UI element.</returns>
        </member>
        <member name="M:devDept.Eyeshot.IUserInterfaceElement.GetBounds(devDept.Eyeshot.Viewport)">
            <summary>
            Gets the bounds rectangle in screen coordinates.
            </summary>
            <param name="viewport">The viewport</param>
            <returns>The bounds rectangle in screen coordinates (0 on top).</returns>
        </member>
        <member name="M:devDept.Eyeshot.IUserInterfaceElement.Update(devDept.Eyeshot.IUserInterfaceElement)">
            <summary>
            Updates the contents of the element with the data from another element.
            </summary>
            <param name="another">The other element whose contents are copied to this element</param>
        </member>
        <member name="P:devDept.Eyeshot.IUserInterfaceElement.Disposed">
            <summary>
            Gets a boolean indicating whether the element has been disposed.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.UserInterfaceBase.GetThumbnail(devDept.Eyeshot.Viewport,System.Drawing.Size,System.Drawing.Color)">
            <summary>
            Gets a thumbnail bitmap of the user interface element.
            </summary>
            <param name="viewport">The viewport it belongs to</param>
            <param name="size">The desired bitmap size</param>
            <param name="backgroundColor">The color desired for the background</param>
            <returns>The bitmap of the UI element.</returns>
            <remarks>Size is limited to 512 x 512</remarks>
        </member>
        <member name="M:devDept.Eyeshot.UserInterfaceBase.GetBounds(devDept.Eyeshot.Viewport)">
            <summary>
            Gets the bounds rectangle in screen coordinates.
            </summary>
            <param name="viewport">The viewport</param>
            <returns>The bounds rectangle in screen coordinates.</returns>
        </member>
        <member name="P:devDept.Eyeshot.UserInterfaceBase.CustomViewport">
            <summary>
            Tells if the UI element is drawn with a custom viewport.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.UserInterfaceBase.LocationAtOrigin">
            <summary>
            When doing a render to Bitmap of the item, must not change the viewport origin.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.UserInterfaceSymbolBase.GetModelViewMatrix(devDept.Eyeshot.Camera,System.Double)">
            <summary>
            Gets the modelview matrix to draw the user interface symbol.
            </summary>
            <param name="camera">The camera of the viewport</param>
            <param name="dist">The desired distance of the camera from the target</param>
            <returns></returns>
        </member>
        <member name="P:devDept.Eyeshot.UserInterfaceSymbolBase.Size">
            <summary>
            Gets or sets the size in pixels.
            </summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>     
        </member>
        <member name="P:devDept.Eyeshot.UserInterfaceSymbolBase.Visible">
            <summary>Visibility status.</summary>
        </member>
        <member name="P:devDept.Eyeshot.UserInterfaceSymbolBase.Transformation">
            <summary>
            Gets or sets the transformation
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.UserInterfaceSymbolBase.InitialTransformation">
            <summary>
            Gets or sets the initial transformation.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.UserInterfaceSymbolBase.FullTransformation">
            <summary>
            Gets the accumulated transformation given by the <see cref="P:devDept.Eyeshot.UserInterfaceSymbolBase.InitialTransformation"/> multiplied the <see cref="P:devDept.Eyeshot.UserInterfaceSymbolBase.Transformation"/>.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor">
            <summary>Empty constructor.</summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Int32)">
            <summary>Deprecated constructor.</summary>
            <param name="position">Position</param>
            <param name="visible">Visibility status</param>
            <param name="highlightColor">Color of highlight</param>
            <param name="animateCamera">If true, animates the camera when changing the orientation</param>
            <param name="animateCameraDuration">The duration in milliseconds of the camera animations</param>
            <param name="frontString">String of the front face</param>
            <param name="backString">String of the back face</param>
            <param name="leftString">String of the left face</param>
            <param name="rightString">String of the right face</param>
            <param name="topString">String of the top face</param>
            <param name="bottomString">String of the bottom face</param>
            <param name="frontRingLabel">Front orientation ring label</param>
            <param name="backRingLabel">Back orientation ring label</param>
            <param name="leftRingLabel">Left orientation ring label</param>
            <param name="rightRingLabel">Right orientation ring label</param>
            <param name="showRing">If true, shows the ring under the view cube</param>
            <param name="font">The font used to draw the strings on the cube faces and the labels on the ring</param>
            <param name="textColor">The color used to draw the strings on the cube faces</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Int32,System.Boolean)">
            <summary>Deprecated constructor.</summary>
            <param name="position">Position</param>
            <param name="visible">Visibility status</param>
            <param name="highlightColor">Color of highlight</param>
            <param name="animateCamera">If true, animates the camera when changing the orientation</param>
            <param name="animateCameraDuration">The duration in milliseconds of the camera animations</param>
            <param name="frontString">String of the front face</param>
            <param name="backString">String of the back face</param>
            <param name="leftString">String of the left face</param>
            <param name="rightString">String of the right face</param>
            <param name="topString">String of the top face</param>
            <param name="bottomString">String of the bottom face</param>
            <param name="frontRingLabel">Front orientation ring label</param>
            <param name="backRingLabel">Back orientation ring label</param>
            <param name="leftRingLabel">Left orientation ring label</param>
            <param name="rightRingLabel">Right orientation ring label</param>
            <param name="showRing">If true, shows the ring under the view cube</param>
            <param name="font">The font used to draw the strings on the cube faces and the labels on the ring</param>
            <param name="textColor">The color used to draw the strings on the cube faces</param>
            <param name="size">The size in pixels</param>
            <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="position">Position</param>
            <param name="visible">Visibility status</param>
            <param name="highlightColor">Color of highlight</param>
            <param name="animateCamera">If true, animates the camera when changing the orientation</param>
            <param name="animateCameraDuration">The duration in milliseconds of the camera animations</param>
            <param name="frontString">String of the front face</param>
            <param name="backString">String of the back face</param>
            <param name="leftString">String of the left face</param>
            <param name="rightString">String of the right face</param>
            <param name="topString">String of the top face</param>
            <param name="bottomString">String of the bottom face</param>
            <param name="frontRingLabel">Front orientation ring label</param>
            <param name="backRingLabel">Back orientation ring label</param>
            <param name="leftRingLabel">Left orientation ring label</param>
            <param name="rightRingLabel">Right orientation ring label</param>
            <param name="showRing">If true, shows the ring under the view cube</param>
            <param name="font">The font used to draw the strings on the cube faces and the labels on the ring</param>
            <param name="textColor">The color used to draw the strings on the cube faces</param>
            <param name="size">The size in pixels</param>
            <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
            <param name="enabled">The enabled status</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="position">Position</param>
            <param name="visible">Visibility status</param>
            <param name="highlightColor">Color of highlight</param>
            <param name="animateCamera">If true, animates the camera when changing the orientation</param>
            <param name="animateCameraDuration">The duration in milliseconds of the camera animations</param>
            <param name="frontString">String of the front face</param>
            <param name="backString">String of the back face</param>
            <param name="leftString">String of the left face</param>
            <param name="rightString">String of the right face</param>
            <param name="topString">String of the top face</param>
            <param name="bottomString">String of the bottom face</param>
            <param name="frontFaceColor">The color of the front face</param>
            <param name="backFaceColor">The color of the back face</param>
            <param name="leftFaceColor">The color of the left face</param>
            <param name="rightFaceColor">The color of the right face</param>
            <param name="topFaceColor">The color of the top face</param>
            <param name="bottomFaceColor">The color of the bottom face</param>
            <param name="frontRingLabel">Front orientation ring label</param>
            <param name="backRingLabel">Back orientation ring label</param>
            <param name="leftRingLabel">Left orientation ring label</param>
            <param name="rightRingLabel">Right orientation ring label</param>
            <param name="showRing">If true, shows the ring under the view cube</param>
            <param name="font">The font used to draw the strings on the cube faces and the labels on the ring</param>
            <param name="textColor">The color used to draw the strings on the cube faces</param>
            <param name="edgeColor">The color used to draw the cube edges</param>
            <param name="size">The size in pixels</param>
            <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
            <param name="enabled">The enabled status</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource)">
            <summary>Standard constructor.</summary>
            <param name="position">Position</param>
            <param name="visible">Visibility status</param>
            <param name="highlightColor">Color of highlight</param>
            <param name="animateCamera">If true, animates the camera when changing the orientation</param>
            <param name="animateCameraDuration">The duration in milliseconds of the camera animations</param>
            <param name="frontString">String of the front face</param>
            <param name="backString">String of the back face</param>
            <param name="leftString">String of the left face</param>
            <param name="rightString">String of the right face</param>
            <param name="topString">String of the top face</param>
            <param name="bottomString">String of the bottom face</param>
            <param name="frontFaceColor">The color of the front face</param>
            <param name="backFaceColor">The color of the back face</param>
            <param name="leftFaceColor">The color of the left face</param>
            <param name="rightFaceColor">The color of the right face</param>
            <param name="topFaceColor">The color of the top face</param>
            <param name="bottomFaceColor">The color of the bottom face</param>
            <param name="frontRingLabel">Front orientation ring label</param>
            <param name="backRingLabel">Back orientation ring label</param>
            <param name="leftRingLabel">Left orientation ring label</param>
            <param name="rightRingLabel">Right orientation ring label</param>
            <param name="showRing">If true, shows the ring under the view cube</param>
            <param name="font">The font used to draw the strings on the cube faces and the labels on the ring</param>
            <param name="textColor">The color used to draw the strings on the cube faces</param>
            <param name="edgeColor">The color used to draw the cube edges</param>
            <param name="size">The size in pixels</param>
            <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
            <param name="enabled">The enabled status</param>
            <param name="frontImage">The front face image</param>
            <param name="backImage">The back face image</param>
            <param name="leftImage">The left face image</param>
            <param name="rightImage">The right face image</param>
            <param name="topImage">The top face image</param>
            <param name="bottomImage">The bottom face image</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.ViewCubeIcon)">
            <summary>
            Copy constructor.
            </summary>
            <param name="other">The ViewCubeIcon to copy data from</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewCubeIcon.Dispose">
            <summary>
            Releases unmanaged resources.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewCubeIcon.GetProjectionMatrix(devDept.Eyeshot.ViewportLayout.DrawSceneParams,System.Double)">
            <summary>
            Gets the projection matrix.
            </summary>
            <param name="data">The draw data</param>
            <param name="dist">The distance of the camera from the viewcube</param>
            <returns>The projection matrix</returns>
            <remarks>Override to set an orthographic projection.</remarks>
            <example>
            Set an orthographic projection.
            	<code lang="CS" title="[New Example]">
            return Camera.myOrtho(myParams.RenderContext, -80, 80, -80, 80, dist - 150, dist + 150);
            </code>
            	<code lang="VB" title="[New Example]">
            return Camera.myOrtho(myParams.RenderContext, -80, 80, -80, 80, dist - 150, dist + 150)
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.ViewCubeIcon.GetPosition(devDept.Eyeshot.Viewport,System.Int32[],System.Int32@,System.Int32@)" -->
        <member name="M:devDept.Eyeshot.ViewCubeIcon.Draw(devDept.Eyeshot.RenderParams)">
            <summary>
            Draws the origin symbol.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewCubeIcon.ContainsApproximate(devDept.Eyeshot.Viewport,System.Int32[],System.Drawing.Point)">
            <summary>
            Tells if a point in Viewport coordinates is over the ViewCube approximate area.
            </summary>
            <param name="viewport">The viewport</param>
            <param name="viewFrame">The viewport bounds</param>
            <param name="point">The point in viewport coordinates</param>
            <returns>True if the point is over the ViewCube approximate area.</returns>        
        </member>
        <member name="M:devDept.Eyeshot.ViewCubeIcon.Contains(System.Drawing.Point)">
            <summary>
            Tells if a point in screen coordinates is over the ViewCube.
            </summary>
            <param name="mousePos">Mouse cursor position (zero on top)</param>
            <returns>True if the point is over the ViewCube</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewCubeIcon.GetView(System.Int32)">
            <summary>
            Get the view orientation corresponding to the given part of the viewcube.
            </summary>
            <param name="entId">The id of the viewcube part</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewCubeIcon.OnMouseMove(System.Windows.Forms.MouseEventArgs,devDept.Eyeshot.Viewport,System.Boolean)">
            <summary>
            Occurs when the mouse moves over the ViewCubeIcon.
            </summary>
            <param name="e">The mouse event argument in viewport coordinates</param>
            <param name="viewport">The viewport</param>
            <param name="overButtons">Tells if the mouse is over a <see cref="T:devDept.Eyeshot.ToolBarButton"/> or <see cref="!:ProgressBarButton"/></param>
            <returns>True if the selected part of the ViewCubeIcon changes.</returns>
            <remarks>Override this method and return false to disable VewCubeIcon selection.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.AnimateCamera">
            <summary>
            If true, animates the camera when changing the orientation.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.FitAfterViewChange">
            <summary>
            If true, fits the view when the view orientation changes.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.AnimateCameraDuration">
            <summary>
            Gets or sets the duration in milliseconds of the camera animations.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.ShowRing">
            <summary>
            Gets or sets the visibility of the ring under the view cube.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.FrontRingLabel">
            <summary>Gets or sets the label on the ring for front orientation.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.BackRingLabel">
            <summary>Gets or sets the label on the ring for back orientation.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.LeftRingLabel">
            <summary>Gets or sets the label on the ring for left orientation.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.RightRingLabel">
            <summary>Gets or sets the label on the ring for right orientation.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.FrontFaceColor">
            <summary>Gets or sets the color of the front face.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.BackFaceColor">
            <summary>Gets or sets the color of the back face.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.LeftFaceColor">
            <summary>Gets or sets the color of the left face.</summary>        
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.RightFaceColor">
            <summary>Gets or sets the color of the right face.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.TopFaceColor">
            <summary>Gets or sets the color of the top face.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.BottomFaceColor">
            <summary>Gets or sets the color of the bottom face.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.HighlightColor">
            <summary>Gets or sets the highlight color.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.FrontString">
            <summary>
            Gets or sets the string of the front face.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.BackString">
            <summary>
            Gets or sets the string of the back face.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.LeftString">
            <summary>
            Gets or sets the string of the left face.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.RightString">
            <summary>
            Gets or sets the string of the right face.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.BottomString">
            <summary>
            Gets or sets the string of the bottom face.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.TopString">
            <summary>
            Gets or sets the string of the top face.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.TextColor">
            <summary>
            Gets or sets the color of the strings on the faces.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.EdgeColor">
            <summary>
            Gets or sets the color of the strings on the faces.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.Font">
            <summary>
            Gets or sets the Font used to draw the strings on the cube faces and the labels on the ring
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.InitialRotation">
            <summary>
            Gets or sets the initial rotation of the ViewCubeIcon.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.Enabled">
            <summary>
            Gets or sets the enabled status.
            </summary>
            <remarks>If false and <see cref="!:ViewCubeIcon.Visible"/> is true, the ViewCubeICon is drawn with transparency and is not selectable.</remarks>
        </member>
        <member name="E:devDept.Eyeshot.ViewCubeIcon.Click">
            <summary>
            Occurs when the <see cref="T:devDept.Eyeshot.ViewCubeIcon"/> is clicked.
            </summary>
            <remarks>Adding an handler to this event disables the automatic set of the view. The view must be set by the handler.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.Position">
            <summary>
            The position on sceeen.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.FrontImage">
            <summary>
            Gets or sets the front face image.
            </summary>
            <remarks>If null, the <see cref="P:devDept.Eyeshot.ViewCubeIcon.FrontString"/> is used instead.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.BackImage">
            <summary>
            Gets or sets the back face image.
            </summary>
            <remarks>If null, the <see cref="P:devDept.Eyeshot.ViewCubeIcon.BackString"/> is used instead.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.LeftImage">
            <summary>
            Gets or sets the left face image.
            </summary>
            <remarks>If null, the <see cref="P:devDept.Eyeshot.ViewCubeIcon.LeftString"/> is used instead.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.RightImage">
            <summary>
            Gets or sets the right face image.
            </summary>
            <remarks>If null, the <see cref="P:devDept.Eyeshot.ViewCubeIcon.RightString"/> is used instead.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.TopImage">
            <summary>
            Gets or sets the top face image.
            </summary>
            <remarks>If null, the <see cref="P:devDept.Eyeshot.ViewCubeIcon.TopString"/> is used instead.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewCubeIcon.BottomImage">
            <summary>
            Gets or sets the bottom face image.
            </summary>
            <remarks>If null, the <see cref="P:devDept.Eyeshot.ViewCubeIcon.BottomString"/> is used instead.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Mesh">
             <example>
             The following code samples demonstrate how to use the different mesh natures.
             <code lang="CS">
             using System;
             using System.Collections.Generic;
             using System.Drawing;
             using devDept.Eyeshot;
             using devDept.Eyeshot.Entities;
             using devDept.Geometry;
             namespace MeshSamples
             {
                 internal class Mesh
                 {
                     private static int rows = 8;
                     private static int cols = 8;
                     private static double scale = 4;
                     
                     public static void Plain(ViewportLayout viewportLayout)
                     {
                         List&lt;Point3D&gt; vertices = new List&lt;Point3D&gt;(rows * cols);
                         Mesh surface = new Mesh();
                         surface.NormalAveragingMode = Mesh.normalAveragingType.Averaged;
                         for (int j = 0; j &lt; rows; j++)
                             for (int i = 0; i &lt; cols; i++)
                             {
                                 double x = -i / 5.0 - 2;
                                 double y = -j / 5.0 - 2;
                                 double f = 0;
                                 double den = Math.Sqrt(x * x + y * y);
                                 if (den != 0)
                                     f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                                 vertices.Add(new Point3D(x, y, f));
                             }
                         List&lt;IndexTriangle&gt; triangles = new List&lt;IndexTriangle&gt;((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j &lt; (rows - 1); j++)
                             for (int i = 0; i &lt; (cols - 1); i++)
                             {
                                 triangles.Add(new IndexTriangle(i + j * cols,
                                                                 i + j * cols + 1,
                                                                 i + (j + 1) * cols + 1));
                                 triangles.Add(new IndexTriangle(i + j * cols,
                                                                 i + (j + 1) * cols + 1,
                                                                 i + (j + 1) * cols));
                             }
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         viewportLayout.Entities.Add(surface, 0, Color.Green);
                     }
                 
                     public static void ColoredPlain(ViewportLayout viewportLayout)
                     {
                         List&lt;Point3D&gt; vertices = new List&lt;Point3D&gt;(rows*cols);
                         Mesh surface = new Mesh();
                         for (int j = 0; j &lt; rows; j++)
                             for (int i = 0; i &lt; cols; i++)
                             {
                                 double x = -i/5.0 - 2;
                                 double y = -j/5.0 - 2;
                                 double f = 0;
                                 double den = Math.Sqrt(x*x + y*y);
                                 if (den != 0)
                                     f = scale*Math.Sin(Math.Sqrt(x*x + y*y))/den;
                                 vertices.Add(new Point3D(x, y, f));
                             }
                         List&lt;ColorTriangle&gt; triangles = new List&lt;ColorTriangle&gt;((rows - 1)*(cols - 1)*2);
                         for (int j = 0; j &lt; (rows - 1); j++)
                             for (int i = 0; i &lt; (cols - 1); i++)
                             {
                                 // generates a random color
                                 int red = (int) (255 - i*100);
                                 int green = (int) (255 - j*50);
                                 int blue = 127;
                                 // clamps color values lat 0-255
                                 Utility.LimitRange&lt;int&gt;(0, ref red, 255);
                                 Utility.LimitRange&lt;int&gt;(0, ref green, 255);
                                 Utility.LimitRange&lt;int&gt;(0, ref blue, 255);
                                 triangles.Add(new ColorTriangle(i + j*cols,
                                                                 i + j*cols + 1,
                                                                 i + (j + 1)*cols + 1, (byte) red, (byte) green, (byte) blue));
                                 triangles.Add(new ColorTriangle(i + j*cols,
                                                                 i + (j + 1)*cols + 1,
                                                                 i + (j + 1)*cols, (byte) red, (byte) green, (byte) blue));
                             }
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         viewportLayout.Entities.Add(surface, 0);
                     }
                 
                     public static void MulticolorPlain(ViewportLayout viewportLayout)
                     {
                         List&lt;PointRGB&gt; vertices = new List&lt;PointRGB&gt;(rows * cols);
                         Mesh surface = new Mesh();
                         for (int j = 0; j &lt; rows; j++)
                             for (int i = 0; i &lt; cols; i++)
                             {
                                 double x = -i / 5.0 - 2;
                                 double y = -j / 5.0 - 2;
                                 double f = 0;
                                 double den = Math.Sqrt(x * x + y * y);
                                 if (den != 0)
                                     f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                                 // generates a random color
                                 int red = (int)(y * y * 30);
                                 int green = (int)(x * x * 30);
                                 int blue = (int)(255 - f * f * 1000);
                                 // clamps color values lat 0-255
                                 Utility.LimitRange&lt;int&gt;(0, ref red, 255);
                                 Utility.LimitRange&lt;int&gt;(0, ref green, 255);
                                 Utility.LimitRange&lt;int&gt;(0, ref blue, 255);
                                 vertices.Add(new PointRGB(x, y, f, (byte)red, (byte)green, (byte)blue));
                             }
                         List&lt;IndexTriangle&gt; triangles = new List&lt;IndexTriangle&gt;((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j &lt; (rows - 1); j++)
                             for (int i = 0; i &lt; (cols - 1); i++)
                             {
                                 triangles.Add(new IndexTriangle(i + j * cols,
                                                                 i + j * cols + 1,
                                                                 i + (j + 1) * cols + 1));
                                 triangles.Add(new IndexTriangle(i + j * cols,
                                                                 i + (j + 1) * cols + 1,
                                                                 i + (j + 1) * cols));
                             }
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         viewportLayout.Entities.Add(surface);
                     }
                 
                     public static void TexturedPlain(ViewportLayout viewportLayout)
                     {
                         List&lt;Point3D&gt; vertices = new List&lt;Point3D&gt;(rows * cols);
                         List&lt;Point2D&gt; texCoords = new List&lt;Point2D&gt;(rows * cols);
                         Mesh surface = new Mesh();
                         for (int j = 0; j &lt; rows; j++)
                             for (int i = 0; i &lt; cols; i++)
                             {
                                 double x = -i / 5.0 - 2;
                                 double y = -j / 5.0 - 2;
                                 double f = 0;
                                 double den = Math.Sqrt(x * x + y * y);
                                 if (den != 0)
                                     f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                                 vertices.Add(new Point3D(x, y, f));
                                 texCoords.Add(new Point2D((-x * 5) / (rows - 1), (-y * 5) / (cols - 1)));
                             }
                         Bitmap bmp = new Bitmap(Properties.Resources.Smiley);
                         Material mat = new Material(bmp);
                         viewportLayout.Materials.Add("test", mat);
                         List&lt;RichTriangle&gt; triangles = new List&lt;RichTriangle&gt;((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j &lt; (rows - 1); j++)
                             for (int i = 0; i &lt; (cols - 1); i++)
                             {
                                 RichTriangle tri = new RichTriangle(i + j * cols,
                                                                     i + j * cols + 1,
                                                                     i + (j + 1) * cols + 1);
                                 tri.T1 = tri.V1;
                                 tri.T2 = tri.V2;
                                 tri.T3 = tri.V3;
                                 triangles.Add(tri);
                                 tri = new RichTriangle(i + j * cols,
                                                        i + (j + 1) * cols + 1,
                                                        i + (j + 1) * cols);
                                 tri.T1 = tri.V1;
                                 tri.T2 = tri.V2;
                                 tri.T3 = tri.V3;
                                 triangles.Add(tri);
                             }
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         surface.TextureCoords = texCoords.ToArray();
                 
                         surface.ColorMethod = colorMethodType.byEntity;
                         surface.MaterialName = "test";
                 
                         viewportLayout.Entities.Add(surface);
                     }
                 
                     public static void Smooth(ViewportLayout viewportLayout)
                     {
                         List&lt;Point3D&gt; vertices = new List&lt;Point3D&gt;(rows * cols);
                         Mesh surface = new Mesh();
                         surface.NormalAveragingMode = Mesh.normalAveragingType.Averaged;
                         for (int j = 0; j &lt; rows; j++)
                             for (int i = 0; i &lt; cols; i++)
                             {
                                 double x = -i / 5.0 - 2;
                                 double y = -j / 5.0 - 2;
                                 double f = 0;
                                 double den = Math.Sqrt(x * x + y * y);
                                 if (den != 0)
                                     f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                                 vertices.Add(new Point3D(x, y, f));
                             }
                         List&lt;SmoothTriangle&gt; triangles = new List&lt;SmoothTriangle&gt;((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j &lt; (rows - 1); j++)
                             for (int i = 0; i &lt; (cols - 1); i++)
                             {
                                 triangles.Add(new SmoothTriangle(i + j * cols,
                                                                  i + j * cols + 1,
                                                                  i + (j + 1) * cols + 1));
                                 triangles.Add(new SmoothTriangle(i + j * cols,
                                                                  i + (j + 1) * cols + 1,
                                                                  i + (j + 1) * cols));
                             }
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         viewportLayout.Entities.Add(surface, 0, Color.Green);
                     }
                 
                     public static void ColoredSmooth(ViewportLayout viewportLayout)
                     {
                         List&lt;Point3D&gt; vertices = new List&lt;Point3D&gt;(rows * cols);
                         Mesh surface = new Mesh();
                         for (int j = 0; j &lt; rows; j++)
                             for (int i = 0; i &lt; cols; i++)
                             {
                                 double x = -i / 5.0 - 2;
                                 double y = -j / 5.0 - 2;
                                 double f = 0;
                                 double den = Math.Sqrt(x * x + y * y);
                                 if (den != 0)
                                     f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                                 vertices.Add(new Point3D(x, y, f));
                             }
                         List&lt;ColorSmoothTriangle&gt; triangles = new List&lt;ColorSmoothTriangle&gt;((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j &lt; (rows - 1); j++)
                             for (int i = 0; i &lt; (cols - 1); i++)
                             {
                                 // generates a random color
                                 int red = (255 - i * 100);
                                 int green = (255 - j * 50);
                                 int blue = 127;
                                 // clamps color values lat 0-255
                                 Utility.LimitRange&lt;int&gt;(0, ref red, 255);
                                 Utility.LimitRange&lt;int&gt;(0, ref green, 255);
                                 Utility.LimitRange&lt;int&gt;(0, ref blue, 255);
                                 triangles.Add(new ColorSmoothTriangle(i + j * cols,
                                                                       i + j * cols + 1,
                                                                       i + (j + 1) * cols + 1, (byte)red, (byte)green, (byte)blue));
                                 triangles.Add(new ColorSmoothTriangle(i + j * cols,
                                                                       i + (j + 1) * cols + 1,
                                                                       i + (j + 1) * cols, (byte)red, (byte)green, (byte)blue));
                             }
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         viewportLayout.Entities.Add(surface, 0);
                     }
                 
                     public static void MulticolorSmooth(ViewportLayout viewportLayout)
                     {
                         List&lt;PointRGB&gt; vertices = new List&lt;PointRGB&gt;(rows * cols);
                         Mesh surface = new Mesh();
                         surface.NormalAveragingMode = Mesh.normalAveragingType.Averaged;
                         for (int j = 0; j &lt; rows; j++)
                             for (int i = 0; i &lt; cols; i++)
                             {
                                 double x = -i / 5.0 - 2;
                                 double y = -j / 5.0 - 2;
                                 double f = 0;
                                 double den = Math.Sqrt(x * x + y * y);
                                 if (den != 0)
                                     f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                                 // generates a random color
                                 int red = (int)(y * y * 30);
                                 int green = (int)(x * x * 30);
                                 int blue = (int)(255 - f * f * 1000);
                                 // clamps color values lat 0-255
                                 Utility.LimitRange&lt;int&gt;(0, ref red, 255);
                                 Utility.LimitRange&lt;int&gt;(0, ref green, 255);
                                 Utility.LimitRange&lt;int&gt;(0, ref blue, 255);
                                 vertices.Add(new PointRGB(x, y, f, (byte)red, (byte)green, (byte)blue));
                             }
                         List&lt;SmoothTriangle&gt; triangles = new List&lt;SmoothTriangle&gt;((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j &lt; (rows - 1); j++)
                             for (int i = 0; i &lt; (cols - 1); i++)
                             {
                                 triangles.Add(new SmoothTriangle(i + j * cols,
                                                                  i + j * cols + 1,
                                                                  i + (j + 1) * cols + 1));
                                 triangles.Add(new SmoothTriangle(i + j * cols,
                                                                  i + (j + 1) * cols + 1,
                                                                  i + (j + 1) * cols));
                             }
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         viewportLayout.Entities.Add(surface, 0);
                     }
                 
                     public static void TexturedSmooth(ViewportLayout viewportLayout)
                     {
                         List&lt;Point3D&gt; vertices = new List&lt;Point3D&gt;(rows * cols);
                         List&lt;Point2D&gt; texCoords = new List&lt;Point2D&gt;(rows * cols);
                         Mesh surface = new Mesh();
                         for (int j = 0; j &lt; rows; j++)
                             for (int i = 0; i &lt; cols; i++)
                             {
                                 double x = -i / 5.0 - 2;
                                 double y = -j / 5.0 - 2;
                                 double f = 0;
                                 double den = Math.Sqrt(x * x + y * y);
                                 if (den != 0)
                                     f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                                 vertices.Add(new Point3D(x, y, f));
                                 texCoords.Add(new Point2D((-x * 5) / (rows - 1), (-y * 5) / (cols - 1)));
                             }
                         Bitmap bmp = new Bitmap(Properties.Resources.Smiley);
                         Material mat = new Material(bmp);
                         viewportLayout.Materials.Add("test", mat);
                         List&lt;RichSmoothTriangle&gt; triangles = new List&lt;RichSmoothTriangle&gt;((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j &lt; (rows - 1); j++)
                             for (int i = 0; i &lt; (cols - 1); i++)
                             {
                                 RichSmoothTriangle tri = new RichSmoothTriangle(i + j * cols,
                                                                                 i + j * cols + 1,
                                                                                 i + (j + 1) * cols + 1);
                                 tri.T1 = tri.V1;
                                 tri.T2 = tri.V2;
                                 tri.T3 = tri.V3;
                                 triangles.Add(tri);
                                 tri = new RichSmoothTriangle(i + j * cols,
                                                              i + (j + 1) * cols + 1,
                                                              i + (j + 1) * cols);
                                 tri.T1 = tri.V1;
                                 tri.T2 = tri.V2;
                                 tri.T3 = tri.V3;
                                 triangles.Add(tri);
                             }
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         surface.TextureCoords = texCoords.ToArray();
                 
                         surface.MaterialName = "test";
                         surface.ColorMethod = colorMethodType.byEntity;
                 
                         viewportLayout.Entities.Add(surface, 0);
                     }
                 
                 }
            </code>
             <code lang="VB">
             Imports System
             Imports System.Collections.Generic
             Imports System.Drawing
             Imports devDept.Eyeshot
             Imports devDept.Eyeshot.Entities
             Imports devDept.Geometry
             Namespace MeshSamples
                 Friend Class Mesh
                 	Private Shared rows As Integer = 8
                 	Private Shared cols As Integer = 8
                 	Private Shared scale As Double = 4
                 
                 	Public Shared Sub Plain(viewportLayout As ViewportLayout)
                 		Dim vertices As New List(Of Point3D)(rows * cols)
                 		Dim surface As New Mesh()
                 		surface.NormalAveragingMode = Mesh.normalAveragingType.Averaged
                 		For j As Integer = 0 To rows - 1
                 			For i As Integer = 0 To cols - 1
                 				Dim x As Double = -i / 5.0 - 2
                 				Dim y As Double = -j / 5.0 - 2
                 				Dim f As Double = 0
                 				Dim den As Double = Math.Sqrt(x * x + y * y)
                 				If den &lt;&gt; 0 Then
                 					f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                 				End If
                 				vertices.Add(New Point3D(x, y, f))
                 			Next
                 		Next
                 		Dim triangles As New List(Of IndexTriangle)((rows - 1) * (cols - 1) * 2)
                 		For j As Integer = 0 To (rows - 1) - 1
                 			For i As Integer = 0 To (cols - 1) - 1
                 				triangles.Add(New IndexTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1))
                 				triangles.Add(New IndexTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols))
                 			Next
                 		Next
                 		surface.Vertices = vertices.ToArray()
                 		surface.Triangles = triangles.ToArray()
                 		viewportLayout.Entities.Add(surface, 0, Color.Green)
                 	End Sub
                 
                 	Public Shared Sub ColoredPlain(viewportLayout As ViewportLayout)
                 		Dim vertices As New List(Of Point3D)(rows * cols)
                 		Dim surface As New Mesh()
                 		For j As Integer = 0 To rows - 1
                 			For i As Integer = 0 To cols - 1
                 				Dim x As Double = -i / 5.0 - 2
                 				Dim y As Double = -j / 5.0 - 2
                 				Dim f As Double = 0
                 				Dim den As Double = Math.Sqrt(x * x + y * y)
                 				If den &lt;&gt; 0 Then
                 					f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                 				End If
                 				vertices.Add(New Point3D(x, y, f))
                 			Next
                 		Next
                 		Dim triangles As New List(Of ColorTriangle)((rows - 1) * (cols - 1) * 2)
                 		For j As Integer = 0 To (rows - 1) - 1
                 			For i As Integer = 0 To (cols - 1) - 1
                 				' generates a random color
                 				Dim red As Integer = CInt(255 - i * 100)
                 				Dim green As Integer = CInt(255 - j * 50)
                 				Dim blue As Integer = 127
                 				' clamps color values lat 0-255
                 				Utility.LimitRange(Of Integer)(0, red, 255)
                 				Utility.LimitRange(Of Integer)(0, green, 255)
                 				Utility.LimitRange(Of Integer)(0, blue, 255)
                 				triangles.Add(New ColorTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1, CByte(red), CByte(green), CByte(blue)))
                 				triangles.Add(New ColorTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols, CByte(red), CByte(green), CByte(blue)))
                 			Next
                 		Next
                 		surface.Vertices = vertices.ToArray()
                 		surface.Triangles = triangles.ToArray()
                 		viewportLayout.Entities.Add(surface, 0)
                 	End Sub
                 
                 	Public Shared Sub MulticolorPlain(viewportLayout As ViewportLayout)
                 		Dim vertices As New List(Of PointRGB)(rows * cols)
                 		Dim surface As New Mesh()
                 		For j As Integer = 0 To rows - 1
                 			For i As Integer = 0 To cols - 1
                 				Dim x As Double = -i / 5.0 - 2
                 				Dim y As Double = -j / 5.0 - 2
                 				Dim f As Double = 0
                 				Dim den As Double = Math.Sqrt(x * x + y * y)
                 				If den &lt;&gt; 0 Then
                 					f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                 				End If
                 				' generates a random color
                 				Dim red As Integer = CInt(y * y * 30)
                 				Dim green As Integer = CInt(x * x * 30)
                 				Dim blue As Integer = CInt(255 - f * f * 1000)
                 				' clamps color values lat 0-255
                 				Utility.LimitRange(Of Integer)(0, red, 255)
                 				Utility.LimitRange(Of Integer)(0, green, 255)
                 				Utility.LimitRange(Of Integer)(0, blue, 255)
                 				vertices.Add(New PointRGB(x, y, f, CByte(red), CByte(green), CByte(blue)))
                 			Next
                 		Next
                 		Dim triangles As New List(Of IndexTriangle)((rows - 1) * (cols - 1) * 2)
                 		For j As Integer = 0 To (rows - 1) - 1
                 			For i As Integer = 0 To (cols - 1) - 1
                 				triangles.Add(New IndexTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1))
                 				triangles.Add(New IndexTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols))
                 			Next
                 		Next
                 		surface.Vertices = vertices.ToArray()
                 		surface.Triangles = triangles.ToArray()
                 		viewportLayout.Entities.Add(surface)
                 	End Sub
                 
                 	Public Shared Sub TexturedPlain(viewportLayout As ViewportLayout)
                 		Dim vertices As New List(Of Point3D)(rows * cols)
                 		Dim texCoords As New List(Of Point2D)(rows * cols)
                 		Dim surface As New Mesh()
                 		For j As Integer = 0 To rows - 1
                 			For i As Integer = 0 To cols - 1
                 				Dim x As Double = -i / 5.0 - 2
                 				Dim y As Double = -j / 5.0 - 2
                 				Dim f As Double = 0
                 				Dim den As Double = Math.Sqrt(x * x + y * y)
                 				If den &lt;&gt; 0 Then
                 					f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                 				End If
                 				vertices.Add(New Point3D(x, y, f))
                 				texCoords.Add(New Point2D((-x * 5) / (rows - 1), (-y * 5) / (cols - 1)))
                 			Next
                 		Next
                 		Dim bmp As New Bitmap(Properties.Resources.Smiley)
                 		Dim mat As New Material(bmp)
                 		viewportLayout.Materials.Add("test", mat)
                 		Dim triangles As New List(Of RichTriangle)((rows - 1) * (cols - 1) * 2)
                 		For j As Integer = 0 To (rows - 1) - 1
                 			For i As Integer = 0 To (cols - 1) - 1
                 				Dim tri As New RichTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1)
                 				tri.T1 = tri.V1
                 				tri.T2 = tri.V2
                 				tri.T3 = tri.V3
                 				triangles.Add(tri)
                 				tri = New RichTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols)
                 				tri.T1 = tri.V1
                 				tri.T2 = tri.V2
                 				tri.T3 = tri.V3
                 				triangles.Add(tri)
                 			Next
                 		Next
                 		surface.Vertices = vertices.ToArray()
                 		surface.Triangles = triangles.ToArray()
                 		surface.TextureCoords = texCoords.ToArray()
                 
                 		surface.ColorMethod = colorMethodType.byEntity
                 		surface.MaterialName = "test"
                 
                 		viewportLayout.Entities.Add(surface)
                 	End Sub
                 
                 	Public Shared Sub Smooth(viewportLayout As ViewportLayout)
                 		Dim vertices As New List(Of Point3D)(rows * cols)
                 		Dim surface As New Mesh()
                 		surface.NormalAveragingMode = Mesh.normalAveragingType.Averaged
                 		For j As Integer = 0 To rows - 1
                 			For i As Integer = 0 To cols - 1
                 				Dim x As Double = -i / 5.0 - 2
                 				Dim y As Double = -j / 5.0 - 2
                 				Dim f As Double = 0
                 				Dim den As Double = Math.Sqrt(x * x + y * y)
                 				If den &lt;&gt; 0 Then
                 					f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                 				End If
                 				vertices.Add(New Point3D(x, y, f))
                 			Next
                 		Next
                 		Dim triangles As New List(Of SmoothTriangle)((rows - 1) * (cols - 1) * 2)
                 		For j As Integer = 0 To (rows - 1) - 1
                 			For i As Integer = 0 To (cols - 1) - 1
                 				triangles.Add(New SmoothTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1))
                 				triangles.Add(New SmoothTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols))
                 			Next
                 		Next
                 		surface.Vertices = vertices.ToArray()
                 		surface.Triangles = triangles.ToArray()
                 		viewportLayout.Entities.Add(surface, 0, Color.Green)
                 	End Sub
                 
                 	Public Shared Sub ColoredSmooth(viewportLayout As ViewportLayout)
                 		Dim vertices As New List(Of Point3D)(rows * cols)
                 		Dim surface As New Mesh()
                 		For j As Integer = 0 To rows - 1
                 			For i As Integer = 0 To cols - 1
                 				Dim x As Double = -i / 5.0 - 2
                 				Dim y As Double = -j / 5.0 - 2
                 				Dim f As Double = 0
                 				Dim den As Double = Math.Sqrt(x * x + y * y)
                 				If den &lt;&gt; 0 Then
                 					f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                 				End If
                 				vertices.Add(New Point3D(x, y, f))
                 			Next
                 		Next
                 		Dim triangles As New List(Of ColorSmoothTriangle)((rows - 1) * (cols - 1) * 2)
                 		For j As Integer = 0 To (rows - 1) - 1
                 			For i As Integer = 0 To (cols - 1) - 1
                 				' generates a random color
                 				Dim red As Integer = (255 - i * 100)
                 				Dim green As Integer = (255 - j * 50)
                 				Dim blue As Integer = 127
                 				' clamps color values lat 0-255
                 				Utility.LimitRange(Of Integer)(0, red, 255)
                 				Utility.LimitRange(Of Integer)(0, green, 255)
                 				Utility.LimitRange(Of Integer)(0, blue, 255)
                 				triangles.Add(New ColorSmoothTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1, CByte(red), CByte(green), CByte(blue)))
                 				triangles.Add(New ColorSmoothTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols, CByte(red), CByte(green), CByte(blue)))
                 			Next
                 		Next
                 		surface.Vertices = vertices.ToArray()
                 		surface.Triangles = triangles.ToArray()
                 		viewportLayout.Entities.Add(surface, 0)
                 	End Sub
                 
                 	Public Shared Sub MulticolorSmooth(viewportLayout As ViewportLayout)
                 		Dim vertices As New List(Of PointRGB)(rows * cols)
                 		Dim surface As New Mesh()
                 		surface.NormalAveragingMode = Mesh.normalAveragingType.Averaged
                 		For j As Integer = 0 To rows - 1
                 			For i As Integer = 0 To cols - 1
                 				Dim x As Double = -i / 5.0 - 2
                 				Dim y As Double = -j / 5.0 - 2
                 				Dim f As Double = 0
                 				Dim den As Double = Math.Sqrt(x * x + y * y)
                 				If den &lt;&gt; 0 Then
                 					f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                 				End If
                 				' generates a random color
                 				Dim red As Integer = CInt(y * y * 30)
                 				Dim green As Integer = CInt(x * x * 30)
                 				Dim blue As Integer = CInt(255 - f * f * 1000)
                 				' clamps color values lat 0-255
                 				Utility.LimitRange(Of Integer)(0, red, 255)
                 				Utility.LimitRange(Of Integer)(0, green, 255)
                 				Utility.LimitRange(Of Integer)(0, blue, 255)
                 				vertices.Add(New PointRGB(x, y, f, CByte(red), CByte(green), CByte(blue)))
                 			Next
                 		Next
                 		Dim triangles As New List(Of SmoothTriangle)((rows - 1) * (cols - 1) * 2)
                 		For j As Integer = 0 To (rows - 1) - 1
                 			For i As Integer = 0 To (cols - 1) - 1
                 				triangles.Add(New SmoothTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1))
                 				triangles.Add(New SmoothTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols))
                 			Next
                 		Next
                 		surface.Vertices = vertices.ToArray()
                 		surface.Triangles = triangles.ToArray()
                 		viewportLayout.Entities.Add(surface, 0)
                 	End Sub
                 
                 	Public Shared Sub TexturedSmooth(viewportLayout As ViewportLayout)
                 		Dim vertices As New List(Of Point3D)(rows * cols)
                 		Dim texCoords As New List(Of Point2D)(rows * cols)
                 		Dim surface As New Mesh()
                 		For j As Integer = 0 To rows - 1
                 			For i As Integer = 0 To cols - 1
                 				Dim x As Double = -i / 5.0 - 2
                 				Dim y As Double = -j / 5.0 - 2
                 				Dim f As Double = 0
                 				Dim den As Double = Math.Sqrt(x * x + y * y)
                 				If den &lt;&gt; 0 Then
                 					f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                 				End If
                 				vertices.Add(New Point3D(x, y, f))
                 				texCoords.Add(New Point2D((-x * 5) / (rows - 1), (-y * 5) / (cols - 1)))
                 			Next
                 		Next
                 		Dim bmp As New Bitmap(Properties.Resources.Smiley)
                 		Dim mat As New Material(bmp)
                 		viewportLayout.Materials.Add("test", mat)
                 		Dim triangles As New List(Of RichSmoothTriangle)((rows - 1) * (cols - 1) * 2)
                 		For j As Integer = 0 To (rows - 1) - 1
                 			For i As Integer = 0 To (cols - 1) - 1
                 				Dim tri As New RichSmoothTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1)
                 				tri.T1 = tri.V1
                 				tri.T2 = tri.V2
                 				tri.T3 = tri.V3
                 				triangles.Add(tri)
                 				tri = New RichSmoothTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols)
                 				tri.T1 = tri.V1
                 				tri.T2 = tri.V2
                 				tri.T3 = tri.V3
                 				triangles.Add(tri)
                 			Next
                 		Next
                 		surface.Vertices = vertices.ToArray()
                 		surface.Triangles = triangles.ToArray()
                 		surface.TextureCoords = texCoords.ToArray()
                 
                 		surface.MaterialName = "test"
                 		surface.ColorMethod = colorMethodType.byEntity
                 
                 		viewportLayout.Entities.Add(surface, 0)
                 	End Sub
                 
                 End Class
             End Namespace</code></example>
             <summary>
             	<para>Mesh entity. Depending on the types of vertices and triangles can assume
                 different configurations, see table below:</para>
             	<para>
             		<table style="BORDER-RIGHT-WIDTH: 0px; BORDER-TOP-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-LEFT-WIDTH: 0px" cellspacing="0" cellpadding="0" cols="3">
             			<tbody>
             				<tr>
             					<td>Triangles type / Vertices type</td>
             					<td>
             						<see cref="T:devDept.Geometry.Point3D"/>
             					</td>
             					<td>
             						<see cref="T:devDept.Geometry.PointRGB"/>
             					</td>
             				</tr>
             				<tr>
             					<td>
             						<see cref="T:devDept.Geometry.IndexTriangle"/>
             					</td>
             					<td>Plain<sup>1</sup></td>
             					<td>MulticolorPlain</td>
             				</tr>
             				<tr>
             					<td>
             						<see cref="T:devDept.Geometry.SmoothTriangle"/>
             					</td>
             					<td>Smooth<sup>1</sup></td>
             					<td>MulticolorSmooth</td>
             				</tr>
             				<tr>
             					<td>
             						<see cref="T:devDept.Geometry.ColorTriangle"/>
             					</td>
             					<td>ColorPlain</td>
             					<td></td>
             				</tr>
             				<tr>
             					<td>
             						<see cref="T:devDept.Geometry.ColorSmoothTriangle"/>
             					</td>
             					<td>ColorSmooth</td>
             					<td></td>
             				</tr>
             				<tr>
             					<td>
             						<see cref="T:devDept.Geometry.RichTriangle"/>
             					</td>
             					<td>RichPlain</td>
             					<td></td>
             				</tr>
             				<tr>
             					<td>
             						<see cref="T:devDept.Geometry.RichSmoothTriangle"/>
             					</td>
             					<td>RichSmooth</td>
             					<td></td>
             				</tr>
             			</tbody>
             		</table>
             	</para>
             	<sup>1</sup> Allows transparency to be used</summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Entity">
            <summary>
            Base class for all Eyeshot entities.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.IEntity">
            <summary>
            Entity interface.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.IEntity.Color">
            <summary>
            Gets or sets the entity color.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.IEntity.ColorMethod"/>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.DisplayMode"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.IEntity.ColorMethod">
            <summary>
            Gets or sets the entity color source.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.IEntity.ColorMethod"/>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.DisplayMode"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.IEntity.LayerIndex">
            <summary>
            Gets or sets the entity layer index.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.IEntity.Visible">
            <summary>
            Gets or sets the entity visibility status.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.IEntity.LineTypeMethod">
            <summary>
            Gets or sets the entity line type source.
            </summary>
            <remarks>You may need to call Viewport.Entities.Regen() to see your changes.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.IEntity.LineTypePattern">
            <summary>
            Gets or sets the line type pattern. In use only if the <see cref="P:devDept.Eyeshot.Entities.IEntity.LineTypeMethod"/> is byEntity.
            The pattern defines pen-up lengths (spaces), pen-down lengths (dashes), and dots. 
            A pattern specifies the length of segments that make up the linetype. A positive 
            decimal number specifies a pen-down (dash) segment of that length. A negative decimal
            number specifies a pen-up (space) segment of that length. Zero specifies a dot. For 
            example, the DASHDOT linetype is defined by a repeating pattern starting with a dash
            0.5 drawing units long, a space 0.25 drawing units long, a dot, and another space 0.25
            drawing units long.</summary>
            <remarks>
            When the line type pattern of an entity already added to the <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/> is changed, 
            the <see cref="!:RegenMode"/> must be set to <see cref="F:devDept.Eyeshot.Entities.regenType.CompileOnly"/> and the <see cref="M:devDept.Eyeshot.EntityList.Regen"/> must be called.
            </remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.IEntity.LineWeightMethod">
            <summary>
            Gets or sets the entity line weight source.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.IEntity.LineWeight">
            <summary>
            Gets or sets the entity line weight.
            </summary>
            <remarks>This value corresponds to pixels when drawing on screen and to mm when exporting to vectorial formats.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.IEntity.XData">
            <summary>
            Gets or sets the XData value list.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Entity.drawData">
            <summary>
            Default graphics data.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Entity.drawPattern">
            <summary>
            Graphics data for line pattern.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.#ctor(System.Drawing.Color,devDept.Eyeshot.Entities.entityNatureType)">
            <summary>
            Color and nature constructor.
            </summary>
            <param name="color">A <see cref="P:devDept.Eyeshot.Entities.Entity.Color"/> structure that indicates the color of this entity.</param>
            <param name="nature">The entity nature</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.#ctor(devDept.Eyeshot.Entities.entityNatureType)">
            <summary>
            Nature only constructor.
            </summary>
            <param name="nature">The entity nature</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Dispose">
            <summary>
            Cleans up OpenGL resources, like display lists, textures, etc.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.IsSmall(devDept.Eyeshot.IsSmallParams)">
            <summary>
            Checks if an entity is small and can be skipped during the drawing.
            </summary>
            <param name="data">The data</param>
            <returns>True if the entity is small compared to <see cref="P:devDept.Eyeshot.ViewportLayout.SmallSize"/></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.IsInFrustum(devDept.Geometry.PlaneEquation[],System.Boolean)">
            <summary>
            Tells if the the entity is inside the frustum planes.
            </summary>
            <param name="frustum">The planes of the frustum</param>
            <param name="quick">If true a quick check is done, else a more accurate one is performed</param>
            <returns>True if the entity is inside the frustum</returns>
            <remarks>The frustum planes can be obtained with <see cref="M:devDept.Eyeshot.Viewport.GetCameraFrustum"/></remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.IsInFrustum(devDept.Geometry.PlaneEquation[],devDept.Geometry.Point3D,System.Double,System.Boolean)">
            <summary>
            Tells if the sphere surrounding the entitiy is inside the frustum planes.
            </summary>
            <param name="frustum">Frustum planes</param>
            <param name="center">Center of the sphere</param>
            <param name="radius">Radius of the sphere</param>
            <returns>True if the sphere is inside the frustum planes.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.IsCrossingScreenPolygon(devDept.Eyeshot.ScreenPolygonParams)">
            <summary>
            Tells if an entity is fully or partially contained inside a polygon defined in screen coordinates. 
            </summary>
            <param name="data">Screen polygon data</param>
            <returns>True if at least one of the vertices of the entity is contained in the screen polygon.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.AllVerticesInScreenPolygon(devDept.Eyeshot.ScreenPolygonParams)">
            <summary>
            Tells if an entity is fully contained inside a polygon defined in screen coordinates. 
            </summary>
            <param name="data">Screen polygon data</param>
            <returns>True if all the vertices of the entity are contained in the screen polygon.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.IsValid">
            <summary>
            Returns true if all the entity fields contain reasonable information.
            </summary>
            <returns>True if the entity is valid, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">
            <summary>
            Gives a chance to derived classes to change the entity position/rotation at each
            timer tick. For maximum performances transformation of entity's visual representation
            only is recommended (using gl.Translate() or gl.Rotate() commands).
            </summary>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StartAnimation(System.Int32)">StartAnimation Method (devDept.Eyeshot.Viewport)</seealso>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StopAnimation">StopAnimation Method (devDept.Eyeshot.Viewport)</seealso>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.UpdateBoundingBox(devDept.Eyeshot.TraversalParams)">
            <summary>
            Updates the entity's bounding box.
            </summary>
            <param name="data">Traversal data</param>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMin"/>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMax"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.CombineBoundingBox(devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Combines the entity's bounding box with the given bounding box.
            </summary>
            <param name="boxMin">The minimum point of the bounding box</param>
            <param name="boxMax">The maximum point of the bounding box.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.ComputeBoundingBox(devDept.Eyeshot.TraversalParams,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
            <summary>
            Computes the entity's bounding box.
            </summary>
            <param name="data">Bounding box data</param>
            <param name="boxMin">The bounding box minmum point</param>
            <param name="boxMax">The bounding box maximum point</param>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMin"/>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMax"/>
            <returns>True if the bounding box is valid.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.ComputeBoundingBox(devDept.Eyeshot.TraversalParams,System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
            <summary>
            Computes the entity's bounding box.
            </summary>
            <param name="data">Bounding box data</param>
            <param name="entityVertices">The vertices to consider in the computation.</param>
            <param name="boxMin">The bounding box minmum point</param>
            <param name="boxMax">The bounding box maximum point</param>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMin"/>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMax"/>
            <returns>True if the bounding box is valid.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.EstimateBoundingBox(devDept.Eyeshot.LayerList,System.Collections.Generic.Dictionary{System.String,devDept.Eyeshot.Block})">
            <summary>
            Returns a small set of points that gives an idea of the entity bounding box.
            </summary>
            <param name="layerList">The layer list</param>
            <param name="blocks">Blocks dictionary</param>
            <returns>An array of 3D points.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.ComputeOffsetOnCameraAxes(devDept.Eyeshot.OffsetOnCameraAxesParams)">
            <summary>
            Computes the intersection of the lines passing from the vertices and oriented like the frustum planes with the X and Y axes of the camera.
            </summary>
            <param name="data">Camera offset data</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Regen(devDept.Eyeshot.RegenParams)">
            <summary>
            This method is used for several purposes. For example in <see cref="T:devDept.Eyeshot.Entities.Arc">arcs</see> and <see cref="T:devDept.Eyeshot.Entities.Circle">circles</see>
            is used to generate the curve's linear approximation, in <see cref="T:devDept.Eyeshot.Entities.Mesh">meshes</see> to compute normals
            and edges and in <see cref="T:devDept.Eyeshot.Entities.Surface">Nurbs surfaces</see> to generate the triangulation.
            </summary>
            <param name="data"></param>
            <seealso cref="M:devDept.Eyeshot.Entities.Entity.Compile(devDept.Eyeshot.CompileParams)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Regen(System.Double)">
            <summary>
                This method is used for several purposes. For example in <see cref="T:devDept.Eyeshot.Entities.Arc">arcs</see>
                and <see cref="T:devDept.Eyeshot.Entities.Circle">circles</see> is used to generate the curve's linear
                approximation, in <see cref="T:devDept.Eyeshot.Entities.Mesh">meshes</see> to compute normals and edges and in
                <see cref="T:devDept.Eyeshot.Entities.Surface">Nurbs surfaces</see> to generate the triangulation.
            </summary>
            <overloads>
            This overload can be used with entities that don't display texts and textures.
            </overloads>
            <param name="chordalErr">Chordal error</param>
            <remarks>Can't be called on BlockReference entities. Call one of the other overloads for BlockReference entities.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Compile(devDept.Eyeshot.CompileParams)">
            <summary>
            Compiles the OpenGL representation of this entity.
            </summary>
            <seealso cref="M:devDept.Eyeshot.Entities.Entity.Regen(System.Double)">Regen Method</seealso>
            <param name="data">The data needed for compilation</param>
            <seealso cref="M:devDept.Eyeshot.Entities.Entity.DrawEntity(devDept.Graphics.RenderContextBase,System.Object)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Clone">
            <summary>
            Creates a deep copy of this entity.
            </summary>
            <returns>The new entity object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.TransformBy(devDept.Geometry.Transformation)">
            <summary>
            Transforms all the entity's vertices by the specified transformation.
            </summary>
            <remarks>
            You need to call myViewport.Entities.Regen() to see the effect of this
            command.
            </remarks>
            <param name="transform">The transformation to be applied</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.ThroughTriangleQuad(devDept.Eyeshot.FrustumParams,System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Tells if the quad defined by the vertices is inside the selection area defined by the edge list.
            </summary>
            <param name="data">The frustum parameters</param>
            <param name="vertices">The vertices of the quad</param>
            <returns>True if the quad intersects the selection area</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.ThroughTriangleScreenPolygonQuad(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Eyeshot.ScreenPolygonParams)">
            <summary>
            Tells if the quad defined by the vertices is inside the selection area defined by the screen polygon.
            </summary>
            <param name="vertices">The vertices of the quad</param>
            <param name="data">The screen polygon parameters</param>
            <returns>True if the quad intersects the screen polygon</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.ThroughTriangleScreenPolygon(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Eyeshot.ScreenPolygonParams)">
            <summary>
            Checks whether a triangle intersects or is inside a 2D screen polygon.
            </summary>
            <param name="v1">The first triangle point</param>
            <param name="v2">The second triangle point</param>
            <param name="v3">The third triangle point</param>
            <param name="screenPolygon">The 2D screen polygon</param>
            <param name="modelViewProj">The modelview projection matrix</param>
            <param name="viewFrame">The viewport bounds</param>
            <param name="blocks">The blocks dictionary</param>
            <returns>True if the triangle intersects or is inside the polygon</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.IntersectEdgeOrIsoline(devDept.Eyeshot.FrustumParams,System.Double[])">
            <summary>
            Checks if a segment crosses one of the entity isocurves.
            </summary>
            <returns>True if the segment crosses one of the entity isocurves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.IntersectEdgeOrIsoline(devDept.Eyeshot.FrustumParams)">
            <summary>
            Checks if a frustum crosses one of the entity isocurves.
            </summary>
            <returns>True if the frustum crosses one of the entity isocurves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.IntersectEdgeOrIsolineScreenPolygon(devDept.Eyeshot.ScreenPolygonParams)">
            <summary>
            Checks if a screen polygon crosses one of the entity isocurves. 
            </summary>
            <param name="data">Screen polygon data</param>
            <returns>True if the screen polygon crosses one of the entity isocurves</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Translates the entity.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="dx">Amount in X</param>
            <param name="dy">Amount in Y</param>
            <param name="dz">Amount in Z</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Translate(devDept.Geometry.Vector3D)">
            <summary>
            Translates the entity.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="v">Displacement vector</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Rotate(System.Double,devDept.Geometry.Vector3D)">
            <summary>
            Rotates the entity around an arbitray axis by the specified angle.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="angleInRadians">The angle in radians</param>
            <param name="axis">The rotation axis</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Rotate(System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
            <summary>
            Rotates the entity around an arbitray axis by the specified angle.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="angleInRadians">The angle in radians</param>
            <param name="axis">The rotation axis' direction</param>
            <param name="center">The rotation axis' origin</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Rotate(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Rotates the entity around an arbitray axis by the specified angle.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="angleInRadians">The angle in radians</param>
            <param name="axisStart">The rotation axis' start point</param>
            <param name="axisEnd">The rotation axis' end point</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Scale(devDept.Geometry.Point3D,System.Double)">
            <summary>
            Scales the entity of the specified scale factor.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="fixedPoint">Base point</param>
            <param name="factor">Scale factor</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Scale(devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
            <summary>
            Scales the entity of the specified scale factor.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="fixedPoint">Base point</param>
            <param name="sx">Scale factor along X-axis</param>
            <param name="sy">Scale factor along Y-axis</param>
            <param name="sz">Scale factor along Z-axis</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scales the entity of the specified scale factor.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="sx">Scale factor along X-axis</param>
            <param name="sy">Scale factor along Y-axis</param>
            <param name="sz">Scale factor along Z-axis</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Scale(devDept.Geometry.Vector3D)">
            <summary>
            Scales the entity of the specified scale factor.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="sv">Scale vector</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.AddIgesEntities(System.Collections.Generic.IList{devDept.Eyeshot.Iges.Entity},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.Int32@)">
            <summary>
            Add the entity and its children to IGES master array.
            </summary>
            <param name="igesEntities">IGES master array</param>
            <param name="blocks">Blocks dictionary</param>
            <param name="index">Current entity index</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.WriteBinaryStl(System.Double,System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block})">
            <summary>
            Write this entity in Binary STL format.
            </summary>
            <param name="tol"> </param>
            <param name="blocks"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawDirection(devDept.Eyeshot.DrawDirectionParams)">
            <summary>
            Draws a small arrow to show the entity direction if <see cref="M:devDept.Eyeshot.ViewportLayout.DrawCurveDirection(devDept.Eyeshot.ViewportLayout.DrawEntitiesParams{devDept.Eyeshot.ViewportLayout.GfxAttributes,devDept.Eyeshot.DrawDirectionParams})"/> is true.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Dump">
            <summary>
            Returns a description of this entity.
            </summary>
            <returns>A multiline string.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.WriteAsciiTriangle(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Vector3D,System.IO.TextWriter)">
            <summary>
            Writes a ASCII STL triangle to the provided text writer.
            </summary>
            <param name="v1">First triangle's vertex</param>
            <param name="v2">Second triangle's vertex</param>
            <param name="v3">Third triangle's vertex</param>
            <param name="n">Triangle's normal</param>
            <param name="tw">Text writer</param>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Entity.isSmall">
            <summary>
            Tells if the entity is less than the smallSize for each viewport.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.SetShader(devDept.Eyeshot.DrawParams)">
            <summary>
            Sets a Shader before drawing the entity.
            </summary>
            <param name="data">data for entity drawing</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.GetOffsetDistance(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Double)">
            <summary>
            Computes the offset distance for the extrude with draft angle methods.
            </summary>
            <param name="extDir">The extrusion direction (normalized)</param>
            <param name="amount">Extrude direction</param>
            <param name="draftAngleInRadians">Draft angle</param>
            <returns>The signed offset distance.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.IsCrossing(devDept.Eyeshot.FrustumParams)">
            <summary>
            Tells if the entity is inside or crossing the given planes and edges.
            </summary>
            <returns>True if the entity is selected</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.PropagateAttributes(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity,System.Boolean)">
            <summary>
            Propagates the attributes to the entity passed as paramter.
            </summary>
            <param name="srcEntity">Source entity</param>
            <param name="destEntity">Destination entity</param>
            <param name="force">If false, propagates the attributes only if the attributes are ByParent</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawOnScreenWireframe(devDept.Eyeshot.DrawOnScreenWireframeParams)">
            <summary>
            Draws extra things on screen, like the vertex Numbers (if <see cref="P:devDept.Eyeshot.Viewport.ShowVertexIndices"/> is true) in wireframe display mode.
            </summary>
            <param name="myParams"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawOnScreenWireframe(devDept.Eyeshot.DrawOnScreenWireframeParams,System.Int32)">
            <summary>
            Draws extra things on screen, like the vertex Numbers (if <see cref="P:devDept.Eyeshot.Viewport.ShowVertexIndices"/> is true) in wireframe dispaly mode.
            </summary>
            <param name="myParams"></param>
            <param name="vertexCount">The number of vertices</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawOnScreen(devDept.Eyeshot.DrawOnScreenParams)">
            <summary>
            Draws extra things on screen, like the vertex indices (if <see cref="P:devDept.Eyeshot.Viewport.ShowVertexIndices"/> is true).
            </summary>
            <param name="drawOnScreenParams"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawOnScreen(devDept.Eyeshot.DrawOnScreenParams,System.Int32)">
            <summary>
            Draws extra things on screen, like the vertex indices (if <see cref="P:devDept.Eyeshot.Viewport.ShowVertexIndices"/> is true).
            </summary>
            <param name="camera">The viewport camera</param>
            <param name="values">The depth values</param>
            <param name="stride">The stride for each row of values</param>
            <param name="viewFrame">The viewport borders</param>
            <param name="digitTextures">The textures of the 0..9 digits</param>
            <param name="leftBorder">The viewport left border minus the vertex size</param>
            <param name="rightBorder">The viewport right border minus the vertex size</param>
            <param name="bottomBorder">The viewport bottom border minus the vertex size</param>
            <param name="topBorder">The viewport top border minus the vertex size</param>
            <param name="vertexCount">The number of vertices</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Draw(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws the entity.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.CompileWire(devDept.Eyeshot.CompileParams)">
            <summary>
            Compiles the graphics representation of wireframe entities.
            </summary>
            <param name="data"></param>
            <seealso cref="M:devDept.Eyeshot.Entities.Entity.DrawWireEntity(devDept.Graphics.RenderContextBase,System.Object)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawEntity(devDept.Graphics.RenderContextBase,System.Object)">
            <summary>
            Internal method that draws the entity.
            </summary>
            <param name="context">The render context</param>
            <param name="myParams">The parameters</param>
            <remarks>This method may be used both for compiling the Entity (OpenGL and Direct3D) and to draw the Entity (in Direct3D only, for some complex entities like <see cref="T:devDept.Eyeshot.Entities.Dimension"/>) </remarks>
            <remarks>Override it to customize the entity compilation.</remarks>
            <seealso cref="M:devDept.Eyeshot.Entities.Entity.Compile(devDept.Eyeshot.CompileParams)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawWireEntity(devDept.Graphics.RenderContextBase,System.Object)">
            <summary>
            Draws the Wireframe entity.
            </summary>
            <param name="context"></param>
            <param name="myParams"></param>
            <remarks>Used to compile the wireframe entities. Override this to customize the wireframe entities drawing.</remarks>
            <seealso cref="M:devDept.Eyeshot.Entities.Entity.CompileWire(devDept.Eyeshot.CompileParams)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawWire(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws a wireframe entity, resolving the <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypePattern"/> for <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod"/> <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent"/>.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawFast(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws the entity in fast inaccurate transparency mode.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawFlatFast(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws the entity in flat and fast inaccurate transparency mode.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.GetPatternVertices(devDept.Graphics.GfxEnvironmentParams,devDept.Geometry.Point3D[],System.Collections.Generic.List{devDept.Geometry.Point3D}@,System.Collections.Generic.List{devDept.Geometry.Point3D}@)">
            <summary>
            Computes the pattern from the given vertices and returns the lines and points that represent it.
            </summary>
            <param name="data">The data containing the pattern information</param>
            <param name="vertices">The list of segments on which to compute the pattern</param>
            <param name="lines">The computed points representing the lines of the pattern</param>
            <param name="points">The computed points representing the dots of the pattern</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawSelected(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws entity selected.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawFlatSelected(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws entity selected in <see cref="F:devDept.Eyeshot.displayType.Flat"/> <see cref="P:devDept.Eyeshot.ViewportLayout.DisplayMode"/>.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawWireframeSelected(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws entity as selected wires.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.Render(devDept.Eyeshot.RenderParams)">
            <summary>
            Renders the entity.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.RenderFast(devDept.Eyeshot.RenderParams)">
            <summary>
            Renders the entity in fast inaccurate transparency mode.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawForShadow(devDept.Eyeshot.RenderParams)">
            <summary>
            Draws the entity's shadow.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawFlat(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws entity in <see cref="F:devDept.Eyeshot.displayType.Flat"/> <see cref="P:devDept.Eyeshot.ViewportLayout.DisplayMode"/>.
            </summary>
            <param name="data">Draw parameters</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawWireframe(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws entity as wires.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawIsocurves(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws the entity iso curves. For Mesh entities this method draws internal wires.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawForSelection(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws the entity without specifing any color.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawForSelectionWireframe(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws entity as wires without specifing any color.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawEdges(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws the entity's edges.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.GetNormalLength">
            <summary>
            Gets the entity normal length.
            </summary>
            <returns>The normal length</returns>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.ShowNormals"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawNormals(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws entity's normal vectors.
            </summary>
            <param name="data">The draw data</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawVertices(devDept.Eyeshot.DrawParams)">
            <summary>
            Draws entity's vertices.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawHiddenLines(devDept.Eyeshot.DrawParams)">
            <summary>
            Draw the entity in the <see cref="F:devDept.Eyeshot.displayType.HiddenLines"/> display mode.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawHiddenLinesFast(devDept.Eyeshot.DrawParams)">
            <summary>
            Draw the entity in the <see cref="F:devDept.Eyeshot.displayType.HiddenLines"/> display mode in fast inaccurate transparency mode.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Entity.DrawSilhouettes(devDept.Eyeshot.DrawSilhouettesParams)">
            <summary>
            Draws Silhouettes.
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.nature">
            <summary>
            Get or sets the nature of the entity.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.LayerIndex">
            <summary>
            Gets or sets the entity layer index.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.GroupIndex">
            <summary>
            Gets or sets the entity group index.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.LineTypePattern">
            <summary>
            Gets or sets the line type pattern. In use only if the <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod"/> is byEntity.
            The pattern defines pen-up lengths (spaces), pen-down lengths (dashes), and dots. 
            A pattern specifies the length of segments that make up the linetype. A positive 
            decimal number specifies a pen-down (dash) segment of that length. A negative decimal
            number specifies a pen-up (space) segment of that length. Zero specifies a dot. For 
            example, the DASHDOT linetype is defined by a repeating pattern starting with a dash
            0.5 drawing units long, a space 0.25 drawing units long, a dot, and another space 0.25
            drawing units long.</summary>
            <remarks>
            When the line type pattern of an entity already added to the <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/> is changed, 
            the <see cref="P:devDept.Eyeshot.Entities.Entity.RegenMode"/> must be set to <see cref="F:devDept.Eyeshot.Entities.regenType.CompileOnly"/> and the <see cref="M:devDept.Eyeshot.EntityList.Regen"/> must be called.
            </remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.LineTypePatternLength">
            <summary>
            Gets the length of the line type pattern.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod">
            <summary>
            Gets or sets the entity line type source.
            </summary>
            <remarks>You may need to call <see cref="M:devDept.Eyeshot.EntityList.Regen"/> to see your changes.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.Color">
            <summary>
            Gets or sets the entity color.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod"/>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.DisplayMode"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.ColorMethod">
            <summary>
            Gets or sets the entity color source.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod"/>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.DisplayMode"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.MaterialName">
            <summary>
            Gets or sets the entity material name.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod"/>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.DisplayMode"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.LineWeightMethod">
            <summary>
            Gets or sets the entity line weight source.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.LineWeight">
            <summary>
            Gets or sets the entity line weight.
            </summary>
            <remarks>This value corresponds to pixels when drawing on screen and to mm when exporting to vectorial formats.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.Visible">
            <summary>
            Gets or sets the entity visibility status.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.EntityData">
            <summary>
            Gets or sets the entity custom data. If the type implements IClonable it will be cloned when the Entity is cloned.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.XData">
            <summary>
            Gets or sets the XData value list.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.Selected">
            <summary>
            Gets or sets the entity selected status.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.Selectable">
            <summary>
            Gets or sets the selectable flag.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.RegenMode">
            <summary>
            Gets or sets the entity regeneration mode.
            </summary>
            <seealso cref="M:devDept.Eyeshot.EntityList.Regen"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.Vertices">
            <summary>
            Gets or sets entity's 3D vertices.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.BoxMin">
            <summary>
            Gets the minimum 3D extent of the entity.
            </summary>
            <seealso cref="M:devDept.Eyeshot.Entities.Entity.UpdateBoundingBox(devDept.Eyeshot.TraversalParams)"/>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMax"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.BoxMax">
            <summary>
            Gets the maximum 3D extent of the entity.
            </summary>
            <seealso cref="M:devDept.Eyeshot.Entities.Entity.UpdateBoundingBox(devDept.Eyeshot.TraversalParams)"/>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMin"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.BoxSize">
            <summary>
            Gets the 3D extent of the entity.
            </summary>
            <seealso cref="M:devDept.Eyeshot.Entities.Entity.UpdateBoundingBox(devDept.Eyeshot.TraversalParams)"/>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMin"/>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMax"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Entity.Compiling">
            <summary>
            Tells if the entity is being compiled.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.IFace">
            <summary>
            Common properties of face entities.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.IFace.FlipNormal">
            <summary>
            Flips face normals.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.IFace.GetPolygonMeshes">
            <summary>
            Gets a number of meshes representing this object.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.IFace.FindClosestTriangle(devDept.Geometry.Transformation,devDept.Geometry.Segment3D)">
            <summary>
            Returns a list of triangles hit by the provided segment.
            </summary>
            <param name="transf">The transformation applied to the entity (necessary if the entity is inside a Block to propagate the BlockReference transformation)</param>
            <param name="seg">The 3D segment representing the viewing direction</param>
            <returns>The sorted list of triangles intersecting the provided segment.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.IFace.Section(devDept.Geometry.Plane,System.Double)">
            <summary>
             Computes the contours resulting from the intersection of the face and the given plane.
            </summary>
            <param name="pln">The plane</param>
            <param name="tol">The tolerance</param>
            <returns>An array of curves representing each section contour.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateBox(System.Double,System.Double,System.Double)">
            <summary>Creates a Box primitive.</summary>
            <param name="width">Box's width</param>
            <param name="depth">Box's depth</param>
            <param name="height">Box's height</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateBox``1(System.Double,System.Double,System.Double)">
            <summary>Creates a Box primitive.</summary>
            <param name="width">Box's width</param>
            <param name="depth">Box's depth</param>
            <param name="height">Box's height</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateBox(System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a Box primitive.</summary>v
            <param name="width">Box's width</param>
            <param name="depth">Box's depth</param>
            <param name="height">Box's height</param>
            <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateBox``1(System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a Box primitive.</summary>v
            <param name="width">Box's width</param>
            <param name="depth">Box's depth</param>
            <param name="height">Box's height</param>
            <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateBox(System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>Creates a Box primitive.</summary>
            <param name="width">Box's width</param>
            <param name="depth">Box's depth</param>
            <param name="height">Box's height</param>
            <param name="meshNature">Nature of the mesh</param>
            <param name="edgeStyle">Style of the edges</param>
            <exception cref="T:System.Exception"></exception>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateBox``1(System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>Creates a Box primitive.</summary>
            <param name="width">Box's width</param>
            <param name="depth">Box's depth</param>
            <param name="height">Box's height</param>
            <param name="meshNature">Nature of the mesh</param>
            <param name="edgeStyle">Style of the edges</param>
            <exception cref="T:System.Exception"></exception>
             <returns>The resulting Mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.MakeBox(System.Double,System.Double,System.Double)">
             <summary>
            <summary>Creates a Box primitive.</summary>
             </summary>
             <param name="width">Box's width</param>
             <param name="depth">Box's depth</param>
             <param name="height">Box's height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone(System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="topRadius">Cone's top radius</param>
             <param name="height">The cone's height</param>
             <param name="slices">Number of faces of the cylinder approximation</param>
             /// <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone``1(System.Double,System.Double,System.Double,System.Int32)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="topRadius">Cone's top radius</param>
             <param name="height">The cone's height</param>
             <param name="slices">Number of faces of the cylinder approximation</param>
             /// <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone(System.Double,System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="topRadius">Cone's top radius</param>
             <param name="height">The cone's height</param>
             <param name="slices">Number of faces of the cylinder approximation</param>
            <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone``1(System.Double,System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="topRadius">Cone's top radius</param>
             <param name="height">The cone's height</param>
             <param name="slices">Number of faces of the cylinder approximation</param>
            <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone(System.Double,System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="topRadius">Cone's top radius</param>
             <param name="height">The cone's height</param>
             <param name="slices">Number of faces of the cylinder approximation</param>
            <param name="meshNature">Nature of the mesh</param>
            <param name="edgeStyle">Style of the edges</param>
            <exception cref="T:System.Exception"></exception>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone``1(System.Double,System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="topRadius">Cone's top radius</param>
             <param name="height">The cone's height</param>
             <param name="slices">Number of faces of the cylinder approximation</param>
            <param name="meshNature">Nature of the mesh</param>
            <param name="edgeStyle">Style of the edges</param>
            <exception cref="T:System.Exception"></exception>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="topRadius">Cone's top radius</param>
             <param name="point1">Cone''s first point</param>
             <param name="point2">Cone''s second point</param>
             <param name="slices">Number of faces of the cylinder approximation</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone``1(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="topRadius">Cone's top radius</param>
             <param name="point1">Cone''s first point</param>
             <param name="point2">Cone''s second point</param>
             <param name="slices">Number of faces of the cylinder approximation</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="topRadius">Cone's top radius</param>
             <param name="point1">Cone''s first point</param>
             <param name="point2">Cone''s second point</param>
             <param name="slices">Number of faces of the cylinder approximation</param>
             <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone``1(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="topRadius">Cone's top radius</param>
             <param name="point1">Cone''s first point</param>
             <param name="point2">Cone''s second point</param>
             <param name="slices">Number of faces of the cylinder approximation</param>
             <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="topRadius">Cone's top radius</param>
             <param name="point1">Cone''s first point</param>
             <param name="point2">Cone''s second point</param> 
             <param name="slices">Number of faces of the cylinder approximation</param>
             <param name="meshNature">Nature of the mesh</param>
             <param name="edgeStyle">Style of the edges</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone``1(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="topRadius">Cone's top radius</param>
             <param name="point1">Cone''s first point</param>
             <param name="point2">Cone''s second point</param> 
             <param name="slices">Number of faces of the cylinder approximation</param>
             <param name="meshNature">Nature of the mesh</param>
             <param name="edgeStyle">Style of the edges</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Triangulates the specified 2D region.</summary>
            <param name="sketchPlane">Plane on which the points lay</param>
            <param name="outer">Outer contour of the region oriented counter-clockwise</param>
            <param name="meshNature">Nature of the Mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar``1(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Triangulates the specified 2D region.</summary>
            <param name="sketchPlane">Plane on which the points lay</param>
            <param name="outer">Outer contour of the region oriented counter-clockwise</param>
            <param name="meshNature">Nature of the Mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point2D}},devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Triangulates the specified 2D region.</summary>
            <param name="sketchPlane">Plane on which the points lay</param>
            <param name="outer">Outer contour of the region oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="meshNature">Nature of the Mesh</param>
            <returns>The created mesh.</returns>
            <exception cref="T:devDept.Eyeshot.EyeshotException">Countours must be closed</exception>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar``1(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point2D}},devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Triangulates the specified 2D region.</summary>
            <param name="sketchPlane">Plane on which the points lay</param>
            <param name="outer">Outer contour of the region oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="meshNature">Nature of the Mesh</param>
            <returns>The created mesh.</returns>
            <exception cref="T:devDept.Eyeshot.EyeshotException">Countours must be closed</exception>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Triangulates the specified 3D region.</summary>
             <example>
            The following example demonstrate how to draw a face on the ZX plane.
            <code lang="CS" title="C#">
            List&lt;Point3D&gt; outer = new List&lt;Point3D&gt;();
            
            outer.Add(new Point3D(0, 0, 0));
            outer.Add(new Point3D(10, 0, 0));
            outer.Add(new Point3D(20, 0, -5));
            outer.Add(new Point3D(10, 0, 20));
            outer.Add(new Point3D(0, 0, 20));
            outer.Add(new Point3D(-10, 0, -5));
            outer.Add(new Point3D(0, 0, 0));
            Mesh m = Mesh.CreatePlanar(outer, Mesh.natureType.Plain);
            m.Color = Color.Firebrick;
            m.ColorMethod = colorMethodType.byEntity;
            
            viewportProfessional1.Entities.Add(m);
            </code>
            <code lang="VB" title="Visual Basic">
            Dim outer As List(of Point3D) = New List(of Point3D);
            
            outer.Add(New Point3D(0, 0, 0))
            outer.Add(New Point3D(10, 0, 0))
            outer.Add(New Point3D(20, 0, -5))
            outer.Add(New Point3D(10, 0, 20))
            outer.Add(New Point3D(0, 0, 20))
            outer.Add(New Point3D(-10, 0, -5))
            outer.Add(New Point3D(0, 0, 0))
            
            Dim m As Mesh = Mesh.CreatePlanar(outer, Mesh.natureType.Plain)
            m.Color = Color.Firebrick
            m.ColorMethod = colorMethodType.byEntity
            
            viewportProfessional1.Entities.Add(m)
            </code>
            </example>
            <param name="outer">Outer contour of the region oriented counter-clockwise</param>
            <param name="meshNature">Nature of the Mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar``1(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Triangulates the specified 3D region.</summary>
             <example>
            The following example demonstrate how to draw a face on the ZX plane.
            <code lang="CS" title="C#">
            List&lt;Point3D&gt; outer = new List&lt;Point3D&gt;();
            
            outer.Add(new Point3D(0, 0, 0));
            outer.Add(new Point3D(10, 0, 0));
            outer.Add(new Point3D(20, 0, -5));
            outer.Add(new Point3D(10, 0, 20));
            outer.Add(new Point3D(0, 0, 20));
            outer.Add(new Point3D(-10, 0, -5));
            outer.Add(new Point3D(0, 0, 0));
            Mesh m = Mesh.CreatePlanar(outer, Mesh.natureType.Plain);
            m.Color = Color.Firebrick;
            m.ColorMethod = colorMethodType.byEntity;
            
            viewportProfessional1.Entities.Add(m);
            </code>
            <code lang="VB" title="Visual Basic">
            Dim outer As List(of Point3D) = New List(of Point3D);
            
            outer.Add(New Point3D(0, 0, 0))
            outer.Add(New Point3D(10, 0, 0))
            outer.Add(New Point3D(20, 0, -5))
            outer.Add(New Point3D(10, 0, 20))
            outer.Add(New Point3D(0, 0, 20))
            outer.Add(New Point3D(-10, 0, -5))
            outer.Add(New Point3D(0, 0, 0))
            
            Dim m As Mesh = Mesh.CreatePlanar(outer, Mesh.natureType.Plain)
            m.Color = Color.Firebrick
            m.ColorMethod = colorMethodType.byEntity
            
            viewportProfessional1.Entities.Add(m)
            </code>
            </example>
            <param name="outer">Outer contour of the region oriented counter-clockwise</param>
            <param name="meshNature">Nature of the Mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}},devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Triangulates the specified 3D region.</summary>
            <param name="outer">Outer contour of the region oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="meshNature">Nature of the Mesh</param>
            <returns>The created mesh.</returns>
            <exception cref="T:devDept.Eyeshot.EyeshotException">Countours must be closed</exception>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar``1(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}},devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Triangulates the specified 3D region.</summary>
            <param name="outer">Outer contour of the region oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="meshNature">Nature of the Mesh</param>
            <returns>The created mesh.</returns>
            <exception cref="T:devDept.Eyeshot.EyeshotException">Countours must be closed</exception>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Triangulates the specified 3D region.</summary>
            <param name="outer">Outer contour of the region oriented counter-clockwise</param>
            <param name="chordalErr">The chordal error</param>
            <param name="meshNature">Nature of the Mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar``1(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Triangulates the specified 3D region.</summary>
            <param name="outer">Outer contour of the region oriented counter-clockwise</param>
            <param name="chordalErr">The chordal error</param>
            <param name="meshNature">Nature of the Mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Triangulates the specified 3D region.</summary>
            <param name="outer">Outer contour of the region oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="chordalErr">The chordal error</param>
            <param name="meshNature">Nature of the Mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar``1(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Triangulates the specified 3D region.</summary>
            <param name="outer">Outer contour of the region oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="chordalErr">The chordal error</param>
            <param name="meshNature">Nature of the Mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder(System.Double,System.Double,System.Int32)">
            <summary>
            Creates a Cylinder primitive.
            </summary>
            <param name="radius">Cylinder's radius</param>
            <param name="height">Cylinder's height</param>
            <param name="slices">Number of faces of the cylinder approximation</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder``1(System.Double,System.Double,System.Int32)">
            <summary>
            Creates a Cylinder primitive.
            </summary>
            <param name="radius">Cylinder's radius</param>
            <param name="height">Cylinder's height</param>
            <param name="slices">Number of faces of the cylinder approximation</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder(System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
             <summary>
             Creates a Cylinder primitive.
             </summary>
             <param name="radius">Cylinder's radius</param>
             <param name="height">Cylinder's height</param>
             <param name="slices">Number of faces of the cylinder approximation</param>
            <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder``1(System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
             <summary>
             Creates a Cylinder primitive.
             </summary>
             <param name="radius">Cylinder's radius</param>
             <param name="height">Cylinder's height</param>
             <param name="slices">Number of faces of the cylinder approximation</param>
            <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder(System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
             <summary>
             Creates a Cylinder primitive.
             </summary>
             <param name="radius">Cylinder's radius</param>
             <param name="height">Cylinder's height</param>
            <param name="meshNature">Nature of the mesh</param>
            <param name="edgeStyle">Style of the edges</param>
            <exception cref="T:System.Exception"></exception>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder``1(System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
             <summary>
             Creates a Cylinder primitive.
             </summary>
             <param name="radius">Cylinder's radius</param>
             <param name="height">Cylinder's height</param>
            <param name="meshNature">Nature of the mesh</param>
            <param name="edgeStyle">Style of the edges</param>
            <exception cref="T:System.Exception"></exception>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32)">
            <summary>Creates a Cylinder primitive.
            </summary>
            <param name="radius">Cylinder's radius</param>
            <param name="point1">Cylinder's first point</param>
            <param name="point2">Cylinder's second point</param>
            <param name="slices">Number of faces of the cylinder approximation</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder``1(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32)">
            <summary>Creates a Cylinder primitive.
            </summary>
            <param name="radius">Cylinder's radius</param>
            <param name="point1">Cylinder's first point</param>
            <param name="point2">Cylinder's second point</param>
            <param name="slices">Number of faces of the cylinder approximation</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a Cylinder primitive.
            </summary>
            <param name="radius">Cylinder's radius</param>
            <param name="point1">Cylinder's first point</param>
            <param name="point2">Cylinder's second point</param>
            <param name="slices">Number of faces of the cylinder approximation</param>
            <param name="meshNature">Nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder``1(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a Cylinder primitive.
            </summary>
            <param name="radius">Cylinder's radius</param>
            <param name="point1">Cylinder's first point</param>
            <param name="point2">Cylinder's second point</param>
            <param name="slices">Number of faces of the cylinder approximation</param>
            <param name="meshNature">Nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>Creates a Cylinder primitive.
            </summary>
            <param name="radius">Cylinder's radius</param>
            <param name="point1">Cylinder's first point</param>
            <param name="point2">Cylinder's second point</param>
            <param name="slices">Number of faces of the cylinder approximation</param>
            <param name="meshNature">Nature of the mesh</param>
            <param name="edgeStyle">Style of the edges</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder``1(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>Creates a Cylinder primitive.
            </summary>
            <param name="radius">Cylinder's radius</param>
            <param name="point1">Cylinder's first point</param>
            <param name="point2">Cylinder's second point</param>
            <param name="slices">Number of faces of the cylinder approximation</param>
            <param name="meshNature">Nature of the mesh</param>
            <param name="edgeStyle">Style of the edges</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Double,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Creates a Mesh extruding a contour on a sketch plane by the given amount.
            </summary>
            <param name="sketchPlane">Extrusion sketch plane</param>
            <param name="outer">Contour to extrude oriented counter-clockwise</param>
            <param name="amount">Extrusion length along the plane normal</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude``1(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Double,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Creates a Mesh extruding a contour on a sketch plane by the given amount.
            </summary>
            <param name="sketchPlane">Extrusion sketch plane</param>
            <param name="outer">Contour to extrude oriented counter-clockwise</param>
            <param name="amount">Extrusion length along the plane normal</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point2D}},System.Double,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Creates a Mesh extruding a contour on a sketch plane by the given amount.
            </summary>
            <param name="sketchPlane">Extrusion sketch plane</param>
            <param name="outer">Contour to extrude oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="amount">Extrusion amount along the plane normal</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            ///
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude``1(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point2D}},System.Double,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Creates a Mesh extruding a contour on a sketch plane by the given amount.
            </summary>
            <param name="sketchPlane">Extrusion sketch plane</param>
            <param name="outer">Contour to extrude oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="amount">Extrusion amount along the plane normal</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            ///
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Geometry.Vector3D,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Creates a Mesh extruding a contour by a given vector.
            </summary>
            <param name="outer">Contour to extrude oriented counter-clockwise</param>
            <param name="amount">Extrusion vector</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude``1(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Geometry.Vector3D,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Creates a Mesh extruding a contour by a given vector.
            </summary>
            <param name="outer">Contour to extrude oriented counter-clockwise</param>
            <param name="amount">Extrusion vector</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}},devDept.Geometry.Vector3D,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Creates a Mesh extruding a contour by a given vector.
            </summary>
            <param name="outer">Contour to extrude oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="amount">Extrusion vector</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude``1(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}},devDept.Geometry.Vector3D,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Creates a Mesh extruding a contour by a given vector.
            </summary>
            <param name="outer">Contour to extrude oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="amount">Extrusion vector</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Vector3D,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Creates a Mesh extruding a contour by a given vector.
            </summary>
            <param name="outer">Contour to extrude oriented counter-clockwise</param>
            <param name="chordalErr">Some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="amount">Extrusion vector</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude``1(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Vector3D,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Creates a Mesh extruding a contour by a given vector.
            </summary>
            <param name="outer">Contour to extrude oriented counter-clockwise</param>
            <param name="chordalErr">Some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="amount">Extrusion vector</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,devDept.Geometry.Vector3D,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Creates a Mesh extruding a contour by a given vector.
            </summary>
            <param name="outer">Contour to extrude oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="chordalErr">Some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="amount">Extrusion vector</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude``1(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,devDept.Geometry.Vector3D,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Creates a Mesh extruding a contour by a given vector.
            </summary>
            <param name="outer">Contour to extrude oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="chordalErr">Some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="amount">Extrusion vector</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude(devDept.Geometry.Vector3D)">
            <summary>
            Extrudes a quasi-planar mesh.
            </summary>
            <param name="amount">Extrusion amount</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Extrude(System.Double,System.Double,System.Double)">
            <summary>
            Extrudes a quasi-planar mesh.
            </summary>
            <param name="dx">Extrusion amount along the X axis</param>
            <param name="dy">Extrusion amount along the Y axis</param>
            <param name="dz">Extrusion amount along the Z axis</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Revolve(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Revolves a contour around an axis.</summary>
            <param name="sketchPlane">Sketch plane</param>
            <param name="outer">Contour to revolve oriented counter clock-wise</param>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Axis direction</param>
            <param name="center">Axis start point</param>
            <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double)"/></param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">The nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Revolve``1(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Revolves a contour around an axis.</summary>
            <param name="sketchPlane">Sketch plane</param>
            <param name="outer">Contour to revolve oriented counter clock-wise</param>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Axis direction</param>
            <param name="center">Axis start point</param>
            <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double)"/></param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">The nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Revolve(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point2D}},System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Revolves a contour around an axis.</summary>
            <param name="sketchPlane">Sketch plane</param>
            <param name="outer">Contour to revolve oriented counter clock-wise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Axis direction</param>
            <param name="center">Axis start point</param>
            <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double)"/></param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">The nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Revolve``1(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point2D}},System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Revolves a contour around an axis.</summary>
            <param name="sketchPlane">Sketch plane</param>
            <param name="outer">Contour to revolve oriented counter clock-wise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Axis direction</param>
            <param name="center">Axis start point</param>
            <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double)"/></param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">The nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Revolve(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Revolves a contour around an axis.</summary>
            <param name="outer">Contour to revolve oriented counter clock-wise</param>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Axis direction</param>
            <param name="center">Axis start point</param>
            <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double)"/></param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">The nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Revolve``1(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Revolves a contour around an axis.</summary>
            <param name="outer">Contour to revolve oriented counter clock-wise</param>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Axis direction</param>
            <param name="center">Axis start point</param>
            <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double)"/></param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">The nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Revolve(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}},System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Revolves a contour around an axis.</summary>
            <param name="outer">Contour to revolve oriented counter clock-wise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Axis direction</param>
            <param name="center">Axis start point</param>
            <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double)"/></param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">The nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Revolve``1(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}},System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Revolves a contour around an axis.</summary>
            <param name="outer">Contour to revolve oriented counter clock-wise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Axis direction</param>
            <param name="center">Axis start point</param>
            <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double)"/></param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">The nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Revolve(devDept.Eyeshot.Entities.ICurve,System.Double,System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Revolves a contour around an axis.</summary>
            <param name="outer">Contour to revolve oriented counter clock-wise</param>
            <param name="chordalErr">Some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Axis direction</param>
            <param name="center">Axis start point</param>
            <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double)"/></param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">The nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Revolve``1(devDept.Eyeshot.Entities.ICurve,System.Double,System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Revolves a contour around an axis.</summary>
            <param name="outer">Contour to revolve oriented counter clock-wise</param>
            <param name="chordalErr">Some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Axis direction</param>
            <param name="center">Axis start point</param>
            <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double)"/></param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">The nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Revolve(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Revolves a contour around an axis.</summary>
            <param name="outer">Contour to revolve oriented counter clock-wise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="chordalErr">Some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Axis direction</param>
            <param name="center">Axis start point</param>
            <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double)"/></param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">The nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Revolve``1(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Revolves a contour around an axis.</summary>
            <param name="outer">Contour to revolve oriented counter clock-wise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="chordalErr">Some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Axis direction</param>
            <param name="center">Axis start point</param>
            <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double)"/></param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">The nature of the mesh</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSphere(System.Double,System.Int32,System.Int32)">
            <summary>
            Creates a Sphere primitive.
            </summary>
            <param name="radius">Sphere's radius</param>
            <param name="slices">Number of slices</param>
            <param name="stacks">Numer of stacks</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSphere(System.Double,System.Int32,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
             <summary>
             Creates a Sphere primitive.
             </summary>
             <param name="radius">Sphere's radius</param>
             <param name="slices">Number of slices</param>
             <param name="stacks">Numer of stacks</param>
            <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSphere``1(System.Double,System.Int32,System.Int32)">
            <summary>
            Creates a Sphere primitive.
            </summary>
            <param name="radius">Sphere's radius</param>
            <param name="slices">Number of slices</param>
            <param name="stacks">Numer of stacks</param>
            <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSphere``1(System.Double,System.Int32,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
             <summary>
             Creates a Sphere primitive.
             </summary>
             <param name="radius">Sphere's radius</param>
             <param name="slices">Number of slices</param>
             <param name="stacks">Numer of stacks</param>
            <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Sweep(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a mesh sweeping a contour on a rail.</summary>
            <param name="rail">Sweep rail</param>
            <param name="outer">Contour to sweep  oriented counter-clockwise</param>
            <param name="tol">Some entities need to be regenerated, this is the regeneration tolerance (chordal error)</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The resulting Mesh if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Sweep``1(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a mesh sweeping a contour on a rail.</summary>
            <param name="rail">Sweep rail</param>
            <param name="outer">Contour to sweep  oriented counter-clockwise</param>
            <param name="tol">Some entities need to be regenerated, this is the regeneration tolerance (chordal error)</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The resulting Mesh if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Sweep(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a mesh sweeping multiple contours on a rail.</summary>
            <param name="rail">Sweep rail</param>
            <param name="outer">Contour to sweep  oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="chordalErr">Some entities need to be regenerated, this is the regeneration tolerance (chordal error)</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The resulting Mesh if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Sweep``1(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a mesh sweeping multiple contours on a rail.</summary>
            <param name="rail">Sweep rail</param>
            <param name="outer">Contour to sweep  oriented counter-clockwise</param>
            <param name="inners">The inner contour list oriented clockwise</param>
            <param name="chordalErr">Some entities need to be regenerated, this is the regeneration tolerance (chordal error)</param>
            <param name="closed">Closing Caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The resulting Mesh if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateTorus(System.Double,System.Double,System.Int32,System.Int32)">
             <summary>
             Creates a Torus primitive.
             </summary>
            <param name="majorRadius">Torus radius</param>
            <param name="minorRadius">Torus section radius</param>
            <param name="sides">Number of sides</param>
            <param name="rings">Number of rings</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateTorus``1(System.Double,System.Double,System.Int32,System.Int32)">
             <summary>
             Creates a Torus primitive.
             </summary>
            <param name="majorRadius">Torus radius</param>
            <param name="minorRadius">Torus section radius</param>
            <param name="sides">Number of sides</param>
            <param name="rings">Number of rings</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateTorus(System.Double,System.Double,System.Int32,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
             <summary>
             Creates a Torus primitive.
             </summary>
            <param name="majorRadius">Torus radius</param>
            <param name="minorRadius">Torus section radius</param>
            <param name="sides">Number of sides</param>
            <param name="rings">Number of rings</param>
            <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateTorus``1(System.Double,System.Double,System.Int32,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
             <summary>
             Creates a Torus primitive.
             </summary>
            <param name="majorRadius">Torus radius</param>
            <param name="minorRadius">Torus section radius</param>
            <param name="sides">Number of sides</param>
            <param name="rings">Number of rings</param>
            <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateArrow(System.Double,System.Double,System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
             <summary>
             Creates a 3D arrow primitive.
             </summary>
             <param name="cylRadius">Arrow's cylinder radius</param>
             <param name="cylLength">Arrow's cylinder length</param>
             <param name="coneRadius">Arrow's cone radius</param>
             <param name="coneLength">Arrow's cone length</param>
             <param name="slices">Number of slices</param>
            <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateArrow``1(System.Double,System.Double,System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
             <summary>
             Creates a 3D arrow primitive.
             </summary>
             <param name="cylRadius">Arrow's cylinder radius</param>
             <param name="cylLength">Arrow's cylinder length</param>
             <param name="coneRadius">Arrow's cone radius</param>
             <param name="coneLength">Arrow's cone length</param>
             <param name="slices">Number of slices</param>
            <param name="meshNature">Nature of the mesh</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateArrow(System.Double,System.Double,System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
             <summary>
             Creates a 3D arrow primitive.
             </summary>
             <param name="cylRadius">Arrow's cylinder radius</param>
             <param name="cylLength">Arrow's cylinder length</param>
             <param name="coneRadius">Arrow's cone radius</param>
             <param name="coneLength">Arrow's cone length</param>
             <param name="slices">Number of slices</param>
            <param name="meshNature">Nature of the mesh</param>
            <param name="edgeStyle">Style of the edges</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateArrow``1(System.Double,System.Double,System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
             <summary>
             Creates a 3D arrow primitive.
             </summary>
             <param name="cylRadius">Arrow's cylinder radius</param>
             <param name="cylLength">Arrow's cylinder length</param>
             <param name="coneRadius">Arrow's cone radius</param>
             <param name="coneLength">Arrow's cone length</param>
             <param name="slices">Number of slices</param>
            <param name="meshNature">Nature of the mesh</param>
            <param name="edgeStyle">Style of the edges</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateArrow(devDept.Geometry.Point3D,devDept.Geometry.Vector3D,System.Double,System.Double,System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
             <summary>
             Creates a 3D arrow primitive.
             </summary>
             <param name="startPoint">Arrow's start point</param>
             <param name="direction">Arrow's direction</param>
             <param name="cylRadius">Arrow's cylinder radius</param>
             <param name="cylLength">Arrow's cylinder length</param>
             <param name="coneRadius">Arrow's cone radius</param>
             <param name="coneLength">Arrow's cone length</param>
             <param name="slices">Number of slices</param>
            <param name="meshNature">Nature of the mesh</param>
            <param name="edgeStyle">Style of the edges</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateArrow``1(devDept.Geometry.Point3D,devDept.Geometry.Vector3D,System.Double,System.Double,System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
             <summary>
             Creates a 3D arrow primitive.
             </summary>
             <param name="startPoint">Arrow's start point</param>
             <param name="direction">Arrow's direction</param>
             <param name="cylRadius">Arrow's cylinder radius</param>
             <param name="cylLength">Arrow's cylinder length</param>
             <param name="coneRadius">Arrow's cone radius</param>
             <param name="coneLength">Arrow's cone length</param>
             <param name="slices">Number of slices</param>
            <param name="meshNature">Nature of the mesh</param>
            <param name="edgeStyle">Style of the edges</param>
             <returns>The created mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSpring(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>Creates a Spring primitive.</summary>
            <param name="radius">Spring radius</param>
            <param name="wireRadius">Wire radius</param>
            <param name="sides">Number of subdivision sides</param>
            <param name="rings">Number of subdivision rings per turn</param>
            <param name="pitch">Height of each complete turn</param>
            <param name="turns">Number of turns</param>
            <param name="reverseTwist">Reverse direction</param>
            <returns>The resulting mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSpring``1(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>Creates a Spring primitive.</summary>
            <param name="radius">Spring radius</param>
            <param name="wireRadius">Wire radius</param>
            <param name="sides">Number of subdivision sides</param>
            <param name="rings">Number of subdivision rings per turn</param>
            <param name="pitch">Height of each complete turn</param>
            <param name="turns">Number of turns</param>
            <param name="reverseTwist">Reverse direction</param>
            <returns>The resulting mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSpring(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a Spring primitive.</summary>
            <param name="radius">Spring radius</param>
            <param name="wireRadius">Wire radius</param>
            <param name="sides">Number of subdivision sides</param>
            <param name="rings">Number of subdivision rings per turn</param>
            <param name="pitch">Height of each complete turn</param>
            <param name="turns">Number of turns</param>
            <param name="reverseTwist">Reverse direction</param>
            <param name="closed">Closing caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The resulting mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSpring``1(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>Creates a Spring primitive.</summary>
            <param name="radius">Spring radius</param>
            <param name="wireRadius">Wire radius</param>
            <param name="sides">Number of subdivision sides</param>
            <param name="rings">Number of subdivision rings per turn</param>
            <param name="pitch">Height of each complete turn</param>
            <param name="turns">Number of turns</param>
            <param name="reverseTwist">Reverse direction</param>
            <param name="closed">Closing caps on both ends</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The resulting mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Section(devDept.Geometry.PlaneEquation)">
            <summary>Computes the contours resulting from the intersection of the Mesh and the given plane.
            </summary>
            <param name="planeEquation">The cutting plane equation</param>
            <returns>An array of arrays of 3D points representing each section contour.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Section(devDept.Geometry.PlaneEquation,System.Collections.Generic.IList{devDept.Geometry.IndexTriangle},System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>Computes the contours resulting from the intersection of the Mesh and the given plane.
            </summary>
            <param name="planeEquation">The cutting plane equation</param>
            <returns>An array of arrays of 3D points representing each section contour.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.MergeFinalLoops(System.Collections.Generic.List{devDept.Geometry.Point3D[]})">
            <summary>
            Gets the loop list, merging the open loops with start or end point in common.
            </summary>
            <param name="loops">Collection of loops</param>
            <returns>The loop list.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.MergeLoopsWithCommonVertex(devDept.Geometry.Point3D[],devDept.Geometry.Point3D[])">
            <summary>
            Merges two loops that have the start or end point in common in one loop.
            </summary>
            <param name="loop1"></param>
            <param name="loop2"></param>
            <returns>The merged loop.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CleanEdgesWithOneIntersectionOnVertex(System.Collections.Generic.List{devDept.Eyeshot.Entities.Mesh.EdgeIntersect},System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Mark as processed the edges that have only one intersections (i.e. in one vertex) and their triangles.
            </summary>
            <param name="intersections"></param>
            <param name="vertices"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.GetSortedTriangleVertices(devDept.Geometry.IndexTriangle)">
            <summary>
            Gets the sorted list of the triangle vertices indices.
            </summary>
            <param name="i">The index of the triangle</param>
            <param name="triangles">The list of triangles</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.MarkEdgeNotOnPlane(devDept.Eyeshot.Entities.Mesh.EdgeIntersect,System.Collections.Generic.List{devDept.Eyeshot.Entities.Mesh.EdgeIntersect},System.Collections.Generic.IComparer{devDept.Eyeshot.Entities.Mesh.EdgeIntersect})">
            <summary>
            Mark only the edges that are not on the plane.
            </summary>
            <param name="edge"></param>
            <param name="intersections"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.GetReverse(devDept.Geometry.PlaneEquation,devDept.Eyeshot.Entities.Mesh.EdgeIntersect,System.Collections.Generic.LinkedList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.IndexTriangle},System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Tells if a loop must be reversed, based on the first segment of the loop, the normal of the mum triangle of the edge and the plane equation. 
            </summary>
            <param name="planeEquation">The plane equation</param>
            <param name="edge">The current edge</param>
            <param name="loop1">The loop</param>
            <param name="triangles">The triangles collection</param>
            <param name="vertices">The vertices collection</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.GetEdgeIntersections(devDept.Geometry.PlaneEquation,devDept.Eyeshot.Entities.Mesh.EdgeIntersectComparer,System.Collections.Generic.IList{devDept.Geometry.IndexTriangle},System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Gets the list of edges instersecting the plane, ordered on both the first vertex (V1) and on the second one (V2).
            </summary>
            <param name="planeEquation">The plane equation</param>
            <param name="comparer">The comparer class. The edges are ordered first on V1 and then on V2</param>
            <param name="triangles">The triangles list</param>
            <param name="vertices">The vertices list</param>
            <returns>The ordered list of intersecting edges</returns>
            <remarks>THe first vertex (V1) of the edge is always less than the second vertex (v2)
            The edges with the intersection on one vertex are discarded, as well as the edges on the plane that are between triangles on the plane.
            </remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.IntersectSegment(devDept.Geometry.Segment3D,devDept.Geometry.PlaneEquation,devDept.Geometry.Point3D@)">
            <summary>
            Intersects the segment with the plane.
            </summary>
            <param name="seg"></param>
            <param name="planeEquation"></param>
            <param name="intersectionPoint">The intersection point</param>
            <returns>The result of intersection.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.GetAnotherIncidentEdge(System.Collections.Generic.List{devDept.Eyeshot.Entities.Mesh.EdgeIntersect},System.Int32@,devDept.Eyeshot.Entities.Mesh.EdgeIntersect@,System.Int32@,System.Boolean[],devDept.Eyeshot.Entities.Mesh.EdgeIntersectComparerOneComponent,System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Get another edge incident on the vertex that collides with the intersection.
            </summary>
            <param name="intersections">The list of intersections</param>
            <param name="edgeIndex">The index of the current edge</param>
            <param name="edge">The current edge</param>
            <param name="triangleIndex">THe triangle adjacent to the edge</param>
            <param name="trianglesProcessed">The list of flags of processed triangles</param>
            <param name="comparerOneComponent">The edge comparer</param>
            <param name="vertices">The edge vertices</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.GetUnprocessedEdge(System.Collections.Generic.List{devDept.Eyeshot.Entities.Mesh.EdgeIntersect},devDept.Eyeshot.Entities.Mesh.EdgeIntersect,devDept.Eyeshot.Entities.Mesh.EdgeIntersectComparerOneComponent)">
            <summary>
            Gets an edge not yet processed adjacent to the current edge.
            </summary>
            <param name="edgesWithIntersections">The list of edge intersections</param>
            <param name="currentEdge">The current  edge</param>
            <param name="processedEdges">The processed edges flags</param>
            <param name="comparerOneComponent">The edge comparer</param>
            <returns>The adjacent edge index</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.GetEdgeRange(System.Collections.Generic.List{devDept.Eyeshot.Entities.Mesh.EdgeIntersect},System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the range of edges in the <paramref name="intersections"/> list starting with <paramref name="vertexIndex"/> vertex.
            </summary>
            <param name="edgesWithIntersections">The list of intersecting edges, ordered on the first vertex (V1)</param>
            <param name="vertexIndex"></param>
            <param name="startPos"></param>
            <param name="minIndex">Index of the <see cref="!:intersections"/> list where the edges with first vertex <paramref name="vertexIndex"/> start</param>
            <param name="maxIndex">Index of the <see cref="!:intersections"/> list where the edges with first vertex <paramref name="vertexIndex"/> end</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.FindOtherEdgeOfTriangleIntersecting(devDept.Eyeshot.Entities.Mesh.EdgeIntersect,System.Int32,System.Collections.Generic.List{devDept.Eyeshot.Entities.Mesh.EdgeIntersect},System.Collections.Generic.IComparer{devDept.Eyeshot.Entities.Mesh.EdgeIntersect},System.Collections.Generic.IList{devDept.Geometry.IndexTriangle},System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Finds the other edge of the triangle that is intersected by the plane.
            </summary>
            <param name="currentEdge">The current edge on which the intersection was found</param>
            <param name="triangleIndex">The triangle adjacent to the edge</param>
            <param name="intersections">The list of intersections with the relative edge</param>
            <param name="comparer">The comparer</param>
            <param name="triangles">The triangles list</param>
            <returns>The index of the other edge of the triangle intersected by the plane.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.SplitDisjoint">
            <summary>
            Divides into separate objects meshes that do not connect, but are still one object.
            </summary>
            <returns>The resulting Mesh objects.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.SplitBy(devDept.Geometry.Plane,devDept.Eyeshot.Entities.Mesh[]@)">
            <summary>
            Splits this Mesh object by plane.
            </summary>
            <param name="plane">The splitting plane</param>
            <param name="splits">Array of new Meshes created by splitting</param>
            <returns>Return true in case of succeded</returns>
            <seealso cref="M:devDept.Eyeshot.Entities.Mesh.SplitDisjoint"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.SplitBy(devDept.Geometry.Plane,System.Boolean,devDept.Eyeshot.Entities.Mesh[]@)">
            <summary>
            Splits this Mesh object by plane.
            </summary>
            <param name="plane">The splitting plane</param>
            <param name="splitDisjoint">When true, disjoint objects are separated into individual meshes</param>
            <param name="splits">Array of new Meshes created by splitting</param>
            <returns>Return true in case of succeded</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.SubdivideBy(devDept.Geometry.Plane)">
            <summary>
            Subdivides the mesh by a plane.
            </summary>
            <param name="plane">The subdivision plane</param>
            <returns>A <see cref="T:devDept.Eyeshot.booleanFailureType"/> telling if the operation was successful.</returns>
            <remarks>If the number of triangles doesn't change, the plane is passing through the mesh but is not cutting any triangle edge because some vertices are exactly on the plane.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.PreDraw(devDept.Eyeshot.DrawParams)">
            <summary>
            Sets the ColorMaterial for multicolor types.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.DrawNormals(devDept.Eyeshot.DrawParams,System.Double)">
            <summary>
            Used by Solid entity (SolidPortions)
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.ApplyMaterial(System.String,devDept.Eyeshot.textureMappingType,System.Double,System.Double)">
            <summary>
            Maps the specified material to this mesh. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.ViewportLayout.Materials"/> collection.
            </summary>
            <remarks>
            	<para>The mesh nature is set to RichPlain or RichSmooth from this command.</para>
            	<para>You may need to call viewport.Entities.Regen() to see the effect of this command.</para>
            </remarks>
            <example>
                The following code fragment demonstrates how to apply Cubic mapping to a Mesh
                object.
                <code lang="CS" title="[New Example]">
            		<![CDATA[
            Mesh m = new Mesh(Mesh.natureType.RichSmooth);
             
            m.MakeBox(10, 40, 20);
             
            m.Translate(-10, 2, 20);
             
            mainViewport.Materials.Add(new Material("Wood", Properties.Resources.Wood));
             
            m.ApplyMaterial("Wood", textureMappingType.Cubic, 1, 1);
             
            mainViewportLayout.entities.Add(m, 0, Color.Green);]]>
            	</code>
            	<code lang="VB" title="[New Example]">
            		<![CDATA[
            Dim m As Mesh = New Mesh(Mesh.natureType.RichSmooth) 
            m.MakeBox(10, 40, 20)
             
            m.Translate(-10, 2, 20)
             
            mainViewport.Materials.Add(New Material("Wood", Properties.Resources.Wood))
             
            m.ApplyMaterial("Wood", textureMappingType.Cubic, 1, 1)
             
            mainViewportLayout.entities.Add(m, 0, Color.Green)]]>
            	</code>
            </example>
            <param name="matName">Material name</param>
            <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
            <param name="scaleX">Material texture scale along the X axis</param>
            <param name="scaleY">Material texture scale along the Y axis</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.ApplyMaterial(System.String,devDept.Eyeshot.textureMappingType,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Maps the specified material to this mesh. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.ViewportLayout.Materials"/> collection.
            </summary>
            <remarks>
            	<para>The mesh nature is set to RichPlain or RichSmooth from this command.</para>
            	<para>You may need to call viewport.Entities.Regen() to see the effect of this command.</para>
            </remarks>
            <param name="matName">Material name</param>
            <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
            <param name="scaleX">Material texture scale along the X axis</param>
            <param name="scaleY">Material texture scale along the Y axis</param>
            <param name="boxMin">Bounding box min point</param>
            <param name="boxMax">Bounding box max point</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.ApplyTextureMapping(devDept.Eyeshot.textureMappingType,System.Double,System.Double)">
            <summary>
            Maps the specified material to this mesh. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.ViewportLayout.Materials"/> collection.
            </summary>
            <remarks>
            	<para>The mesh nature is set to RichPlain or RichSmooth from this command.</para>
            	<para>You may need to call viewport.Entities.Regen() to see the effect of this command.</para>
            </remarks>
            <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
            <param name="scaleX">Material texture scale along the X axis</param>
            <param name="scaleY">Material texture scale along the Y axis</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.ApplyTextureMapping(devDept.Eyeshot.textureMappingType,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Maps the specified material to this mesh using a custom bounding box. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.ViewportLayout.Materials"/> collection.
            </summary>
            <remarks><para>The mesh nature is set to RichPlain or RichSmooth from this command.</para>
            	<para>You may need to call viewport.Entities.Regen() to see the effect of this command.</para></remarks>
            <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
            <param name="scaleX">Material texture scale along the X axis</param>
            <param name="scaleY">Material texture scale along the Y axis</param>
            <param name="boxMin">Bounding box min point</param>
            <param name="boxMax">Bounding box max point</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.ApplyTextureMapping(devDept.Eyeshot.TextureMappingData)">
            <summary>
            Maps the specified material to this mesh using a custom bounding box. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.ViewportLayout.Materials"/> collection.
            </summary>
            <remarks><para>The mesh nature is set to RichPlain or RichSmooth from this command.</para>
            	<para>You may need to call viewport.Entities.Regen() to see the effect of this command.</para></remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.ApplyTextureMapping(devDept.Eyeshot.textureMappingType,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Transformation)">
            <summary>
            Maps the specified material to this mesh using a custom bounding box. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.ViewportLayout.Materials"/> collection.
            </summary>
            <remarks><para>The mesh nature is set to RichPlain or RichSmooth from this command.</para>
            	<para>You may need to call viewport.Entities.Regen() to see the effect of this command.</para></remarks>
            <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
            <param name="scaleX">Material texture scale along the X axis</param>
            <param name="scaleY">Material texture scale along the Y axis</param>
            <param name="boxMin">Bounding box min point</param>
            <param name="boxMax">Bounding box max point</param>
            <param name="transformation">Transformation to apply to the mapping</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.#ctor">
            <summary>
            Empty constructor. <see cref="T:devDept.Eyeshot.Entities.entityNatureType">Mesh nature</see> is set to Plain.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.#ctor(System.Int32,System.Int32,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Vertices and triangles sizes constructor.
            </summary>
            <param name="numVertices">Number of vertices the mesh will hold</param>
            <param name="numTriangles">Number of triangles the mesh will hold</param>
            <param name="meshNature">The mesh nature</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.#ctor(devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Mesh nature constructor.
            </summary>
            <param name="meshNature">The mesh nature</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.#ctor(devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>
            Mesh nature and edge style constructor.
            </summary>
            <param name="meshNature">The mesh nature</param>
            <param name="edgeStyle">The edge style</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Init(devDept.Eyeshot.Entities.Mesh.natureType,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>
            Method to set Mesh.natureType and Mesh.edgeStyleType
            </summary>
            <param name="meshNature">Mesh.natureType to be set</param>
            <param name="edgeStyle">Mesh.edgeStyleType tto be set</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.IndexTriangle})">
            <summary>
            Vertices and triangles constructor.
            </summary>
            <param name="vertices">The vertices list</param>
            <param name="triangles">The triangles list</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Clone">
            <summary>
            Creates a deep copy of this mesh entity.
            </summary>
            <returns>The new mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.IsPointInside(devDept.Geometry.Point3D)">
            <summary>
            Checks if the specified point is inside the 3D mesh.
            </summary>
            <param name="point">The 3D point</param>
            <returns>True if the 3D point is inside the mesh, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CutBy(devDept.Geometry.Plane)">
            <summary>Cuts the part of the mesh on the positive side of a plane.
             </summary>
             <param name="plane">The plane</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.CutBy(devDept.Geometry.Plane,System.Boolean)">
            <summary>Cuts the part of the mesh on the positive side of a plane.
             </summary>
             <param name="plane">The plane</param>
             <param name="close">If false, the resulting mesh will not be closed</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.UpdateNormals">
            <summary>
            Refreshes triangles normals.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.ComputeEdges">
            <summary>
            Forces mesh edges computation according to the <see cref="F:devDept.Eyeshot.Entities.Mesh.edgeStyle"/> settings.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.FlipOutside">
            <summary>
            Flips the mesh normals outside.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.Weld">
            <summary>
            Removes duplicated vertices in the Mesh.
            </summary>
            <remarks>This command invalidates mesh's edges. You'll need to refresh them using the <see cref="M:devDept.Eyeshot.Entities.Mesh.ComputeEdges"/> method.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.FromTriangles(devDept.Geometry.Point3D[])">
            <summary>
             Generates a smooth Mesh from a list of triangles.
            </summary>
            <param name="v">A list of triangle vertices</param>      
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.GetPolygonMeshes">
            <summary>
            Gets a number of meshes representing this object.
            </summary>
            <returns>The mesh itself, not cloned.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Mesh,System.Boolean)">
            <summary>
            Merges two compatible Mesh objects.
            </summary>
            <param name="mesh">The other Mesh object</param>
            <param name="weldNow">If true, the two meshes are welded immediately.</param>
            <remarks>If you need to merge several meshes it's far more efficient to weld them only at the last MergeWith call.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Quad,System.Boolean)">
            <summary>
            Merges the mesh with a <see cref="T:devDept.Eyeshot.Entities.Quad"/> entity that shares an edge with the mesh.
            </summary>
            <param name="quad">The <see cref="T:devDept.Eyeshot.Entities.Quad"/> entity</param>
            <param name="weldNow">If true, the two meshes are welded immediately.</param>
            <remarks>If you need to merge several entities it is far more efficient to weld them only at the last MergeWith.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Quad)">
            <summary>
            Merges the mesh with a <see cref="T:devDept.Eyeshot.Entities.Quad"/> entity that shares an edge with the mesh.
            </summary>
            <param name="quad">The <see cref="T:devDept.Eyeshot.Entities.Quad"/> entity to merge</param>
            <remarks>If you need to merge several entities it is far more efficient to weld them only at the last MergeWith.</remarks>
            <seealso cref="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Quad,System.Boolean)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Triangle,System.Boolean)">
            <summary>
            Merges the mesh with a <see cref="T:devDept.Eyeshot.Entities.Quad"/> entity that shares an edge with the mesh.
            </summary>
            <param name="triangle">The <see cref="T:devDept.Eyeshot.Entities.Triangle"/> entity to merge</param>
            <param name="weldNow">If true, the two meshes are welded immediately.</param>
            <remarks>If you need to merge several entities it is far more efficient to weld them only at the last MergeWith.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Triangle)">
            <summary>
            Merges the mesh with a <see cref="T:devDept.Eyeshot.Entities.Quad"/> entity that shares an edge with the mesh.
            </summary>
            <param name="triangle">The <see cref="T:devDept.Eyeshot.Entities.Triangle"/> entity</param>
            <remarks>If you need to merge several entities it is far more efficient to weld them only at the last MergeWith.</remarks>
            <seealso cref="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Triangle,System.Boolean)"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Mesh.Vertices">
            <summary>
            Gets or sets mesh' 3D vertices.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Mesh.Triangles">
            <summary>
            Gets or sets the mesh triangles.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Mesh.Edges">
            <summary>
            Direct access to <see cref="T:devDept.Eyeshot.Entities.Mesh"/> edges.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Mesh.NormalAveragingMode">
            <summary>
            Gets or sets the normal averaging prevMode.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Mesh.SmoothingAngle">
            <summary>
            Gets or sets the angular value (in radians) used by normal averaging and sharp edges calculation.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Mesh.EdgeStyle">
            <summary>
            Gets or sets the edge style. This setting comes into play during Mesh regeneration only.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Mesh.Normals">
            <summary>
            Gets or sets the mesh normals.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Mesh.MeshNature">
            <summary>
            Gets mesh nature.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Mesh.TextureCoords">
            <summary>
            Gets or sets mesh texture coordinates.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Mesh.IsClosed">
            <summary>Tells if a mesh is closed.
            </summary>
            <returns>True if the mesh is closed.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Mesh.LightWeight">
            <remarks> If true, no geometry is generated by the hidden lines computation (see <see cref="M:devDept.Eyeshot.ViewportLayout.Print"/> and all the classes derived from <see cref="T:devDept.Eyeshot.HiddenLinesView"/>).</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Mesh.EdgeIntersect.ToString">
            <summary>
            Converts this 3D point to a human readable string.
            </summary>
            <returns>A string that represents this 3d point.</returns>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Mesh.IntersectionResult">
            <summary>
            Result type of segment - plane intersection.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.IntersectionResult.OnPlane">
            <summary>
            The semgnet is on Plane.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.IntersectionResult.FirstPoint">
            <summary>
            The intersection is on the first endpoint.
            </summary>
            
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.IntersectionResult.SecondPoint">
            <summary>
            The intersection in on the second endpoint.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.IntersectionResult.Inside">
            <summary>
            The intersection is inside.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.IntersectionResult.Outside">
            <summary>
            The instersection is outside the segment.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Mesh.natureType">
            <summary>Mesh nature type.</summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.natureType.Undefined">
            <summary>
            Not yet defined
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.natureType.Plain">
            <summary>
            Plain mesh, one color shared by all triangles
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.natureType.ColorPlain">
            <summary>
            Plain mesh, one different color for each triangle
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.natureType.MulticolorPlain">
            <summary>
            Plain mesh, one color for each vertex
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.natureType.RichPlain">
            <summary>
            Plain mesh, one material for each triangle
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.natureType.Smooth">
            <summary>
            Smooth mesh, one color shared by all triangles
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.natureType.ColorSmooth">
            <summary>
            Smooth mesh, one different color for each triangle
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.natureType.MulticolorSmooth">
            <summary>
            Smooth mesh, one color for each vertex
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.natureType.RichSmooth">
            <summary>
            Smooth mesh, one material for each triangle
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Mesh.normalAveragingType">
            <summary>Mesh normal averaging type.</summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.normalAveragingType.Averaged">
            <summary>
            Averaged normal
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.normalAveragingType.AveragedByAngle">
            <summary>
            Averaged normal with preservation of edges
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Mesh.edgeStyleType">
            <summary>Mesh edge style type.</summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.edgeStyleType.None">
            <summary>
            No edges are computed
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.edgeStyleType.Free">
            <summary>
            Only free edges are computed
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Mesh.edgeStyleType.Sharp">
            <summary>
            Only sharp edges are computed
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewCubeIcon.ViewCubeClickEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:devDept.Eyeshot.ViewCubeIcon.Click"/> event.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">A <see cref="T:devDept.Eyeshot.ViewportLayout.ViewChangedEventArgs"/> object that contains the event data</param>
        </member>
        <member name="T:devDept.Eyeshot.Entities.MultilineText">
            <summary>
            Multiline Text entity.
            </summary>
            <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.Style"/> property and calling the ViewportLayout.Entities.Regen() method.</remarks>
            <remarks>Use <see cref="P:System.Environment.NewLine"/> to mark a new line in the text string.</remarks>
            <seealso cref="P:devDept.Eyeshot.Entities.Text.Style"/>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Text">
            <summary>
            Text entity.
            </summary>
            <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.Style"/> property and calling the ViewportLayout.Entities.Regen() method.</remarks>
            <seealso cref="P:devDept.Eyeshot.Entities.Text.Style"/>
        </member>
        <member name="T:devDept.Eyeshot.Entities.PlanarEntity">
            <summary>
            Base class for all planar entities.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.PlanarEntity.plane">
            <summary>Orientation plane</summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PlanarEntity.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PlanarEntity.#ctor(devDept.Geometry.Plane)">
            <summary>
            Plane constructor.
            </summary>
            <param name="pln">The plane</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PlanarEntity.#ctor(devDept.Geometry.Plane,System.Single)">
            <summary>
            Plane and symbol size constructor.
            </summary>
            <param name="pln">The plane</param>
            <param name="symbolSize">The plane symbol size</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PlanarEntity.Update(devDept.Eyeshot.Entities.PlanarEntity)">
            <summary>
            Updates the contents of this entity with the contents of another entity.
            </summary>
            <param name="another">The other entity.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PlanarEntity.Extrude(System.Double,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Extrudes this entity along plane's Z-axis.
            </summary>
            <param name="amount">Extrusion amount, direction is along plane's Z-axis.</param>
            <param name="tol">Some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PlanarEntity.ExtrudeBy(System.Double)">
            <summary>
            Extrude this planar entity along plane's Z-axis.
            </summary>
            <param name="amount">Extrusion amount</param>
            <returns>The resulting surface.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PlanarEntity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PlanarEntity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.PlanarEntity.Plane">
            <summary>Gets or sets the planar entity supporting plane.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.PlanarEntity.SymbolSize">
            <summary>
            Plane symbol size.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.IText">
            <summary>
            Common properties of text entities.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.IText.Height">
            <summary>
            Gets or sets text height.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.IText.WidthFactor">
            <summary>
            Gets or sets text width factor.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.IText.TextString">
            <summary>
            Gets or sets text string.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(System.Double,System.Double,System.String,System.Double)">
            <summary>Standard constructor.</summary>
            <param name="x">Position along X axis</param>
            <param name="y">Position along Y axis</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(System.Double,System.Double,System.Double,System.String,System.Double)">
            <summary>Standard constructor.</summary>
            <param name="x">Position along X axis</param>
            <param name="y">Position along Y axis</param>
            <param name="z">Elevation</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
            <summary>Standard constructor.</summary>
            <param name="x">Position along X axis</param>
            <param name="y">Position along Y axis</param>
            <param name="z">Elevation</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
            <summary>Standard constructor.</summary>
            <param name="x">Position along X axis</param>
            <param name="y">Position along Y axis</param>
            <param name="z">Elevation</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="x">Position along X axis</param>
            <param name="y">Position along Y axis</param>
            <param name="z">Elevation</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
            <param name="simplify">Text simplification flag</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Point3D,System.String,System.Double)">
            <summary>Standard constructor.</summary>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Point3D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
            <summary>Standard constructor.</summary>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Point3D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
            <summary>Standard constructor.</summary>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Point3D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
            <param name="simplify">Text simplification flag</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,System.String,System.Double)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
            <param name="simplify">Text simplification flag</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
            <param name="simplify">Text simplification flag</param>        
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double)">
            <summary>Sketch plane constructor.</summary>
            <param name="sketchPlane">Sketch plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>        
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
            <summary>Sketch plane constructor.</summary>
            <param name="sketchPlane">Sketch plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
            <summary>Sketch plane constructor.</summary>
            <param name="sketchPlane">Sketch plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean)">
            <summary>Sketch plane constructor.</summary>
            <param name="sketchPlane">Sketch plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="height">Text height</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
            <param name="simplify">Text simplification flag</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.SetDimensionScale(System.Double)">
            <summary>
            Sets the text scale factor for the Dimension.
            </summary>
            <param name="dimensionScale">scale factor</param>
            <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen"/> after changing this value.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.DrawSimplified(devDept.Graphics.RenderContextBase)">
            <summary>
            Draws a rectangle to approximate small texts for better performances.
            </summary>
            <remarks>When <see cref="P:devDept.Eyeshot.Entities.Text.Simplify"/> is true.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.ConvertToMesh(devDept.Eyeshot.ViewportLayout)">
            <summary>
            Converts the text to a list of meshes.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/></param>
            <returns>The list of meshes.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.ConvertToLinearPath(System.Double,devDept.Eyeshot.ViewportLayout)">
            <summary>
            Converts the text outlines to LinearPath.
            </summary>
            <param name="chordalErr">The font chordal error</param>
            <param name="viewportLayout">The viewportLayout parent control</param>
            <returns>The array of LinearPath,</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.ConvertToLinearPath(System.Double,devDept.Eyeshot.ViewportLayout,devDept.Eyeshot.Entities.Entity[]@,devDept.Eyeshot.Entities.Entity[][]@)">
            <summary>
            Converts the text outlines to LinearPath, separating outer and inner loops.
            </summary>
            <param name="chordalErr">The font chordal error</param>
            <param name="viewportLayout">The viewportLayout parent control</param>
            <param name="outers">The outer loops</param>
            <param name="inners">The inner loops belonging to each outer loops</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.ConvertToCurve(devDept.Eyeshot.ViewportLayout)">
            <summary>
            Converts the text outlines to a list of composite curves.
            </summary>
            <param name="viewportLayout">The viewportLayout parent control</param>
            <returns>The array of composite curves</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.ConvertToCurve(devDept.Eyeshot.ViewportLayout,devDept.Eyeshot.Entities.Entity[]@,devDept.Eyeshot.Entities.Entity[][]@)">
            <summary>
            Converts the text outlines to composite curves, separating outer and inner loops.
            </summary>
            <param name="viewportLayout">The viewportLayout parent control</param>
            <param name="outers">The outer loops</param>
            <param name="inners">The inner loops belonging to each outer loops</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.ConvertToRegion(devDept.Eyeshot.ViewportLayout)">
            <summary>
            Converts the text outlines to a list of regions.
            </summary>
            <param name="viewportLayout">The viewportLayout parent control</param>
            <returns>The array of regions</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.ConvertToSurface(devDept.Eyeshot.ViewportLayout)">
            <summary>
            Converts the text outlines to a list of surfaces.
            </summary>
            <param name="viewportLayout">The viewportLayout parent control</param>
            <returns>The array of surfaces</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Text.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Text.Style">
            <summary>
            Gets or sets the text style name.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Text.Backward">
            <summary>
            The text is flipped in X.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Text.UpsideDown">
            <summary>
            The text is flipped in Y.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Text.TextString">
            <summary>
            Gets or sets the text itself.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen"/> after changing this value.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Text.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen"/> after changing this value.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Text.WidthFactor">
            <summary>
            Gets or sets the text width factor.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen"/> after changing this value.</remarks>
            <remarks>If -1, the value is inherited from the <see cref="P:devDept.Eyeshot.TextStyle.WidthFactor"/>.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Text.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen"/> after changing this value.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Text.InsertionPoint">
            <summary>
            Gets or sets the insertion point (it corresponds to the <see cref="!:Text.Plane"/> origin).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Text.Simplify">
            <summary>
            Gets or sets a value indicating whether the text must be simplified when it becomes small on screen.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Text.Billboard">
            <summary>
            Gets or sets a value indicating whether the text must be always faces the camera.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Text.alignmentType">
            <summary>
            Text entity alignment type
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.BottomLeft">
            <summary>
            Content is vertically aligned at the bottom, and horizontally aligned on the left.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.BottomCenter">
            <summary>
            Content is vertically aligned at the bottom, and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.BottomRight">
            <summary>
            Content is vertically aligned at the bottom, and horizontally aligned on the right.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.MiddleLeft">
            <summary>
            Content is vertically aligned in the middle, and horizontally aligned on the left.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.MiddleCenter">
            <summary>
            Content is vertically aligned in the middle, and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.MiddleRight">
            <summary>
            Content is vertically aligned in the middle, and horizontally aligned on the right.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.TopLeft">
            <summary>
            Content is vertically aligned at the top, and horizontally aligned on the left.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.TopCenter">
            <summary>
            Content is vertically aligned at the top, and horizontally aligned at the center.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.TopRight">
            <summary>
            Content is vertically aligned at the top, and horizontally aligned on the right.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.BaselineLeft">
            <summary>
            Content is vertically aligned at the baseline, and horizontally aligned on the left.
            Not applicable to <see cref="T:devDept.Eyeshot.Entities.MultilineText"/> entity.
            </summary>           
        </member>
        <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.BaselineCenter">
            <summary>
            Content is vertically aligned at the baseline, and horizontally aligned at the center.
            Not applicable to <see cref="T:devDept.Eyeshot.Entities.MultilineText"/> entity.
            </summary>           
        </member>
        <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.BaselineRight">
            <summary>
            Content is vertically aligned at the baseline, and horizontally aligned on the right.
            Not applicable to <see cref="T:devDept.Eyeshot.Entities.MultilineText"/> entity.
            </summary>           
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(System.Double,System.Double,System.String,System.Double,System.Double,System.Double)">
            <summary>Standard constructor.</summary>
            <param name="x">Position along X axis</param>
            <param name="y">Position along Y axis</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double)">
            <summary>Standard constructor.</summary>
            <param name="x">Position along X axis</param>
            <param name="y">Position along Y axis</param>
            <param name="z">Elevation</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
            <summary>Standard constructor.</summary>
            <param name="x">Position along X axis</param>
            <param name="y">Position along Y axis</param>
            <param name="z">Elevation</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
            <summary>Standard constructor.</summary>
            <param name="x">Position along X axis</param>
            <param name="y">Position along Y axis</param>
            <param name="z">Elevation</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="x">Position along X axis</param>
            <param name="y">Position along Y axis</param>
            <param name="z">Elevation</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
            <param name="simplify">Text simplification flag</param>
            <param name="wrap">The text wrap</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double)">
            <summary>Standard constructor.</summary>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>                
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
            <summary>Standard constructor.</summary>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
            <summary>Standard constructor.</summary>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>     
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
            <param name="simplify">Text simplification flag</param>
            <param name="wrap">The text wrap</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,System.String,System.Double,System.Double,System.Double)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean,System.Boolean)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="textString">Text string</param>
            <param name="width">Text width</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
            <param name="simplify">Text simplification flag</param>
            <param name="wrap">The text wrap</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>        
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean,System.Boolean)">
            <summary>Not parallel to XY plane constructor.</summary>
            <param name="textPlane">Orientation plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
            <param name="simplify">Text simplification flag</param>
            <param name="wrap">The text wrap</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
            <summary>Sketch plane constructor.</summary>
            <param name="sketchPlane">Sketch plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
            <summary>Sketch plane constructor.</summary>
            <param name="sketchPlane">Sketch plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean,System.Boolean)">
            <summary>Sketch plane constructor.</summary>
            <param name="sketchPlane">Sketch plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="textString">Text string</param>
            <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
            <param name="height">Text height</param>
            <param name="lineSpaceDistance">Spacing between the lines</param>
            <param name="alignment">Text alignment</param>
            <param name="style">The text style name (see <see cref="P:devDept.Eyeshot.ViewportLayout.TextStyles"/>)</param>
            <param name="simplify">Text simplification flag</param>
            <param name="wrap">The text wrap</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.MultilineText.ConvertToMesh(devDept.Eyeshot.ViewportLayout)">
            <summary>
            Converts the text to a list of meshes.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/></param>
            <returns>The list of meshes.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.MultilineText.Wrap">
            <summary>
            When true, the line of text is split (if it contain spaces) into more lines so that their lengths are less than <see cref="P:devDept.Eyeshot.Entities.MultilineText.Width"/>. When false, the line is truncated if it goes beyond the <see cref="P:devDept.Eyeshot.Entities.MultilineText.Width"/>.
            </summary>
            <remarks>If the value is true and there are no spaces before the <see cref="P:devDept.Eyeshot.Entities.MultilineText.Width"/> of the text, the split is done at the first available space.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.MultilineText.LineSpaceDistance">
            <summary>
            Gets or sets the spacing between lines.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.MultilineText.Width">
            <summary>
            Gets or sets the width of the multiline text.
            </summary>
            <remarks>The text rows are split so that its words stay inside the specified width.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.MultilineText.WidthFactors">
            <summary>
            Gets or sets the width factor for each line of text.
            </summary>
            <remarks>If null or -1, the value is inherited from the <see cref="P:devDept.Eyeshot.TextStyle.WidthFactor"/>.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.Entities.OrdinateDim">
            <summary>
            Ordinate dimension entity.    
            </summary>
            <para>The ordinate dimension consists of an X or Y value with a leader line.</para>    
            <para>It measures the perpendicular distance from an origin point (called the datum) to a defining point (such as a hole in a part).</para>
            <para>X-datum ordinate dimensions measure the distance of the defining point from the datum along the X axis.</para>
            <para>Y-datum ordinate dimensions measure the distance of the defining point from the datum along the Y axis.</para>
            <para>If the dimension is vertical it measures the X value. Otherwise, it measures the Y value.</para>
            <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.Style"/> property and calling the ViewportLayout.Entities.Regen() method.</remarks>
            <seealso cref="P:devDept.Eyeshot.Entities.Text.Style"/>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Dimension">
            <summary>
            Radial dimension entity.
            </summary>
            <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.Style"/> property and calling the ViewportLayout.Entities.Regen() method.</remarks>
            <seealso cref="P:devDept.Eyeshot.Entities.Text.Style"/>
            <seealso cref="T:devDept.Eyeshot.Entities.LinearDim"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Dimension.PreDrawDimensionD3D(devDept.Eyeshot.DrawParams)">
            <summary>
            Executes some preliminary steps before drawing a dimension for Direct3D renderer to support the thick lines.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Dimension.PostDrawDimensionD3D(devDept.Eyeshot.DrawParams)">
            <summary>
            Excetues some steps after drawing a dimension for Direct3D renderer.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Dimension.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Dimension.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Dimension.NeedsToBeFlipped(System.Double)">
            <summary>
            Returns true if the angle is between 90 and 270 degrees.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Dimension.TextGap">
            <summary>
            Gets or sets the gap (in world units) between the dimension line and the text.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Dimension.ArrowheadSize">
            <summary>
            Gets or sets the size of the arrow head.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Dimension.LinearScale">
            <summary>
            Get or set the global scale factor for linear dimensions.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Dimension.Scale">
            <summary>
            Get or set the global scale factor for the dimension.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen"/> after changing this value.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Dimension.DimLinePosition">
            <summary>
            Gets or sets the dimension line position. Affects text position when the text cannot fit between extension lines.
            </summary>
            <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Dimension.Distance">
            <summary>
            Gets the real measured distance.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Dimension.TextPrefix">
            <summary>
            Gets or sets dimension text prefix.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Dimension.TextOverride">
            <summary>
            Gets or sets dimension text override. The angle brackets &lt; &gt; represent the
            dimension value. You can type additional text before or after the angle brackets, or
            you can eliminate the angle brackets.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Dimension.TextSuffix">
            <summary>
            Gets or sets dimension text suffix.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Dimension.NumberOfDecimals">
            <summary>
            Gets or sets the number of decimal digits.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Dimension.SuppressLeadingZeros">
            <summary>
            Hides or shows the leading zeros.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Dimension.SuppressTrailingZeros">
            <summary>
            Hides or shows the trailing zeros.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Dimension.arrowheadType">
            <summary>
            Dimension arrow head type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Dimension.arrowheadType.Arrow">
            <summary>
            Closed filled arrow
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Dimension.arrowheadType.Tick">
            <summary>
            Architectural tick
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Dimension.arrowheadType.Dot">
            <summary>
            Dot
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Dimension.arrowheadType.Oblique">
            <summary>
            Oblique
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Dimension.elementPositionType">
            <summary>
            Dimension item position type.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.OrdinateDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Boolean,System.Double)">
            <summary>Standard constructor.</summary>
            <param name="dimPlane">The dimension plane. Its origin is used to measure the distance from the defining point.</param>
            <param name="definingPoint">The defining point</param>
            <param name="dimLinePos">Dimension line position.</param>
            <param name="isVertical">The type of the ordinate dimension (horizontal or vertical). If true, the x-coordinate is measured, otherwise the y-coordinate is measured.</param>
            <param name="textHeight">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.OrdinateDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Boolean,System.Double)">
            <summary>Sketch plane constructor.</summary>
            <param name="sketchPlane">The sketch plane</param>
            <param name="definingPoint"></param>
            <param name="dimLinePos">Dimension line position.</param>
            <param name="isVertical">The type of the ordinate dimension (horizontal or vertical). If true, the x-coordinate is measured, otherwise the y-coordinate is measured.</param>
            <param name="textHeight">Text height</param>        
        </member>
        <member name="M:devDept.Eyeshot.Entities.OrdinateDim.Clone">
            <summary>
            Creates a deep copy of this ordinate dimension.
            </summary>
            <returns>The new ordinate dimension object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.OrdinateDim.Preview(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double,devDept.Geometry.Point3D@)">
            <summary>
            Gets the segments for the drawing preview
            </summary>
            <param name="dimPlane">The dimension plane. Its origin is used to measure the distance from the defining point.</param>
            <param name="definingPoint">The defining point.</param>
            <param name="dimLinePos">The dimension line position.</param>
            <param name="isVertical">The type of the ordinate dimension (horizontal or vertical). If true, the x-coordinate is measured, otherwise the y-coordinate is measured.</param>        
            <param name="textWidth">The text width.</param>
            <param name="textHeight">The text height.</param>
            <param name="textGap">The text gap.</param>
            <param name="hookLen">The lenght of the hook line. (It is the <see cref="P:devDept.Eyeshot.Entities.Dimension.ArrowheadSize"/>).</param>
            <param name="offsetFromDefiningPoint">The offset from the defining point. (It is the <see cref="P:devDept.Eyeshot.Entities.OrdinateDim.OffsetFromOrigin"/>).</param>
            <param name="leaderEndPoint">The leader end point.</param>
            <returns>The array of segments for preview.</returns>
            <remarks>
            <para>segments[0] starts from the leader end point.</para>
            <para>segments[1] is the hook line.</para>
            <para>segments[2] ends with the defining point.</para>            
            </remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.OrdinateDim.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.OrdinateDim.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.OrdinateDim.IsVertical">
            <summary>
            Indicates if the ordinate dimension is vertical (when true) or horizontal (when false).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.OrdinateDim.Origin">
            <summary>
            Get the origin point.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.OrdinateDim.DefiningPoint">
            <summary>
            Gets or sets the defining point.
            </summary>
            <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.OrdinateDim.LeaderEndPoint">
            <summary>
            Gets the leader end point.
            </summary>        
            <remarks>You need to call the Viewport.Entities.Regen() to see the updated value.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.OrdinateDim.OffsetFromOrigin">
            <summary>
            Specifies the offset of extension lines from the origin points.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Leader">
            <summary>
            Leader entity (sequence of segments with an arrowhead).
            </summary>    
        </member>
        <member name="M:devDept.Eyeshot.Entities.Leader.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D[])">
            <summary>Standard constructor.</summary>        
            <param name="pln">The plane</param>
            <param name="points">The point list</param>        
        </member>
        <member name="M:devDept.Eyeshot.Entities.Leader.#ctor(devDept.Geometry.Plane,System.Collections.Generic.ICollection{devDept.Geometry.Point3D})">
            <summary>Standard constructor.</summary>        
            <param name="pln">The plane</param>
            <param name="points">The point array</param>        
        </member>
        <member name="M:devDept.Eyeshot.Entities.Leader.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D[],System.Boolean,devDept.Eyeshot.Entities.Dimension.arrowheadType,System.Double,System.Double)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Leader.Clone">
            <summary>
            Creates a deep copy of this linear dimension.
            </summary>
            <returns>The new linear dimension object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Leader.Preview(devDept.Geometry.Plane,devDept.Geometry.Point3D[])">
            <summary>
            Gets the segments for the drawing preview
            </summary>
            <param name="pln">The plane.</param>
            <param name="points">The point array</param>
            <returns>The array of segments for preview.</returns>      
        </member>
        <member name="M:devDept.Eyeshot.Entities.Leader.PreDrawDimensionD3D(devDept.Eyeshot.DrawParams)">
            <summary>
            Executes some preliminary steps before drawing a dimension for Direct3D renderer to support the thick lines.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Leader.PostDrawDimensionD3D(devDept.Eyeshot.DrawParams)">
            <summary>
            Excetues some steps after drawing a dimension for Direct3D renderer.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Leader.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Leader.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Leader.ArrowheadSize">
            <summary>
            Gets or sets the size of the arrow head.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Leader.Scale">
            <summary>
            Get or set the scale factor for the arrow head.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen"/> after changing this value.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Leader.Arrowhead">
            <summary>
            Gets or sets the arrow head type.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Leader.FirstPoint">
            <summary>
            Gets the first line point.
            </summary>        
        </member>
        <member name="P:devDept.Eyeshot.Entities.Leader.LastPoint">
            <summary>
            Gets the last line point.
            </summary>        
        </member>
        <member name="T:devDept.Eyeshot.Entities.Region">
            <summary>
            Region entity definition. By convention the first contour in the list is the outer and has counterclockwise orientation. Inners are oriented clockwise.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Plane)">
            <summary>
            Single contour and plane constructor.
            </summary>
            <param name="outer">The outer contour</param>
            <param name="pln">The contour plane</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.#ctor">
            <summary>
            Empty Constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Single contour constructor.
            </summary>
            <param name="outer">The outer contour</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Eyeshot.Entities.Region)">
            <summary>
            Copy constructor.
            </summary>
            <param name="another">The other region</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Plane,System.Boolean)">
            <summary>
            Single contour, plane and sorting flag constructor.
            </summary>
            <param name="outer">The outer contour</param>
            <param name="pln">The contour plane</param>
            <param name="sortAndOrient">When true, the contour is properly oriented.</param> 
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Eyeshot.Entities.ICurve[])">
            <summary>
            List of contours constructor.
            </summary>
            <param name="contours">The list of contours</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            List of contours constructor.
            </summary>
            <param name="contours">The list of contours</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Plane)">
            <summary>
            List of contours and plane constructor.
            </summary>
            <param name="contours">The list of planar contours</param>
            <param name="pln">The contours plane</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Plane,System.Boolean)">
            <summary>
            List of contours, plane and sorting flag constructor.
            </summary>
            <param name="contours">The list of planar contours</param>
            <param name="pln">The contours plane</param>
            <param name="sortAndOrient">When true, the contours are properly sorted and oriented.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.SortAndOrient">
            <summary>
            Sorts and orients internal contours.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.GetAtLeastFourVertices(devDept.Eyeshot.Entities.ICurve,System.Double)">
            <summary>
            We always need at least 4 points to determine the orientation (area) of a closed polygon.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Offset(System.Double,System.Double)">
            <summary>
            Offsets the region of the specified amount.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="tolerance">Tolereance</param>
            <returns>The offset curves of the region contours.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Offset(System.Double,System.Double,System.Boolean)">
            <summary>
            Offsets the region of the specified amount.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="tolerance">Tolereance</param>
            <param name="sharp">If false, offset curves are connected with an arc.</param>
            <returns>The offset curves of the region contours.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Clone">
            <summary>
            Creates a deep copy of this region.
            </summary>
            <returns>The new region object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.ConvertToMesh(System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Converts this region to a <see cref="T:devDept.Eyeshot.Entities.Mesh"/> object.
            </summary>
            <param name="tolerance">Tessellation tolerance</param>
            <returns>The resulting Mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.ConvertToSurface">
            <summary>
            Converts this region to a <see cref="T:devDept.Eyeshot.Entities.Surface"/> object.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.WriteXML(System.String,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Region})">
            <summary>
            Write a list of regions to an XML file.
            </summary>
            <param name="fileName">The name of the file to save</param>
            <param name="regions">The list of regions to save</param>
            <remarks>For debugging purposes only!</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.WriteXML(System.String)">
            <summary>
            Write the region to an XML file. For debugging purposes only.
            </summary>
            <param name="fileName">The name of the file to save</param>
            <remarks>For debugging purposes only!</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.IsPointInside(devDept.Geometry.Point2D)">
            <summary>
            Tests if a 2D point is inside the region.
            </summary>
            <param name="testPoint">The test 2D point</param>
            <returns>True if the 2D point is inside, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.IsPointInside(devDept.Geometry.Point2D,System.Double)">
            <summary>
            Tests if a 2D point is inside the region.
            </summary>
            <param name="testPoint">The test 2D point</param>
            <param name="problemSize">Usually the diagonal of the outer contour</param>
            <returns>True if the 2D point is inside, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.PointInPolygon(devDept.Geometry.IntPoint,System.Collections.Generic.IList{devDept.Geometry.IntPoint})">
            <summary>
            Tests if a 2D point is inside a 2D polygon.
            </summary>
            <param name="testPoint">The test 2D point</param>
            <param name="polygon">The polygon</param>
            <returns>True if the 2D point is inside, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.QuickOffset(System.Double,System.Double)">
            <summary>
            Quick offset function for NC toolpaths.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="tol">Regeneration tolerance</param>
            <returns>An array of curves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.QuickOffset(System.Double,devDept.Eyeshot.Entities.cornerType,System.Double)">
            <summary>
            Quick offset function for NC toolpaths.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="ct">Corner type</param>
            <param name="tol">Regeneration tolerance</param>
            <returns>An array of curves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.QuickOffset(System.Double,devDept.Eyeshot.Entities.cornerType,System.Double,System.Double)">
            <summary>
            Quick offset function for NC toolpaths.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="ct">Corner type</param>
            <param name="miterLimit">The higher the miter limit setting, the sharper the corner can be while retaining its miter.</param>
            <param name="tol">Regeneration tolerance</param>
            <returns>An array of curves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Pocket(System.Double,System.Double)">
            <summary>
            Pocket function for NC toolpaths.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="tol">Regeneration tolerance</param>
            <returns>An array of curves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Pocket(System.Double,devDept.Eyeshot.Entities.cornerType,System.Double)">
            <summary>
            Pocket function for NC toolpaths.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="ct">Corner type</param>
            <param name="tol">Regeneration tolerance</param>
            <returns>An array of curves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Pocket(System.Double,devDept.Eyeshot.Entities.cornerType,System.Double,System.Double)">
            <summary>
            Pocket function for NC toolpaths.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="ct">Corner type</param>
            <param name="miterLimit">The higher the miter limit setting, the sharper the corner can be while retaining its miter.</param>
            <param name="tol">Regeneration tolerance</param>
            <returns>An array of curves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Union``1(``0,``0)">
            <summary>Boolean union between two regions.</summary>        
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>An array of regions if the operation is successful, null/Nothing otherwise.</returns> 
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Difference``1(``0,``0)">
            <summary>Boolean difference between two regions.</summary>        
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>An array of regions if the operation is successful, null/Nothing otherwise.</returns> 
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Intersection``1(``0,``0)">
            <summary>Boolean intersection between two regions.</summary>        
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>An array of regions if the operation is successful, null/Nothing otherwise.</returns> 
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Trim(devDept.Eyeshot.Entities.Region,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Eyeshot.Entities.Region[]@)">
            <summary>
            Trims the region using the given - open - curves.
            </summary>
            <param name="original">The region to be trim</param>
            <param name="curves">The curves intersecting the region profiles</param>
            <param name="result">The resulting list of regions</param>
            <returns>True if the operation was successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.SplitRegions``1(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            Sorts contours from left to right (and from bottom to top) and for each outer contour looks for inners inside it.
            </summary>
            <returns>The resulting regions</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.SplitRegionsS(devDept.Eyeshot.Entities.Region,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            Sorts contours from left to right (and from bottom to top) and for each outer contour looks for inners inside it.
            </summary>
            <returns>The resulting regions</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Extend(System.Collections.Generic.List{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            Extends the trim open contour to facilitate PolyBooleans
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Extrude(devDept.Geometry.Vector3D,System.Double)">
            <summary>
            Extrudes a region creating a new mesh. Mesh.natureType of the new mesh is set to smooth.
            </summary>
            <param name="amount">Extrusion amount</param>
            <param name="tolerance">Entity region needs to be converted to Mesh type, this is the conversion tolerance</param>
            <returns>Result Mesh object obtained extruding the region</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Extrude(devDept.Geometry.Vector3D,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
             Extrudes a region creating a new mesh.
            </summary>
            <param name="amount">Extrusion amount</param>
            <param name="tolerance">Entity region needs to be converted to Mesh type, this is the conversion tolerance</param>
            <param name="meshType"> Entity region needs to be converted to Mesh, this is the Mesh.natureType of the new mesh object</param>
            <returns>Result Mesh object obtained extruding the region</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Extrude(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Extrudes a region creating a new mesh. Mesh.natureType of the new mesh is set to smooth.
            </summary>
            <param name="x">Extrusion amount along the axis X</param>
            <param name="y">Extrusion amount along the axis Y</param>
            <param name="z">Extrusion amount along the axis Z</param>
            <param name="tolerance">Entity region needs to be converted to Mesh type, this is the conversion tolerance</param>
            <returns>Result Mesh object obtained extruding the region</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Region.Extrude(System.Double,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
             Extrudes a region creating a new mesh. Mesh.natureType of the new mesh is setted to smooth.
            </summary>
            <param name="x">Extrusion amount along the axis X</param>
            <param name="y">Extrusion amount along the axis Y</param>
            <param name="z">Extrusion amount along the axis Z</param>
            <param name="tolerance">Entity region needs to be converted to Mesh, this is the conversion tolerance</param>
            <param name="meshType"> Entity region needs to be converted to Mesh, this is the Mesh.natureType of the new mesh object</param>
            <returns>Result Mesh object obtained extruding the region</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Region.ContourList">
            <summary>
            Gets o sets the list of contours inside the region.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Region.Triangles">
            <summary>
            Gets the region triangles.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.RectangularRegion">
            <summary>
            Rectangular region definition.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.RectangularRegion.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.RectangularRegion.#ctor(System.Double,System.Double)">
            <summary>
            Width and height constructor.
            </summary>
            <param name="width">Rectangle's width</param>
            <param name="height">Rectangle's height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.RectangularRegion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Position and dimensions constructor.
            </summary>
            <param name="x">Lower-left corner position along X-axis</param>
            <param name="y">Lower-left corner position along y-axis</param>
            <param name="width">Rectangle's width</param>
            <param name="height">Rectangle's height</param>
        </member>
        <member name="T:devDept.Eyeshot.Entities.CircularRegion">
            <summary>
            Circular region definition.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CircularRegion.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CircularRegion.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Center and radius constructor.
            </summary>
            <param name="x">Center's X coordinate</param>
            <param name="y">Center's Y coordinate</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CircularRegion.#ctor(devDept.Geometry.Point2D,System.Double)">
            <summary>
            Center point and radius constructor.
            </summary>
            <param name="center">2D center point</param>
            <param name="radius">Radius</param>
        </member>
        <member name="T:devDept.Eyeshot.Entities.EllipticalRegion">
            <summary>
            Elliptical region definition.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalRegion.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalRegion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Center and radii constructor.
            </summary>
            <param name="x">Center's X coordinate</param>
            <param name="y">Center's Y coordinate</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalRegion.#ctor(devDept.Geometry.Point2D,System.Double,System.Double)">
            <summary>
            Center point and radii constructor.
            </summary>
            <param name="center">2D center point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
        </member>
        <member name="T:devDept.Eyeshot.Entities.PolygonalRegion">
            <summary>
            Polygonal region definition.
            </summary>
            <remarks>It works only on the XY plane. For other planes please use <see cref="T:devDept.Eyeshot.Entities.Region"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PolygonalRegion.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PolygonalRegion.#ctor(devDept.Geometry.Point2D[])">
            <summary>
            List of 2D points constructor. 
            </summary>
            <param name="points">A list of 2D points</param>
        </member>
        <member name="T:devDept.Eyeshot.FontDataDictionary">
            <summary>
            The FontData dictionary.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.FontDataDictionary.Item(System.String)">
            <summary>
            Text styles indexer property.
            </summary>
            <param name="name">The name of the text style.</param>
            <returns>The text style with the specified name.</returns>
        </member>
        <member name="T:devDept.Eyeshot.TextStyleDictionary">
            <summary>
            Text style dictionary class.
            </summary>
            <remarks> The "Default" style is applied to all text-derived entities that do not specify a different <see cref="P:devDept.Eyeshot.Entities.Text.Style"/>.
            	<para>
                    Call <see cref="M:devDept.Eyeshot.Entities.Entity.Regen(System.Double)"/> to see the effect when changing the value of a dictionary element.
                </para>
            </remarks>
            <remarks>Don't change the values of the dictionary entries but assign a new <see cref="T:devDept.Eyeshot.TextStyle"/> object instead, otherwise the entities won't be notified of the changes.</remarks>
            <seealso cref="T:devDept.Eyeshot.Entities.Text"/>
            <seealso cref="T:devDept.Eyeshot.Entities.LinearDim">LinearDim class</seealso>
            <seealso cref="T:devDept.Eyeshot.Entities.RadialDim">RadialDim class</seealso>
            <seealso cref="T:devDept.Eyeshot.Entities.DiametricDim">DiametricDim class</seealso>
        </member>
        <member name="M:devDept.Eyeshot.TextStyleDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.TextStyle})">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.TextStyleDictionary.Add(System.String,devDept.Eyeshot.TextStyle)">
            <summary>
            Adds one <see cref="T:devDept.Eyeshot.TextStyle"/> to this dictionary.
            </summary>
            <param name="name">The text style name</param>
            <param name="item">The <see cref="T:devDept.Eyeshot.TextStyle"/> to be added</param>
        </member>
        <member name="M:devDept.Eyeshot.TextStyleDictionary.Remove(System.String)">
            <summary>
            Removes the occurrence of a specific entity from this dictionary.
            </summary>
            <param name="name">The name of the text style to remove</param>
            <returns>True if text style is successfully removed; otherwise, false. This method also
            returns false if text style was not found in this collection.</returns>
        </member>
        <member name="M:devDept.Eyeshot.TextStyleDictionary.Clear">
            <summary>
            Clears the text style dictionary.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.TextStyleDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:devDept.Eyeshot.TextStyleDictionary.LoadFont(System.String,System.String)">
            <summary>
            Loads a ".shx" shape file.
            </summary>
            <param name="styleName">The style name</param>
            <param name="fileName">The SHX file name</param>
            <remarks>Call a <see cref="M:devDept.Eyeshot.EntityList.Regen"/> afterwards</remarks>
        </member>
        <member name="P:devDept.Eyeshot.TextStyleDictionary.Item(System.String)">
            <summary>
            Text styles indexer property.
            </summary>
            <param name="name">The name of the text style.</param>
            <returns>The text style with the specified name.</returns>
        </member>
        <member name="T:devDept.Eyeshot.TextStyle">
            <summary>
            Class holding the data for the text style.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.TextStyle.#ctor(System.String,System.Drawing.FontStyle,System.Double)">
            <summary>
            Standard constructor.
            </summary>
            <param name="fontFamilyName">The font family name</param>
            <param name="style">The font style</param>
            <param name="widthFactor">The width factor</param>
        </member>
        <member name="M:devDept.Eyeshot.TextStyle.#ctor(devDept.Eyeshot.TextStyle)">
            <summary>
            Copy constructor.
            </summary>
            <param name="another">The other object</param>
        </member>
        <member name="M:devDept.Eyeshot.TextStyle.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.TextStyle.#ctor(System.String)">
            <summary>
            Filename constructor.
            </summary>
            <param name="fileName">The SHX file name</param>
        </member>
        <member name="M:devDept.Eyeshot.TextStyle.Load(System.String)">
            <summary>
            Loads a ".shx" shape file.
            </summary>
            <param name="fileName">The SHX file name</param>
        </member>
        <member name="M:devDept.Eyeshot.TextStyle.IsSHX">
            <summary>
            Tells if the TextStyle was created from a SHX file.
            </summary>
            <remarks>SHX text files support only the <see cref="F:System.Drawing.FontStyle.Regular"/> font style.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.TextStyle.FontFamilyName">
            <summary>
            Gets or sets te font family name.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.TextStyle.Style">
            <summary>
            Gets or sets the font style.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.TextStyle.WidthFactor">
            <summary>
            Gets or sets the width factor.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.TextStyle.FileName">
            <summary>
            The SHX file name (for SHX fonts).
            </summary>
            <remarks>The font file can be loaded with the <see cref="M:devDept.Eyeshot.TextStyleDictionary.LoadFont(System.String,System.String)"/>.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.FontData">
            <summary>
            Font data class. Used internally to store the data for the characters of a given <see cref="T:System.Drawing.Font"/>.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.FontData.#ctor(System.String,devDept.Graphics.RenderContextBase,System.String,System.Drawing.FontStyle)">
            <summary>
            String constructor.
            </summary>
            <param name="s"></param>
            <param name="renderContext"></param>
            <param name="fontFamilyName">The font family name</param>
            <param name="fontStyle">the font style</param>
        </member>
        <member name="M:devDept.Eyeshot.FontData.#ctor(System.Char,devDept.Graphics.RenderContextBase,System.String,System.Drawing.FontStyle)">
            <summary>
            Char constructor.
            </summary>
            <param name="c"></param>
            <param name="renderContext"></param>
            <param name="fontFamilyName"></param>
            <param name="fontStyle"></param>
        </member>
        <member name="M:devDept.Eyeshot.FontData.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.FontStyleData">
            <summary>
            FontStyleData data class. Holds the data for the characters of a given <see cref="T:System.Drawing.Font"/> and <see cref="T:System.Drawing.FontStyle"/>.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.FontStyleCharData">
            <summary>
            Character data class. Used internally to store characters data.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.FontStyleCharData.GetEntities">
            <summary>
            Gets the cloned meshes of the FontStyleCharData.
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.FontStyleCharData.#ctor(System.String,devDept.Graphics.RenderContextBase,System.String,System.Drawing.FontStyle,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="s">The character</param>
            <param name="renderContext">The render context</param>
            <param name="fontName">The font name</param>
            <param name="scaleToUnitSize">Scale that converts the font to unit size</param>
        </member>
        <member name="M:devDept.Eyeshot.FontStyleCharData.#ctor(System.String,devDept.Graphics.RenderContextBase,devDept.Eyeshot.TextStyle,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="s">The character</param>
            <param name="textStyle">The text stye</param>
            <param name="scaleToUnitSize">Scale that converts the font to unit size</param>
        </member>
        <member name="T:devDept.Eyeshot.MaterialDictionary">
            <summary>
            Material dictionary. Automatically manages OpenGL resources allocation / deallocation.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.MaterialDictionary.Add(System.String,System.Drawing.Image)">
            <summary>
            Adds a new material definition.
            </summary>
            <param name="name">The material name</param>
            <param name="texture">The material texture image</param>
        </member>
        <member name="M:devDept.Eyeshot.MaterialDictionary.Add(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Adds a new material definition.
            </summary>
            <param name="name">The material name</param>
            <param name="ambient">The material ambient intensity</param>
            <param name="diffuse">The material diffuse intensity</param>
            <param name="specular">The material specular intensity</param>
            <param name="shininess">The material shininess factor (0-1)</param>
        </member>
        <member name="M:devDept.Eyeshot.MaterialDictionary.Add(System.String,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.Image)">
            <summary>
            Adds a new material definition.
            </summary>
            <param name="name">The material name</param>
            <param name="ambient">The material ambient intensity</param>
            <param name="specular">The material specular intensity</param>
            <param name="shininess">The material shininess factor (0-1)</param>
            <param name="texture">The material texture image</param>  
        </member>
        <member name="M:devDept.Eyeshot.MaterialDictionary.Add(System.String,System.Drawing.Color,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a new material definition.
            </summary>
            <param name="name">Material name</param>
            <param name="diffuse">Material diffuse intensity</param>
            <param name="poisson">Material modulus of elasticity</param>
            <param name="young">Material Poisson's ratio</param>
            <param name="yield">Material yield strength</param>  
            <param name="density">Material density</param>
            <param name="coeffOfThermalExp">Material coefficient of thermal expansion</param>
        </member>
        <member name="M:devDept.Eyeshot.MaterialDictionary.Add(System.String,devDept.Graphics.Material)">
            <summary>
            Adds one <see cref="T:devDept.Graphics.Material"/> to this dictionary.
            </summary>
            <param name="name">The material name</param>
            <param name="item">The <see cref="T:devDept.Graphics.Material"/> to be added</param>
        </member>
        <member name="M:devDept.Eyeshot.MaterialDictionary.Remove(System.String)">
            <summary>
            Removes the occurrence of a specific entity from this dictionary.
            </summary>
            <param name="materialName">The name of the material to remove</param>
            <returns>True if material is successfully removed; otherwise, false. This method also
            returns false if material was not found in this collection.</returns>
        </member>
        <member name="M:devDept.Eyeshot.MaterialDictionary.Clear">
            <summary>
            Clears the material dictionary.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.MaterialDictionary.Item(System.String)">
            <summary>
            Materials indexer property.
            </summary>
            <param name="index">The name of the material.</param>
            <returns>The material with the name specified.</returns>
        </member>
        <member name="T:devDept.Eyeshot.TextureMappingData">
            <summary>
            Texture mapping data.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.TextureMappingData.Clone">
            <summary>
            Creates a deep copy of this texture mapping data.
            </summary>
            <returns>The new texture mapping data object.</returns>
        </member>
        <member name="P:devDept.Eyeshot.TextureMappingData.Transformation">
            <summary>
            Gets or sets the transformation applied to the mapping.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.TextureMappingData.Max">
            <summary>
            Gets or sets bounding box min point.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.TextureMappingData.Min">
            <summary>
            Gets or sets bounding box max point.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.TextureMappingData.MappingMode">
            <summary>
            Gets or sets indicates the way material's texture is wrapped on the object.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.TextureMappingData.ScaleX">
            <summary>
            Gets or sets material's texture scale along the X axis.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.TextureMappingData.ScaleY">
            <summary>
            Gets or sets material's texture scale along the Y axis.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.FastPointCloud">
            <summary>
            Fast point cloud entity. Suitable for huge number of points.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.FastPointCloud.#ctor(System.Single[])">
            <summary>
            Point array only constructor.
            </summary>
            <param name="pointArray">The point array defined as XYZ tuples</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.FastPointCloud.#ctor(System.Single[],System.Single)">
            <summary>
            Point array and point size constructor.
            </summary>
            <param name="pointArray">The point array defined as XYZ tuples</param>
            <param name="pointSize">Point size</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.FastPointCloud.#ctor(System.Single[],System.Byte[])">
            <summary>
            Point array and color array constructor.
            </summary>
            <param name="pointArray">The point array defined as XYZ tuples</param>
            <param name="rgbArray">The color array defined as RGB tuples, RGBA tuples or as modulation factors (see <see cref="P:devDept.Eyeshot.Entities.FastPointCloud.ColorArray"/> documentation for details)</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.FastPointCloud.#ctor(System.Single[],System.Byte[],System.Single)">
            <summary>
            Point array and color array constructor.
            </summary>
            <param name="pointArray">The point array defined as XYZ tuples</param>
            <param name="rgbArray">The color array defined as RGB tuples, RGBA tuples or as modulation factors (see <see cref="P:devDept.Eyeshot.Entities.FastPointCloud.ColorArray"/> documentation for details)</param>
            <param name="pointSize">Point size </param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.FastPointCloud.CentroidDownsampling(System.Double)">
            <summary>
            Performs a centroid downsampling to this fastpointcloud.
            </summary>
            <param name="voxelSize">The size of the single voxel for the grid filter.</param>        
            <remarks>
            You need to call ViewportLayout.Entities.Regen() to see the effect of this command.
            </remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.FastPointCloud.CenterDownsampling(System.Double)">
            <summary>
            Performs a center downsampling to this fastpointcloud.
            </summary>
            <param name="voxelSize">The size of the single voxel for the grid filter.</param>
            <remarks>
            You need to call ViewportLayout.Entities.Regen() to see the effect of this command.
            </remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.FastPointCloud.FitCircle(devDept.Geometry.Plane@,System.Double@)">
            <summary>
            Fits a circle to the point cloud vertices.
            </summary>
            <param name="pln">The plane of the circle, whose origin is the center of the circle</param>
            <param name="radius">The radius of the circle</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.FastPointCloud.FitLine(devDept.Geometry.Point3D@,devDept.Geometry.Vector3D@)">
            <summary>
            Fits a line to the point cloud vertices.
            </summary>
            <param name="p">The line start point</param>
            <param name="v">The line direction</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.FastPointCloud.FitPlane">
            <summary>
            Fits a plane to the point cloud vertices.
            </summary>
            <returns>The plane.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.FastPointCloud.DrawingStyle">
            <summary>
            Gets or sets point cloud drawing style.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.FastPointCloud.Nature">
            <summary>
            Gets point cloud nature.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.FastPointCloud.PointArray">
            <summary>
            Gets or sets point array.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.FastPointCloud.ColorArray">
            <summary>
            Gets or sets the color array.
            </summary>
            <remarks>The size of the array determines how the colors are applied to the entity: 
            1 byte per vertex is applied as a modulation factor to the <see cref="T:System.Drawing.Color"/> of the entity. This requires the use of shaders so the 
            graphics acceleration must be turned on, <see cref="!:ViewportLayout.UseShaders"/> must be true and the <see cref="P:devDept.Eyeshot.ViewportLayout.DisplayMode"/> must be <see cref="F:devDept.Eyeshot.displayType.Rendered"/>
            3 bytes per vertex are applied as RGB colors
            4 bytes per vertex are applied as RGBA colors (in order for the alpha transparency to work, the entity must also have a <see cref="T:System.Drawing.Color"/> with alpha &lt; 255</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.FastPointCloud.ZoomFitSpeed">
            <summary>
            Gets or sets the number of points skipped during zoom fit.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.AngularDim">
            <summary>
            Angular dimension entity.
            </summary>
            <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.Style"/> property and calling the ViewportLayout.Entities.Regen() method.</remarks>
            <seealso cref="P:devDept.Eyeshot.Entities.Text.Style"/>
            <seealso cref="T:devDept.Eyeshot.Entities.RadialDim"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.AngularDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)">
            <summary>
            Three 3D points constructor.
            </summary>
            <param name="origin">Origin point</param>
            <param name="extLine1">First extension line point</param>
            <param name="extLine2">Second extension line point</param>
            <param name="dimLinePos">Dimension line position. Affects text position when the text cannot fit between extension lines.</param>
            <param name="textHeight">Text height</param>
            <param name="dimPlane">The dimension plane</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.AngularDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double)">
            <summary>
            Sketch plane constructor.
            </summary>
            <param name="origin">Origin point</param>
            <param name="extLine1">First extension line point</param>
            <param name="extLine2">Second extension line point</param>
            <param name="dimLinePos">Dimension line position. Affects text position when the text cannot fit between extension lines.</param>
            <param name="textHeight">Text height</param>
            <param name="sketchPlane">The sketch plane</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.AngularDim.#ctor(devDept.Geometry.Plane,devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Line,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)">
            <summary>
            Two lines constructor.
            </summary>
            <param name="dimPlane">The dimension plane</param>
            <param name="line1">First line</param>
            <param name="line2">Second line</param>
            <param name="quadrantPoint">The two lines subdivide the round angle in four quadrants,  this point help to select the desired one.</param>
            <param name="dimLinePos">Dimension line position. Affects text position when the text cannot fit between extension lines and affects the Arc drawing position</param>
            <param name="textHeight">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.AngularDim.Clone">
            <summary>
            Creates a deep copy of this linear dimension.
            </summary>
            <returns>The new linear dimension object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.AngularDim.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.AngularDim.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AngularDim.ExtensionBeyondDimLine">
            <summary>
            Specifies the amount to extend the extension line beyond the dimension line.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AngularDim.OffsetFromOrigin">
            <summary>
            Specifies the offset of extension lines from the origin points.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AngularDim.LeftArrowhead">
            <summary>
            Gets or sets the left arrow head type.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AngularDim.RightArrowhead">
            <summary>
            Gets or sets the right arrow head type.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AngularDim.Origin">
            <summary>
            Gets or sets the origin point.
            </summary>
            <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AngularDim.ExtLine1">
            <summary>
            Gets or sets the first extension line point.
            </summary>
            <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AngularDim.ExtLine2">
            <summary>
            Gets or sets the second extension line point.
            </summary>
            <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AngularDim.StartAngle">
            <summary>
            Gets the dimension arc start angle.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AngularDim.EndAngle">
            <summary>
            Gets the dimension arc end angle.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AngularDim.Radius">
            <summary>
            Gets the dimension arc radius.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Solid3D">
            <summary>
            BRep solid entity definition.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.#ctor(devDept.Geometry.Point3D[],devDept.Eyeshot.Entities.Solid3D.Edge[],devDept.Eyeshot.Entities.Solid3D.Face[],devDept.Eyeshot.Entities.Solid3D.Face[][])">
            <summary>
            Inner shells constructor.
            </summary>
            <param name="vertices">The vertex array</param>
            <param name="edges">The edge array</param>
            <param name="faces">The outer shell face array</param>
            <param name="inners">The inner shells face array</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.#ctor(devDept.Geometry.Point3D[],devDept.Eyeshot.Entities.Solid3D.Edge[],devDept.Eyeshot.Entities.Solid3D.Face[],System.Boolean)">
            <summary>
            For STEP/IGES import only.
            </summary>
            <param name="buildParents">When the shell definition comes from STEP or IGES import Edge.Parents is ready to use, otherwise it's null.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.Clone">
            <summary>
            Creates a deep copy of this Solid.
            </summary>
            <returns>The new solid object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.ConvertToSurface(System.Double)">
            <summary>
            Converts this shell to a list of individual surfaces.
            </summary>
            <param name="tol">Regeneration tolerance</param>
            <returns>An array of entities</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.ConvertToSurface">
            <summary>
            Converts this shell to a list of individual surfaces using current triangulation.
            </summary>
            <returns>An array of entities.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.ConvertToMesh(System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Converts this shell to a list of individual meshes.
            </summary>
            <param name="tol">The tolerance</param>
            <param name="meshNature">The Mesh <see cref="T:devDept.Eyeshot.Entities.Mesh.natureType">nature</see></param>
            <returns>The resulting mesh object</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.ConvertToMesh(devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Converts this shell to a list of individual meshes using current triangulation.
            </summary>
            <param name="meshNature">The Mesh <see cref="T:devDept.Eyeshot.Entities.Mesh.natureType">nature</see></param>
            <returns>The resulting mesh object</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.CreateBox(System.Double,System.Double,System.Double)">
            <summary>Creates a box primitive.</summary>
            <param name="width">Box's width</param>
            <param name="depth">Box's depth</param>
            <param name="height">Box's height</param>
             <returns>The resulting Solid3D object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.CreateCylinder(System.Double,System.Double)">
            <summary>
            Creates a Cylinder primitive.
            </summary>
            <param name="radius">Cylinder's radius</param>
            <param name="height">Cylinder's height</param>
            <returns>The resulting Solid3D object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.CreateCone(System.Double,System.Double)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="height">The cone's height</param>
             <returns>The resulting Solid3D object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.CreateCone(System.Double,System.Double,System.Double)">
            <summary>Creates a Cone primitive.</summary>
             <param name="baseRadius">Cone's base radius</param>
             <param name="topRadius">Cone's top radius</param>
             <param name="height">The cone's height</param>
             <returns>The resulting Solid3D object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.CreateSphere(System.Double)">
            <summary>
            Creates a Sphere primitive.
            </summary>
            <param name="radius">Sphere's radius</param>
            <returns>The resulting Solid3D object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.CreateTorus(System.Double,System.Double)">
             <summary>
             Creates a Torus primitive.
             </summary>
            <param name="majorRadius">Torus radius</param>
            <param name="minorRadius">Torus section radius</param>
             <returns>The resulting Solid3D object.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Solid3D.Edges">
            <summary>
            Gets or sets edge array.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Solid3D.Faces">
            <summary>
            Gets or sets outer shell face array.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Solid3D.Inners">
            <summary>
            Gets or sets inner (void) shells face array.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Solid3D.IsClosed">
            <summary>
            Gets the shell closure status.
            </summary>
            <returns>True if the shell is closed, false otherwise.</returns>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Solid3D.Loop">
            <summary>
            Solid3D face loop definition.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Solid3D.Loop.Sense">
            <summary>
            The loop orientation. True means same sense.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Solid3D.Loop.Segments">
            <summary>
            The array of oriented edges that compose the loop.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.Loop.#ctor(devDept.Eyeshot.Entities.Solid3D.OrientedEdge[])">
            <summary>
            Segments only constructor.
            </summary>
            <param name="segments">The array of oriented edges that compose the loop</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.Loop.#ctor(devDept.Eyeshot.Entities.Solid3D.OrientedEdge[],System.Boolean)">
            <summary>
            Segments and sense constructor.
            </summary>
            <param name="segments">The array of oriented edges that compose the loop.</param>
            <param name="sense">The loop sense</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.Loop.Clone">
            <summary>
            Creates a deep copy of this Loop.
            </summary>
            <returns>The new loop object.</returns>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Solid3D.Face">
            <summary>
            Solid3D face definition.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Solid3D.Face.Loops">
            <summary>
            Trim loop array.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Solid3D.Face.Surface">
            <summary>
            Analytic representation of this face.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Solid3D.Face.Parametric">
            <summary>
            Parametric representation of this face.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Solid3D.Face.Sense">
            <summary>
            Face sense.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.Face.#ctor">
            <summary>
            Empty constructor;
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.Face.#ctor(devDept.Geometry.AnalyticSurf,devDept.Eyeshot.Entities.Solid3D.Loop[],System.Boolean)">
            <summary>
            Faces and loops constructor.
            </summary>
            <param name="surface">The analytic surface</param>
            <param name="loops">The trim loop array</param>
            <param name="sense">The face sense</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.Face.#ctor(devDept.Geometry.AnalyticSurf,devDept.Eyeshot.Entities.Solid3D.Loop,System.Boolean)">
            <summary>
            Faces and loop constructor.
            </summary>
            <param name="surface">The analytic surface</param>
            <param name="loop">The trim loop</param>
            <param name="sense">The face sense</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.Face.Clone">
            <summary>
            Creates a deep copy of this Face.
            </summary>
            <returns>The new face object.</returns>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Solid3D.Edge">
            <summary>
            Solid3D edge definition
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Solid3D.Edge.StartPointIndex">
            <summary>
            Edge start point index.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Solid3D.Edge.EndPointIndex">
            <summary>
            Edge end point index.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Solid3D.Edge.Curve">
            <summary>
            Edge curve.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Solid3D.Edge.ShellIndex">
            <summary>
            Index of the owner shell (available only after entity regeneration). Zero represents outer shell.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Solid3D.Edge.Parents">
            <summary>
            Parent faces (available only after entity regeneration). Can be an array of one or two items. To be used in conjuction with <see cref="F:devDept.Eyeshot.Entities.Solid3D.Edge.ShellIndex"/>.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.Edge.#ctor(devDept.Eyeshot.Entities.ICurve,System.Int32,System.Int32)">
            <summary>
            Curve and end point indices constructor.
            </summary>
            <param name="curve">The actual curve</param>
            <param name="startPointIndex">The start point index</param>
            <param name="endPointIndex">The end point index</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.Edge.Clone">
            <summary>
            Creates a deep copy of this Edge.
            </summary>
            <returns>The new edge object.</returns>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Solid3D.OrientedEdge">
            <summary>
            Solid3D oriented edge definition.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Solid3D.OrientedEdge.Sense">
            <summary>
            Orientation flag.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Solid3D.OrientedEdge.CurveIndex">
            <summary>
            Edge curve index.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.OrientedEdge.#ctor(System.Int32,System.Boolean)">
            <summary>
            Edge curve index and orientation flag constructor.
            </summary>
            <param name="curveIndex">The edge curve index</param>
            <param name="sense">The edge curve orientation</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.OrientedEdge.GetOrientedCurve(devDept.Eyeshot.Entities.Solid3D.Edge[])">
            <summary>
            Gets a copy of the edge curve properly oriented.
            </summary>
            <param name="edges">The edge array</param>
            <returns>A copy of the curve properly oriented</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.OrientedEdge.GetStartPoint(devDept.Geometry.Point3D[],devDept.Eyeshot.Entities.Solid3D.Edge[])">
            <summary>
            Gets edge curve start point taking in account the <see cref="F:devDept.Eyeshot.Entities.Solid3D.OrientedEdge.Sense"/> flag.
            </summary>
            <param name="vertices">The vertex array</param>
            <param name="edges">The edge array</param>
            <returns>A 3D point.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Solid3D.OrientedEdge.GetEndPoint(devDept.Geometry.Point3D[],devDept.Eyeshot.Entities.Solid3D.Edge[])">
            <summary>
            Gets edge curve end point taking in account the <see cref="F:devDept.Eyeshot.Entities.Solid3D.OrientedEdge.Sense"/> flag.
            </summary>
            <param name="vertices">The vertex array</param>
            <param name="edges">The edge array</param>
            <returns>A 3D point.</returns>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Surface">
            <summary>
            Nurbs surface entity.
            </summary>
            <summary>
            Nurbs surface entity.
            </summary>
            <summary>
            Nurbs surface entity.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.NurbsBase">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.NurbsBase.#ctor(devDept.Eyeshot.Entities.entityNatureType)">
            <summary>
            Entity nature constructor.
            </summary>
            <param name="entityNature"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.NurbsBase.InitBinCoeff(System.Int32)">
            <summary>
            Create table with binomial coefficients (using the triangle method of Pascal)
            B[0][0] = 1;
            B[v][k] = B[v-1][k-1] + B[v-1][k]
            These are getting large very fast, so 'v' shouldn't be to big
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.NurbsBase.Bernstain(System.Int32,System.Int32,System.Double)">
            <summary>
            Computes the value of Berstain polynomial.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.NurbsBase.ChordLengthParametrization``1(System.Collections.Generic.IList{``0},System.Double[]@)">
            <summary>
            Computes chord length parameterization from a vector of points.
            </summary>
            <param name="Q">The list of 3D points</param>
            <param name="ub">The resulting length parameterization</param>
            <returns>The total chord length.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.NurbsBase.ChordLengthParametrization``1(System.Int32,System.Int32,System.Collections.Generic.IList{``0},System.Double[]@,System.Double[]@)">
            <summary>
            Computes chord length parameterization from a vector of points.
            </summary>
            <param name="from">Start index</param>
            <param name="to">End index</param>
            <param name="Q">The list of 3D points</param>
            <param name="distances">The length of each chord</param>
            <param name="ub">The resulting length parameterization</param>
            <returns>The total chord length.</returns>
        </member>
        <member name="F:devDept.Eyeshot.Entities.NurbsBase.geometricalAttributesDirty">
            <summary>
            When true, geometrical attributes neeed to be updated.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.NurbsBase.ControlBoundingBox(devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
            <summary>
            Computes the extension of the control polygon/net.
            </summary>
            <param name="min">Min 3D point</param>
            <param name="max">Max 3D point</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.NurbsBase.ControlBoundingBox">
            <summary>
            Computes the extension of the control polygon/net.
            </summary>
            <returns>The 3D size of the control polygon/net</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.NurbsBase.intccini(System.Double[])">
            <summary>
            Initialize the Chebychev Vector
            </summary>
            <param name="w">The vector to initialize</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.NurbsBase.UniformKnotVector(System.Int32,System.Int32)">
            <summary>
            Constructs a uniform clamped knot vector. v[j+1]-v[j] is equal for all inners nodes.
            </summary>
            <param name="p">Degree</param>
            <param name="n">Number of control points</param>
            <returns>The resulting knot vector.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.NurbsBase.BezierToPowerMatrix(System.Int32)">
            <summary>
            Computes Mp efficiently.
            </summary>
            <param name="p">The degree</param>
            <returns>The Mp matrix.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.NurbsBase.PowerToBezierMatrix(System.Int32,System.Double[0:,0:])">
            <summary>
            Computes the inverse of Mp.
            </summary>
            <param name="p">The degree</param>
            <param name="M">The Mp matrix</param>
            <returns>The inverse matrix.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.NurbsBase.ShowControl">
            <summary>
            If true, the control polygon/net for this entity is displayed.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.NurbsBase.pointProjectionType.Trivial">
            <summary>
            degrees are both 1
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.NurbsBase.pointProjectionType.Standard">
            <summary>
            degree bigger than 1x1
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.NurbsBase.pointProjectionType.Complex">
            <summary>
            speed changes too much or invalid curvature on corners
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.NurbsBase.pointProjectionType.Ruled">
            <summary>
            ruled surface
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.maxAllowedAngle">
            <summary>
            36 degrees
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SecondDerivativesOffset(System.Double,System.Double,System.Double)">
            <summary>
            Computes the length of the second derivatives of the offset surface at parametric values [u,v].
            </summary>
            <param name="u">The parametric value</param>
            <param name="v">The parametric value</param>
            <param name="d">The offset distance</param>
            <returns>The lengths of the second derivatives.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.EvaluateOffset(System.Double,System.Double,System.Double)">
            <summary>
            Computes the offset surface's value, fist and second derivatives at parametric values [u,v].
            </summary>
            <param name="u">The parametric value</param>
            <param name="v">The parametric value</param>
            <param name="d">The offset distance</param>
            <returns>The derivatives OffKL.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Offset(System.Double,System.Double,devDept.Eyeshot.Entities.Surface@)">
            <summary>
            Computes the offset surface.
            </summary>
            <param name="amount">The signed distance</param>
            <param name="tol">The tolerance</param>
            <param name="offsetSurf">The resulting offset surface</param>
            <returns>True if the operation is succeful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.DropLoops(devDept.Eyeshot.Entities.Surface,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            Creates the 2D parametric trim loops corresponding to a 3D geometric - closed - contours list which lie on a surface.
            </summary>
            <param name="untrimmed">The surface</param>
            <param name="contours">A list of 3D contours</param>
            <returns>One or more trimmed surfaces.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.FixToroidalTwoCirclesWithSeamInBetween(devDept.Eyeshot.Entities.Surface,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Collections.Generic.List{devDept.Eyeshot.Entities.ICurve},System.Double,devDept.Eyeshot.Entities.Surface[]@,devDept.Geometry.PolyRegion2D[]@)">
            <summary>
            In the case of torus trimmed by two circles with the seam in between always returns two surfaces.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.AreSimilar(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double)">
            <summary>
            Checks if curve end points and end tangents are equal.
            </summary>
            <param name="a">First curve</param>
            <param name="b">Second curve</param>
            <param name="problemSize">The problem size</param>
            <returns>True, if the two curves can be considered similar.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.DropLoopsAndCheckDirection(System.Collections.Generic.List{devDept.Eyeshot.Entities.ICurve},devDept.Eyeshot.Entities.Surface.RepSurf,System.Boolean,System.Collections.Generic.List{devDept.Eyeshot.Entities.ICurve},System.Collections.Generic.List{devDept.Eyeshot.Entities.ICurve},System.Boolean@)">
            <summary>
            Drop loops and in the case it finds an inverted contour returns the needFlip flag as true.
            </summary>
            <returns>True if direction is fine or drop failed, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.FillGaps(devDept.Eyeshot.Entities.Surface.RepSurf,System.Collections.Generic.List{System.Collections.Generic.List{devDept.Eyeshot.Entities.ICurve}}@,System.Double,System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface.PointEx},System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface.PointEx},System.Int32,System.Boolean)">
            <summary>
            Tries to close gaps keeping the original order. Original order is fundamental to know if you need to inside or the outside of the trim region.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IsTooSmall(devDept.Eyeshot.Entities.ICurve,System.Double)">
            <summary>
            Computes quickly the curve length and compares it with tol.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.RemoveNulls(devDept.Eyeshot.Entities.ICurve[]@)">
            <summary>
            Removes null parametric curves associated with too small 3D curves
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SplitOnPoles(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.List{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            Splits the curve on the the surface poles.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.DropCurve(devDept.Eyeshot.Entities.ICurve,System.Boolean,devDept.Eyeshot.Entities.Curve@)">
            <summary>
            Creates the 2D parametric curve corresponding to a 3D geometric curve which lies on or near a surface.
            </summary>
            <param name="curve">The curve to be dropped</param>
            <param name="allowOutside"></param>
            <param name="parametric">The resulting 2D curve</param>
            <returns>True if the function succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.MakeCurveFromPoints(devDept.Geometry.PointTangent[],System.Double,devDept.Eyeshot.Entities.Curve@)">
            <summary>
            Builds a local approximation from the input points.
            </summary>
            <param name="ptList">The list of points to be approximated</param>
            <param name="tol">Tolerance used for local approximation</param>
            <param name="parametric">The resulting approximated curve</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IsOnPole(devDept.Geometry.Point3D,System.Double,devDept.Geometry.Point2D@)">
            <summary>
            Checks if the point is on one of the four collapsed 3D edges.
            </summary>
            <param name="P">The point to be tested</param>
            <param name="compareTol">The compare tolerance</param>
            <param name="parametric">The resulting parametric point</param>
            <returns>True if the 3D point P is on one of the surface collapsed edges</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SmartWalk(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Size3D,devDept.Geometry.PointTangent[]@,System.Boolean@,System.Boolean@)">
            <summary>
            Produces a two point list for Arc, Circle and Line entities on Toroidal, Cylindrical and Conical surfaces.
            </summary>
            <returns>True if the curve can be simplified, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.AdjustPointOnSeam(devDept.Geometry.Point2D)">
            <summary>
            Checks if the parametric point projection is on the right or top edge of the domain and adjust it as bottom or left
            </summary>
            <param name="paramOneThird">The 2D parametric point</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IsOnSeamU(devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Checks if a curve is on the seam of a surface.
            </summary>
            <param name="curve">The curve</param>
            <returns>True if the curve lies on the seam, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IsOnSeamV(devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Checks if a curve is on the seam of a surface.
            </summary>
            <param name="curve">The curve</param>
            <returns>True if the curve lies on the seam, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.LocalApproximation(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Arc},devDept.Eyeshot.Entities.Surface.filletType,System.Boolean,System.Double)">
            <summary>
            Local cubic approximation of a list of fillet arcs bounded to a certain error.
            </summary>
            <param name="arcList">The list of arcs to approximate</param>
            <returns>The approximated surface if the operation is successful, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.CheckError(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Arc},System.Double,devDept.Eyeshot.Entities.Surface,System.Int32[],System.Int32[]@)">
            <summary>
            Checks of fillet surface edges are close enough to arc end points. The check is performed in the middle of surface spans.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Merge(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface})">
            <summary>
            Joins a list of surfaces. Surfaces must be properly oriented.
            </summary>
            <param name="surfaces">A list of surfaces to merge</param>
            <returns>The merged surface</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.MergeKinkV(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface)">
            <summary>
            Joins two surfaces. Surfaces must be properly oriented and of the same degree.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.MergeKnotsAndPwV(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface)">
            <summary>
            Joins two surfaces. Surfaces must be properly oriented and of the same degree.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.MergeKnotsAndPwU(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface)">
            <summary>
            Joins two surfaces. Surfaces must be properly oriented and of the same degree.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Sweep(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double)">
            <summary>Creates a surface sweeping a contour on a rail.</summary>
            <param name="rail">Sweep rail</param>
            <param name="section">Contour to sweep  oriented counter-clockwise</param>
            <param name="tol">The tolerance</param>
            <returns>The resulting surfaces if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.DrawNormals(devDept.Eyeshot.DrawParams,System.Double)">
            <summary>
            Used by Solid3D
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.ComputeCurvatureMap(devDept.Eyeshot.ViewportLayout,devDept.Eyeshot.Legend,devDept.Eyeshot.Entities.Surface.curvatureType)">
            <summary>
            Computes the desired curvature map.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> object instance</param>
            <param name="legend">The legend</param>
            <param name="type">The curvature map type</param>
            <seealso cref="P:devDept.Eyeshot.Entities.Surface.ShowCurvature"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Fillet(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Constant fillet between two surfaces.
            </summary>
            <param name="F">First surface</param>
            <param name="G">Second surface</param>
            <param name="radius">Fillet radius</param>
            <param name="tol">Tolerance</param>
            <param name="flipNormalF">First surface flip normal flag</param>
            <param name="flipNormalG">Second surface flip normal flag</param>
            <param name="trimF">When true the first surface is trimmed</param>
            <param name="trimG">When true the second surface is trimmed</param>
            <param name="flipTrimSideF">First surface flip trim flag</param>
            <param name="flipTrimSideG">Second surface flip trim flag</param>
            <param name="fillet">An array of resulting fillet surfaces</param>
            <returns>The resulting <see cref="T:devDept.Eyeshot.ssiFailureType"/>.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Fillet(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Constant fillet between two groups of surfaces.
            </summary>
            <param name="listF">First surface group</param>
            <param name="listG">Second surface group</param>
            <param name="radius">Fillet radius</param>
            <param name="tol">Tolerance</param>
            <param name="flipNormalF">First surface flip normal flag</param>
            <param name="flipNormalG">Second surface flip normal flag</param>
            <param name="trimF">When true the first surface is trimmed</param>
            <param name="trimG">When true the second surface is trimmed</param>
            <param name="flipTrimSideF">First surface flip trim flag</param>
            <param name="flipTrimSideG">Second surface flip trim flag</param>
            <param name="fillet">An array of fillet surfaces</param>
            <returns>The resulting <see cref="T:devDept.Eyeshot.ssiFailureType"/>.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Fillet(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@,System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface}@,System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface}@)">
            <summary>
            Constant fillet between two groups of surfaces, with surfaces leftover by the trim operation.
            </summary>
            <param name="listF">First surface group</param>
            <param name="listG">Second surface group</param>
            <param name="radius">Fillet radius</param>
            <param name="tol">Tolerance</param>
            <param name="flipNormalF">First surface flip normal flag</param>
            <param name="flipNormalG">Second surface flip normal flag</param>
            <param name="trimF">When true the first surface is trimmed</param>
            <param name="trimG">When true the second surface is trimmed</param>
            <param name="flipTrimSideF">First surface flip trim flag</param>
            <param name="flipTrimSideG">Second surface flip trim flag</param>
            <param name="fillet">An array of fillet surfaces</param>
            <param name="leftOversF">Trim operation leftover list for listF</param>
            <param name="leftOversG">Trim operation leftover list for listG</param>
            <returns>The resulting <see cref="T:devDept.Eyeshot.ssiFailureType"/>.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.VariableFillet(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Double,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Variable fillet between two individual surfaces.
            </summary>
            <param name="F">First surface</param>
            <param name="G">Second surface</param>
            <param name="startRadius">Starting fillet radius</param>
            <param name="endRadius">Ending fillet radius</param>
            <param name="linear">Linear/cubic transition flag</param>
            <param name="tol">Tolerance</param>
            <param name="flipNormalF">First surface flip normal flag</param>
            <param name="flipNormalG">Second surface flip normal flag</param>
            <param name="trimF">When true the first surface is trimmed</param>
            <param name="trimG">When true the second surface is trimmed</param>
            <param name="flipTrimSideF">First surface flip trim flag</param>
            <param name="flipTrimSideG">Second surface flip trim flag</param>
            <param name="fillet">An array of fillet surfaces</param>
            <returns>The resulting ssiFailureType.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.VariableFillet(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Variable fillet between two groups of surfaces.
            </summary>
            <param name="listF">First surface group</param>
            <param name="listG">Second surface group</param>
            <param name="startRadius">Starting fillet radius</param>
            <param name="endRadius">Ending fillet radius</param>
            <param name="linear">Linear/cubic transition flag</param>
            <param name="tol">Tolerance</param>
            <param name="flipNormalF">First surface flip normal flag</param>
            <param name="flipNormalG">Second surface flip normal flag</param>
            <param name="trimF">When true the first surface is trimmed</param>
            <param name="trimG">When true the second surface is trimmed</param>
            <param name="flipTrimSideF">First surface flip trim flag</param>
            <param name="flipTrimSideG">Second surface flip trim flag</param>
            <param name="fillet">An array of fillet surfaces</param>
            <returns>The resulting ssiFailureType.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.VariableFillet(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@,System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface}@,System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface}@)">
            <summary>
            Variable fillet between two groups of surfaces, with surfaces leftover by the trim operation.
            </summary>
            <param name="listF">First surface group</param>
            <param name="listG">Second surface group</param>
            <param name="startRadius">Starting fillet radius</param>
            <param name="endRadius">Ending fillet radius</param>
            <param name="linear">Linear/cubic transition flag</param>
            <param name="tol">Tolerance</param>
            <param name="flipNormalF">First surface flip normal flag</param>
            <param name="flipNormalG">Second surface flip normal flag</param>
            <param name="trimF">When true the first surface is trimmed</param>
            <param name="trimG">When true the second surface is trimmed</param>
            <param name="flipTrimSideF">First surface flip trim flag</param>
            <param name="flipTrimSideG">Second surface flip trim flag</param>
            <param name="fillet">An array of fillet surfaces</param>
            <param name="leftOversF">Trim operation leftover list for listF</param>
            <param name="leftOversG">Trim operation leftover list for listG</param>
            <returns>The resulting ssiFailureType.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Chamfer(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Constant chamfer between two surfaces.
            </summary>
            <param name="F">First surface</param>
            <param name="G">Second surface</param>
            <param name="radius">Chamfer distance</param>
            <param name="tol">Tolerance</param>
            <param name="flipNormalF">First surface flip normal flag</param>
            <param name="flipNormalG">Second surface flip normal flag</param>
            <param name="trimF">When true the first surface is trimmed</param>
            <param name="trimG">When true the second surface is trimmed</param>
            <param name="flipTrimSideF">First surface flip trim flag</param>
            <param name="flipTrimSideG">Second surface flip trim flag</param>
            <param name="chamfer">An array of resulting chamfer surfaces</param>
            <returns>The resulting <see cref="T:devDept.Eyeshot.ssiFailureType"/>.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Chamfer(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Constant chamfer between two groups of surfaces.
            </summary>
            <param name="listF">First surface group</param>
            <param name="listG">Second surface group</param>
            <param name="radius">Chamfer distance</param>
            <param name="tol">Tolerance</param>
            <param name="flipNormalF">First surface flip normal flag</param>
            <param name="flipNormalG">Second surface flip normal flag</param>
            <param name="trimF">When true the first surface is trimmed</param>
            <param name="trimG">When true the second surface is trimmed</param>
            <param name="flipTrimSideF">First surface flip trim flag</param>
            <param name="flipTrimSideG">Second surface flip trim flag</param>
            <param name="chamfer">An array of chamfer surfaces</param>
            <returns>The resulting <see cref="T:devDept.Eyeshot.ssiFailureType"/>.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Chamfer(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@,System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface}@,System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface}@)">
            <summary>
            Constant chamfer between two groups of surfaces, with surfaces leftover by the trim operation.
            </summary>
            <param name="listF">First surface group</param>
            <param name="listG">Second surface group</param>
            <param name="radius">Chamfer distance</param>
            <param name="tol">Tolerance</param>
            <param name="flipNormalF">First surface flip normal flag</param>
            <param name="flipNormalG">Second surface flip normal flag</param>
            <param name="trimF">When true the first surface is trimmed</param>
            <param name="trimG">When true the second surface is trimmed</param>
            <param name="flipTrimSideF">First surface flip trim flag</param>
            <param name="flipTrimSideG">Second surface flip trim flag</param>
            <param name="chamfer">An array of chamfer surfaces</param>
            <param name="leftOversF">Trim operation leftover list for listF</param>
            <param name="leftOversG">Trim operation leftover list for listG</param>
            <returns>The resulting <see cref="T:devDept.Eyeshot.ssiFailureType"/>.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.VariableChamfer(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Double,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Variable chamfer between two surfaces.
            </summary>
            <param name="F">First surface</param>
            <param name="G">Second surface</param>
            <param name="startRadius">Starting chamfer distance</param>
            <param name="endRadius">Ending chamfer distance</param>
            <param name="linear">Linear/cubic transition flag</param>
            <param name="tol">Tolerance</param>
            <param name="flipNormalF">First surface flip normal flag</param>
            <param name="flipNormalG">Second surface flip normal flag</param>
            <param name="trimF">When true the first surface is trimmed</param>
            <param name="trimG">When true the second surface is trimmed</param>
            <param name="flipTrimSideF">First surface flip trim flag</param>
            <param name="flipTrimSideG">Second surface flip trim flag</param>
            <param name="chamfer">An array of chamfer surfaces</param>
            <returns>The resulting ssiFailureType.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.VariableChamfer(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Variable chamfer between two groups of surfaces.
            </summary>
            <param name="listF">First surface group</param>
            <param name="listG">Second surface group</param>
            <param name="startRadius">Starting chamfer distance</param>
            <param name="endRadius">Ending chamfer distance</param>
            <param name="linear">Linear/cubic transition flag</param>
            <param name="tol">Tolerance</param>
            <param name="flipNormalF">First surface flip normal flag</param>
            <param name="flipNormalG">Second surface flip normal flag</param>
            <param name="trimF">When true the first surface is trimmed</param>
            <param name="trimG">When true the second surface is trimmed</param>
            <param name="flipTrimSideF">First surface flip trim flag</param>
            <param name="flipTrimSideG">Second surface flip trim flag</param>
            <param name="chamfer">An array of chamfer surfaces</param>
            <returns>The resulting ssiFailureType.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.VariableChamfer(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@,System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface}@,System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface}@)">
            <summary>
            Variable chamfer between two groups of surfaces, with surfaces leftover by the trim operation.
            </summary>
            <param name="listF">First surface group</param>
            <param name="listG">Second surface group</param>
            <param name="startRadius">Starting chamfer distance</param>
            <param name="endRadius">Ending chamfer distance</param>
            <param name="linear">Linear/cubic transition flag</param>
            <param name="tol">Tolerance</param>
            <param name="flipNormalF">First surface flip normal flag</param>
            <param name="flipNormalG">Second surface flip normal flag</param>
            <param name="trimF">When true the first surface is trimmed</param>
            <param name="trimG">When true the second surface is trimmed</param>
            <param name="flipTrimSideF">First surface flip trim flag</param>
            <param name="flipTrimSideG">Second surface flip trim flag</param>
            <param name="chamfer">An array of chamfer surfaces</param>
            <param name="leftOversF">Trim operation leftover list for listF</param>
            <param name="leftOversG">Trim operation leftover list for listG</param>
            <returns>The resulting ssiFailureType.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.GetIndividualSurfaces(devDept.Eyeshot.Entities.Surface)">
            <summary>
            Subdivides a surface at knots of multiplicity equal to the order. 
            Tabulated Surfaces are divided only along the U direction, Revolved Surfaces only in the V direction. 
            </summary>
            <param name="current">Parent surface</param>
            <returns>List of kids surfaces</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SplitAtKnot(System.Int32,System.Boolean,devDept.Eyeshot.Entities.Surface@,devDept.Eyeshot.Entities.Surface@)">
            <summary>
            Subdivides the surface at the knot of index splitPt in the U or V direction.
            </summary>
            <param name="splitPt">Index of the knot</param>
            <param name="dirFlag">If true subdivides in U, else in V</param>
            <param name="kid0">Lower surface</param>
            <param name="kid1">Upper surface</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.RemoveInvalidTriangles">
            <summary>
            Removes invalid triangle from surfaces with poles (open or closed)
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.ConvertToMesh(System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Converts this surface to a <see cref="T:devDept.Eyeshot.Entities.Mesh"/> object.
            </summary>
            <param name="tolerance">Tessellation tolerance</param>
            <param name="meshNature">The desired Mesh nature</param>
            <returns>The resulting Mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.ConvertToMesh(devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Converts this surface to a <see cref="T:devDept.Eyeshot.Entities.Mesh"/> object using current triangulation.
            </summary>
            <param name="meshNature">The desired Mesh nature</param>
            <returns>The resulting Mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.areaF(System.Double,System.Double)">
            <summary>
            area needs to integrate a function over an interval
            to determine the area of the NURBS surface. 
            </summary>
            <param name="u">The U parameter</param>
            <param name="v">The V parameter</param>
            <returns>The elemental area at (u,v).</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.area">
            <summary>
            Computes an approximation of the area of the surface
            using a numerical automatic integrator.
            That integrator uses a Chebyshev Series Expansion
            to perform its approximation. This is why you can
            change the value \a n which sets the number of 
            elements in the series. 
            The method is simple, integrate between each span.
            This is necessary in case the tangant of a point
            at u_i is undefined. Add the result and return
            this as the approximation.
            </summary>
            <returns>The area of the NURBS surface.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SkinU(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32)">
            <summary>
            Creates a surface from skinning. The skinning is performed in the U direction.
            </summary>
            <param name="curveList">A list of NURBS curves</param>
            <param name="degU">The degree in the U direction</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SkinU(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32,System.Boolean)">
            <summary>
            Creates a surface from skinning. The skinning is performed in the U direction.
            </summary>
            <param name="curveList">A list of NURBS curves</param>
            <param name="degU">The degree in the U direction</param>
            <param name="splitAtCorners">If True, it splits the curves at corner points. It is useful when the sections are Composite Curves with similar shape, and you want to line up the corners (and curve segments) in the resulting surface.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SkinV(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32)">
            <summary>
            Creates a surface from skinning. The skinning is performed in the V direction.
            </summary>
            <param name="curveList">A list of curves</param>
            <param name="degV">The degree in the V direction</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SkinV(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32,System.Boolean)">
            <summary>
            Creates a surface from skinning. The skinning is performed in the V direction.
            </summary>
            <param name="curveList">A list of curves</param>
            <param name="degV">The degree in the V direction</param>
            /// <param name="splitAtCorners">If True, it splits the curves at corner points. It is useful when the sections are Composite Curves with similar shape, and you want to line up the corners (and curve segments) in the resulting surface.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SkinFirstKnotVectorV(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Curve},System.Int32)">
            <summary>
            Creates a surface from skinning. The skinning is performed in the V direction. It uses the first curve knot vector for all curves. 
            </summary>
            <param name="curveList">A list of curves</param>
            <param name="degV">The degree in the V direction</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.MakeCompatible(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Curve})">
            <summary>
            Generate compatible curves from an array of curves.
            </summary>
            <remarks>The knot vector of all the curves must be in the range [0,1].</remarks>
            <param name="curveList">The array of curves</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.KnotUnion(System.Double[],System.Double[])">
            <summary>
            Finds the union of two knot vectors.
            </summary>
            <param name="Ua">Knot vector A</param>
            <param name="Ub">Knot vector B</param>
            <remarks>The result is useless unless the knot vectors being compared are from curves of the same degree.</remarks>
            <returns>The union of Ua and Ub.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Gordon(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            Creates a Gordon surface.
            </summary>
            <param name="lU">The list of non rational curves in the U direction</param>
            <param name="lV">The list of non rational curves in the V direction</param>
            <returns>The resulting surface if the operation succeeds, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Gordon(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Point3D[0:,0:])">
            <summary>
            Creates a Gordon surface.
            </summary>
            <param name="lU">The list of non rational curves in the U direction</param>
            <param name="lV">The list of non rational curves in the V direction</param>
            <param name="intersections">The matrix of curve intersection points</param>
            <returns>The resulting surface if the operation succeeds, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.MergeKnotU(System.Double[])">
            <summary>
            Merges the knot vector of a curve with another knot vector. Used by Surface.Gordon().
            </summary>
            <param name="Um">The knot vector to merge with</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.MergeKnotV(System.Double[])">
            <summary>
            Merges the knot vector of a curve with another knot vector. Used by Surface.Gordon().
            </summary>
            <param name="Vm">The knot vector to merge with</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Sweep(devDept.Eyeshot.Entities.Curve,devDept.Eyeshot.Entities.ICurve,System.Double)">
            <summary>
            Creates a surface by sweeping a curve along a trajectory using the Rotation Minimizing Frames method.
            </summary>
            <param name="rail">The trajectory curve</param>
            <param name="sectCurve">The cross section curve</param>
            <param name="tol">The tolerance used to approximate the rail</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Sweep(devDept.Eyeshot.Entities.Curve,devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Eyeshot.Entities.sweepMethodType)">
            <summary>
            Creates a surface by sweeping a curve along a trajectory.
            </summary>
            <param name="rail">The trajectory curve</param>
            <param name="sectCurve">The cross section curve</param>
            <param name="method">The sweeping method</param>
            <param name="tol">The tolerance used to approximate the rail</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Ruled(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Creates a surface connecting linearly two curves.
            </summary>
            <param name="first">First curve</param>
            <param name="second">Second curve</param>
            <returns>The resulting surface if the operation succeeds, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.RuledFirstKnotVector(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Creates a surface connecting linearly two curves and using the first curve knot vector for both.
            </summary>
            <param name="first">First curve</param>
            <param name="second">Second curve</param>
            <returns>The resulting surface if the operation succeeds, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Loft(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32)">
            <summary>
            Creates a surface from skinning. 
            </summary>
            <param name="curveList">The skinning curves</param>
            <param name="degree">The desired surface degree</param>
            <returns>The resulting surface if the operation succeeds, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Loft(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32,System.Boolean)">
            <summary>
            Creates a surface from skinning. 
            </summary>
            <param name="curveList">The skinning curves</param>
            <param name="degree">The desired surface degree</param>
            <returns>The resulting surface if the operation succeeds, null/Nothing otherwise.</returns>
            <param name="splitAtCorners">If True, it splits the curves at corner points. It is useful when the curves have similar shapes, and you want to line up the corners in the resulting surface.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(devDept.Eyeshot.Entities.ICurve)">
            <summary>Creates a planar surface bounded by the contour provided.</summary>
            <param name="outerContour">The outer contour of the region</param>
            <returns>The planar surface if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(devDept.Geometry.Plane,devDept.Eyeshot.Entities.ICurve,System.Boolean)">
            <summary>Creates surface on a given plane bounded by the contour provided.</summary>
            <param name="pln">The plane on which the contour lies</param>
            <param name="outerContour">The outer contour of the region</param>
            <param name="sortAndOrient">When true, outerContour is sorted and oriented</param>
            <returns>The planar surface if the operation succeeded, null/Nothing otherwise.</returns>
            <remarks>When sortAndOrient is false, make sure that outerContour is oriented counter-clockwise with respect to pln.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
            <summary>Creates a planar surface bounded by the contours provided.</summary>
            <param name="outerContour">The outer contour of the region</param>
            <param name="innerContours">The inner contour list. It can be null/Nothing.</param>
            <returns>The planar surface if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(devDept.Geometry.Plane,devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Boolean)">
            <summary>Creates surface on a given plane bounded by the contours provided.</summary>
            <param name="pln">The plane on which the contours lie</param>
            <param name="outerContour">The outer contour of the region</param>
            <param name="innerContours">The inner contour list. It can be null/Nothing.</param>
            <param name="sortAndOrient">When true, outerContour and innerContours are sorted and oriented</param>
            <returns>The planar surface if the operation succeeded, null/Nothing otherwise.</returns>
            <remarks>When sortAndOrient is false, make sure that outerContour is oriented counter-clockwise and that innerContours are oriented clockwise with respect to pln.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
            <summary>Creates surface on a given plane bounded by the contours provided.</summary>
            <param name="contours">The contours of the region</param>
            <returns>The planar surface if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Boolean)">
            <summary>Creates surface on a given plane bounded by the contours provided.</summary>
            <param name="pln">The plane on which the contour lies</param>
            <param name="contours">The contours of the region</param>
            <param name="sortAndOrient">When true, contours is sorted and oriented</param>
            <returns>The planar surface if the operation succeeded, null/Nothing otherwise.</returns>
            <remarks>When sortAndOrient is false, make sure that the outer contour is in the first position and oriented counter-clockwise, and that the inner contours are oriented clockwise with respect to pln.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>Creates a planar rectangular surface parallel to the specified plane.</summary>
            <param name="pln">The plane (determines the surface orientation)</param>
            <param name="bottomLeft">First corner (also determines surface distance from the world origin)</param>
            <param name="topRight">Second corner (determines surface width and height)</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.CreateEllipsoid(System.Double,System.Double,System.Double)">
            <summary>
            Creates a NURBS ellipsoid centered in the origin.
            </summary>
            <param name="semiaxisX">Length of the semiaxis along the X axis</param>
            <param name="semiaxisY">Length of the semiaxis along the Y axis</param>
            <param name="semiaxisZ">Length of the semiaxis along the Z axis</param>
            <returns>The NURBS ellipsoidal surface.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.TryGetPlanar(devDept.Eyeshot.Entities.PlanarSurface@)">
            <summary>
            Converts this generic surface to <see cref="T:devDept.Eyeshot.Entities.PlanarSurface"/> (when possible).
            </summary>
            <param name="ps">The resulting planar surface (when possible)</param>
            <returns>True if the operation succeeds, false otherwise. If the surface is already a <see cref="T:devDept.Eyeshot.Entities.PlanarSurface"/>, it returns false.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.TryGetRevolved(devDept.Eyeshot.Entities.Surface@)">
            <summary>
            Converts this generic surface to <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface"/> (when possible).
            </summary>
            <param name="rs">The resulting revolved surface (when possible)</param>
            <returns>True if the operation succeeds, false otherwise. If the surface is already a <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface"/>, it returns false.</returns>
            <remarks>It only converts surfaces with angle of revolution of PI and 2PI.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.TryGetTabulated(devDept.Eyeshot.Entities.TabulatedSurface@)">
            <summary>
            Converts this generic surface to <see cref="T:devDept.Eyeshot.Entities.TabulatedSurface"/> (when possible).
            </summary>
            <param name="ts">The resulting tabulated surface (when possible)</param>
            <returns>True if the operation succeeds, false otherwise. If the surface is already a <see cref="T:devDept.Eyeshot.Entities.TabulatedSurface"/>, it returns false.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.CheckWeight9">
            <summary>
            Check if the weight of odd control points is Sqrt(2)/2.
            </summary>
            <returns>True if the W component of all odd control points is Sqrt(2)/2, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Promote">
            <summary>
            Converts this generic surface to <see cref="T:devDept.Eyeshot.Entities.PlanarSurface"/>, <see cref="T:devDept.Eyeshot.Entities.TabulatedSurface"/> or <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface"/> (when possible).
            </summary>
            <returns>The new surface when possible, null/Nothing otherwise.</returns>
            <remarks>When the surface is already a <see cref="T:devDept.Eyeshot.Entities.PlanarSurface"/>, <see cref="T:devDept.Eyeshot.Entities.TabulatedSurface"/> or <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface"/>, the method returns null/Nothing.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.PointAt(devDept.Geometry.Point2D)">
            <summary>
            Computes the surface point.
            </summary>
            <param name="pt">The point in parametric domain</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.PointAt(System.Double,System.Double)">
            <summary>
            Computes the surface point at parametric values [u, v].
            </summary>
            <param name="u">Parametric value along U direction</param>
            <param name="v">Parametric value along V direction</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Evaluate(devDept.Geometry.Point2D)">
            <summary>
            Computes the surface point.
            </summary>
            <param name="pt">The point in parametric domain</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Evaluate(System.Double,System.Double)">
            <summary>
            Computes the surface point at parametric values [u, v].
            </summary>
            <param name="u">Parametric value along U direction</param>
            <param name="v">Parametric value along V direction</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Evaluate(devDept.Geometry.Point2D,System.Int32)">
            <summary>
            Computes the surface derivatives.
            </summary>
            <param name="pt">The point in parametric domain</param>
            <param name="d">The degree of the derivatives</param>
            <return>The derivatives SKL[k, l].</return>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Evaluate(System.Double,System.Double,System.Int32)">
            <summary>
            Computes the surface derivatives at parametric values [u,v].
            </summary>
            <param name="u">Parametric value along U direction</param>
            <param name="v">Parametric value along V direction</param>
            <param name="d">The degree of the derivatives</param>
            <return>The derivatives SKL[k, l].</return>
            <example>
                The following code fragment demonstrates how to compute the first 2 derivatives of
                the surface at the parametric value [0.25, 0.5].
            <code lang="CS">
            Vector3D[,] SKL = mySurf.Evaluate(0.25, 2);
             
            Vector3D S   = SKL[0,0];
            Vector3D Su  = SKL[1,0];
            Vector3D Sv  = SKL[0,1];
            Vector3D Suu = SKL[2,0];
            Vector3D Suv = SKL[1,1];
            Vector3D Svv = SKL[0,2];
            </code>
            <code lang="VB">
            Dim SKL(,) As Vector3D = MySurf.Evaluate(0.25, 0.5, 2)
             
            Dim S As Vector3D = SKL(0,0)
            Dim Su As Vector3D = SKL(1,0)
            Dim Sv As Vector3D = SKL(0,1)
            Dim Suu As Vector3D = SKL(2,0)
            Dim Suv As Vector3D = SKL(1,1)
            Dim Svv As Vector3D = SKL(0,2)
            </code>
            </example>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.RatSurfaceDerivsAlg1(System.Double,System.Double,System.Int32)">
            <summary>
            Computes surface derivatives.
            </summary>
            <param name="u">Parametric value along U direction</param>
            <param name="v">Parametric value along V direction</param>
            <param name="d">The degree of the derivatives</param>
            <returns>The derivatives, where SKL[k, l] is the derivative of S(u,v) with respect to u k times and v l times.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Curvature(devDept.Geometry.Point2D,System.Double@,System.Double@)">
            <summary>
            Evaluates the surface Gaussian and Mean curvatures at the specified 2D point.
            </summary>
            <param name="pt">The point in parametric domain</param>
            <param name="gauss">Gaussian curvature = kappa1*kappa2</param>
            <param name="mean">Mean curvature = (kappa1+kappa2)/2</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Curvature(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Evaluates the surface Gaussian and Mean curvatures at the specified parametric point.
            </summary>
            <param name="u">Parametric value along U direction</param>
            <param name="v">Parametric value along V direction</param>
            <param name="gauss">Gaussian curvature = kappa1*kappa2</param>
            <param name="mean">Mean curvature = (kappa1+kappa2)/2</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Curvature(System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Evaluates the surface curvatures at the specified parametric point.
            </summary>
            <param name="u">Parametric value along U direction</param>
            <param name="v">Parametric value along V direction</param>
            <param name="gauss">Gaussian curvature = kappa1*kappa2</param>
            <param name="mean">Mean curvature = (kappa1+kappa2)/2</param>
            <param name="kappa1">Largest principal curvature value</param>
            <param name="kappa2">Smallest principal curvature value</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Normal(devDept.Geometry.Point2D)">
            <summary>
            Evaluates the surface normal at the specified parametric point.
            </summary>
            <param name="pt">The point in parametric domain</param>
            <returns>The normal vector.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Normal(System.Double,System.Double)">
            <summary>
            Evaluates the surface normal at the specified parametric point.
            </summary>
            <param name="u">Parametric value along U direction</param>
            <param name="v">Parametric value along V direction</param>
            <returns>The normal vector.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.InsertKnotU(System.Double,System.Int32)">
            <summary>
            Inserts a knot a number of times in the U parametric direction.
            </summary>
            <param name="u">The knot to Insert</param>
            <param name="r">The number of times to Insert</param>
            <returns>The number of knots inserted, zero otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.InsertKnotU(devDept.Geometry.Point3D,System.Int32)">
            <summary>
            Inserts a knot a number of times in the U parametric direction. It is added at the U parameter corresponding to the projection of the given point on the surface. 
            The operation does not affect the shape of the surface.
            </summary>
            <param name="ctrlPoint">The point to be projected on the surface</param>
            <param name="r">The number of times to insert</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.InsertKnotV(System.Double,System.Int32)">
            <summary>
            Inserts a knot a number of times in the V parametric direction.
            </summary>
            <param name="v">The knot to Insert</param>
            <param name="r">The number of times to Insert</param>
            <returns>The number of knots inserted, zero otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.InsertKnotV(devDept.Geometry.Point3D,System.Int32)">
            <summary>
            Inserts a knot a number of times in the V parametric direction. It is added at the V parameter corresponding to the projection of the given point on the surface. 
            The operation does not affect the shape of the surface.
            </summary>
            <param name="ctrlPoint">The point to be projected on the surface</param>
            <param name="r">The number of times to insert</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.RefineKnotVectorU(System.Double[])">
            <summary>
            Refines the surface knot vector U.
            </summary>
            <param name="X">The new knots to Insert in the knot vector</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.RefineKnotVectorV(System.Double[])">
            <summary>
            Refines the surface knot vector V.
            </summary>
            <param name="X">The new knots to Insert in the knot vector</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.DegreeElevateU(System.Int32)">
            <summary>
            Degree elevates the surface in the U parametric direction.
            </summary>
            <param name="t">Degree elevation amount</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.DegreeElevateV(System.Int32)">
            <summary>
            Degree elevates the surface in the V parametric direction.
            </summary>
            <param name="t">Degree elevation amount</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.DecomposeU">
            <summary>
            Decomposes the surface into Bézier patches in the U parametric direction.
            </summary>
            <returns>A list of surfaces.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.DecomposeV">
            <summary>
            Decomposes the surface into Bézier patches in the U parametric direction.
            </summary>
            <returns>A list of surfaces.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Decompose">
            <summary>
            Decomposes the surface into Bézier patches.
            </summary>
            <returns>A rectangular array of surfaces.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.RemoveKnotU(System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes an internal knot from the surface U knot vector.
            </summary>
            <param name="r">The knot to remove</param>
            <param name="s">The multiplicity of the knot</param>
            <param name="num">The number of times to try to remove the knot</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.RemoveKnotV(System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes an internal knot from the surface V knot vector.
            </summary>
            <param name="r">The knot to remove</param>
            <param name="s">The multiplicity of the knot</param>
            <param name="num">The number of times to try to remove the knot</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.RemoveKnotsU(System.Double)">
            <summary>
            Removes as many knots as possible from the U knot vector of a surface.
            </summary>
            <param name="tol">The allowed tolerance</param>
            <returns>Number of knots removed.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.RemoveKnotsV(System.Double)">
            <summary>
            Removes as many knots as possible from the V knot vector of a surface.
            </summary>
            <param name="tol">The allowed tolerance</param>
            <returns>Number of knots removed.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.GlobalInterpolation(devDept.Geometry.Point3D[0:,0:],System.Int32,System.Int32)">
            <summary>
            Global surface interpolation.
            </summary>
            <param name="Q">A matrix of 3D points</param>
            <param name="degU">The degree of interpolation in the U direction</param>
            <param name="degV">The degree of interpolation in the V direction</param>
            <returns>The approximated surface if the operation is successful, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SurfMeshParams(devDept.Geometry.Point3D[0:,0:],System.Double[]@,System.Double[]@)">
            <summary>
            Computes the parameters for global surface interpolation.
            </summary>
            <param name="Q">the matrix of 3D points</param>
            <param name="uk">the knot coefficients in the U direction</param>
            <param name="vl">the knot coefficients in the V direction</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Entities.Surface.SolLineEqua2x2(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)" -->
        <member name="M:devDept.Eyeshot.Entities.Surface.TracingStepEval(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Double,System.Double,System.Double,devDept.Geometry.Vector3D,System.Double,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Evaluate tracing step: no tangent contact
            </summary>
            <param name="T">tracing direction, unit vector</param>
            <param name="tol">chord tolerance</param>
            <param name="radius">offset distance</param>
            <param name="tStep">tracing step</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.InqSameNormCurvDir(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Surface.solType@,devDept.Geometry.Vector3D@,devDept.Geometry.Vector3D@,devDept.Geometry.Vector3D@,devDept.Geometry.Vector3D@,devDept.Geometry.Vector3D@,devDept.Geometry.Vector3D@)">
            <summary>
            Calculate same normal curvature direction of the two tangent contact surfaces.
            </summary>
            <param name="F"></param>
            <param name="G"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="s"></param>
            <param name="t"></param>
            <param name="pn"></param>
            <param name="dir1"></param>
            <param name="dir2"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.mathGetAngleUnit(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)">
            <summary>
            Angle between vectors
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.mathClamp0PI2(System.Double)">
            <summary>
            Trunc angle value in the interval defined by 0.0 and PI2
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.mathACos(System.Double)">
            <summary>
            Robust mathematical library function.
            </summary>
            <param name="cosAlfa"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SolAngleByCS(System.Double,System.Double)">
            <summary>
            Solves equation: cos(x) = CosA, sin(x) = SinA
            x in [0.0, PI_2)
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SolExpoEqua(System.Double,System.Double,System.Double,System.Double,System.Double[]@)">
            <summary>
            Solves equation: a*cos(x)+b*sin(x) = c
            x in [0.0, PI2)
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IntersectionCurves(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Boolean,devDept.Eyeshot.Entities.ICurve[]@)">
            <summary>
            Returns the intersection of two surfaces as a collection of curves.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IntersectionCurvesInternal(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},devDept.Geometry.Plane,System.Double)">
            <summary>
            Returns the intersection of two surfaces as a collection of curves.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.ControlBoundingBox">
            <summary>
            Returns the 3D size of the surface control point net axis aligned bounding box.
            </summary>
            <returns>The 3D size</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.ControlBoundingBox(devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
            <summary>
            Computes the minimum and maximum 3D points of the surface control point net axis aligned bounding box.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Section(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},devDept.Geometry.Plane,System.Double)">
            <summary>
            Computes the section of a group of surfaces and a plane as a collection of curves.
            </summary>
            <param name="listF">Surface group</param>
            <param name="pln">The plane</param>
            <param name="tol">The tolerance</param>
            <returns>The array of intersection curves.</returns> 
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Intersection(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,devDept.Eyeshot.Entities.ICurve[]@)">
            <summary>
            Computes the intersection of two groups of surfaces as a collection of curves.
            </summary>
            <param name="listF">First surface group</param>
            <param name="listG">Second surface group</param>
            <param name="iCurves">A list of intersection curves</param>
            <param name="tol">The tolerance</param>
            <returns>The intersection failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IntersectWith(devDept.Eyeshot.Entities.Surface,System.Double,devDept.Eyeshot.Entities.ICurve[]@)">
            <summary>
            Computes the intersection with the specified surface as a collection of curves.
            </summary>
            <param name="G">The surface</param>
            <param name="iCurves">A list of intersection curves</param>
            <param name="tol">The tolerance</param>
            <returns>The intersection failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Intersect(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double)">
            <summary>
            Determines if two groups of surfaces intersect.
            </summary>
            <param name="listF">First surface group</param>
            <param name="listG">Second surface group</param>
            <param name="tol">The tolerance</param>
            <returns>True if the surfaces intersect, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Intersects(devDept.Eyeshot.Entities.Surface,System.Double)">
            <summary>
            Determines if the surface intersects with another surface.
            </summary>
            <param name="G">The surface</param>
            <param name="tol">The tolerance</param>
            <returns>True if the surfaces intersect, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IntersectWith(devDept.Geometry.Plane,System.Double)">
            <summary>
            Computes the intersection of a surface and a plane as a collection of curves.
            </summary>
            <param name="pln">The plane</param>
            <param name="tol">The tolerance</param>
            <returns>The array of intersection curves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IntersectWith(devDept.Eyeshot.Entities.ICurve,System.Double)">
            <summary>
            Finds all the 3D points where a curve and a surface intersect.
            </summary>
            <param name="curve3D">The 3D curve</param>
            <param name="searchTol">The search tolerance</param>
            <returns>The list of intersection points (if any).</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.InsideRegion(devDept.Geometry.InitialPoint,devDept.Eyeshot.Entities.Surface,System.Boolean)">
            <summary>
            Here we need to skip IPs that are outside from the trim loops.
            We first check if the point is onto a trim loop, afterwards if it's outside the tessellated version of the contours. 
            Think about a circular contour, if the point is on geometric circle it will always be classified as outside from the
            tessellated polygon, this is the reason why we need to do two checks here.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.RelaxOnCurveG(devDept.Geometry.InitialPoint,devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double)">
            <summary>
            Same as RelaxOnCurveF but with the two surfaces swapped.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.leftEdge">
            <summary>
            Surface's bottom pole or tip.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.topEdge">
            <summary>
            Surface's right pole or tip.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.rightEdge">
            <summary>
            Surface's top pole or tip.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.bottomEdge">
            <summary>
            Surface's left pole or tip.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.seamU">
            <summary>
            Surface seam along V.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.seamV">
            <summary>
            Surface seam along U.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.closedU">
            <summary>
            Closed status in U.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.closedV">
            <summary>
            Closed status in V.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.rational">
            <summary>
            Rational flag.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.patch">
            <summary>
            Point projection subdivision starting patch.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.ExtractEdges">
            <summary>
            Returns all the surface 3D edge curves.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.ExtractEdge(System.Int32,System.Int32)">
            <summary>
            Returns the specified 3D edge curve.
            </summary>
            <param name="loopIndex">Trim loop index</param>
            <param name="curveIndex">Loop curve index</param>
            <returns>The surface 3D edge as an individual curve.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.RebuildEdge(System.Int32,System.Int32,System.Double)">
            <summary>
            Rebuild the 3D edge curve corresponding to a 2D trim curve in the parameter space of the surface.
            </summary>
            <param name="loopIndex">Trim loop index</param>
            <param name="curveIndex">Loop curve index</param>
            <param name="tolerance">The tolerance used in the rebuild process</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.RebuildEdges(System.Double)">
            <summary>
            Rebuild all the surface 3D edges.
            </summary>
            <param name="tolerance">The tolerance used in the rebuild process</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.LiftCurve(devDept.Eyeshot.Entities.Curve,System.Double)">
            <summary>
            Creates the 3D curve corresponding to a 2D curve in the parametric space of the surface.
            </summary>
            <param name="curve">The curve in parametric space.</param>
            <param name="tol">Allowed tolerance</param>
            <returns>The individual 3D curve.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.ClosestPointTo(devDept.Geometry.Point3D,System.Double@,System.Double@)">
            <summary>
            Finds the closest point on the surface.
            </summary>
            <param name="P">The 3D point to project</param>
            <param name="u">The U parametric coordinate of the closest point on surface to P</param>
            <param name="v">The V parametric coordinate of the closest point on surface to P</param>
            <remarks>It also checks the trimloops, so that the result is always on the surface.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,devDept.Geometry.Point2D@)">
            <summary>
            Projects a point on the surface.
            </summary>
            <param name="P">The 3D point to project</param>
            <param name="proj">The parametric position of the projection on surface to P</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,devDept.Geometry.Point2D@)">
            <summary>
            Projects a point on the surface.
            </summary>
            <param name="P">The 3D point to project</param>
            <param name="allowOutside">When true, the projection is not constrained inside the surface domain</param>
            <param name="proj">The parametric coordinates of projection on surface to P</param>
            <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,devDept.Geometry.Point2D,devDept.Geometry.Point2D@)">
            <summary>
            Projects a point on the surface.
            </summary>
            <param name="P">The 3D point to project</param>
            <param name="proj">The parametric coordinates of the projection on surface to P</param>
            <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
            <param name="allowOutside">When true, the projection is not constrained inside the surface domain</param>
            <param name="prev">The parametric coordinates of a previous succesful point projection</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Projects a point on the surface.
            </summary>
            <param name="P">The 3D point to project</param>
            <param name="u">The U parametric coordinate of the projection on surface to P</param>
            <param name="v">The V parametric coordinate of the projection on surface to P</param>
            <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
            <param name="allowOutside">When true, the projection is not constrained inside the surface domain</param>
            <param name="prevU">The U parametric coordinate of a previous succesful point projection</param>
            <param name="prevV">The V parametric coordinate of a previous succesful point projection</param>
            <returns>True when the projection is perpendicular to the surface, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.CheckProjection(System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)">
            <summary>
            Checks coincidence and perpendicularity. WARNING: input vectors will be normalized by this function.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double@,System.Double@)">
            <summary>
            Projects a point on the surface.
            </summary>
            <param name="P">The 3D point to project</param>
            <param name="u">The U parametric coordinate of the projection on surface to P</param>
            <param name="v">The V parametric coordinate of the projection on surface to P</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,devDept.Geometry.Point2D@)">
            <summary>
            Projects a point on the surface.
            </summary>
            <param name="P">The 3D point to project</param>
            <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
            <param name="proj">The parametric coordinates of the projection on surface to P</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,System.Double@,System.Double@)">
            <summary>
            Projects a point on the surface.
            </summary>
            <param name="P">The 3D point to project</param>
            <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
            <param name="allowOutside">When true, the projection is not constrained inside the surace domain</param>
            <param name="u">The U parametric coordinate of the projection on surface to P</param>
            <param name="v">The V parametric coordinate of the projection on surface to P</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.CreateSampling(System.Int32,System.Int32)">
            <summary>
            Generates a number n of equally spaced parametric values for each span.
            </summary>
            <param name="nu">Number of values per span in the U knot vector</param>
            <param name="nv">Number of values per span in the V knot vector</param>
            <returns>The parametric values list.</returns>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.trimLoops">
            <summary>Surface trim loops.</summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.#ctor(System.Int32,System.Double[],System.Int32,System.Double[],devDept.Geometry.Point4D[0:,0:])">
            <summary>
            Standard constructor.
            </summary>
            <param name="uDegree">Surface degree in the U parametric direction</param>
            <param name="uKnotVector">Knot vector in the U parametric direction</param>
            <param name="vDegree">Surface degree in the V parametric direction</param>
            <param name="vKnotVector">Knot vector in the V parametric direction</param>
            <param name="ctrlPoints">Surface control points</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.#ctor(System.Int32,System.Double,System.Double,devDept.Geometry.Vector3D[0:,0:])">
            <summary>
            Power basis to Bezier constructor.
            </summary>
            <param name="degree">The curve degree</param>
            <param name="uSpan">The segment U span</param>
            <param name="vSpan">The segment V span</param>
            <param name="b">The power basis coefficients as an array of 3D vectors</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Clone">
            <summary>
            Creates a deep copy of this surface.
            </summary>
            <returns>The new surface object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes a surface.
            </summary>
            <remarks>The old values are lost and new ones have to be created.</remarks>
            <param name="n">The new number of control points in the U direction</param>
            <param name="m">The new number of control points in the V direction</param>
            <param name="degU">The degree of the surface in the U direction</param>
            <param name="degV">The degree of the surface in the V direction</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.ResizeKeep(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes a surface, keeping original values.
            </summary>
            <param name="n">The new number of control points in the U direction</param>
            <param name="m">The new number of control points in the V direction</param>
            <param name="degU">The degree of the surface in the U direction</param>
            <param name="degV">The degree of the surface in the V direction</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.ClampU(System.Boolean,System.Boolean)">
            <summary>
            Clamps the surface U knot vector.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.ClampV(System.Boolean,System.Boolean)">
            <summary>
            Clamps the surface V knot vector.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.NurbsIsocurveV(System.Double)">
            <summary>
            Generates a Nurbs iso curve in the V parametric direction.
            </summary>
            <param name="u">The U parametric value</param>
            <returns>The iso-parametric curve</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.NurbsIsocurveU(System.Double)">
            <summary>
            Generates a Nurbs iso curve in the U parametric direction.
            </summary>
            <param name="v">The V parametric value</param>
            <returns>The iso-parametric curve</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IsocurveU(System.Double)">
            <summary>
            Generates an iso curve in the U parametric direction.
            </summary>
            <param name="v">The V parametric value</param>
            <returns>The iso-parametric curve</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IsocurveV(System.Double)">
            <summary>
            Generates an iso curve in the V parametric direction.
            </summary>
            <param name="u">The U parametric value</param>
            <returns>The iso-parametric curve</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SplitAtU(System.Double,devDept.Eyeshot.Entities.Surface@,devDept.Eyeshot.Entities.Surface@)">
            <summary>
            Splits the surface along U.
            </summary>
            <param name="u">The U parametric value</param>
            <param name="sl">The lower surface</param>
            <param name="su">The upper surface</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SplitAtV(System.Double,devDept.Eyeshot.Entities.Surface@,devDept.Eyeshot.Entities.Surface@)">
            <summary>
            Splits the surface along V.
            </summary>
            <param name="v">The V parametric value</param>
            <param name="sl">The lower surface</param>
            <param name="su">The upper surface</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SplitByU(devDept.Geometry.Point3D,devDept.Eyeshot.Entities.Surface@,devDept.Eyeshot.Entities.Surface@)">
            <summary>
            Splits the surface along U.
            </summary>
            <param name="pt">The point used to get the U parametric value</param>
            <param name="sl">The lower surface</param>
            <param name="su">The upper surface</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SplitByV(devDept.Geometry.Point3D,devDept.Eyeshot.Entities.Surface@,devDept.Eyeshot.Entities.Surface@)">
            <summary>
            Splits the surface along V.
            </summary>
            <param name="pt">The point used to get the V parametric value</param>
            <param name="sl">The lower surface</param>
            <param name="su">The upper surface</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Untrim">
            <summary>
            Clears all trimming loops.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.ReverseU">
            <summary>
            Reverses the surface U direction.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.ReverseV">
            <summary>
            Reverses the surface V direction.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SwapUV">
            <summary>
            Swaps the U and V directions of the surface.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IsPlanar(System.Double,devDept.Geometry.Plane@)">
            <summary>
            Checks if the surface is planar.
            </summary>
            <param name="tol">The tolerance</param>
            <param name="plane">The surface plane</param>
            <returns>True if the surface is planar within tolerance, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.GetGeneric">
            <summary>
            Returns the generic representation of this surface, it can be useful in data translation. 
            </summary>
            <returns>The new surface</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.FreeCache">
            <summary>
            Frees point projection cache memory.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Blend(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Int32,System.Int32,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Creates a blend surface between two surfaces.
            </summary>
            <param name="F">First surface</param>
            <param name="G">Second surface</param>
            <param name="edgeIndexF">Index of the edge on F</param>
            <param name="edgeIndexG">Index of the edge on G</param>
            <param name="tol">Tolerance</param>
            <param name="flipEdgeF">If true, the edge of the blending surface has opposite direction of the edge of F</param>
            <param name="flipEdgeG">If true, the edge of the blending surface has opposite direction of the edge of G</param>
            <returns>The blend surface.</returns>
            <remarks>It only works for edges of the outer contour of the surfaces.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Eyeshot.Entities.ICurve,System.Boolean)">
            <summary>
            Trims the surface using an open or closed contour.
            </summary>
            <param name="contour">The 3D geometric contour</param>
            <param name="clockwise">If true, the contour orientation in 2D parametric domain will be clockwise (hole).</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.WeldInternalJoints(System.Collections.Generic.List{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            Foreach curve in contour, moves the end point of current curve onto the start point of the next one.
            </summary>
            <param name="contour">The contour</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Trim(devDept.Eyeshot.Entities.Surface,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            
            </summary>
            <param name="surf"></param>
            <param name="curveList">Must be already oriented and sorted</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IsOrientedClockwise(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            Check if a trim loop is oriented clockwise.
            </summary>
            <param name="trimLoop">A list of trim curves</param>
            <returns>True if the loop is oriented clockwise</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.IsOrientedClockwise(devDept.Eyeshot.Entities.Curve)">
            <summary>
            Check if a closed trim curve is oriented clockwise.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean)">
            <summary>
            Trim the surface using the limit surface provided.
            </summary>
            <param name="G">Limit surface</param>
            <param name="tol">The tolerance</param>
            <param name="flipSide">Reverse flag</param>
            <returns>The failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Trim the surface using the limit surface provided.
            </summary>
            <param name="G">Limit surface</param>
            <param name="tol">The tolerance</param>
            <param name="flipSide">Reverse flag</param>
            <param name="leftOvers">Trim operation left over list</param>
            <returns>The failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Boolean)">
            <summary>
            Trims the surface using the limit surface group provided.
            </summary>
            <param name="listG">Limit surface group</param>
            <param name="tol">The tolerance</param>
            <param name="flipSide">Reverse flag</param>
            <returns>The failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Trims the surface using the limit surface group provided.
            </summary>
            <param name="listG">Limit surface group</param>
            <param name="tol">The tolerance</param>
            <param name="flipSide">Reverse flag</param>
            <param name="leftOvers">Trim operation left over list</param>
            <returns>The failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Trim(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},devDept.Geometry.Plane,System.Double)">
            <summary>
            Trims a surface group using the limit plane provided. Always removes the splits on the positive side of the plane.
            </summary>
            <param name="listF">The surface group</param>
            <param name="pln">The limit plane</param>
            <param name="tol">The tolerance</param>
            <returns>The failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Trim(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},devDept.Geometry.Plane,System.Double,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Trims a surface group using the limit plane provided. Always removes the splits on the positive side of the plane.
            </summary>
            <param name="listF">The surface group</param>
            <param name="pln">The limit plane</param>
            <param name="tol">The tolerance</param>
            <param name="flipSideF">Reverse flag array for the surface group</param>
            <param name="leftOversF">Trim operation left over list</param>
            <returns>The failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Geometry.Plane,System.Double,System.Boolean)">
            <summary>
            Trims the surface using the limit plane provided.
            </summary>
            <param name="pln">The limit plane</param>
            <param name="tol">The tolerance</param>
            <param name="flipSide">Reverse flag</param> 
            <returns>The failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Geometry.Plane,System.Double,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Trims the surface using the limit plane provided.
            </summary>
            <param name="pln">The limit plane</param>
            <param name="tol">The tolerance</param>
            <param name="flipSide">Reverse flag</param>
            <param name="leftOvers">Trim operation leftovers list</param>
            <returns>The failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Geometry.Plane,System.Double)">
            <summary>
            Trims the surface using the limit plane provided. Always removes the surface on the positive side of the plane.
            </summary>
            <param name="pln">The limit plane</param>
            <param name="tol">The tolerance</param>
            <returns>The failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Trim(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Boolean,System.Boolean)">
            <summary>
            Trims a surface group against the other.
            </summary>
            <param name="listF">First surface group</param>
            <param name="listG">Second surface group</param>
            <param name="tol">The tolerance</param>
            <param name="flipSideF">Reverse flag for the first surface group</param>
            <param name="flipSideG">Reverse flag for the second surface group</param>
            <returns>The intersection failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Trim(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Trims a surface group against the other.
            </summary>
            <param name="listF">First surface group</param>
            <param name="listG">Second surface group</param>
            <param name="tol">The tolerance</param>
            <param name="flipSideF">Reverse flag for the first surface group</param>
            <param name="flipSideG">Reverse flag for the second surface group</param>
            <param name="leftOversF">Trim operation left over list</param>
            <param name="leftOversG">Trim operation left over list</param>
            <returns>The intersection failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Trim(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Trims a surface against the other.
            </summary>
            <param name="F">First surface</param>
            <param name="G">Second surface</param>
            <param name="tol">The tolerance</param>
            <param name="flipSideF">Reverse flag for the first surface</param>
            <param name="flipSideG">Reverse flag for the second surface</param>
            <returns>The failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Trim(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Trims a surface against the other.
            </summary>
            <param name="F">First surface</param>
            <param name="G">Second surface</param>
            <param name="tol">The tolerance</param>
            <param name="flipSideF">Reverse flag for the first surface</param>
            <param name="flipSideG">Reverse flag for the second surface</param>
            <param name="leftOversF"> </param>
            <param name="leftOversG"> </param>
            <returns>The failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Trim(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},devDept.Geometry.Plane,System.Double,System.Boolean)">
            <summary>
            Trims a surface group by a plane.
            </summary>
            <param name="listF">The surface group</param>
            <param name="pln">The plane</param>
            <param name="tol">The tolerance</param>
            <param name="flipSideF">Reverse flag array for the first surface group</param>
            <returns>The intersection failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SplitBy(devDept.Geometry.Plane,System.Double,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Splits the surface by a plane.
            </summary>
            <param name="pln">The plane</param>
            <param name="tol">The tolerance</param>
            <param name="splitsF">The resulting F surface splits</param>
            <param name="splitsG">The resulting G surface splits</param>
            <returns>The intersection failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Geometry.Plane,System.Double,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Trims the surface using the limit plane provided. Always removes the surface on the positive side of the plane.
            </summary>
            <param name="pln">The limit plane</param>
            <param name="tol">The tolerance</param>
            <param name="leftOvers">Trim operation left over list</param>
            <returns>The failure type.</returns>        
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SplitBy(devDept.Eyeshot.Entities.Surface,System.Double,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Splits the surface by a surface.
            </summary>
            <param name="G">The surface</param>
            <param name="tol">The tolerance</param>
            <param name="splitF">F surface split list</param>
            <param name="splitG">G surface split list </param>
            <returns>The intersection failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Split(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},devDept.Eyeshot.Entities.Surface,System.Double,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Splits a surface group by a surface.
            </summary>
            <param name="listF">The surface group</param>
            <param name="G">The surface</param>
            <param name="tol">The tolerance</param>
            <param name="splitF">F surface split list</param>
            <param name="splitG">G surface split list</param>
            <returns>The intersection failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.Split(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},devDept.Geometry.Plane,System.Double,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
            <summary>
            Splits a surface group by a plane.
            </summary>
            <param name="listF">The surface group</param>
            <param name="pln">The plane</param>
            <param name="tol">The tolerance</param>
            <param name="splitF">F surface split list</param>
            <param name="splitG">G surface split list</param>
            <returns>The intersection failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SplitBy(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.Surface@,devDept.Eyeshot.Entities.Surface@)">
            <summary>
            Splits the surface using an open or closed contour.
            </summary>
            <param name="contour">The 3D geometric contour</param>
            <param name="split1">The first split</param>
            <param name="split2">The second split</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SplitInternal(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,devDept.Geometry.Plane,System.Double,System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface},System.Boolean)">
            <summary>
            Trims the surface with a plane.
            </summary>
            <param name="F">The surface to be trimmed (it is modified)</param>
            <param name="fromPlane">The surface representation of the plane</param>
            <param name="pln">The plane</param>
            <param name="tol">The trim operation tolerance</param>
            <param name="leftOversF">The surfaces on the positive side of the plane</param>
            <param name="otherSideSplits">The surfaces on the negative side of the plane</param>
            <param name="getBothLists">True to compute the surfaces on both sides of the plane, false to compute only the ones on the positive side</param>
            <returns>The ssi failure type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Surface.SplitInternal(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.List{devDept.Eyeshot.Entities.Surface})">
            <summary>
            Trims the surface with another.
            </summary>
            <param name="F">The surface to be trimmed (it is modified)</param>
            <param name="G">The other surface</param>
            <param name="tol">The trim operation tolerance</param>
            <param name="splitList">The left over list</param>
            <param name="otherSideSplits">The split surfaces on the on the other side of G</param>
            <returns>The ssi failure type.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.ShowCurvature">
            <summary>
            When true, curvature map is displayed.
            </summary>
            <remarks>You need to call <see cref="M:devDept.Eyeshot.Entities.Surface.ComputeCurvatureMap(devDept.Eyeshot.ViewportLayout,devDept.Eyeshot.Legend,devDept.Eyeshot.Entities.Surface.curvatureType)"/> before enabling curvature map display.</remarks>
            <seealso cref="M:devDept.Eyeshot.Entities.Surface.ComputeCurvatureMap(devDept.Eyeshot.ViewportLayout,devDept.Eyeshot.Legend,devDept.Eyeshot.Entities.Surface.curvatureType)"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.DomainU">
            <summary>
            Gets surface domain in U parametric direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.DomainV">
            <summary>
            Gets surface domain in V parametric direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.OrderU">
            <summary>
            Surface order in the U parametric direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.OrderV">
            <summary>
            Surface order in the V parametric direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.Trimming">
            <summary>
            Gets or sets the surface's trimming region.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.IsClosedU">
            <summary>
            Returns true if the surface is closed in the U direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.IsClosedV">
            <summary>
            Returns true if the surface is closed in the V direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.IsRational">
            <summary>
            Returns true if the surface is rational.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.KnotVectorU">
            <summary>
            Gets or sets the surface knot vector in the U parametric direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.KnotVectorV">
            <summary>
            Gets or sets the surface knot vector in the V parametric direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.Triangles">
            <summary>
            Gets tessellation triangles array.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.DegreeU">
            <summary>
            Gets surface degree in the U direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.DegreeV">
            <summary>
            Gets surface degree in the V direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.ControlPoints">
            <summary>
            Gets the surface control points array.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.IsPlane">
            <summary>
            If true the surface is a plane with orthonormal axes.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.Trimmed">
            <summary>
            Returns true if the surface is trimmed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.SeamU">
            <summary>
            Gets surface seam U, if exists.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.SeamV">
            <summary>
            Gets surface seam V, if exists.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.Direction">
            <summary>
            Gets surface normal direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.TextureScaleU">
            <summary>
            Gets or set surface texture mapping scale in U direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.TextureScaleV">
            <summary>
            Gets or set surface texture mapping scale in V direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.TextureOffsetU">
            <summary>
            Gets or set surface texture mapping offset in U direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Surface.TextureOffsetV">
            <summary>
            Gets or set surface texture mapping offset in V direction.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.solType.InfiniteSol">
            <summary>
            Infinite solutions.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Surface.curvatureType">
            <summary>
            Surface curvature type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.curvatureType.Gauss">
            <summary>
            Gauss curvature
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.curvatureType.Mean">
            <summary>
            Mean curvature
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.curvatureType.Kappa1">
            <summary>
            Maximum principal curvature
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Surface.curvatureType.Kappa2">
            <summary>
            Minimum principal curvature
            </summary>
        </member>
        <member name="T:devDept.Geometry.PolyRegion2D">
            <summary>
            Class that performs boolean operations on contours of 2D polygonal region.
            </summary>
            <remarks>The algorithm is more robust than the one used by the Region, but it changes the coordinates a little bit.</remarks>
        </member>
        <member name="M:devDept.Geometry.PolyRegion2D.#ctor(devDept.Geometry.Plane,System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}})">
            <summary>
            Constructor for 3D profiles.
            </summary>
            <param name="plane">The profile plane</param>
            <param name="contourList">The list of contours points</param>
        </member>
        <member name="M:devDept.Geometry.PolyRegion2D.#ctor(devDept.Geometry.Plane,System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}},System.Boolean)">
            <summary>
            Construtor for 3D profiles.
            </summary>
            <param name="plane">The profile plane</param>
            <param name="contourList">The list of contours points</param>
            <param name="sortAndOrient">When true, the profiles are properly sorted and oriented.</param>
        </member>
        <member name="M:devDept.Geometry.PolyRegion2D.#ctor(System.Collections.Generic.IList{devDept.Geometry.Polygon2D})">
            <summary>
            Standard constructor.
            </summary>
            <param name="contourList">The list of contours points</param>
        </member>
        <member name="M:devDept.Geometry.PolyRegion2D.#ctor(System.Collections.Generic.IList{devDept.Geometry.Polygon2D},System.Boolean)">
            <summary>
            Standard constructor.
            </summary>
            <param name="contourList">The list of contours points</param>
            <param name="sortAndOrient">When true, the profiles are properly sorted and oriented.</param>
        </member>
        <member name="M:devDept.Geometry.PolyRegion2D.FromRegion(devDept.Eyeshot.Entities.Region,devDept.Geometry.Plane,System.Double)">
            <summary>
            Creates a PolyRegion2D object from a Region.
            </summary>
            <param name="region">The region</param>
            <param name="plane">The plane on which the region profiles will be projected</param>
            <param name="chordalErr">Chordal error</param>
            <returns>The PolyRegion2D object.</returns>
        </member>
        <member name="M:devDept.Geometry.PolyRegion2D.ToRegion(devDept.Geometry.Plane)">
            <summary>
            Creates a Region object from the current PolyRegion2D object.
            </summary>
            <param name="plane">The plane of the Region</param>
            <returns>The Region object.</returns>
        </member>
        <member name="M:devDept.Geometry.PolyRegion2D.Union(devDept.Geometry.PolyRegion2D,devDept.Geometry.PolyRegion2D)">
            <summary>
            Boolean union between two PolyRegion2D.
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>An array of PolyRegion2D objects.</returns>
        </member>
        <member name="M:devDept.Geometry.PolyRegion2D.Intersection(devDept.Geometry.PolyRegion2D,devDept.Geometry.PolyRegion2D)">
            <summary>
            Boolean intersection between two PolyRegion2D.
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>An array of PolyRegion2D objects.</returns>
        </member>
        <member name="M:devDept.Geometry.PolyRegion2D.Difference(devDept.Geometry.PolyRegion2D,devDept.Geometry.PolyRegion2D)">
            <summary>
            Boolean difference between two PolyRegion2D.
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>An array of PolyRegion2D objects.</returns>
        </member>
        <member name="M:devDept.Geometry.PolyBooleans.Union(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Boolean@)">
            <summary>
            Connects the contours using the given intersecting curves.
            </summary>
            <param name="contours">The contours to process</param>
            <param name="plane">The contours plane</param>
            <param name="curves">The curves intersecting the contours</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Geometry.PolyBooleans.ExtendIntersectionCurves(System.Collections.Generic.IList{devDept.Geometry.PolyBooleans.PolygonOnGrid},System.Collections.Generic.IList{devDept.Geometry.PolyBooleans.PolygonOnGrid},devDept.Eyeshot.HiddenLinesView.IntegerGrid,System.Double)">
            <summary>
            Checks for exact intersection and extends to avoid losing the intersection between the segments on the grid
            </summary>
            <param name="contours"></param>
            <param name="intersectionCurvesOnGrid"></param>
            <param name="grid"></param>
            <param name="problemSize"></param>
        </member>
        <member name="M:devDept.Geometry.PolyBooleans.PolygonOnGrid.Contains(devDept.Geometry.PolyBooleans.PolygonOnGrid,System.Double)">
            <summary>
            Tells if a polygon is completely inside another
            </summary>
            <param name="other"></param>
            <param name="gridDomainSize"></param>
            <returns></returns>
        </member>
        <member name="F:devDept.Geometry.PolyBooleans.VertexNodeOnGrid.PreviousX">
            <summary>
            Used when the profiles is rescaled before an internal boolean operation
            </summary>
        </member>
        <member name="F:devDept.Geometry.PolyBooleans.VertexNodeOnGrid.PreviousY">
            <summary>
            Used when the profiles is rescaled before an internal boolean operation
            </summary>
        </member>
        <member name="F:devDept.Geometry.PolyBooleans.VertexNodeOnGrid.Pt2D">
            <summary>
            The original point in the 2D Profile (on the plane)
            </summary>
        </member>
        <member name="M:devDept.Geometry.PolyBooleans.VertexNodeOnGrid.Perturb(devDept.Geometry.PolyBooleans.PolygonOnGrid,System.Drawing.Point,System.Boolean)">
            <summary>
            Perturbs the vertex to avoid having vertices exactly on other edges/vertices.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.RightCircularConicalSurface">
            <summary>
            Utility class to read a Right Circular Conical Surface (Type 194) in IGES format.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Entity">
            <summary>
            Base class for all Iges entities. Provides all the mechanisms to write IGES entities.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Import constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.AssignID(System.Int32@)">
            <summary>
            Assign entity ID and increments the ID by 2.
            </summary>
            <param name="index">A <paramref name="int"/> value representing a progressive entity ID</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.AddToTheList(System.Collections.Generic.IList{devDept.Eyeshot.Iges.Entity})">
            <summary>
            Add this IGES entity and its children to global IGES entities list.
            </summary>
            <param name="globalIgesEntityList">An <see cref="T:System.Collections.ArrayList"/> object. The global IGES entities array.</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.CreateChildren(System.Int32@)">
            <summary>
            Create this IGES entity children. Children entities are color, reference curves, reference surfaces, etc.
            </summary>
            <param name="index">A <paramref name="int"/> value representing a progressive entity ID.</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.WriteDataEntry(System.IO.TextWriter,System.Int32@)">
            <summary>
            Write the IGES entity Data Entry (DE).
            </summary>
            <param name="tw">A <paramref name="TextWriter"/> object. The output text file stream.</param>
            <param name="lineCount">A <paramref name="Int"/> value representing the progressive line count.</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.WriteFormattedDataEntry(System.IO.TextWriter,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="entitySubscriptNumber">1 to 8 digit unsigned number associated with the entity label.</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.BuildParameterString">
             <summary>
             Build parameter string. Each IGES entity class override this method to add Parameters to the lists.
             </summary>
            <remarks>Always call this base class method because it adds the entity type number plus comma at the beginning of parameter string.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.CurrentParameterLine">
            <summary>
            Get current parameter line string. Parameter lines are often more that one and are splitted after a parameter separator (comma).
            </summary>
            <returns>A <paramref name="string"/> representing the current (therefore not full) parameter line.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.AddToCurrentParameterLine(System.String)">
            <summary>
            Add a string to current parameter line.
            </summary>
            <param name="s">The <paramref name="strign"/> to add.</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.AddIntegerParameter(System.Boolean,System.Char)">
            <summary>
            Add an integer parameter to this IGES entity Parameter Data (PD). Overloaded to accept a <paramref name="bool"/>.
            </summary>
            <param name="value">The <paramref name="bool"/> value to add.</param>
            <param name="delimiter">A <paramref name="char"/> value used as delimiter. Usually a comma or semicolon.</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.AddIntegerParameter(System.Int32,System.Char)">
            <summary>
            Add an integer parameter to this IGES entity Parameter Data (PD).
            </summary>
            <param name="value">The <paramref name="int"/> value to add.</param>
            <param name="delimiter">A <paramref name="char"/> value used as delimiter. Usually a comma or semicolon.</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.AddFloatingPointParameter(System.Double,System.Char)">
            <summary>
            Add a double parameter to this IGES entity Parameter Data (PD).
            </summary>
            <param name="value">The <paramref name="double"/> value to add.</param>
            <param name="delimiter">A <paramref name="char"/> value used as delimiter. Usually a comma or semicolon.</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.AddStringParameter(System.String,System.Char)">
            <summary>
            Add a string parameter to this IGES entity Parameter Data (PD).
            </summary>
            <param name="text">The <see name="string"/> to add.</param>
            <param name="delimiter">A <see name="char"/> value used as delimiter. Usually a comma or semicolon.</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.CalculateParameterLineCount(System.Int32@)">
            <summary>
            Calculate parameter line count.
            </summary>
            <param name="index">A <paramref name="int"/> value representing the progressive line count.</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Entity.WriteParameterData(System.IO.TextWriter,System.Int32@)">
            <summary>
            Write this IGES entity Parameter Data (PD).
            </summary>
            <param name="tw">A <paramref name="TextWriter"/> object representing the output text file stream.</param>
            <param name="lineCount">A <paramref name="int"/> value representing the progressive line count.</param>
        </member>
        <member name="P:devDept.Eyeshot.Iges.Entity.EntityID">
            <summary>
            Get entity ID
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Iges.Entity.ColorID">
            <summary>
            Imported color ID.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Iges.Entity.IsVisible">
            <summary>
            Imported blank status.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.RightCircularConicalSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.SphericalSurface">
            <summary>
            Utility class to read a Spherical Surface (Type 196) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.SphericalSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.ToroidalSurface">
            <summary>
            Utility class to read a Toroidal Surface (Type 198) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.ToroidalSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Translators.ReadASC">
            <summary>
            Utility class for loading ASC files asynchronously.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Translators.ReadFileAsynch">
            <summary>
            Base class for asynchronous file reading.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.WorkUnit">
            <summary>
            <para>Base class for background working support. Overriding this class you can build a model or do your CPU intensive calculations on a separate thread keeping
            your application UI responsive.</para>
            <para>Depending on the nature of the work you may need to override both the <see cref="M:devDept.Eyeshot.WorkUnit.DoWork"/> and <see cref="M:devDept.Eyeshot.WorkUnit.WorkCompleted(devDept.Eyeshot.ViewportLayout)"/> methods or only the <see cref="M:devDept.Eyeshot.WorkUnit.DoWork"/> one and provide a 
            <see cref="T:devDept.Eyeshot.ViewportLayout.WorkCompletedEventHandler"/> to be notified when the work has completed.</para>
            </summary>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.CancelWork">CancelWork() method.</seealso>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DoWork(devDept.Eyeshot.WorkUnit)">DoWork() method.</seealso>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StartWork(devDept.Eyeshot.WorkUnit)">StartWork() method.</seealso>
            <example>
            The following sample demonstrates the WorkUnit class usage for building a solid model.
            <code lang="CS">
            public void Lego(Viewport viewport)
            {
              
                BuildLego bl = new BuildLego();
              
                viewport.StartWork(bl);
            }
            
            private class BuildLego : WorkUnit
            {
              
                private Solid[] model;
              
                protected override void DoWork(System.ComponentModel.BackgroundWorker worker, System.ComponentModel.DoWorkEventArgs doWorkEventArgs)
                {
                    // dimensions
                    double width = 95.75;
                    double depth = 47.75;
                    double height = 3.25;
             
                    // rows ans columns number
                    int nRows = 6;
                    int nColumns = 12;
              
                    // top cylinders size and position
                    double cylRadius = 2.55;
                    double distFromBorder = 1;
                    double cylHeight = 1.6;
                    Point2D startPos = new Point2D(3.55, 3.55);
              
                    // creates the plate
                    model = new Solid[]{Solid.CreateBox(width, depth, height)};
                            
                    // adds cylinders to the upper side
                    double xOffset, yOffset;
              
                    if (nColumns &lt;= 1)
                        xOffset = 0;
                    else
                        xOffset = (width - 2 * distFromBorder - 2 * cylRadius) / (nColumns - 1);
              
                    if (nRows &lt;= 1)
                        yOffset = 0;
                    else
                        yOffset = (depth - 2 * distFromBorder - 2 * cylRadius) / (nRows - 1);
            
                    Circle circle = new Circle(startPos.X, startPos.Y, height, cylRadius);
              
                    CompositeCurve curve = new CompositeCurve(circle);
              
                    int currentValue = 0;
              
                    for (int i = 0; i &lt; nRows; i++)
                    {
                        Solid solid = model[0];
              
                        for (int j = 0; j &lt; nColumns; j++)
                        {
                            model = solid.ExtrudeAdd(curve, 0.2, new Vector3D(0, 0, cylHeight), true);
              
                            if (model != null)
                            {
                                solid = model[0];
              
                                curve.Translate(xOffset, 0, 0);
              
                                // updates progress using build in progress bar
                                UpdateProgress(++currentValue, nRows * nColumns, "Adding top cylinders...", worker);
             
                                // checks for cancellation using built in progress bar cancel button
                                if (Canceled(worker, doWorkEventArgs))
                                    return;
                            }
                        }
              
                        curve.Translate(-nColumns * xOffset, yOffset, 0);
                    }
             
                }
             
                protected override void WorkCompleted(Viewport viewport)
                {
                    // adds the result to viewport entities collection
                    ViewportLayout.entities.AddRange(model, 0, Color.Green);
                    viewport.ZoomFit();
             
                    // prints the execution time
                    Console.WriteLine("Execution time: " + ExecutionTime + " ms");
                }
            }</code>
            <code lang="VB.NET">Public Sub Lego(viewport As Viewport)
              
                 Dim bl As New BuildLego()
              
                 viewport.StartWork(bl)
              
             End Sub
              
             Private Class BuildLego
                 Inherits WorkUnit
              
                 Private model As Solid()
              
                 Protected Overrides Sub DoWork(worker As System.ComponentModel.BackgroundWorker, doWorkEventArgs As System.ComponentModel.DoWorkEventArgs)
              
                     ' dimensions
                     Dim width As Double = 95.75
                     Dim depth As Double = 47.75
                     Dim height As Double = 3.25
              
                     ' rows ans columns number
                     Dim nRows As Integer = 6
                     Dim nColumns As Integer = 12
              
                     ' top cylinders size and position
                     Dim cylRadius As Double = 2.55
                     Dim distFromBorder As Double = 1
                     Dim cylHeight As Double = 1.6
                     Dim startPos As New Point2D(3.55, 3.55)
              
                     ' creates the plate
                     model = New Solid() {Solid.CreateBox(width, depth, height)}
              
                     ' adds cylinders to the upper side
                     Dim xOffset As Double, yOffset As Double
              
                     If nColumns &lt;= 1 Then
                         xOffset = 0
                     Else
                         xOffset = (width - 2 * distFromBorder - 2 * cylRadius) / (nColumns - 1)
                     End If
              
                     If nRows &lt;= 1 Then
                         yOffset = 0
                     Else
                         yOffset = (depth - 2 * distFromBorder - 2 * cylRadius) / (nRows - 1)
                     End If
              
                     Dim circle As New Circle(startPos.X, startPos.Y, height, cylRadius)
              
                     Dim curve As New CompositeCurve(circle)
              
                     Dim currentValue As Integer = 0
              
                     For i As Integer = 0 To nRows - 1
              
                         Dim theSolid As Solid = model(0)
              
                         For j As Integer = 0 To nColumns - 1
              
                             model = theSolid.ExtrudeAdd(curve, 0.2, New Vector3D(0, 0, cylHeight), True)
              
                             If model IsNot Nothing Then
              
                                 theSolid = model(0)
              
                                 curve.Translate(xOffset, 0, 0)
              
                                 ' updates progress using build in progress bar
                                 UpdateProgress(System.Threading.Interlocked.Increment(currentValue), nRows * nColumns, "Adding top cylinders...", worker)
              
                                 ' checks for cancellation using built in progress bar cancel button
                                 If Canceled(worker, doWorkEventArgs) Then
                                     Return
                                 End If
              
                             End If
              
                         Next
              
                         curve.Translate(-nColumns * xOffset, yOffset, 0)
                     Next
              
                 End Sub
              
                 Protected Overrides Sub WorkCompleted(viewport As Viewport)
                     ' adds the result to viewport entities collection
                     ViewportLayout.entities.AddRange(model, 0, Color.Green)
                     viewport.ZoomFit()
             
                     ' prints the execution time
                     Console.WriteLine("Execution time: " + ExecutionTime + " ms")
                 End Sub
             End Class</code>
            </example>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.DoWork">
            <summary>Executes the work synchronously.</summary>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.DoWork(devDept.Eyeshot.ViewportLayout)">
            <summary>
            Executes the work synchronously and calls the <see cref="M:devDept.Eyeshot.WorkUnit.WorkCompleted(devDept.Eyeshot.ViewportLayout)"/> method.
            </summary>
            <param name="viewportLayout">The ViewportLayout object passed to the <see cref="M:devDept.Eyeshot.WorkUnit.WorkCompleted(devDept.Eyeshot.ViewportLayout)"/> method</param>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.DoWork(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
            <summary>Does the actual work allowing progress bar update and cancellation.</summary>
            <param name="worker">The background worker thread</param>
            <param name="doWorkEventArgs">DoWork event arguments</param>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.WorkCompleted(devDept.Eyeshot.ViewportLayout)">
            <summary>Called when the work has completed. In the case you are modeling something, the <paramref name="viewportLayout"/> parameter allows you to easily add the model to the <see cref="P:devDept.Eyeshot.ViewportLayout.Entities">entities</see> collection.</summary>
            <param name="viewportLayout">The parent viewport layout control</param>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.WorkCancelled(devDept.Eyeshot.ViewportLayout)">
            <summary>
            Called when the work is cancelled.
            </summary>
            <param name="viewportLayout">The parent viewport layout control</param>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.WorkFailed(devDept.Eyeshot.ViewportLayout)">
            <summary>Called when the work has failed.</summary>
            <param name="viewportLayout">The parent viewport layout control</param>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.UpdateProgress(System.Int32,System.Int32,System.String,System.ComponentModel.BackgroundWorker)">
            <summary>Updates the progress bar value.</summary>
            <param name="current">The current step</param>
            <param name="total">The total number of steps</param>
            <param name="text">The progress bar text</param>
            <param name="worker">The background worker thread</param>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.UpdateProgressAndCheckCanceled(System.Int32,System.Int32,System.String,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Updates the progress bar value and checks if the worker thread has been canceled.
            </summary>
            <param name="current">The current step</param>
            <param name="total">The total number of steps</param>
            <param name="text">The progress bar text</param>
            <param name="worker">The background worker thread</param>
            <param name="doWorkEventArgs">DoWork event arguments</param>
            <returns>False if the worker thread was canceled, true otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.UpdateProgress(System.Double,System.Double,System.String,System.ComponentModel.BackgroundWorker)">
            <summary>Updates the progress bar value.</summary>
            <param name="current">The current step</param>
            <param name="total">The total number of steps</param>
            <param name="text">The progress bar text</param>
            <param name="worker">The background worker thread</param>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.UpdateProgressParallel(System.Double,System.String,System.ComponentModel.BackgroundWorker)">
            <summary>
            Updates the progress bar value for a parallel loop.
            </summary>
            <param name="total">The total number of steps</param>
            <param name="text">The progress bar text</param>
            <param name="worker">The background worker thread</param>
            <remarks>Call <see cref="M:devDept.Eyeshot.WorkUnit.ResetProgressParallel"/> before starting the parallel loop.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.UpdateProgressAndCheckCanceledParallel(System.Int32,System.String,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Updates the progress bar value and checks if the worker thread has been canceled, for a parallel loop.
            </summary>
            <param name="total">The total number of steps</param>
            <param name="text">The progress bar text</param>
            <param name="worker">The background worker thread</param>
            <param name="doWorkEventArgs">DoWork event arguments</param>
            <returns>False if the worker thread was canceled, true otherwise.</returns>
            <remarks>Call <see cref="M:devDept.Eyeshot.WorkUnit.ResetProgressParallel"/> before starting the parallel loop.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.ResetProgressParallel">
            <summary>
            Resets the progress bar for a parallel loop.
            </summary>
            <remarks>Call it before starting a parallel loop.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.Canceled(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
            <summary>Checks if the user has requested cancellation of the background operation.
            </summary>
            <param name="worker">The background worker thread</param>
            <param name="doWorkEventArgs">DoWork event arguments</param>
            <returns>True if the user has requested cancellation of the background operation.</returns>
        </member>
        <member name="M:devDept.Eyeshot.WorkUnit.UpdateWorkerStatus(System.Int32,System.Int32,System.String,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
             <summary>
             Updates progress and checks if the user canceled the background operation.
             </summary>
             <param name="current">Current progress</param>
             <param name="total">Total progress</param>
             <param name="message">Progress bar message</param>
            <param name="worker">The background worker thread</param>
            <param name="doWorkEventArgs">DoWork event arguments</param>
            <returns>True if the user has requested cancellation of the background operation.</returns>
        </member>
        <member name="P:devDept.Eyeshot.WorkUnit.ExecutionTime">
            <summary>
            Gets the (last) work execution time in milliseconds.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadFileAsynch.#ctor(System.String)">
            <summary>
            File name constructor.
            </summary>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadFileAsynch.#ctor(System.IO.Stream)">
            <summary>
            Stream constructor.
            </summary>
            <param name="s">The stream</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadFileAsynch.AddToScene(devDept.Eyeshot.ViewportLayout,System.Boolean,System.String)">
            <summary>
            Adds the entities loaded from the file to the scene.
            </summary>
            <param name="viewportLayout">The Viewport used to add the entities.</param>
            <param name="removeJittering">When true, it put the entities loaded from the file into a block, add a BlockReference that refers to that block and call the <see cref="!:ViewportLayout.RemoveJittering()"/>.</param>
            <param name="blockName">The name of the block that will contain the selected entities. Can be null/Nothing.</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadFileAsynch.AddToScene(devDept.Eyeshot.ViewportLayout,System.Int32)">
            <summary>
            Adds the entities loaded from the file to the scene.
            </summary>
            <param name="viewportLayout">The Viewport used to add entities</param>
            <param name="layerIndex">The destination layer index.</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadFileAsynch.AddToScene(devDept.Eyeshot.ViewportLayout,System.Int32,System.Drawing.Color)">
            <summary>
            Adds the entities loaded from the file to the scene.
            </summary>
            <param name="viewportLayout">The Viewport used to add entities</param>
            <param name="layerIndex">The destination layer index</param>
            <param name="color">The color assigned to the entities in the model</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadFileAsynch.AddToScene(devDept.Eyeshot.ViewportLayout,System.String)">
            <summary>
            Adds the entities loaded from the file to the scene.
            </summary>
            <param name="viewportLayout">The Viewport used to add entities</param>
            <param name="layerName">The destination layer name</param>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadFileAsynch.Log">
            <summary>
            Gets the list of errors and warnings generated during file import.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadFileAsynch.ReadingText">
            <summary>
            Gets or sets the "Reading..." text string.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadFileAsynch.LoadingText">
            <summary>
            Gets or sets the "Loading..." text string.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadFileAsynch.LoadingBlocksText">
            <summary>
            Gets or sets the "Loading block definitions..." text string.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadFileAsynch.LoadingEntitiesText">
            <summary>
            Gets or sets the "Loading entities..." text string.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadFileAsynch.Entities">
            <summary>
            Gets the entities resulting from file reading.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadFileAsynch.FileName">
            <summary>
            Gets the file name.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadFileAsynch.Result">
            <summary>
            Gets the result of reading operation (true if the operation succeeded).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadFileAsynch.Stream">
            <summary>
            Gets current stream.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadASC.#ctor(System.String,System.Char[])">
            <summary>
            Constructor with file name and separators specifications.
            </summary>
            <param name="fileName">The file name.</param>
            <param name="separators">Separators to use between coordinates values.</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadASC.#ctor(System.String)">
            <summary>
            Constructor with file name (default separators used: space or tabulator character).
            </summary>
            <param name="fileName">The file name.</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadASC.#ctor(System.IO.Stream,System.Char[])">
            <summary>
            Constructor with stream and separators specifications.
            </summary>
            <param name="stream">The file stream</param>
            <param name="separators">Separators to use between coordinates values</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadASC.#ctor(System.IO.Stream)">
            <summary>
            Constructor with stream (default separators used: space or tabulator character).
            </summary>
            <param name="stream">The file stream</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadASC.ReadAscFile(System.Char[],System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Loads the point cloud data from disk.
            </summary>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="T:devDept.Eyeshot.Translators.ReadFileAsynchWithBlocks">
            <summary>
            Adds support for block definitions to the file loading.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadFileAsynchWithBlocks.#ctor(System.IO.Stream)">
            <summary>
            File stream constructor.
            </summary>
            <param name="stream">The file stream</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadFileAsynchWithBlocks.FillBlocks(devDept.Eyeshot.ViewportLayout)">
            <summary>
            Automatically merge block definitions with existing ones.
            </summary>
            <param name="viewportLayout">The ViewportLayout control</param>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadFileAsynchWithBlocks.Blocks">
            <summary>
            Gets the blocks resulting from file reading.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadFileAsynchWithBlocks.Units">
            <summary>
            Gets imported geometry linear units.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Translators.ReadFileAsynchWithBlocksAndLayers">
            <summary>
            Adds support for layer definitions to the file loading.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadFileAsynchWithBlocksAndLayers.#ctor(System.IO.Stream)">
            <summary>
            File stream constructor.
            </summary>
            <param name="stream">The file stream</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadFileAsynchWithBlocksAndLayers.FillLayers(devDept.Eyeshot.ViewportLayout)">
            <summary>
            Automatically merge layers with existing ones.
            </summary>
            <param name="viewportLayout">The ViewportLayout control</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadFileAsynchWithBlocksAndLayers.AddToScene(devDept.Eyeshot.ViewportLayout,System.Boolean,System.String)">
            <summary>
            Adds to the Viewport the entities loaded from the Autodesk file, along with layers and blocks. Blocks and layers contained 
            previously in the Viewport are merged.
            </summary>
            <param name="viewportLayout">The Viewport used to add entities, layers and blocks.</param>
            <param name="removeJittering">When true, it put the entities loaded from the Autodesk file into a block, add a BlockReference that refers to that block and call the <see cref="!:ViewportLayout.RemoveJittering()"/> method.</param>
            <param name="blockName">The name of the block that will contain the selected entities. Can be null/Nothing.</param>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadFileAsynchWithBlocksAndLayers.Layers">
            <summary>
            Gets the list of layers resulting from file reading.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Translators.ReadOBJ">
            <summary>
             Utility class for loading OBJ files asynchronously.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Translators.ReadOBJ._plain">
            <summary>
            Avoid loading and appling materials, including loading of UV maps.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Translators.ReadOBJ._matOverride">
            <summary>
            When true and MTL file is missing allow UV map loading with the default material specified in the class constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.String,System.String,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>
            Missing MTL and preserve UV constructor. When the MTL file is missing, the <paramref name="matName"/> material is used
            for all objects on existing UV map.
            </summary>
            <param name="fileName">The file to read</param>
            <param name="matName">Material name</param>
            <param name="edgeStyle">The edge style type of the resulting meshes</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.String,System.Boolean,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>
            Constructor with file name, plain and edge style specifications.
            </summary>
            <param name="fileName">The file to read</param>
            <param name="plain">If true colors and textures are skipped</param>
            <param name="edgeStyle">The edge style type of the resulting meshes</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.IO.Stream,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>
            Constructor with stream and edge style specifications.
            </summary>
            <param name="stream">The file stream</param>
            <param name="edgeStyle">The edge style type of the resulting meshes</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.IO.Stream},devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>
            Constructor with streams and edge style specifications.
            </summary>
            <param name="objStream">The file stream</param>
            <param name="materialStream">The stream of the material file</param>
            <param name="texturesStream">The stream of the texture files</param>
            <param name="edgeStyle">The edge style type of the resulting meshes</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor with file name and plain specifications.
            </summary>
            <param name="fileName">The file to read</param>
            <param name="plain">If true colors and textures are skipped</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.String,devDept.Eyeshot.Entities.Mesh.edgeStyleType)">
            <summary>
            Constructor with file name and edge style specifications.
            </summary>
            <param name="fileName">The file to read</param>
            <param name="edgeStyle">The edge style type of the resulting meshes</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.String)">
            <summary>
            Constructor with file name specification.
            </summary>
            <param name="fileName">The file to read</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadOBJ.AddToScene(devDept.Eyeshot.ViewportLayout,System.Boolean,System.String)">
            <summary>
            Adds entities and materials, read from the OBJ file, to the Viewport.
            </summary>
            <param name="viewportLayout">The Viewport used to add entities and materials.</param>
            <param name="removeJittering">When true, it put the entities read from the OBJ file into a block, add a BlockReference that refers to that block and call the <see cref="!:ViewportLayout.RemoveJittering()"/> method.</param>
            <param name="blockName">The name of the block that will contain the selected entities. Can be null/Nothing.</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadOBJ.AddToScene(devDept.Eyeshot.ViewportLayout,System.Int32)">
            <summary>
            Adds entities and materials, read from the OBJ file, to the Viewport.
            </summary>
            <param name="viewportLayout">The Viewport used to add entities and materials</param>
            <param name="layerIndex">The destination layer index</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadOBJ.AddToScene(devDept.Eyeshot.ViewportLayout,System.Int32,System.Drawing.Color)">
            <summary>
            Adds entities and materials, read from the OBJ file, to the Viewport.
            </summary>
            <param name="viewportLayout">The Viewport used to add entities and materials</param>
            <param name="layerIndex">The destination layer index</param>
            <param name="color">The color assigned to the entities in the model</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadOBJ.AddToScene(devDept.Eyeshot.ViewportLayout,System.String)">
            <summary>
            Adds entities and materials, read from the OBJ file, to the Viewport.
            </summary>
            <param name="viewportLayout">The Viewport used to add entities and materials</param>
            <param name="layerName">The destination layer name</param>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadOBJ.Materials">
            <summary>
            Gets or sets the materials defined in the attached MTL files.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Translators.ReadSTL">
            <summary>
            Utility class for loading STL files asynchronously.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.String,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            File name, light weight and mesh nature settings constructor.
            </summary>
            <param name="fileName">The file name</param>
            <param name="lightWeight">When true the mesh is loaded in light weight mode.</param>
            <param name="splitDisjoint">Divides into separate objects meshes that do not connect</param>
            <param name="meshNature">The mesh nature type of the resulting meshes.</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.String,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            File name, light weight and mesh nature settings constructor.
            </summary>
            <param name="fileName">The file name</param>
            <param name="lightWeight">When true the mesh is loaded in light weight mode.</param>
            <param name="meshNature">The mesh nature type of the resulting meshes.</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.String,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            File name and mesh nature settings constructor.
            </summary>
            <param name="fileName">The file name</param>
            <param name="meshNature">The mesh nature type of the resulting meshes.</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.String,System.Boolean)">
            <summary>
            File name and light weight settings constructor.
            </summary>
            <param name="fileName">The file name</param>
            <param name="lightWeight">When true the mesh is loaded in light weight mode.</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.String)">
            <summary>
            File name constructor.
            </summary>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.IO.Stream)">
            <summary>
            Stream constructor.
            </summary>
            <param name="stream">The file stream</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Constructor with stream and lightWeight specifications.
            </summary>
            <param name="stream">The file stream</param>
            <param name="lightWeight">When true the mesh is loaded in light weight mode</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.IO.Stream,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Constructor with stream and mesh nature specifications.
            </summary>
            <param name="stream">The file stream</param>
            <param name="meshNature">The mesh nature type of the resulting meshes</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.IO.Stream,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Constructor with stream, light weight and mesh nature specifications.
            </summary>
            <param name="stream">The file stream</param>
            <param name="lightWeight">When true the mesh is loaded in light weight mode</param>
            <param name="meshNature">The mesh nature type of the resulting meshes</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.IO.Stream,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Constructor with stream, light weight and mesh nature specifications.
            </summary>
            <param name="stream">The file stream</param>
            <param name="lightWeight">When true the mesh is loaded in light weight mode</param>
            <param name="splitDisjoint">Divides into separate objects meshes that do not connect</param>
            <param name="meshNature">The mesh nature type of the resulting meshes</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTL.ReadStlFile(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
            <summary>Reads a STL file. Both ASCII and binary format are supported.</summary>
            <param name="worker"> </param>
            <param name="doWorkEventArgs"> </param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="T:devDept.Eyeshot.Triangulation.BallPivoting">
            <summary>
            Surface reconstruction based on the Ball-Pivoting method. Designed to work on 100k triangles at time.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.gen">
            <summary>
            Triangle generation, increased at every new seed.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.vertices">
            <summary>
            Mesh vertices.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.triangles">
            <summary>
            Mesh triangles.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.voxels">
            <summary>
            Voxels used to partition the space into cubes, useful for fast search of the points (usages in FindSeedTriangle() and
            BallPivot() functions).
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.totalPoints">
            <summary>
            Variables used for the realisation of the progress bar.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.usedPoints">
            <summary>
            Variables used for the realisation of the progress bar.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.minCorner">
            <summary>
            Minimum and maximum points in the Bounding Box.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.radiusArray">
            <summary>
            Array of ball radii (and squared ball radii) for execute the algorithm in multiple passes.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.radiusSquaredArray">
            <summary>
            Array of ball radii (and squared ball radii) for execute the algorithm in multiple passes.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.voxelSize">
            <summary>
            Dimension of each voxel as a multiple of radius. It represents the length of each side of the voxel (length, width and height).
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.numVoxelsInX">
            <summary>
            Maximum index of the voxel 3D matrix in each direction (x, y and z).
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.numVoxelsInY">
            <summary>
            Maximum index of the voxel 3D matrix in each direction (x, y and z).
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.numVoxelsInZ">
            <summary>
            Maximum index of the voxel 3D matrix in each direction (x, y and z).
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.result">
            <summary>
            The result of the triangulation.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.last">
            <summary>
            Integer used as an index for the first point to consider in the FindSeedTriangle() function.
            It is used to speed up things.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(devDept.Eyeshot.Entities.FastPointCloud,System.Double[])">
            <summary>
            Fast point cloud and ball radius array constructor.
            </summary>
            <param name="fpc">The point cloud to be triangulated</param>        
            <param name="radii">The array of ball radii used for pivoting</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(devDept.Eyeshot.Entities.FastPointCloud,System.Double)">
            <summary>
            Fast point cloud and ball radius constructor.
            </summary>
            <param name="fpc">The point cloud to be triangulated.</param>        
            <param name="radius">The radius of the ball used for pivoting.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(devDept.Eyeshot.Entities.FastPointCloud)">
            <summary>
            Fast point cloud constructor with ball radius autoguessing.
            </summary>
            <param name="fpc">The point cloud to be triangulated.</param>        
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(devDept.Eyeshot.Entities.PointCloud,System.Double[])">
            <summary>
            Point cloud constructor and ball radius array constructor.
            </summary>
            <param name="pc">The point cloud to be triangulated.</param>
            <param name="radii">The array of ball radii used for pivoting.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(devDept.Eyeshot.Entities.PointCloud,System.Double)">
            <summary>
            Point cloud and ball radius constructor.
            </summary>
            <param name="pc">The point cloud to be triangulated.</param>        
            <param name="radius">The radius of the ball used for pivoting.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(devDept.Eyeshot.Entities.PointCloud)">
            <summary>
            Point cloud constructor with ball radius autoguessing.
            </summary>
            <param name="pc">The point cloud to be triangulated.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(System.Single[],System.Byte[],System.Double)">
            <summary>
            Point array, color array and ball radius constructor.
            </summary>
            <param name="pointArray">The point array to triangulate, defined as XYZ tuples.</param>
            <param name="rgbArray">The color array used for colored meshes, defined as RGB tuples.</param>
            <param name="radius">The radius of the ball used for pivoting.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(System.Single[],System.Byte[],System.Double[])">
            <summary>
            Point array, color array and ball radius array constructor.
            </summary>
            <param name="pointArray">The point array to triangulate, defined as XYZ tuples.</param>
            <param name="rgbArray">The color array used for colored meshes, defined as RGB tuples.</param>
            <param name="radii">The array of ball radii used for pivoting.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.InitRadiusArray(System.Double[])">
            <summary>
            Initializes the array of radii.
            </summary>
            <param name="radii">The array of radii passed in the constructor.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(System.Single[],System.Byte[])">
            <summary>
            Point array and color array constructor with ball radius autoguessing.
            </summary>
            <param name="pointArray">The point array to triangulate, defined as XYZ tuples.</param>
            <param name="rgbArray">The color array used for colored meshes, defined as RGB tuples.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.TriangulateUsingBallPivoting(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Initial method that executes triangulation.
            </summary>
            <param name="worker"></param>
            <param name="doWorkEventArgs"></param>
            <returns>The resulting mesh.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.Init(System.Single[],System.Byte[],System.Double[])">
            <summary>
            Initialization of the data structures used for triangulation.
            </summary>
            <param name="pointArray">The point array</param>
            <param name="rgbArray">The color array</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.FillVoxels">
            <summary>
            Reinitialization after changing radius for multiple radii triangulation.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Triangulation.BallPivoting.TriangulateInternal(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)" -->
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.Join(devDept.Eyeshot.Triangulation.BallPivoting.FrontEdge,System.Int32,devDept.Geometry.Point3D,System.Int32)">
            <summary>
            The Join operation. It removes the edge used for pivot and adds two new edges,
            connecting the two endpoints of the edge to remove with the new point found.
            </summary>
            <param name="edge">The pivoted edge.</param>
            <param name="sigmaK">The new point found during pivoting.</param>
            <param name="center">The center of the sphere after the pivoting.</param>        
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.Glue(devDept.Eyeshot.Triangulation.BallPivoting.FrontEdge,System.Int32,devDept.Geometry.Point3D,System.Int32)">
            <summary>
            Execution of the Join and Glue operations necessary to create edges and to delete edges with opposite orientation.
            </summary>
            <param name="edge">The pivoted edge.</param>
            <param name="sigmaK">The new point found during pivoting.</param>
            <param name="center">The center of the sphere touching the two points in the edge and the new point found.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.SetAsBoundary(devDept.Eyeshot.Triangulation.BallPivoting.FrontEdge)">
            <summary>
            Sets an edge as boundary (not eligible for pivoting).
            </summary>
            <param name="frontEdge">The edge to set as boundary.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.BallPivot(devDept.Eyeshot.Triangulation.BallPivoting.FrontEdge,System.Int32@,devDept.Geometry.Point3D@,devDept.Geometry.Vector3D@)">
            <summary>
            Pivoting operation. It rotates the ball in contact with an edge searching for another point, used to create another mesh triangle.
            </summary>
            <param name="pivoting">The edge in contact.</param>
            <param name="sigmaK">Output parameter indicating the point found after the pivoting operation (null if not found).</param>
            <param name="center">The center of the sphere after the pivoting operation.</param>
            <param name="norm"> </param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.CheckAgainstTrianglesOnSigmaK(devDept.Eyeshot.Triangulation.BallPivoting.FrontEdge,System.Int32)">
            <summary>
            Checks if candidate triangle has a side identical to one of the triangles on sigmaK vertex.
            </summary>
            <param name="pivot">Pivoting edge</param>
            <param name="sigmaK">Candidated vertex</param>
            <returns>True if the candidate is good, false otherwise.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Triangulation.BallPivoting.SpatialNeighborhood(devDept.Geometry.Point3D,System.Boolean,System.Int32[])" -->
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.GetActiveEdge(System.Int32)">
            <summary>
            Returns one of the active edges contained into the front.
            </summary>
            <returns>The active edge used for the next pivoting operation.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.OutputTriangle(System.Int32,System.Int32,System.Int32,devDept.Geometry.Vector3D)">
            <summary>
            Adds a new valid triangle into the list of triangles.
            </summary>
            <param name="sigmaI">One of the three points of the new triangle.</param>
            <param name="sigmaJ">One of the three points of the new triangle.</param>
            <param name="sigmaK">One of the three points of the new triangle.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.FindSeedTriangle(System.Int32@,System.Int32@,System.Int32@,devDept.Geometry.Point3D@)">
            <summary>
            Method used to find the first triangle (seed triangle) to begin with the pivoting operations.
            </summary>
            <param name="sigmaI">One of the points of the seed triangle.</param>
            <param name="sigmaJ">One of the points of the seed triangle.</param>
            <param name="sigmaK">One of the points of the seed triangle.</param>
            <param name="center">The center of the sphere in contact with the three points of the seed triangle.</param>
            <returns>A boolean value indicating the success (true) or failure (false) of this operation.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.FindSphere(devDept.Eyeshot.Triangulation.BallPivoting.BallPivotingPoint,devDept.Eyeshot.Triangulation.BallPivoting.BallPivotingPoint,devDept.Eyeshot.Triangulation.BallPivoting.BallPivotingPoint,devDept.Geometry.Point3D@)">
            <summary>
            Finds the center of a sphere in contact with three points.
            </summary>
            <param name="p1">One of the three points used to calculate the position of the sphere.</param>
            <param name="p2">One of the three points used to calculate the position of the sphere.</param>
            <param name="p3">One of the three points used to calculate the position of the sphere.</param>
            <param name="center">The center of the sphere.</param>
            <returns>A boolean indicating the success (true) or failure (false) of this operation.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.BallPivoting.TriangulatingText">
            <summary>
            Gets or sets the progress bar text displayed when executed asynchronously.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.BallPivoting.OutputType">
            <summary>
            Gets or sets the triangulation output type.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.BallPivoting.Result">
            <summary>
            Property that returns the mesh resulting from the triangulation.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.BallPivoting.MinAngle">
            <summary>
            Gets or sets the minimum angle (in radians) between two triangles.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Triangulation.BallPivoting.BallPivotingTriangle">
            <summary>
            Ball pivoting point definition.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Triangulation.BallPivoting.BallPivotingPoint">
            <summary>
            Ball pivoting point definition.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.BallPivotingPoint.ArrayPosition">
            <summary>
            The position into the array of vertices used by the resulting mesh.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.BallPivotingPoint.EdgeConnections">
            <summary>
            Number of edges of the front the point belongs to.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.BallPivotingPoint.#ctor(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Ball Pivoting Point constructor.
            </summary>
            <param name="x">Integer x position.</param>
            <param name="y">Integer y position.</param>
            <param name="z">Integer z position.</param>
            <param name="arrayPosition">Position into the array of vertices of the mesh.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.BallPivotingPoint.#ctor(System.Double,System.Double,System.Double,System.Byte,System.Byte,System.Byte,System.Int32)">
            <summary>
            Ball Pivoting Point constructor.
            </summary>
            <param name="x">Integer x position.</param>
            <param name="y">Integer y position.</param>
            <param name="z">Integer z position.</param>
            <param name="arrayPosition">Position into the array of vertices of the mesh.</param>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.BallPivotingPoint.AssociatedEdges">
            <summary>
            Gets the associated edges.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Triangulation.BallPivoting.edgeType">
            <summary>
            Enumerable indicating the possible types of an edge.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.edgeType.Active">
            <summary>
            Active edge: eligible for pivoting.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.edgeType.Boundary">
            <summary>
            Boundary edge: not eligible for pivoting.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.edgeType.Frozen">
            <summary>
            Frozen edge: type used for out-of-core extensions (not yet implemented).
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Triangulation.BallPivoting.FrontEdge">
            <summary>
            Class representing an edge used by the ball pivoting operation to create new triangles.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.FrontEdge.#ctor(System.Int32,System.Int32,System.Int32,devDept.Geometry.Point3D,System.Int32)">
            <summary>
            Front edge base constructor.
            </summary>
            <param name="endpointI">First endpoint (edge start)</param>
            <param name="endpointJ">Second endpoint (edge end)</param>
            <param name="opposite">Opposite point</param>
            <param name="ballCenter">Ball center</param>
            <param name="triPos">Triangle index</param>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.FrontEdge.AssociatedTriangle">
            <summary>
            Associated triangle index.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.FrontEdge.Opposite">
            <summary>
            Gets or sets the opposite point.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.FrontEdge.BallCenter">
            <summary>
            Gets or sets of the ball center.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.BallPivoting.FrontEdge.Type">
            <summary>
            Gets or sets the edge type.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.BallPivoting.FrontEdge.EndpointI">
            <summary>
            Gets or sets the start endpoint.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.BallPivoting.FrontEdge.EndpointJ">
            <summary>
            Gets or sets the end endpoint.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.GestureHandler">
            <summary>
            Handles gesture events
            </summary>
            <remarks>
            The handler simplifies handling gesture such as rotate, zoom and pan 
            by keeping the requires knowledge of the previous and first event in 
            the gesture event sequence.  
            </remarks>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Handler">
            <summary>
            Base class for handling Gesture and Touch event
            </summary>
            <remarks>
            A form can have one handler, either touch handler or gesture handler. 
            The form need to create the handler and register to events. 
            The code is not thread safe, we assume that the calling thread is the 
            UI thread. There is no blocking operation in the code.
            </remarks>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Handler.SetHWndTouchInfo">
            <summary>
            Initiate touch support for the underline hWnd 
            </summary>
            <remarks>Registering the hWnd to touch support or configure the hWnd to receive gesture messages</remarks>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Handler.WindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The interceptor WndProc
            </summary>
            <param name="hWnd">WndProc hWnd</param>
            <param name="msg">WndProc msg</param>
            <param name="wparam">WndProc wParam</param>
            <param name="lparam">WndProc lPara</param>
            <returns>WndProc return</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Handler.#ctor(devDept.Eyeshot.Multitouch.IHwndWrapper)">
            <summary>
            We create the hanlder using a factory method.
            </summary>
            <param name="hWndWrapper">The control or Window that registered for touch/gesture events</param>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Handler.Initialize">
            <summary>
            Connect the handler to the Control
            </summary>
            <remarks>
            The trick is to subclass the Control and intercept touch/gesture events, then reflect
            them back to the control.
            </remarks>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Handler.WindowProcSubClass(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Intercept touch/gesture events using Windows subclassing
            </summary>
            <param name="hWnd">The hWnd of the registered form</param>
            <param name="msg">The WM code</param>
            <param name="wparam">The WM WParam</param>
            <param name="lparam">The WM LParam</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Handler.IsTouchWindows(System.IntPtr)">
            <summary>
            Check if the Window is registered for multitouch events
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Handler.HWndWrapper">
            <summary>
            The registered control wrapper
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Handler.ControlHandle">
            <summary>
            The registered control's handler
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Handler.DpiX">
            <summary>
            The X DPI of the target window
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Handler.DpiY">
            <summary>
            The Y DPI of the target window
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:devDept.Eyeshot.Multitouch.Handler.GestureNotify" -->
        <member name="E:devDept.Eyeshot.Multitouch.Handler.WindowMessage">
            <summary>
            Enable advanced message handling/blocking
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Handler.DigitizerCapabilities">
            <summary>
            Report digitizer capabilities
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Handler.DigitizerCapabilities.Status">
            <summary>
            Get the current Digitizer Status
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Handler.DigitizerCapabilities.MaxumumTouches">
            <summary>
            Get the maximum touches capability
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Handler.DigitizerCapabilities.IsIntegratedTouch">
            <summary>
            Check for integrated touch support
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Handler.DigitizerCapabilities.IsExternalTouch">
            <summary>
            Check for external touch support
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Handler.DigitizerCapabilities.IsIntegratedPan">
            <summary>
            Check for Pen support
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Handler.DigitizerCapabilities.IsExternalPan">
            <summary>
            Check for external Pan support
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Handler.DigitizerCapabilities.IsMultiInput">
            <summary>
            Check for multi-input
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Handler.DigitizerCapabilities.IsStackReady">
            <summary>
            Check if touch device is ready
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Handler.DigitizerCapabilities.IsMultiTouchReady">
            <summary>
            Check if Multi-touch support device is ready
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.GestureHandler.#ctor(devDept.Eyeshot.Multitouch.IHwndWrapper)">
            <summary>
            Construct a gesture handler instance
            </summary>
            <param name="hWndWrapper">The target control wrapper</param>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.GestureHandler.SetHWndTouchInfo">
            <summary>
            Register the form to get gesture events
            </summary>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.GestureHandler.WindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The Windows message interception for gesture events handling
            </summary>
            <param name="hWnd">WndProc hWnd</param>
            <param name="msg">WndProc msg</param>
            <param name="wParam">WndProc wParam</param>
            <param name="lParam">WndProc lParam</param>
            <returns>WndProc return</returns>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureHandler.LastBeginEvent">
            <summary>
            The event that started the current gesture
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureHandler.LastEvent">
            <summary>
            The last event in the current gesture event sequence
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.GestureHandler.Begin">
            <summary>
            Indicate a that a gesture is beginning
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.GestureHandler.End">
            <summary>
            Indicate an end of a gesture
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.GestureHandler.PanBegin">
            <summary>
            Start the pannin sequence
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.GestureHandler.Pan">
            <summary>
            Panning continue
            </summary>
            /// <remarks>
            Use the PanTranslation property of the event argument to get the
            relative translation size (relative to the last pan event) 
            </remarks>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.GestureHandler.PanEnd">
            <summary>
            End pan event
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.GestureHandler.PressAndTap">
            <summary>
            RollOver gesture event, this is a single event
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.GestureHandler.RotateBegin">
            <summary>
            Starting rotate gesture 
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.GestureHandler.Rotate">
            <summary>
            Continue rotating
            </summary>
            <remarks>
            Use the RotateAngle in the event argument to get the relative 
            rotation angle
            </remarks>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.GestureHandler.RotateEnd">
            <summary>
            Rotate end
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.GestureHandler.TwoFingerTap">
            <summary>
            Two fingers tap event.
            </summary>
            <remarks>
            This is a single event
            </remarks>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.GestureHandler.ZoomBegin">
            <summary>
            Start zoom gesture
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.GestureHandler.Zoom">
            <summary>
            Continue zooming
            </summary>
            <remarks>
            Use the ZoomFactor to know the relative zoom factor
            </remarks>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.GestureHandler.ZoomEnd">
            <summary>
            Zoom End event
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.GestureEventArgs">
            <summary>
            Event arguments for all gesture events
            </summary>
            <remarks>
            Some of the properties are related to specific messages:
            Panning: PanTranslation
            Zooming: ZoomFactor
            Rotation: RotateAngle
            </remarks>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.GestureEventArgs.#ctor(devDept.Eyeshot.Multitouch.GestureHandler,devDept.Eyeshot.Multitouch.Interop.GESTUREINFO@)">
            <summary>
            Create new gesture event instance and decode the gesture info structure
            </summary>
            <param name="handler">The gesture handler</param>
            <param name="gestureInfo">The gesture information</param>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureEventArgs.GestureId">
            <summary>
            The windows gesture id
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureEventArgs.GestureArguments">
            <summary>
            the raw Gesture arguments
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureEventArgs.Location">
            <summary>
            The gesture location translated into client area
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureEventArgs.IsBegin">
            <summary>
            The first event of a gesture
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureEventArgs.IsEnd">
            <summary>
            The last event of a gesture
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureEventArgs.IsInertia">
            <summary>
            The gesture has triggered inertia
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureEventArgs.RotateAngle">
            <summary>
            The relative rotation angle, used by the Rotate event
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureEventArgs.Center">
            <summary>
            The calculated gesture center
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureEventArgs.ZoomFactor">
            <summary>
            The zoom factor, used by the Zoom event
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureEventArgs.PanTranslation">
            <summary>
            The relative panning translation, used by the Pan event
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureEventArgs.PanVelocity">
            <summary>
            The velocity vector of the pan gesture, can be used for custom inertia
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureEventArgs.LastBeginEvent">
            <summary>
            The first gesture in this gesture event sequence
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureEventArgs.LastEvent">
            <summary>
            The last gesture in this gesture event sequence
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.IHwndWrapper">
            <summary>
            Wrapp HWND source such as System.Windows.Forms.Control, or System.Windows.Window
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.IHwndWrapper.PointToClient(System.Drawing.Point)">
            <summary>
            Computes the location of the specified screen point into client coordinates
            </summary>
            <param name="point">The screen coordinate System.Drawing.Point to convert</param>
            <returns>A point that represents the converted point in client coordinates</returns>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.IHwndWrapper.Handle">
            <summary>
            The Underline Windows Handle
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.IHwndWrapper.Source">
            <summary>
            The .NET object that wrap the Windows Handle (WinForm, WinForm Control, WPF Window, IntPtr of HWND)
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.IHwndWrapper.HandleCreated">
            <summary>
            The Win32 Handle has been created
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.IHwndWrapper.HandleDestroyed">
            <summary>
            /// The Win32 Handle has been destroyed
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.IHwndWrapper.IsHandleCreated">
            <summary>
            Check if the Win32 Handle is already created
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.IGUITimer">
            <summary>
            A Common interface foir timer.
            The timer has to be in the UI thread context
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.IGUITimer.Start">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.IGUITimer.Stop">
            <summary>
            Stops the timer.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.IGUITimer.Enabled">
            <summary>
            Gets or sets whether the timer is running.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.IGUITimer.Interval">
            <summary>
            Gets or sets the time, in milliseconds, before the Tick event is raised
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.IGUITimer.Tick">
            <summary>
              Occurs when the specified timer interval has elapsed and the timer is enabled.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:devDept.Eyeshot.Multitouch.GestureNotifyEventArgs" -->
        <member name="P:devDept.Eyeshot.Multitouch.GestureNotifyEventArgs.Location">
            <summary>
            The gesture location
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.GestureNotifyEventArgs.TargetHwnd">
            <summary>
            The gesture target window
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.WMEventArgs">
            <summary>
            Enable advanced message handling/blocking
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.DigitizerStatus">
            <summary>
            All availible digitizer capabilities
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Manipulation.ManipulationInertiaProcessor">
            <summary>
            A manipulation processor that support Inertia processing
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor">
            <summary>
            A .NET wrapper for touch manipulation processing
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.#ctor(devDept.Eyeshot.Multitouch.Manipulation.ProcessorManipulations)">
            <summary>
            Create new manipulation processor
            </summary>
            <remarks>
            Call the <see cref="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ProcessDown(System.UInt32,System.Drawing.PointF)"/>, <see cref="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ProcessMove(System.UInt32,System.Drawing.PointF)"/>, <see cref="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ProcessUp(System.UInt32,System.Drawing.PointF)"/> to feed the processor.
            Register on <see cref="E:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ManipulationStarted"/>, <see cref="E:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ManipulationDelta"/> and <see cref="E:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ManipulationCompleted"/>
            to handle manipulation events
            </remarks>
            <param name="supportedManipulations">Activate specific manipulation (scale, translate, rotate)</param>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.CompleteManipulation">
            <summary>
            This method raises the ManipulationCompleted() event in response
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ProcessDown(System.UInt32,System.Drawing.PointF)">
            <summary>
            The ProcessDown method feeds data to the manipulation processor associated with a target
            </summary>
            <param name="manipulationId">The identifier for the manipulation that you want to process</param>
            <param name="location">The coordinates associated with the target</param>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ProcessMove(System.UInt32,System.Drawing.PointF)">
            <summary>
            The ProcessMove method feeds movement data for the target object to its manipulation processor
            </summary>
            <param name="manipulationId">The identifier for the manipulation that you want to process</param>
            <param name="location">The coordinates associated with the target</param>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ProcessUp(System.UInt32,System.Drawing.PointF)">
            <summary>
            The ProcessUp method feeds data to a target's manipulation processor for touch up sequences
            </summary>
            <param name="manipulationId">The identifier for the manipulation that you want to process</param>
            <param name="location">The coordinates associated with the target</param>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ProcessDownWithTime(System.UInt32,System.Drawing.PointF,System.Int32)">
            <summary>
            Feds data to the manipulation processor associated with a target and a timestamp
            </summary>
            <param name="manipulationId">The identifier for the manipulation that you want to process</param>
            <param name="location">The coordinates associated with the target</param>
            <param name="timestamp">The timestamp of the event</param>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ProcessMoveWithTime(System.UInt32,System.Drawing.PointF,System.Int32)">
            <summary>
            Feds data to the manipulation processor associated with a target and a timestamp
            </summary>
            <param name="manipulationId">The identifier for the manipulation that you want to process</param>
            <param name="location">The coordinates associated with the target</param>
            <param name="timestamp">The timestamp of the event</param>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ProcessUpWithTime(System.UInt32,System.Drawing.PointF,System.Int32)">
            <summary>
            Feds data to the manipulation processor associated with a target and a timestamp
            </summary>
            <param name="manipulationId">The identifier for the manipulation that you want to process</param>
            <param name="location">The coordinates associated with the target</param>
            <param name="timestamp">The timestamp of the event</param>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.Dispose(System.Boolean)">
            <summary>
            Release the underlined COM Object
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.Dispose">
            <summary>
            Dispose the object, free the underline COM object
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ManipulationStarted">
            <summary>
            Fired when manipulation is started
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ManipulationDelta">
            <summary>
            Fired each time the processor had figured a change in one or more of the required manipulations
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ManipulationCompleted">
            <summary>
            Fired on manipulation end
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.SupportedManipulations">
            <summary>
            Get or Set the required manipulation
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.PivotPoint">
            <summary>
            The Center of the object
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.PivotRadius">
            <summary>
            The PivotRadius property is used to determine how much rotation is used in single finger manipulation
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.Velocity">
            <summary>
            Calculates and returns the velocity for the target object
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ExpansionVelocity">
            <summary>
            Calculates the rate that the target object is expanding at
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.AngularVelocity">
            <summary>
            Calculates the rotational velocity that the target object is moving at
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.MinimumScaleRotateRadius">
            <summary>
            Specifies the minimum scale and rotate radius
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationInertiaProcessor.#ctor(devDept.Eyeshot.Multitouch.Manipulation.ProcessorManipulations,devDept.Eyeshot.Multitouch.IGUITimer)">
            <summary>
            Create new manipulation processor
            </summary>
            <remarks>
            Call the <see cref="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ProcessDown(System.UInt32,System.Drawing.PointF)"/>, <see cref="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ProcessMove(System.UInt32,System.Drawing.PointF)"/>, <see cref="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ProcessUp(System.UInt32,System.Drawing.PointF)"/> to feed the processor.
            Register on <see cref="E:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ManipulationStarted"/>, <see cref="E:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ManipulationDelta"/> and <see cref="E:devDept.Eyeshot.Multitouch.Manipulation.ManipulationProcessor.ManipulationCompleted"/>
            to handle manipulation events
            Set the <see cref="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationInertiaProcessor.InertiaProcessor"/> properties to get the desired inertia behavior
            Register to the <see cref="E:devDept.Eyeshot.Multitouch.Manipulation.ManipulationInertiaProcessor.BeforeInertia"/> event to set the inertia properties when inertia is starting/&gt;
            </remarks>
            <param name="supportedManipulations">Activate specific manipulation (scale, translate, rotate)</param>
            <param name="timer">The GUI timer that will be used for inertia events</param>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationInertiaProcessor.Dispose(System.Boolean)">
            <summary>
            Release the underline COM object
            </summary>
            <param name="dispose"></param>
        </member>
        <member name="E:devDept.Eyeshot.Multitouch.Manipulation.ManipulationInertiaProcessor.BeforeInertia">
            <summary>
            Fired just before inertia is starting
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationInertiaProcessor.InertiaProcessor">
            <summary>
            The inertia processor that is associate with the Manipulation Processor
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor">
            <summary>
            The Inertia Processor
            </summary>
            <remarks>Handles calculations regarding object motion for multitouch</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.Dispose">
            <summary>
            Dispose the object and release the underline COM object
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.MaxInertiaSteps">
            <summary>
            After this amount of timer ticks, the Inertia will stop
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.InertiaTimerInterval">
            <summary>
            The timer resolution for inertia events
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.InInertia">
            <summary>
            True when the inertia processor generate inertia motion events
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.InitialVelocity">
            <summary>
            Specifies the initial movement of the target object
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.InitialAngularVelocity">
            <summary>
            Specifies the rotation of the target when movement begins
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.InitialExpansionVelocity">
            <summary>
            Specifies the expention of the target when movement begins
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.InitialRadius">
            <summary>
            Specifies the distance from the edge of the target to its center before the object was changed
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.Boundary">
            <summary>
            Limits how far towards the edge of the screen the target object can move
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.ElasticMargin">
            <summary>
            Specifies the rectangle region for bouncing the target objec
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.DesiredDisplacement">
            <summary>
            Specifies the desired distance that the object will travel
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.DesiredRotation">
            <summary>
            Specifies the desired radians that the object will rotate
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.DesiredExpansion">
            <summary>
            Specifies the desired change in the object's average radius
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.DesiredDeceleration">
            <summary>
            Specifies the desired rate at which translation operations will decelerate
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.DesiredAngularDeceleration">
            <summary>
            Specifies the desired rate that the target object will stop spinning in radians per msec
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.InertiaProcessor.DesiredExpansionDeceleration">
            <summary>
            Specifies the rate at which the object will stop expanding
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Manipulation.BeforeInertiaEventArgs">
            <summary>
            Before Inertia phase is starting
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Multitouch.Manipulation.BeforeInertiaEventArgs.CancelInertia">
            <summary>
            Cancel Inertia by setting this property to true
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Manipulation.ProcessorManipulations">
            <summary>
            Manipulation Flags.
            Enables Manipulation Support
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Multitouch.Manipulation.ProcessorManipulations.NONE">
            <summary>
            Disable manipulation events
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Multitouch.Manipulation.ProcessorManipulations.TRANSLATE_X">
            <summary>
            X axis translation events
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Multitouch.Manipulation.ProcessorManipulations.TRANSLATE_Y">
            <summary>
            Y Axis translation events
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Multitouch.Manipulation.ProcessorManipulations.SCALE">
            <summary>
            Scaling events
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Multitouch.Manipulation.ProcessorManipulations.ROTATE">
            <summary>
            Rotation events
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Multitouch.Manipulation.ProcessorManipulations.ALL">
            <summary>
            Fire all manipulation events
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Manipulation.VectorF">
            <summary>
            Utility class for vector manipulations
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.#ctor(System.Single,System.Single)">
            <summary>
            Create new float vector
            </summary>
            <param name="x">X direction</param>
            <param name="y">Y Direction</param>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.ToString">
            <summary>
            (x,y)
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.Equals(System.Object)">
            <summary>
            Check if two vectors are equal
            </summary>
            <param name="obj">the second vector</param>
            <returns>true if they are equal</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.GetHashCode">
            <summary>
            Return the Vector hash code
            </summary>
            <returns>Hash Code</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.op_Implicit(devDept.Eyeshot.Multitouch.Manipulation.VectorF)~System.Drawing.Size">
            <summary>
            Convert vector to Size
            </summary>
            <param name="vector">The Vector</param>
            <returns>The vector as Size</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.op_Implicit(devDept.Eyeshot.Multitouch.Manipulation.VectorF)~System.Drawing.SizeF">
            <summary>
            Convert Vector to SizeF
            </summary>
            <param name="vector">The Vector</param>
            <returns>The vector as SizeF</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.op_Implicit(System.Drawing.Size)~devDept.Eyeshot.Multitouch.Manipulation.VectorF">
            <summary>
            Convert Size to vector
            </summary>
            <param name="size">The size</param>
            <returns>The size as vector</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.op_Implicit(System.Drawing.SizeF)~devDept.Eyeshot.Multitouch.Manipulation.VectorF">
            <summary>
            Convert SizeF to Vector
            </summary>
            <param name="size">The Size</param>
            <returns>The Size as Vector</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.op_Multiply(devDept.Eyeshot.Multitouch.Manipulation.VectorF,System.Single)">
            <summary>
            Multiply the vector with scalar (float)
            </summary>
            <param name="vector">The source vector</param>
            <param name="value">The floating point scalar</param>
            <returns>New vector</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.op_Division(devDept.Eyeshot.Multitouch.Manipulation.VectorF,System.Single)">
            <summary>
            Divide Vector with scalar (float)
            </summary>
            <param name="vector">The Vector</param>
            <param name="value">The scalar</param>
            <returns>New Vector</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.op_Addition(devDept.Eyeshot.Multitouch.Manipulation.VectorF,System.Single)">
            <summary>
            Add scalar to a vector
            </summary>
            <param name="vector">The Vector</param>
            <param name="value">The scalar</param>
            <returns>New vector</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.op_Subtraction(devDept.Eyeshot.Multitouch.Manipulation.VectorF,System.Single)">
            <summary>
            Substruct Scalar from vector
            </summary>
            <param name="vector">The vector</param>
            <param name="value">The scalar</param>
            <returns>New vector</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.op_Addition(devDept.Eyeshot.Multitouch.Manipulation.VectorF,devDept.Eyeshot.Multitouch.Manipulation.VectorF)">
            <summary>
            Add two vectors
            </summary>
            <param name="v1">V1</param>
            <param name="v2">V2</param>
            <returns>New Vector</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.VectorF.op_Subtraction(devDept.Eyeshot.Multitouch.Manipulation.VectorF,devDept.Eyeshot.Multitouch.Manipulation.VectorF)">
            <summary>
            Substruct two vectors
            </summary>
            <param name="v1">V1</param>
            <param name="v2">V2</param>
            <returns>New Vector</returns>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.VectorF.X">
            <summary>
            The X direction
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.VectorF.Y">
            <summary>
            The Y Direction
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.VectorF.Magnitude">
            <summary>
            Return the magnitude (normal) of a vector
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.VectorF.Direction">
            <summary>
            Return the unit vector
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Manipulation.ManipulationStartedEventArgs">
            <summary>
            Argument for manipulatiuon start event
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationStartedEventArgs.#ctor(System.Single,System.Single)">
            <summary>
            Argument for touch event location
            </summary>
            <param name="x">The x Axis</param>
            <param name="y">The y Axis</param>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationStartedEventArgs.Location">
            <summary>
            This location is usually the center point
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Manipulation.ManipulationCompletedEventArgs">
            <summary>
            The argument for manipulation complete event
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationCompletedEventArgs.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create new ManipulationCompletedEventArgs
            </summary>
            <param name="x">x Axis</param>
            <param name="y">y Axis</param>
            <param name="cumulativeTranslationX">Cumulative Translation in the X Axis since starting manipulation</param>
            <param name="cumulativeTranslationY">Cumulative Translation in the Y Axis since starting manipulation</param>
            <param name="cumulativeScale">Cumulative scaling since starting manipulation</param>
            <param name="cumulativeExpansion">Cumulative Expension since starting manipulation</param>
            <param name="cumulativeRotation">Cumulative rotation in radians since starting manipulation</param>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationCompletedEventArgs.CumulativeTranslation">
            <summary>
            Total translation
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationCompletedEventArgs.CumulativeScale">
            <summary>
            Total Scaling
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationCompletedEventArgs.CumulativeExpansion">
            <summary>
            Total Extension
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationCompletedEventArgs.CumulativeRotation">
            <summary>
            Total Rotation
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Manipulation.ManipulationDeltaEventArgs">
            <summary>
            The argument for manipulation delta
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Manipulation.ManipulationDeltaEventArgs.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="x">x Axis</param>
            <param name="y">y Axis</param>
            <param name="translationDeltaX">The amount of translation since the last event</param>
            <param name="translationDeltaY">The amount of translation since the last event</param>
            <param name="scaleDelta">The amount of scaling since the last event</param>
            <param name="expansionDelta">The amount of expension since the last event</param>
            <param name="rotationDelta">The amount of rotation in radians since the last event</param>
            <param name="cumulativeTranslationX">Cumulative Translation in the X Axis since starting manipulation</param>
            <param name="cumulativeTranslationY">Cumulative Translation in the Y Axis since starting manipulation</param>
            <param name="cumulativeScale">Cumulative scaling since starting manipulation</param>
            <param name="cumulativeExpansion">Cumulative Expension since starting manipulation</param>
            <param name="cumulativeRotation">Cumulative rotation in radians since starting manipulation</param>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationDeltaEventArgs.TranslationDelta">
            <summary>
            The amount of translation since the last event
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationDeltaEventArgs.ScaleDelta">
            <summary>
            The amount of scaling since the last event
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationDeltaEventArgs.ExpansionDelta">
            <summary>
            The amount of expension since the last event
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.Manipulation.ManipulationDeltaEventArgs.RotationDelta">
            <summary>
            The amount of rotation since the last event
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout">
            <summary>
            Base class for all <see cref="T:devDept.Eyeshot.Viewport"/> container controls.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayoutBase">
            <summary>
            Interaction logic for UserControl1.xaml
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.IViewportLayout.renderContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayoutBase.SetCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets the cursor.
            </summary>
            <param name="cursorName">The cursor</param>
            <returns>The previous cursor.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayoutBase.SetCursorInternal(System.String)">
            <summary>
            Sets the cursor.
            </summary>
            <param name="cursorName">The name of the cursor</param>
            <returns>The previous cursor name.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayoutBase.GetCursorString(System.Windows.Input.Cursor)">
            <summary>
            Gets the string name of the cursor.
            </summary>
            <param name="cursor">The cursor</param>
            <returns>The string name of the cursor.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayoutBase.GetCursorByName(System.String)">
            <summary>
            Gets the cursor by the string name.
            </summary>
            <param name="cursor">The cursor</param>
            <returns>The cursor.</returns>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayoutBase.renderContext">
            <summary>
            Graphics rendering context.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayoutBase.InitializeScene">
            <summary>
            Occurs when the control is shown for the first time.
            </summary>
            <remark>Subscribe to this event to inizialize the scene when the window is first displayed.</remark>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayoutBase.IsInDesignMode">
            <summary>
            Gets a value indicating whether the control is in design mode
            (running in Blend or Visual Studio).
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.OnMultiTouchMove(System.Object,devDept.Eyeshot.Multitouch.TouchEventArgs)">
            <summary>
            Occurs every <see cref="E:devDept.Eyeshot.ViewportLayout.MultiTouchMove"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.OnMultiTouchDown(System.Object,devDept.Eyeshot.Multitouch.TouchEventArgs)">
            <summary>
            Occurs every <see cref="E:devDept.Eyeshot.ViewportLayout.MultiTouchDown"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.OnMultiTouchUp(System.Object,devDept.Eyeshot.Multitouch.TouchEventArgs)">
            <summary>
            Occurs every <see cref="E:devDept.Eyeshot.ViewportLayout.MultiTouchUp"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.OnMultiTouchClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs every <see cref="E:devDept.Eyeshot.ViewportLayout.MultiTouchClick"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.OnMultiTouchDoubleClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Occurs every <see cref="E:devDept.Eyeshot.ViewportLayout.MultiTouchDoubleClick"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetDefaultLayoutMode">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.AdjustSizeInX(devDept.Eyeshot.Viewport,System.Drawing.Size)">
            <summary>
            Adjusts the size so that the width fills the width of the viewportLayout.
            </summary>
            <param name="viewport">The viewport</param>
            <param name="size">The size to adjust</param>
            <returns>The adjusted size</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.AdjustSizeInY(devDept.Eyeshot.Viewport,System.Drawing.Size)">
            <summary>
            Adjusts the size so that the height fills the height of the viewportLayout.
            </summary>
            <param name="viewport">The viewport</param>
            <param name="size">The size to adjust</param>
            <returns>The adjusted size</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.AdjustSizeInXY(devDept.Eyeshot.Viewport,System.Drawing.Size)">
            <summary>
            Adjusts the size so that the width and hegiht fill the size of the viewportLayout.
            </summary>
            <param name="viewport">The viewport</param>
            <param name="size">The size to adjust</param>
            <returns>The adjusted size</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.UpdateViewportsSizeAndLocation">
            <summary>
            Updates the Viewports dimensions and locations depending on the <see cref="P:devDept.Eyeshot.ViewportLayout.LayoutMode"/> property.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.CreateShadowMap(System.Int32,System.Int32,System.Boolean,devDept.Eyeshot.DrawShadowParams)">
            <summary>
            Holds the ShadowMap data for each light.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawTrianglesForShadowMap(devDept.Eyeshot.DrawShadowParams)">
            <summary>
            
            </summary>
            <param name="myParams"></param>
            <param name="interrupted"></param>
            <returns>False if failed.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.OnMouse3DMove(System.Object,devDept.Eyeshot.Mouse3D.MoveEventArgs)">
            <summary>
            Occurs every <see cref="E:devDept.Eyeshot.ViewportLayout.Mouse3DMove"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.OnMouse3DButtonUp(System.Object,devDept.Eyeshot.Mouse3D.ButtonEventArgs)">
            <summary>
            Occurs every <see cref="E:devDept.Eyeshot.ViewportLayout.Mouse3DButtonUp"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.OnMouse3DButtonDown(System.Object,devDept.Eyeshot.Mouse3D.ButtonEventArgs)">
            <summary>
            Occurs every <see cref="E:devDept.Eyeshot.ViewportLayout.Mouse3DButtonDown"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.Activate(System.Object,System.EventArgs)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.Deactivate(System.Object,System.EventArgs)">
            <summary>
            Deactivates the product.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetAssembly(System.String@,System.String@,System.String@,System.Version@)">
            <summary>
            Gets the currently loaded assembly.
            </summary>
            <param name="product">Gets assembly product</param>
            <param name="title">Gets assembly title</param>
            <param name="company">Gets assembly company</param>
            <param name="version">Gets assembly version</param>
            <returns>The currently loaded assembly.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.LicFileLocation(System.Object,System.EventArgs)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SupportRequest(System.Object,System.EventArgs)">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.animationTimer">
            <summary>
            The Timer used for animation.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RemoveJittering(System.String)">
            <summary>        
            Creates a block with the selected <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/>, computes the center of their bounding box, translate them all of the negative of that quantity and returns a BlockReference to that block.
            </summary>
            <param name="blockName">The name of the block that will contain the selected entities.</param>
            <returns>The blockReference referring to the created block.</returns>
            <remarks>When the entities are very far from the origin their appearance on screen may become very compromised, and the camera may shake badly when moving/rotating the view. To fix this issue you can select these entities and call this method.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RemoveJittering(devDept.Eyeshot.Entities.BlockReference)">
            <summary>        
            Gets the blockreference's entities, computes the center of their bounding box, translate them all of the negative of that quantity and translate the blockreference back to the original position.
            Computes the center of their bounding box, translate them all of the negative of that quantity and returns a BlockReference to that block.
            </summary>
            <param name="blockReference">The blockreference name of the block that will contain the selected entities.</param>        
            <remarks>When the entities are very far from the origin their appearance on screen may become very compromised, and the camera may shake badly when moving/rotating the view. To fix this issue you can select these entities and call this method.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GroupSelection">
            <summary>
            Creates a single unit from selected entities.
            </summary>
            <returns>The new group index.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.Ungroup(System.Int32)">
            <summary>
            Removes the group status from the specified group.
            </summary>
            <param name="groupIndex">Group's index</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.IncrementGroupEntitiesIndices(System.Int32,System.Int32)">
            <summary>
            Increase by the given amount the entities indices greater than or equal to "index".
            </summary>
            <param name="index">The index from which the entities must be increased</param>
            <param name="increment">The increment to apply to the entities >= "index"</param>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.fontDefs">
            <summary>
            Dictionary of FontData for each FontFamilyName.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.hasFocus">
            <summary>
            Hold the focus status.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.IsDesignMode">
            <summary>
            Gets a boolean indicating whether the control is running at design time.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.Unlock(System.String)">
            <summary>
            Validates the license for runtime usage.
            </summary>
            <param name="serialNumber">A valid serial number</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.IsSerialNumberValid(System.String,System.String@)">
            <summary>
            This method allows to block serial numbers sent to customer by mistake during pre-sale or post-sale activities.
            Don't forget to call it also from Utility.Unlock()
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.Clear">
            <summary>
            Clears all the viewport's master collections: blocks, entities, materials, labels and layers.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.InitializeViewports">
            <summary>
            Ensures that at least one <see cref="T:devDept.Eyeshot.Viewport"/> is present in the <see cref="P:devDept.Eyeshot.ViewportLayout.Viewports"/> collection.
            </summary>
            <remarks>This method must be called only when creating the <see cref="T:devDept.Eyeshot.ViewportLayout"/>ViewportLayout object at run time. It must not be called when creating the object at design time.</remarks>        
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements">
            <summary>
            Compiles 3D user interface elements like the origin symbol, the bitmap background, the FEM restraint and load symbols, etc.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements(devDept.Eyeshot.Viewport)">
            <summary>
            Compiles 3D user interface elements like the origin symbol, the bitmap background, the FEM restraint and load symbols, etc.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.renderToBitmap">
            <summary>
            Set to true during the RendertoBitmap.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.UpdateDesignModeScene">
            <summary>
            Used by the designer to update the graphics.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ReadViewport(devDept.Eyeshot.ViewportLayout.DrawSceneParams,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Imaging.BitmapData,devDept.Graphics.TextureBase,devDept.Graphics.RenderContextBase.drawSceneFuncDelegate)">
            <summary>
            
            </summary>
            <param name="myParams"></param>
            <param name="x">The number of the tile in the X coordinate</param>
            <param name="y">The number of the tile in the Y coordinate</param>
            <param name="tileWidth"></param>
            <param name="tileHeight"></param>
            <param name="bitmapData"></param>
            <param name="renderTexture"></param>
            <param name="hdwAcceleration"></param>
            <param name="drawSceneFuncDelegate"></param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ResizeViewports">
            <summary>
            Resizes the Viewports.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.OnLostFocus(System.EventArgs)">
            <summary>
            Synchronize <paramref name="hasFocus"/> parameter, reset <paramref name="action"/>, redraw the control.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.FireProgressChanged(devDept.Eyeshot.ProgressChangedEventArgs)">
            <summary>
            Raises the <see cref="T:devDept.Eyeshot.ViewportLayout.ProgressChangedEventHandler">ProgressChanged</see> event.
            </summary>
            <param name="e">A <see cref="T:devDept.Eyeshot.ProgressChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SaveFile(System.String)">
            <summary>
            Saves the current scene on disk, including entities, textures, blocks and
            layouts.
            </summary>
            <remarks>
            	<para>This command can be very attractive to save and load models in you program
                but has a serious pitfall: it is based on standard .NET Serialization. This means
                that any change on the Eyeshot binaries (dll versions, dll names, type names, etc.) will
                invalidate all your existing files. <strong>We strongly recommend</strong> to
                implement your own file format (simply writing entities properties and recreating
                entities during file loading) if you need continuity between different Eyeshot DLL
                versions. Another option can be to use one of the standard format supported
                (DWG/DXF/IGES) where applicable.</para>
            </remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.OpenFile(System.String)">OpenFile Method</seealso>
            <param name="fileName">File name</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.OpenFile(System.String)">
            <summary>
            	<para>Restores the current scene from disk, including entities, textures, blocks
                and labels.</para>
            </summary>
            <remarks>
            	<para>This command can be very attractive to save and load models in you program
                but has a serious pitfall: it is based on standard .NET Serialization. This means
                that any change on the Eyeshot binaries (dll versions, dll names, type names, etc.) will
                invalidate all your existing files. <strong>We strongly recommend</strong> to
                implement your own file format (simply writing entities properties and recreating
                entities during file loading) if you need continuity between different Eyeshot DLL
                versions. Another option can be to use one of the standard format supported
                (DWG/DXF/IGES) where applicable.</para>
            </remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.SaveFile(System.String)">SaveFile Method</seealso>
            <param name="fileName">File name</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.EvaluateBoundingBox(System.Collections.Generic.ICollection{devDept.Eyeshot.Entities.Entity},devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
            <summary>
            Evaluates the bounding box of a collection of entities without taking care of entity visiblity.
            </summary>
            <param name="entList">The collection of entities</param>
            <param name="globalMin">Output the min corner</param>
            <param name="globalMax">Output the max corner</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SuspendDesigner(System.Boolean)">
            <summary>
            Suspends the events of ViewportLayout for the designer.
            </summary>
            <param name="suspend">If true suspends the events for the designer, else resumes them</param>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DoWork(devDept.Eyeshot.WorkUnit)">
            <summary>Accomplishes the work.</summary>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.CancelWork">CancelWork() method.</seealso>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StartWork(devDept.Eyeshot.WorkUnit)">StartWork() method.</seealso>
            <seealso cref="T:devDept.Eyeshot.WorkUnit">WorkUnit class.</seealso>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.StartWork(devDept.Eyeshot.WorkUnit)">
            <summary>
            Starts the work asynchronously.
            </summary>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.CancelWork">CancelWork() method.</seealso>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DoWork(devDept.Eyeshot.WorkUnit)">DoWork() method.</seealso>
            <seealso cref="T:devDept.Eyeshot.WorkUnit">WorkUnit class.</seealso>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.CancelWork">
            <summary>
            Stops the asynchronous background work.
            </summary>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StartWork(devDept.Eyeshot.WorkUnit)">StartWork() method.</seealso>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DoWork(devDept.Eyeshot.WorkUnit)">DoWork() method.</seealso>
            <seealso cref="T:devDept.Eyeshot.WorkUnit">WorkUnit class.</seealso>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.FireWorkCompleted(devDept.Eyeshot.WorkCompletedEventArgs)">
            <summary>
            Raises the <see cref="T:devDept.Eyeshot.ViewportLayout.WorkCompletedEventHandler">WorkCompleted</see> event.
            </summary>
            <param name="e">A <see cref="T:devDept.Eyeshot.WorkCompletedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.FireWorkCancelled(System.EventArgs)">
            <summary>
            Raises the <see cref="T:devDept.Eyeshot.ViewportLayout.WorkCancelledEventHandler">WorkCancelled</see> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.FireWorkFailed(devDept.Eyeshot.WorkFailedEventArgs)">
            <summary>
            Raises the <see cref="T:devDept.Eyeshot.ViewportLayout.WorkCancelledEventHandler">WorkCancelled</see> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SetDefaultCursorInternal(System.Windows.Input.Cursor)">
            <summary>
            Sets the default cursor for the viewport control.
            </summary>
            <param name="cursor"></param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SetDefaultCursor(System.Windows.Input.Cursor)">
            <summary>
            Sets the default cursor for the viewport control.
            </summary>
            <param name="cursor">The cursor to set as default</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetDefaultCursor">
            <summary>
            Gets the default cursor for the viewport control.
            </summary>        
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.LoadPickCursor">
            <summary>
            Gets the Pick Cursor stream.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.IsDragAction">
            <summary>
            Tells if the current <see cref="P:devDept.Eyeshot.ViewportLayout.ActionMode"/> requires dragging.
            </summary>
            <returns>True if the current <see cref="P:devDept.Eyeshot.ViewportLayout.ActionMode"/> requires dragging.</returns>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.mouseDownActionMode">
            <summary>
            ActionMode when the mouse was pressed down. Used to skip the saving of the View 
            when clicking on the ZoomWindow toolbar. (Ticket #3196)
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetViewportUnderMouse(System.Drawing.Point)">
            <summary>
            Returns the viewport under the given mouse position.
            </summary>
            <param name="mousePos">The mouse position</param>
            <returns>The viewport under the mouse.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ZoomCamera(System.Int32)">
            <summary>
            Zooms the view of the specified amount.
            </summary>        
            <param name="dy">Zoom amount</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ZoomCamera(System.Drawing.Point,System.Int32)">
            <summary>
            Zooms the view of the specified amount.
            </summary>
            <param name="mousePos">The screen point to keep fixed</param>
            <param name="dy">The zoom amount</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ZoomCamera(System.Int32,System.Double)">
            <summary>
            Zooms the view of the specified amount.
            </summary>
            <param name="dy">Zoom amount</param>
            <param name="zoomSpeed">Zoom speed</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.PanCamera(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Pans the view from one screen point to the other.
            </summary>
            <param name="from">StartPoint point</param>
            <param name="to">End point</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.ZoomCamera(System.Int32)"/>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RotateCamera(System.Int32,System.Int32)">
            <summary>
            Rotates the view of the specified amount.
            </summary>
            <param name="dx">Horizontal rotation amount</param>
            <param name="dy">Vertical rotation amount</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.ZoomCamera(System.Int32)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RotateCamera(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Rotates the view of the specified amount.
            </summary>
            <param name="dx">Horizontal rotation amount</param>
            <param name="dy">Vertical rotation amount</param>
            <param name="animate">If true performs an animation when changing the view</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.ZoomCamera(System.Int32)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RotateCamera(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Rotates the view simulating the movement between two mouse position.
            </summary>
            <param name="mousePos1">The initial mouse position</param>
            <param name="mousePos2">The final mouse position</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.ZoomCamera(System.Int32)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)">
            <summary>
            Rotates the view of the specified amount.
            </summary>
            <param name="last">Previous axis</param>
            <param name="current">Current axis</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.ZoomCamera(System.Int32)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Boolean)">
            <summary>
            Rotates the view of the specified amount.
            </summary>
            <param name="last">Previous axis</param>
            <param name="current">Current axis</param>
            <param name="animate">If true performs an animation when changing the view</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.ZoomCamera(System.Int32)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RotateCamera(devDept.Geometry.Vector3D,System.Double,System.Boolean)">
            <summary>
            Rotates the view of the specified amount.
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="rotAngleInDegrees">Rotation amount</param>
            <param name="trackBall">if true, the rotation is applied after the current rotation, else it's applied before</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RotateCamera(devDept.Geometry.Vector3D,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Rotates the view of the specified amount.
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="rotAngleInDegrees">Rotation amount</param>
            <param name="trackBall">if true, the rotation is applied after the current rotation, else it's applied before</param>
            <param name="animate">If true performs an animation when changing the view</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.OrientCamera(devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Orients the Camera between the two specified points.
            </summary>
            <param name="location">The new camera location</param>
            <param name="target">The new camera target</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.IsSelectByPickAction">
            <summary>
            Tells if the current <see cref="P:devDept.Eyeshot.ViewportLayout.ActionMode"/> is one of the ByPick ones.
            </summary>
            <returns>True if the current <see cref="P:devDept.Eyeshot.ViewportLayout.ActionMode"/> is one of the ByPick ones.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.IsSelectByBoxAction">
            <summary>
            Tells if the current <see cref="P:devDept.Eyeshot.ViewportLayout.ActionMode"/> is one of the ByBox ones.
            </summary>
            <returns>True if the current <see cref="P:devDept.Eyeshot.ViewportLayout.ActionMode"/> is one of the ByBox ones.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.IsSelectByPolygonAction">
            <summary>
            Tells if the current <see cref="P:devDept.Eyeshot.ViewportLayout.ActionMode"/> is one of the ByPolygon ones.
            </summary>
            <returns>True if the current <see cref="P:devDept.Eyeshot.ViewportLayout.ActionMode"/> is one of the ByPolygon ones.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SaveView(devDept.Eyeshot.Camera@)">
            <summary>
            Stores the current view in the active viewport. 
            </summary>
            <param name="saved">Will hold a copy of the active <see cref="P:devDept.Eyeshot.ViewportLayout.Camera"/> object</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.RestoreView(devDept.Eyeshot.Camera)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RestoreView(devDept.Eyeshot.Camera)">
            <summary>
            Restores the previously saved view in the active viewport.
            </summary>
            <param name="saved">The <see cref="P:devDept.Eyeshot.ViewportLayout.Camera"/> object previously initializiated by <see cref="M:devDept.Eyeshot.ViewportLayout.SaveView(devDept.Eyeshot.Camera@)"/></param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.SaveView(devDept.Eyeshot.Camera@)"/>
            <remarks>If <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true, the operation animates the Camera using the time interval specified by <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCameraDuration"/>.</remarks>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.mouseWheelTimer">
            <summary>
            Mouse Wheel timer, used to do a simplified draw during mouse wheel zoom.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.AdjustNearAndFarPlanes">
            <summary>
            Adjusts camera near and far planes based on model extents and on origin symbol, grid and shadow visibility status.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SuspendUpdate(System.Boolean)">
            <summary>
            Suspends the updates of ViewportLayout.
            </summary>
            <param name="suspend">If true suspends the updates, else resumes them</param>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.UpdateViewportLayout">
            <summary>
            Updates the viewport in both desing-time and run-time mode.
            If necessary adjust near and far planes to accomodate origin
            symbols of various sizes.            
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.CheckViewports">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetGrid">
            <summary>
            Gets active viewport grid object
            </summary>
            <returns>The grid object of the active viewport</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetGrids">
            <summary>
            Gets active viewport grids collection
            </summary>
            <returns>The grids collection of the active viewport</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetBackground">
            <summary>
            Gets active viewport background object
            </summary>
            <returns>The background object of the active viewport</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetOriginSymbol">
            <summary>
            Gets the origin symbol settings in the active viewport.
            </summary>
            <returns>The OriginSymbol object of the active viewport</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetLegends">
            <summary>
            Gets active viewport legends collection
            </summary>
            <returns>The legends collection of the active viewport</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetCoordinateSystemIcon">
            <summary>
            Gets the coordinate system icon settings in the active viewport.
            </summary>
            <returns>The coordinate system icon settings of the active viewport</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetViewCubeIcon">
            <summary>
            Gets the view cube icon settings in the active viewport.
            </summary>
            <returns>The view cube icon settings of the active viewport</returns>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.backfaceSettings">
            <summary>
            Backface settings, shared by all viewports.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.wireSelectionColor">
            <summary>
            Used to draw the wireframe with full color in HidddenLines and Flat mode, where the polygonal entities are drawn with a darker color to 
            make the edges and silhouettesstand out.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.settingsWireframe">
            Display mode settings for Wireframe mode, shared by all viewports.
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.settingsShaded">
            Display mode settings for Shaded mode, shared by all viewports.
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.settingsFlat">
            Display mode settings for Flat mode, shared by all viewports.
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.settingsRendered">
            Display mode settings for Rendered mode, shared by all viewports.
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.smallSize">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.isInFrustumMode">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.hiddenLinesSettings">
            <summary>
            Hidden Lines settings.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.progressBar">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.Invalidate">
            <summary>
            Invalidates the entire surface of the control and causes the control to be redrawn.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawForZBuffer(devDept.Eyeshot.Viewport)">
            <summary>
            When the DrawForSelection() is called, if there are entities non seletable in the scene the ZBuffer is not consistent with the real scene
            so I must draw again to get a correct ZBuffer before doing Zoom/Pan/Rotate.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawScene(devDept.Eyeshot.Viewport,System.Single,System.Single,System.Drawing.RectangleF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Main drawing method.
            </summary>
            <param name="viewport">The viewport to draw</param>
            <param name="drawScale">Image resolution scale</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="zoomRect">Zoom rectangle</param>
            <param name="drawOverlay">If true, the overlaying UI elements are drawn</param>
            <param name="swapBuffer">If true, front and back OpenGL buffers will be swapped</param>
            <param name="designTime"></param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawScene(devDept.Eyeshot.Viewport,System.Single,System.Single,System.Drawing.RectangleF,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Main drawing method.
            </summary>
            <param name="viewport">The viewport to draw</param>
            <param name="drawScale">Image resolution scale</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="zoomRect">Zoom rectangle</param>
            <param name="drawOverlay">If true, the overlaying UI elements are drawn</param>
            <param name="swapBuffer">If true, front and back OpenGL buffers will be swapped</param>
            <param name="designTime"></param>
            <param name="captureSurface">Captures the surface after the drawing</param>
            <param name="zBufferOnly">Draws the scene only on the zBuffer</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawBackground">
            <summary>
            Draws the Background of the ViewportLayout control.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetReflectionPlane">
            <summary>
             Gets the plane used to draw the planar reflections.
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawEntities(devDept.Eyeshot.ViewportLayout.DrawSceneParams,System.Boolean,System.Boolean)">
            <summary>
            Entities drawing.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawEntities(devDept.Eyeshot.ViewportLayout.DrawSceneParams,System.Boolean,devDept.Eyeshot.ViewportLayout.renderedDrawingType,System.Boolean)">
            <summary>
            Entities drawing.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawVertices(devDept.Eyeshot.Viewport)">
            <summary>
            Draws the vertices of the entities.
            </summary>
            <remarks>When <see cref="P:devDept.Eyeshot.ViewportLayout.ShowVertices"/> is true.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ComputeNonCurrentEntityColor(devDept.Eyeshot.Entities.Entity,System.Drawing.Color)">
            <summary>
            Gets the color used to draw the given non-current entity.
            </summary>
            <param name="entity">The entity being processed</param>
            <param name="color">The color of the entity</param>
            <returns>The color used to draw the entity not belonging to the current BlockReference.</returns>
            <remarks>See <see cref="M:devDept.Eyeshot.EntityList.SetCurrent(devDept.Eyeshot.Entities.BlockReference)"/></remarks>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.skipWire">
            <summary>
            Skip Wireframe during drawing of shadowMap.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.PropagateAttributesAndProcessBlockReference``2(devDept.Eyeshot.ViewportLayout.DrawEntitiesParams{``0,``1},devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.ViewportLayout.GfxAttributes,devDept.Eyeshot.ViewportLayout.drawCallback{``0,``1})">
            <summary>
            Propagates GfxAttributes.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Q"></typeparam>
            <param name="myParams"></param>
            <param name="ent"></param>
            <param name="originalAttributes"></param>
            <param name="drawCall"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.PropagateAttributesWireAndProcessBlockReference``2(devDept.Eyeshot.ViewportLayout.DrawEntitiesParams{``0,``1},devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.ViewportLayout.GfxAttributes,devDept.Eyeshot.ViewportLayout.drawCallback{``0,``1})">
            <summary>
            Propagates GfxAttribitesWire and processes blockreference.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Q"></typeparam>
            <param name="myParams"></param>
            <param name="ent"></param>
            <param name="originalAttributes"></param>
            <param name="drawCall"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.PropagateAttributesWireAndProcessBlockReferenceNormalize``2(devDept.Eyeshot.ViewportLayout.DrawEntitiesParams{``0,``1},devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.ViewportLayout.GfxAttributesWire,devDept.Eyeshot.ViewportLayout.drawCallback{``0,``1})">
            <summary>
            Propagates GfxAttribitesWire and processes blockreference normalizing the normals.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Q"></typeparam>
            <param name="myParams"></param>
            <param name="ent"></param>
            <param name="originalAttributes"></param>
            <param name="drawCall"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SetColorShaded(devDept.Graphics.RenderContextBase,devDept.Eyeshot.Entities.entityNatureType,System.Drawing.Color,System.Boolean)">
            <summary>
            Shaded color changer.
            </summary>
            <param name="nature">The nature of the entity just to be drawn</param>
            <param name="color">The color</param>
            <param name="selected">The selection status</param>
            <param name="shaders"></param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetEntityColor(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.LayerList)">
            <summary>
            Returns the entity's color.
            </summary>
            <param name="ent">The entity</param>
            <param name="parent">The parent entity, can be null/Nothing.</param>
            <param name="layers">The layer list</param>
            <returns>The entity's color.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetEntityMaterialColor(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.LayerList,System.Collections.Generic.IDictionary{System.String,devDept.Graphics.Material})">
            <summary>
            Returns the entity's material name.
            </summary>
            <param name="ent">The entity</param>
            <param name="parent">The parent entity, can be null/Nothing.</param>
            <param name="layers">The entity layer</param>
            <returns>The material name</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetEntityPattern(devDept.Eyeshot.Entities.Entity,System.Single[],System.Single,devDept.Eyeshot.LayerList,System.Single@)">
            <summary>
            Returns the entity's linetype pattern.
            </summary>
            <param name="ent">The entity</param>
            <param name="parentPattern">The line pattern of the parent entity (if it exists)</param>
            <param name="parentPatternLen">The length of the pattern of the parent entity</param>
            <param name="layers">The layers list</param>
            <param name="length">The total length of the pattern (if not null)</param>
            <returns>A float array representing the linetype pattern.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetEntityLineWeight(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.LayerList)">
            <summary>
            Gets the entity line weight.
            </summary>
            <param name="ent">The entity</param>
            <param name="parent">The parent BlockReference</param>
            <param name="layers">The layers list</param>
            <returns>The line entity.</returns>
            <remarks>If the parent is not null and the <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeightMethod"/> is <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent"/> it recursively computes the LineWeight of the parent.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SetColorRendered(devDept.Graphics.RenderContextBase,devDept.Eyeshot.Entities.entityNatureType,devDept.Graphics.Material,System.Boolean,devDept.Eyeshot.RenderParams)">
            <summary>
            Rendered mat changer.
            </summary>
            <param name="nature">The nature of the entity just to be drawn</param>
            <param name="material">The entity material</param>
            <param name="selected">The selection status</param>
            <param name="data">Data for high quality rendering</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SetMaterial(devDept.Graphics.RenderContextBase,devDept.Graphics.Material,System.Boolean,devDept.Eyeshot.DrawParams)">
            <summary>
            Sets the material properties.
            </summary>
            <param name="material"></param>
            <param name="selected"></param>
            <returns>True if the material has a texture.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SetLineWeight(devDept.Eyeshot.Entities.Entity,System.Single)">
            <summary>
            Line weight changer.
            </summary>
            <param name="ent">The entity just to be drawn</param>
            <param name="lineWeight">The line weight</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawOverlayViewport(devDept.Eyeshot.ViewportLayout.DrawSceneParams)">
            <summary>
            Draws ovelaying UI elements.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawOverlay(devDept.Eyeshot.ViewportLayout.DrawSceneParams)">
            <summary>
            Draws ovelaying UI elements.
            </summary>
            <param name="data">The draw data</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.Draw3D(devDept.Eyeshot.ViewportLayout.DrawSceneParams)">
            <summary>
            Draws model, shadow and bounding box.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawEntities(devDept.Eyeshot.ViewportLayout.DrawSceneParams)">
            <summary>
            Entities drawing.
            </summary>
            <param name="myParams"></param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SortEntitiesForTransparency(devDept.Eyeshot.Viewport)">
             <summary>
             Sorts the entities so that the transparent ones are ordered from the farthest to the nearest to the camera.
             </summary>
             <param name="viewport">The viewport</param>
             <returns>The sorted list of entities.</returns>
             <remarks>It can be called in a viewportLayout derived class in the <see cref="M:devDept.Eyeshot.ViewportLayout.DrawEntities(devDept.Eyeshot.ViewportLayout.DrawSceneParams,System.Boolean,System.Boolean)"/> method when <see cref="P:devDept.Eyeshot.ViewportLayout.AccurateTransparency"/> is false.</remarks>
             <example>
             Usage Sample.
             	<code lang="CS" title="[Ordered Transparency]">
             public class MyViewportLayout : ViewportLayout
             {
                
                protected override void DrawEntities(DrawSceneParams myParams, bool withOffset, bool shadowMapPass)
                {
                    myParams.Entities = SortEntitiesForTransparency(myParams.Viewport);
            
                    base.DrawEntities(myParams, withOffset, shadowMapPass);
            
                }
             }
             </code>
             	<code lang="CS" title="[Ordered Transparency]">
             Public Class MyViewportLayout
            	Inherits ViewportLayout
            
            	Protected Overrides Sub DrawEntities(myParams As DrawSceneParams, withOffset As Boolean, shadowMapPass As Boolean)
            		myParams.Entities = SortEntitiesForTransparency(myParams.Viewport)
            
            		MyBase.DrawEntities(myParams, withOffset, shadowMapPass)
            
            	End Sub
             End Class
             </code>
             </example>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawShadow(System.Single)">
            <summary>
            Draws the model shadow
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.ContentAlignment)">
            <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.ViewportLayout"/>'s client area.
            </summary>
            <param name="x">The text's x coordinate</param>
            <param name="y">The text's y coordinate (from the bottom of the viewport)</param>
            <param name="text">The text string to draw</param>
            <param name="textFont">The text font</param>
            <param name="textColor">The text color</param>
            <param name="textAlign">The text alignment</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DrawTextOutlined(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.ContentAlignment)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DrawImage(System.Int32,System.Int32,System.Drawing.Bitmap,System.Drawing.ContentAlignment,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment)">
            <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.ViewportLayout"/>'s client area.
            </summary>
            <param name="x">The text's x coordinate</param>
            <param name="y">The text's y coordinate (from the bottom of the viewport)</param>
            <param name="text">The text string to draw</param>
            <param name="textFont">The text font</param>
            <param name="textColor">The text color</param>
            <param name="fillColor">The background color (can be semi-transparent)</param>
            <param name="textAlign">The text alignment</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DrawTextOutlined(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.ContentAlignment)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DrawImage(System.Int32,System.Int32,System.Drawing.Bitmap,System.Drawing.ContentAlignment,System.Boolean,System.Boolean)"/>
            <remarks>For better performances use the <see cref="M:devDept.Eyeshot.ViewportLayout.GetTextImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment,System.Drawing.RotateFlipType,System.Boolean)"/> to get the text image, then create a texture and draw the texture directly</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment,System.Drawing.RotateFlipType)">
            <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.ViewportLayout"/>'s client area.
            </summary>
            <param name="x">The text x coordinate</param>
            <param name="y">The text y coordinate (from the bottom of the viewport)</param>
            <param name="text">The text string to draw</param>
            <param name="textFont">The text font</param>
            <param name="textColor">The text color</param>
            <param name="fillColor">The background color (can be semi-transparent)</param>
            <param name="textAlign">The text alignment</param>
            <param name="rotateFlip">The text rotation</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DrawTextOutlined(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.ContentAlignment)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DrawImage(System.Int32,System.Int32,System.Drawing.Bitmap,System.Drawing.ContentAlignment,System.Boolean,System.Boolean)"/>
            <remarks>For better performances use <see cref="M:devDept.Eyeshot.ViewportLayout.GetTextImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment,System.Drawing.RotateFlipType,System.Boolean)"/>, create the texture and draw it directly.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetTextImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment,System.Drawing.RotateFlipType,System.Boolean)">
            <summary>
            Gets the text bitmap.
            </summary>
            <param name="text">The text</param>
            <param name="font">The text font</param>
            <param name="color">The text color</param>
            <param name="fillColor">The background color</param>
            <param name="textAlign">The text alignment (used to clip the image when the background is transparent)</param>
            <param name="rotateFlip">The rotation and flip to apply to the bitmap</param>
            <param name="antialias">If true, the text is antialiased</param>
            <returns>The text bitmap</returns>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.GetTextOutlinedImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.RotateFlipType,System.Single)"/>
            <example>
            The following code demonstrates how to efficiently draw a text on screen
            <code lang="CS" title="[New Example]">
            private TextureBase texture1;
            private bool firstTime = false;
            protected override void DrawOverlay(DrawSceneParams data)
            {
                base.DrawOverlay(data);
            
                if (!firstTime)
                {
                    firstTime = true;
            
                    Font font = new Font("Tahoma", 50, FontStyle.Italic);
            
                    Image image1 = GetTextImage("My Text", font, Color.Red, Color.Transparent, ContentAlignment.TopRight, RotateFlipType.RotateNoneFlipY);
                    texture1 = renderContext.CreateTexture2D(image1, textureFilteringFunctionType.Nearest, textureFilteringFunctionType.Nearest, true, true);        
                    image1.Dispose();
                    font.Dispose();
                }
            
                DrawTexture(texture1, 100, 100, ContentAlignment.BottomLeft);        
                // Remember to Dispose the texture when it is no more needed, or before quitting the application
            }
            </code>
            <code lang="VB" title="[New Example]">
            Private texture1 As TextureBase
            Private firstTime As Boolean = False
            Protected Overrides Sub DrawOverlay(data As DrawSceneParams)
            	MyBase.DrawOverlay(data)
            
            	If Not firstTime Then
            		firstTime = True
            
            		Dim font As New Font("Tahoma", 50, FontStyle.Italic)
            
            		Dim image1 As Image = GetTextImage("My Text", font, Color.Red, Color.Transparent, ContentAlignment.TopRight, RotateFlipType.RotateNoneFlipY)
            		texture1 = renderContext.CreateTexture2D(image1, textureFilteringFunctionType.Nearest, textureFilteringFunctionType.Nearest, True, True)
                    image1.Dispose()
            		font.Dispose()
            	End If
            
            	DrawTexture(texture1, 100, 100, ContentAlignment.BottomLeft)
                ' Remember to Dispose the texture when it is no more needed, or before quitting the application
            End Sub
            
            </code>
            </example>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawTexture(devDept.Graphics.TextureBase,System.Int32,System.Int32,System.Drawing.ContentAlignment,System.Boolean)">
            <summary>
            Draws a texture.
            </summary>
            <param name="texture">The texture to draw</param>
            <param name="x">The texture x position</param>
            <param name="y">The texture y position</param>
            <param name="align">The texture alignment</param>
            <param name="flipY">If true, flips the image in the Y direction</param>        
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawTexture(devDept.Graphics.RenderContextBase,devDept.Graphics.TextureBase,System.Int32,System.Int32,System.Drawing.ContentAlignment,System.Boolean,System.Drawing.Rectangle@)">
            <summary>
            Draws a texture.
            </summary>
            <param name="renderContext"></param>
            <param name="texture"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="textAlign"></param>
            <param name="imageRect"></param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetTextPositionForTexture(System.Single,System.Single,System.Int32,System.Int32,System.Drawing.ContentAlignment,System.Single@,System.Single@)">
            <summary>
            Compute the position to draw the text from the texture size and the alignment.
            </summary>
            <param name="x">Initial text x position</param>
            <param name="y">Initial text y position</param>
            <param name="textureWidth">The width of the text texture</param>
            <param name="textureHeight">The height of the text texture</param>
            <param name="textAlign">text alignment</param>
            <param name="posX">X-position</param>
            <param name="posY">Y-position</param>        
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawTextOutlined(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.ContentAlignment)">
            <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.ViewportLayout"/>'s client area.
            </summary>
            <param name="x">The text's x coordinate</param>
            <param name="y">The text's y coordinate (from the bottom of the viewport)</param>
            <param name="text">The text string to draw</param>
            <param name="textFont">The text font</param>
            <param name="textColor">The text color</param>
            <param name="outlineColor">The outline color</param>
            <param name="outlineThickness">The outline thickness</param>
            <param name="textAlign">The text alignment</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.ContentAlignment)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DrawImage(System.Int32,System.Int32,System.Drawing.Bitmap,System.Drawing.ContentAlignment,System.Boolean,System.Boolean)"/>
            /// <remarks>For better performances use <see cref="M:devDept.Eyeshot.ViewportLayout.GetTextOutlinedImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.RotateFlipType,System.Single)"/>, create the texture and draw it directly.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawImage(System.Int32,System.Int32,System.Drawing.Bitmap)">
            <summary>
            Draws an image on the <see cref="T:devDept.Eyeshot.ViewportLayout"/>'s client area.
            </summary>
            <param name="x">The image's x corrdinate</param>
            <param name="y">The image's y coordinate (from the bottom of the viewport)</param>
            <param name="image">The image to draw</param>
            <remarks>Alpha channel is supported. Use the <see cref="M:System.Drawing.Image.RotateFlip(System.Drawing.RotateFlipType)"/> method to flip the image upside down.</remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.ContentAlignment)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DrawTextOutlined(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.ContentAlignment)"/>
            <remarks>For better performances create a texture and call <see cref="M:devDept.Eyeshot.ViewportLayout.DrawTexture(devDept.Graphics.TextureBase,System.Int32,System.Int32,System.Drawing.ContentAlignment,System.Boolean)"/> (see code below)</remarks>
            <example>
            The following code demonstrates how to efficiently draw an image on screen
            <code lang="CS" title="[New Example]">
                    
            private TextureBase texture1;
            private bool firstTime = false;
            protected override void DrawOverlay(DrawSceneParams data)
            {
                base.DrawOverlay(data);
            
                if (!firstTime)
                {
                    firstTime = true;
                    texture1 = renderContext.CreateTexture2D(Properties.Resources.Smiley, textureFilteringFunctionType.Nearest, textureFilteringFunctionType.Nearest, true, true);        
                    font.Dispose();
                }
            
                DrawTexture(texture1, 100, 100, ContentAlignment.BottomLeft);        
                // Remember to Dispose the texture when it is no more needed, or before quitting the application
            }
            </code>
            <code lang="VB" title="[New Example]">
            Private texture1 As TextureBase
            Private firstTime As Boolean = False
            Protected Overrides Sub DrawOverlay(data As DrawSceneParams)
            	MyBase.DrawOverlay(data)
            
            	If Not firstTime Then
            		firstTime = True
            		texture1 = renderContext.CreateTexture2D(Properties.Resources.Smiley, textureFilteringFunctionType.Nearest, textureFilteringFunctionType.Nearest, True, True)
            		font.Dispose()
            	End If
            
            	DrawTexture(texture1, 100, 100, ContentAlignment.BottomLeft)
                ' Remember to Dispose the texture when it is no more needed, or before quitting the application
            End Sub
            
            </code>
            </example>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ImageFromText(System.String,System.Drawing.Font,System.Drawing.Color,System.Boolean,System.Drawing.Color,System.IntPtr,System.Drawing.RotateFlipType,System.Boolean)">
            <summary>
            Generates a bitmap from the given text.
            </summary>
            <param name="text">The text</param>
            <param name="font">The text font</param>
            <param name="textColor">The text color</param>
            <param name="fill">If true the text is drawn over a background color</param>
            <param name="fillColor">The background color</param>
            <param name="hWnd">The control handle</param>
            <param name="rotateFlip">The rotation and flip to apply to the bitmap</param>       
            <param name="antialias">If true, the text is antialiased</param>
            <returns>The generated bitmap.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetTextOutlinedImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.RotateFlipType,System.Single)">
            <summary>
            Gets the outlined text image.
            </summary>
            <param name="text">The text</param>
            <param name="font">The text font</param>
            <param name="color">The text color</param>
            <param name="outlineColor">The outline color</param>
            <param name="rotateFlip">The rotation and flip to apply to the bitmap</param>
            <param name="thickness">The outline thickness</param>
            <returns>The text bitmap</returns>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.GetTextImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment,System.Drawing.RotateFlipType,System.Boolean)"/>
            <example>
            The following code demonstrates how to efficiently draw an outlined text on screen
            <code lang="CS" title="[New Example]">
                    
            private TextureBase texture1;
            private bool firstTime = false;
            protected override void DrawOverlay(DrawSceneParams data)
            {
                base.DrawOverlay(data);
            
                if (!firstTime)
                {
                    firstTime = true;
            
                    Font font = new Font("Tahoma", 50, FontStyle.Italic);
            
                    Image image1 = GetTextOutlinedImage("My Text", font, Color.Red, Color.Black, RotateFlipType.RotateNoneFlipY, 1);
                    texture1 = renderContext.CreateTexture2D(image1, textureFilteringFunctionType.Nearest, textureFilteringFunctionType.Nearest, true, true);        
                    image1.Dispose();
                    font.Dispose();
                }
            
                DrawTexture(texture1, 100, 100, ContentAlignment.BottomLeft);   
                // Remember to Dispose the texture when it is no more needed, or before quitting the application
            }
            </code>
            <code lang="VB" title="[New Example]">
            Private texture1 As TextureBase
            Private firstTime As Boolean = False
            Protected Overrides Sub DrawOverlay(data As DrawSceneParams)
            	MyBase.DrawOverlay(data)
            
            	If Not firstTime Then
            		firstTime = True
            
            		Dim font As New Font("Tahoma", 50, FontStyle.Italic)
            
            		Dim image1 As Image = GetTextOutlinedImage("My Text", font, Color.Red, Color.Black, RotateFlipType.RotateNoneFlipY, 1)
            		texture1 = renderContext.CreateTexture2D(image1, textureFilteringFunctionType.Nearest, textureFilteringFunctionType.Nearest, True, True)
                    image1.Dispose()
            		font.Dispose()
            	End If
            
            	DrawTexture(texture1, 100, 100, ContentAlignment.BottomLeft)
                ' Remember to Dispose the texture when it is no more needed, or before quitting the application
            End Sub
            
            </code>
            </example>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.CompileText(System.String,devDept.Graphics.RenderContextBase,System.String,System.Collections.Generic.Dictionary{System.String,devDept.Eyeshot.FontData},devDept.Eyeshot.TextStyleDictionary)">
            <summary>
            Compiles the text.
            </summary>
            <param name="text">The text</param>
            <param name="alignment">The text alignment</param>
            <param name="hDC"></param>
            <param name="font"></param>
            <param name="style">The text style</param>
            <param name="fontDefs"></param>
            <returns>True if the trext contains right-to-left characters and must be managed as a whole.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.PaintBackBuffer">
            <summary>
            Paints the viewport surface without redrawing the whole scene.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SwapBuffers">
            <summary>
            Swaps the front and back buffers.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawViewport(devDept.Eyeshot.ViewportLayout.DrawSceneParams)">
            <summary>
            Draws the viewport.
            </summary>
            <param name="myParams">The parameters</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.DrawViewportBackground(devDept.Eyeshot.ViewportLayout.DrawSceneParams)">
            <summary>
            Draws the viewport background.
            </summary>
            <param name="data">The drawing parameters</param>
            <remarks>Override this to draw some custom graphics before the scene is drawn.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetThumbnail(System.Int32)">
            <summary>
            Returns a thumbnail bitmap of the whole viewportLayout. The maximum size is 256x256.
            </summary>
            <param name="thumbnailSize">Desired size of the biggest dimension of the viewportLayout</param>
            <returns>The bitmap of the current viewportLayout</returns>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RenderToBitmap(System.Drawing.Size)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="bitmapSize">The size in which the viewport will be fitted.</param>
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RenderToBitmap(System.Drawing.Size,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="bitmapSize">The size in which the viewport will be fitted.</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RenderToBitmap(System.Drawing.Size,System.Double,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="bitmapSize">The size in which the viewport will be fitted.</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RenderToTexture(devDept.Graphics.TextureBase,System.Drawing.Rectangle,System.Boolean,System.Double)">
            <summary>Renders the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene to a texture.</summary>
            <param name="texture">The texture to render to</param>
            <param name="rectangle">The rectangle of the viewport to capture in screen coordinates (zero on top)</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RenderToBitmap(System.Drawing.RectangleF,System.Drawing.Size,System.Boolean,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="rectangle">The rectangle of the viewport to capture in screen coordinates (zero on top)</param>
            <param name="bitmapSize">The size in which the viewport will be fitted.</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RenderToBitmap(System.Drawing.RectangleF,System.Drawing.Size,System.Double,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="rectangle">The rectangle of the viewport to capture in screen coordinates (zero on top)</param>
            <param name="bitmapSize">The size in which the viewport will be fitted.</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RenderToBitmap(System.Double)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> viewport scene. The image can be scaled even to a poster size one.</summary>
            <param name="drawScaleFactor">The bitmap scale</param>
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RenderToBitmap(System.Double,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene of the active viewport. The image can be scaled even to a poster size one.</summary>
            <param name="drawScaleFactor">The bitmap scale</param>
            <param name="drawBackground">If false, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RenderToBitmap(System.Double,System.Double,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene of the active viewport. The image can be scaled even to a poster size one.</summary>
            <param name="drawScaleFactor">The bitmap scale</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="drawBackground">If false, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RenderToBitmap(System.Drawing.Rectangle,System.Double,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene of the active viewport. The image can be scaled even to a poster size one.</summary>
            <param name="rectangle">The rectangle of the viewport to capture in screen coordinates (zero on top)</param>
            <param name="drawScaleFactor">The bitmap scale factor</param>
            <param name="drawBackground">If false, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>        
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RenderToBitmap(System.Drawing.Rectangle,System.Double,System.Double,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene of the active viewport. The image can be scaled even to a poster size one.</summary>
            <param name="rectangle">The rectangle of the viewport to capture in screen coordinates (zero on top)</param>
            <param name="drawScaleFactor">The bitmap scale factor</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="drawBackground">If false, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>        
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.WriteToFileRaster(System.Single,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>Saves a raster image of the current viewport scene on disk.</summary>
            <param name="drawScaleFactor">The image scale factor</param>
            <param name="fileName">A string that contains the name of the file to which to save the raster image</param>
            <param name="format">The file format of the raster image</param>
            <remarks>The saved file will contain a 24-bit image.</remarks>
            <remarks>If the file exists, it's overwritten.</remarks>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.WriteToFileRaster(System.Single,System.String,System.Drawing.Imaging.ImageFormat,System.Boolean)">
            <summary>Saves a raster image of the current viewport scene on disk.</summary>
            <param name="drawScaleFactor">The image scale</param>
            <param name="fileName">A string that contains the name of the file to which to save the raster image</param>
            <param name="format">The file format of the raster image</param>
            <param name="drawBackground">If false, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <remarks>The saved file will contain a 24-bit image.</remarks>
            <remarks>If the file exists, it's overwritten.</remarks>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.WriteToFileRaster(System.Single,System.Double,System.String,System.Drawing.Imaging.ImageFormat,System.Boolean)">
            <summary>Saves a raster image of the current viewport scene on disk.</summary>
            <param name="drawScaleFactor">The image scale</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="fileName">A string that contains the name of the file to which to save the raster image</param>
            <param name="format">The file format of the raster image</param>
            <param name="drawBackground">If false, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <remarks>The saved file will contain a 24-bit image.</remarks>
            <remarks>If the file exists, it's overwritten.</remarks>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.WriteToFileVector(System.Boolean,System.String)">
            <summary>
            Saves a vectorial image of the current scene of the active viewport on disk in EMF format.
            </summary>
            <param name="fit">If true captures the whole model, else the current viewport</param>
            <param name="fileName">The name of the file to save</param>
            <seealso cref="T:devDept.Eyeshot.HiddenLinesViewOnFile"/>
            <remarks>If the file exists, it's overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.StartAnimation">
            <summary>
            	<para>Starts the animation timer. After calling this method the <see cref="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">Animate</see> method of all the entities is called periodically to allow the 
            computation of the new entity position.</para>
            	<para>To animate group of entities the recommended approach is the following:</para>
            	<list type="number">
            		<item>Create groups of moving objects (using <see cref="T:devDept.Eyeshot.Block"/> class and adding entities to the <see cref="P:devDept.Eyeshot.Block.Entities"/> collection)</item>
            		<item>Add blocks created at point 1) to the <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/> collection</item>
            		<item>Subclass the <see cref="T:devDept.Eyeshot.Entities.BlockReference">BlockReference</see> class for each moving group of objects</item>
            		<item>Override the <see cref="!:BlockReference.MoveTo()">BlockReference.MoveTo()</see> method of the class at point 2) and add the code to move the objects at that specific time frame</item>
            		<item>Add the block references created at point 4) to the <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/> collection</item>
            		<item>Call StartAnimation() providing the time interval between each frame</item>
            		<item>Call StopAnimation() to stop the animation</item>
            	</list>
            </summary>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StopAnimation">StopAnimation Method</seealso>
            <seealso cref="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">Animate Method (devDept.Eyeshot.Standard.Entity)</seealso>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.StartAnimation(System.Int32)">
            <summary>
            	<para>Starts the animation timer. After calling this method the <see cref="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">Animate</see> method of all the entities is called periodically to allow the 
            computation of the new entity position.</para>
            	<para>To animate group of entities the recommended approach is the following:</para>
            	<list type="number">
            		<item>Create groups of moving objects (using <see cref="T:devDept.Eyeshot.Block"/> class and adding entities to the <see cref="P:devDept.Eyeshot.Block.Entities"/> collection)</item>
            		<item>Add blocks created at point 1) to the <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/> collection</item>
            		<item>Subclass the <see cref="T:devDept.Eyeshot.Entities.BlockReference">BlockReference</see> class for each moving group of objects</item>
            		<item>Override the <see cref="!:BlockReference.MoveTo()">BlockReference.MoveTo()</see> method of the class at point 2) and add the code to move the objects at that specific time frame</item>
            		<item>Add the block references created at point 4) to the <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/> collection</item>
            		<item>Call StartAnimation() providing the time interval between each frame</item>
            		<item>Call StopAnimation() to stop the animation</item>
            	</list>
            </summary>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StopAnimation">StopAnimation Method</seealso>
            <seealso cref="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">Animate Method (devDept.Eyeshot.Standard.Entity)</seealso>
            <param name="interval">Timer interval. See <see cref="T:System.Windows.Forms.Timer"/> object.</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.StartAnimation(System.Int32,System.Int32)">
            <summary>
            	<para>Starts the animation timer. After calling this method the <see cref="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">Animate</see> method of all the entities is called periodically to allow the 
            computation of the new entity position.</para>
            	<para>To animate group of entities the recommended approach is the following:</para>
            	<list type="number">
            		<item>Create groups of moving objects (using <see cref="T:devDept.Eyeshot.Block"/> class and adding entities to the <see cref="P:devDept.Eyeshot.Block.Entities"/> collection)</item>
            		<item>Add blocks created at point 1) to the <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/> collection</item>
            		<item>Subclass the <see cref="T:devDept.Eyeshot.Entities.BlockReference">BlockReference</see> class for each moving group of objects</item>
            		<item>Override the <see cref="!:BlockReference.MoveTo()">BlockReference.MoveTo()</see> method of the class at point 2) and add the code to move the objects at that specific time frame</item>
            		<item>Add the block references created at point 4) to the <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/> collection</item>
            		<item>Call StartAnimation() providing the time interval between each frame</item>
            		<item>Call StopAnimation() to stop the animation</item>
            	</list>
            </summary>
            <seealso cref="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">Animate Method (devDept.Eyeshot.Standard.Entity)</seealso>
            <param name="stopAfter">The animation will stop after this number of frames</param>
            <param name="interval">Timer interval, see <see cref="T:System.Windows.Forms.Timer"/> object.</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.StopAnimation">
            <summary>Stops the animation timer. Call base class method when overriding.</summary>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StartAnimation(System.Int32)">StartAnimation Method</seealso>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.OnAnimationTimerTick(System.Object,System.EventArgs)">
            <summary>Occurs every timer tick. Call base class method when overriding.</summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.PageSetup(System.Boolean)">
            <summary>Opens the Page Setup dialog.</summary>
            <remarks>Margins are disabled because the Eyeshot parameterless printing
            engine prints to the entire printable area of the selected paper format.</remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.Print"></seealso>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.PrintPreview(System.Drawing.Size)"></seealso>
            <param name="allowMargins">If true, the margins can be changed</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.PrintPreview(System.Drawing.Size)">
             <summary>Computes the hidden lines and opens the Print Preview dialog.</summary>
            <param name="printPreviewDlgClientSize">Size of the Print Preview form client area</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
             <seealso cref="M:devDept.Eyeshot.ViewportLayout.Print"></seealso>
             <seealso cref="M:devDept.Eyeshot.ViewportLayout.PageSetup(System.Boolean)"></seealso>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.Print">
             <summary>Computes the hidden lines and opens the Print dialog.</summary>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
             <seealso cref="M:devDept.Eyeshot.ViewportLayout.PageSetup(System.Boolean)"></seealso>
             <seealso cref="M:devDept.Eyeshot.ViewportLayout.PrintPreview(System.Drawing.Size)"></seealso>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ConvertPrintAreaFromMetricToInches(System.Drawing.Printing.PrintPageEventArgs,System.Drawing.RectangleF@)">
            <summary>
            Converts the print area from tens Of a millimiter to hundredths of an inch.
            </summary>
            <param name="e"></param>
            <param name="printable"></param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardRaster(System.Drawing.Size)">
            <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
            <param name="bitmapSize">The size in which the viewport will be fitted.</param>
            <remarks>The copied image will be a 24-bit bitmap.</remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardRaster(System.Drawing.Size)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardRaster(System.Drawing.Size,System.Boolean)">
            <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
            <param name="bitmapSize">The size in which the viewport will be fitted.</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (openGL only)</param>
            <remarks>The copied image will be a 24-bit bitmap.</remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardRaster(System.Drawing.Size)"/>/// 
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardRaster(System.Drawing.Size,System.Double,System.Boolean)">
            <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
            <param name="bitmapSize">The size in which the viewport will be fitted.</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (openGL only)</param>
            <remarks>The copied image will be a 24-bit bitmap.</remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardRaster(System.Drawing.Size)"/>/// 
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardRaster">
            <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardRaster(System.Single)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardRaster(System.Single)">
            <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
            <param name="drawScale">The image scale</param>
            <remarks>The copied image will be a 24-bit bitmap.</remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardRaster(System.Drawing.Size)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardRaster(System.Single,System.Double)">
            <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
            <param name="drawScale">The image scale</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <remarks>The copied image will be a 24-bit bitmap.</remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardRaster(System.Drawing.Size)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardVector(System.Boolean)">
            <summary>
            Copies a vectorial image of the current scene of the active viewport on the clipboard.
            </summary>
            <param name="fit">If true captures the whole model, else the current viewport</param>
            <seealso cref="T:devDept.Eyeshot.HiddenLinesViewOnClipboard"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.MakeLoop(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32,System.Double,System.Boolean)">
            <summary>
                Analyzes a number of entities and returns a closed loop of points starting from the
                entity at <paramref name="startIndex"/>. You can provide an array of 100
                entities an get a 3D loop of a square made up of 4 lines. Entities connection is
                checked using <paramref name="chordalError"/> parameter, if the end
                points of two entities are farther of this value they will not be connected.
            </summary>
            <returns>The resulting loop of points.</returns>
            <param name="curveList">A list of curves</param>
            <param name="startIndex">The first entity to analyze</param>
            <param name="chordalError">The chordal error</param>
            <param name="reverse">If true, reverses the loop orientation.</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.MakeFace(devDept.Geometry.Plane,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{System.Collections.Generic.IList{System.Int32}},System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Triangulates the specific region.
            </summary>
            <param name="pln">The projection plane</param>
            <param name="outerLoop">The outer loop</param>
            <param name="innerLoops">The inner loops</param>
            <param name="vertexList">The vertex list</param>
            <returns>The list of triangles needed to cover the region.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.MakeFace(devDept.Geometry.Plane,System.Collections.Generic.IList{System.Collections.Generic.IList{System.Int32}},System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Boolean)">
            <summary>
            Triangulates the specific region.
            </summary>
            <param name="pln">The projection plane</param>
            <param name="loops">The loop list, the outer one is the first (needs to be oriented counterclockwise), the inners are the others (need to be oriented clockwise).</param>
            <param name="vertexList">The vertex list</param>
            <param name="checkForOuter">Check if the outer contour is the first in the list and if not reorders the loop list</param>
            <returns>The list of triangles needed to cover the region.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ZoomFit">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ZoomFit(System.Int32)">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
            <param name="margin">Pixels margin from the border</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ZoomFit(System.Boolean)">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
            <param name="selectedOnly">If true, fits only selected entities.</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ZoomFit(System.Boolean,System.Int32)">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
            <param name="selectedOnly">If true, fits only selected entities.</param>
            <param name="margin">Pixels margin from the border</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Boolean)">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
            <param name="entList">The list of entities to be fitted</param>
            <param name="selectedOnly">If true, fits only selected entities.</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Boolean,System.Int32)">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
            <param name="entList">The list of entities to be fitted</param>
            <param name="selectedOnly">If true, fits only selected entities.</param>
            <param name="margin">Pixels margin from the border</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
            <param name="entList">The list of entities to be fitted</param>
            <param name="selectedOnly">If true, fits only selected entities.</param>
            <param name="margin">Pixels margin from the border</param>
            <param name="animate">If true performs an animation when changing the view</param>        
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ZoomWindow(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Zooms to the specified window.
            </summary>
            <param name="p1">Window's diagonal start point in screen coordinates</param>
            <param name="p2">Window's diagonal end point in screen coordinates</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SetView(devDept.Eyeshot.viewType)">
            <summary>
            Sets the specified view in the active viewport.
            </summary>
            <param name="view">View type</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SetView(devDept.Eyeshot.viewType,System.Boolean,System.Boolean)">
            <summary>
            Sets the specified view in the active viewport.
            </summary>
            <param name="view">View type</param>
            <param name="fit">If true fits the view</param>
            <param name="animate">If true performs an animation when changing the view</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SetView(devDept.Eyeshot.viewType,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Sets the specified view in the active viewport.
            </summary>
            <param name="view">View type</param>
            <param name="fit">If true fits the view</param>
            <param name="margin">Pixels margin from the border, if <see cref="!:fit"/> is true</param>
            <param name="animate">If true performs an animation when changing the view</param>
            <param name="selectedOnly">If <paramref name="fit"/> is true, fits only the selected entities</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SetView(devDept.Geometry.Quaternion,devDept.Geometry.Point3D,System.Double,System.Double)">
            <summary>
            Sets the specified view in the active viewport by doing an animation.
            </summary>
            <param name="rotation">The new camera rotation</param>
            <param name="target">The new cameratarget</param>
            <param name="distance">The new cameradistance</param>
            <param name="zoomFactor">The new camera zoomFactor</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SaveView">
            <summary>
            Saves the current view on the <see cref="P:devDept.Eyeshot.Viewport.SavedViews"/> stack.
            </summary>
            <remarks><see cref="P:devDept.Eyeshot.Viewport.SavedViews"/></remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.PreviousView"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.NextView"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.PreviousView">
            <summary>
            Restores the previous view on the <see cref="P:devDept.Eyeshot.Viewport.SavedViews"/> stack.
            </summary>
            <remarks><see cref="P:devDept.Eyeshot.Viewport.SavedViews"/></remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.SaveView"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.NextView"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.NextView">
            <summary>
            Restores the next view previously saved on the <see cref="P:devDept.Eyeshot.Viewport.SavedViews"/> stack.
            </summary>
            <remarks><see cref="P:devDept.Eyeshot.Viewport.SavedViews"/></remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.PreviousView"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.NextView"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ProcessSelectionByPolygon(System.Collections.Generic.List{devDept.Geometry.Point2D},System.Boolean,System.Int32[]@,System.Collections.Generic.List{System.Int32})">
            <summary>
            Selects each entity crossing the specified selection polygon.
            </summary>
            <param name="selectionPolygon">Selection polygon in camera screen coordinates</param>
            <param name="invert">If true, inverts current selection status</param>
            <param name="added">The list of entity indices of entities added to selection</param>
            <param name="removed">The list of entity indices of entities removed from selection</param>
            <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)"/> to see the effect of this function.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ProcessSelectionByPolygonEnclosed(System.Collections.Generic.List{devDept.Geometry.Point2D},System.Boolean,System.Int32[]@,System.Collections.Generic.List{System.Int32})">
            <summary>
            Selects each entity completely enclosed in the specified selection rectangle.
            </summary>
            <param name="selectionPolygon">Selection polygon in screen coordinates</param>
            <param name="added">The list of entity indices of entities added to selection</param>
            <param name="removed">The list of entity indices of entities removed from selection</param>
            <param name="invert">If true, inverts current selection status</param>
            <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)"/> to see the effect of this function.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ProcessSelectionByPolygonVisibleOnly(System.Collections.Generic.List{devDept.Geometry.Point2D},System.Boolean,System.Int32[]@,System.Collections.Generic.List{System.Int32})">
            <summary>
            Selects each visible entity in the specified selection polygon.
            </summary>
            <param name="selectionPolygon">Selection polygon in screen coordinates</param>
            <param name="added">The list of entity indices of entities added to selection</param>
            <param name="removed">The list of entity indices of entities removed from selection</param>
            <param name="invert">If true, inverts current selection status</param>
            <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)"/> to see the effect of this function.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ProcessSelectionVisibleOnly(System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Int32[]@,System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Selects only visible entities in the specified rectangle.
            </summary>
            <param name="selectionBox">Selection rectangle in screen coordinates</param>
            <param name="added">The list of entity indices of entities added to selection</param>
            <param name="removed">The list of entity indices of entities removed from selection</param>
            <param name="firstOnly">When true, returns immediately after selecting the first entity</param>
            <param name="invert">If true, inverts current selection status</param>
            <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.</param>
            <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)"/> to see the effect of this function.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ProcessSelectionVisibleOnlyLabels(System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Selects only visible labels in the specified rectangle.
            </summary>
            <param name="selectionBox">Selection rectangle in screen coordinates</param>
            <param name="firstOnly">When true, returns immediately after selecting the first entity</param>
            <param name="invert">When true, inverts current selection status</param>
            <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.</param>
            <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)"/> to see the effect of this function.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ProcessSelection(System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Int32[]@,System.Collections.Generic.List{System.Int32},System.Boolean)">
            <summary>
            Selects each entity crossing the specified selection rectangle.
            </summary>
            <param name="selectionBox">Selection rectangle in screen coordinates</param>
            <param name="added">The list of entity indices of entities added to selection</param>
            <param name="removed">The list of entity indices of entities removed from selection</param>
            <param name="firstOnly">When true, returns immediately after selecting the first entity</param>
            <param name="invert">When true, inverts current selection status</param>
            <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.</param>
            <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)"/> to see the effect of this function.</remarks>
            <remarks>All entities in the selectionBox are considered, even the ones covered by others.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetAllCrossingEntities(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Returns the list of all the visible and selectable entities geometrically crossing the selection box, regardless of their actual visibility on screen.
            </summary>
            <param name="selectionBox">Selection rectangle's in screen coordinates</param>
            <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.</param>
            <returns>The list of entity indices.</returns>
            <remarks>All entities in the selectionBox are considered, even the ones covered by others.</remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.GetAllEntitiesUnderMouseCursor(System.Drawing.Point,System.Boolean)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetCrossingEntities(System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Returns the list of all the visible and selectable entities crossing the specified selection box.
            </summary>
            <param name="selectionBox">Selection Rectangle box in screen coordinates</param>
            <param name="firstOnly">When true, returns immediately after selecting the first entity</param>
            <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.</param>
            <returns></returns>
            <remarks>All entities in the selectionBox are considered, even the ones covered by others.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetCrossingEntitiesScreenPolygon(System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{devDept.Geometry.Segment2D},System.Int32[],System.Double[],devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Boolean)">
            <summary>
            
            </summary>
            <param name="screenPolygon">Polygon in camera screen coordinates</param>
            <param name="max"></param>
            <param name="firstOnly"></param>
            <param name="screenSegments"></param>
            <param name="viewFrame"></param>
            <param name="modelViewProj"></param>
            <param name="min"></param>
            <returns></returns> 
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ProcessSelectionEnclosed(System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Int32[]@,System.Collections.Generic.List{System.Int32})">
            <summary>
            Selects each entity completely enclosed in the specified selection rectangle.
            </summary>
            <param name="selectionBox">Selection rectangle's in screen coordinates</param>
            <param name="added">The list of entity indices of entities added to selection</param>
            <param name="removed">The list of entity indices of entities removed from selection</param>
            <param name="firstOnly">If true, returns immediately after selecting the first entity</param>
            <param name="invert">If true, inverts current selection status</param>
            <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)"/> to see the effect of this function.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetAllEnclosedEntities(System.Drawing.Rectangle)">
            <summary>
            Selects all entities completely enclosed in the specified selection rectangle.
            </summary>
            <param name="selectionBox">Selection rectangle's in screen coordinates</param>
            <returns>The list of entity indices.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SetColorDrawForSelection(System.Int32)">
            <summary>
            Sets a coded color depending on the entity id.
            </summary>
            <param name="currentEntityId">The id of the entity</param>
            <remarks>Used by visible selection methods.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ScreenToPlane(System.Drawing.Point,devDept.Geometry.Plane,devDept.Geometry.Point3D@)">
            <summary>
            Maps screen coordinates to world coordinates in the active viewport. 
            </summary>
            <param name="mousePos">Mouse cursor position (zero on top)</param>
            <param name="plane">The plane</param>
            <param name="intPoint">The intersection point. null/Nothing if the plane perpendicular to the screen.</param>
            <returns>True if the mapping succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ScreenToPlane(System.Drawing.Point,devDept.Geometry.PlaneEquation,devDept.Geometry.Point3D@)">
            <summary>
            Maps screen coordinates to world coordinates in the active viewport. 
            </summary>
            <param name="mousePos">Mouse cursor position (zero on top)</param>
            <param name="pe">The plane equation</param>
            <param name="intPoint">The intersection point. null/Nothing if the plane perpendicular to the screen.</param>
            <returns>True if the mapping succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ScreenToPlane(System.Collections.Generic.IList{System.Drawing.Point},devDept.Geometry.Plane)">
            <summary>
            Maps screen coordinates to world coordinates in the active viewport. 
            </summary>
            <param name="mousePointList">2D mouse point list (zero on top)</param>
            <param name="plane">The plane</param>
            <returns>The associated 3D world point list.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ScreenToPlane(System.Collections.Generic.IList{System.Drawing.Point},devDept.Geometry.PlaneEquation)">
            <summary>
            Maps screen coordinates to world coordinates in the active viewport. 
            </summary>
            <param name="mousePointList">2D mouse point list (zero on top)</param>
            <param name="pe">The plane equation</param>
            <returns>The associated 3D world point list.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ScreenToWorld(System.Collections.Generic.IList{System.Drawing.Point})">
            <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
            <param name="mousePointList">2D mouse point list (zero on top)</param>
            <returns>The associated 3D world point list.</returns>
            <remarks>The depth is read from the depth buffer, so its precision affects accuracy.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ScreenToWorld(System.Drawing.Point)">
            <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
            <param name="mousePos">Mouse cursor position (zero on top)</param>
            <returns>The associated 3D world point.</returns>
            <remarks>The depth is read from the depth buffer, so its precision affects accuracy.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.WorldToScreen(devDept.Geometry.Point3D)">
            <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
            <param name="point">The 3D point to project on screen</param>
            <returns>The associated projected screen point (zero on bottom)</returns>
            <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.WorldToScreen(System.Double,System.Double,System.Double)">
            <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
            <param name="x">3D point's x-coordinate</param>
            <param name="y">3D point's y-coordinate</param>
            <param name="z">3D point's z-coordinate</param>
            <returns>The associated projected screen point (zero on bottom).</returns>
            <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.WorldToScreen(System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
            <param name="pointList">3D point list</param>
            <returns>The associated projected screen point list (zero on bottom).</returns>
            <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.FindClosestVertex(System.Drawing.Point,System.Double,devDept.Geometry.Point3D@)">
            <summary>
            Looks for the model vertex closer to the mouse cursor.
            </summary>
            <param name="mousePos">Mouse position (zero on top)</param>
            <param name="maxDistance">Limit the search to points at this distance from mouse cursor position</param>
            <param name="closest">The closest vertex as a 3D point</param>
            <returns>The entity index if the closest vertex is nearer than <paramref name="maxDistance"/>, -1 otherwise.</returns>
            <remarks>The returned entity index refers to the <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/> if there is no current BlockReference, else it refers to the <see cref="P:devDept.Eyeshot.Block.Entities"/>
            of the Block referred by the <see cref="P:devDept.Eyeshot.EntityList.CurrentBlockReference"/>. 
            Also, the <paramref name="closest"/> point is in the coordinate space of the <see cref="P:devDept.Eyeshot.EntityList.CurrentBlockReference"/> so, if there is a current BlockReference, to get the 3D world coordinates
            of the <paramref name="closest"/> point you need to transform if by the <see cref="P:devDept.Eyeshot.Entities.BlockReference.AccumulatedParentsTransform"/> of the <see cref="P:devDept.Eyeshot.EntityList.CurrentBlockReference"/></remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.FindClosestVertex(System.Drawing.Point,System.Double,System.Type,devDept.Geometry.Point3D@)">
            <summary>
            Looks for the model vertex closer to the mouse cursor skipping entities different from entType.
            </summary>
            <param name="mousePos">Mouse position (zero on top)</param>
            <param name="maxDistance">Limit the search to points at this distance from mouse cursor position</param>
            <param name="entType">Entity type</param>
            <param name="closest">The closest vertex as a 3D point</param>
            <returns>The entity index if the closest vertex is nearer than <paramref name="maxDistance"/> and the entity type is <paramref name="entType"/>, -1 otherwise.</returns>
            <remarks>The returned entity index refers to the <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/> if there is no current BlockReference, else it refers to the <see cref="P:devDept.Eyeshot.Block.Entities"/>
            of the Block referred by the <see cref="P:devDept.Eyeshot.EntityList.CurrentBlockReference"/>.
            Also, the <paramref name="closest"/> point is in the coordinate space of the <see cref="P:devDept.Eyeshot.EntityList.CurrentBlockReference"/> so, if there is a current BlockReference, to get the 3D world coordinates
            of the <paramref name="closest"/> point you need to transform if by the <see cref="P:devDept.Eyeshot.Entities.BlockReference.AccumulatedParentsTransform"/> of the <see cref="P:devDept.Eyeshot.EntityList.CurrentBlockReference"/></remarks>        
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.FindClosestVertex(System.Drawing.Point,System.Double,System.Int32@)">
            <summary>
            Looks for the model vertex closer to the mouse cursor.
            </summary>
            <param name="mousePos">Mouse position (zero on top)</param>
            <param name="maxDistance">Limit the search to points at this distance from mouse cursor position</param>
            <param name="closestIndex">The closest vertex index</param>
            <returns>The entity index if the closest vertex is nearer than <paramref name="maxDistance"/>, -1 otherwise.</returns>
            <remarks>The returned entity index refers to the <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/> if there is no current BlockReference, else it refers to the <see cref="P:devDept.Eyeshot.Block.Entities"/>
            of the Block referred by the <see cref="P:devDept.Eyeshot.EntityList.CurrentBlockReference"/>.
            Also, the <paramref name="closestIndex"/> point is in the coordinate space of the <see cref="P:devDept.Eyeshot.EntityList.CurrentBlockReference"/> so, if there is a current BlockReference, to get the 3D world coordinates
            of the <paramref name="closestIndex"/> point you need to transform if by the <see cref="P:devDept.Eyeshot.Entities.BlockReference.AccumulatedParentsTransform"/> of the <see cref="P:devDept.Eyeshot.EntityList.CurrentBlockReference"/></remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.FindClosestVertex(System.Drawing.Point,System.Double,System.Type,System.Int32@)">
            <summary>
            Looks for the model vertex closer to the mouse cursor skipping entities different from entType.
            </summary>
            <param name="mousePos">Mouse position (zero on top)</param>
            <param name="maxDistance">Limit the search to points at this distance from mouse cursor position</param>
            <param name="entType">Entity type</param>
            <param name="closestIndex">The closest vertex index</param>
            <returns>The entity index if the closest vertex is nearer than <paramref name="maxDistance"/> and the entity type is <paramref name="entType"/>, -1 otherwise.</returns>
            <remarks>The returned entity index refers to the <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/> if there is no current BlockReference, else it refers to the <see cref="P:devDept.Eyeshot.Block.Entities"/>
            of the Block referred by the <see cref="P:devDept.Eyeshot.EntityList.CurrentBlockReference"/>.
            Also, the <paramref name="closest"/> point is in the coordinate space of the <see cref="P:devDept.Eyeshot.EntityList.CurrentBlockReference"/> so, if there is a current BlockReference, to get the 3D world coordinates
            of the <paramref name="closest"/> point you need to transform if by the <see cref="P:devDept.Eyeshot.Entities.BlockReference.AccumulatedParentsTransform"/> of the <see cref="P:devDept.Eyeshot.EntityList.CurrentBlockReference"/></remarks>        
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.UpdateVisibleSelection">
            <summary>
            This method needs to be called before using one of the visible selection action modes or one of the methods that get the entities (or labels) under the mouse cursor if the visibility of an entity (or label) changed and the camera was not moved.
            </summary>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.ActionMode"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.GetEntityUnderMouseCursor(System.Drawing.Point,System.Boolean)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.GetAllEntitiesUnderMouseCursor(System.Drawing.Point,System.Boolean)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.GetAllLabelsUnderMouseCursor(System.Drawing.Point,System.Boolean)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.GetLabelUnderMouseCursor(System.Drawing.Point,System.Boolean)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetEntityUnderMouseCursor(System.Drawing.Point,System.Boolean)">
            <summary>
            Returns the index of the first entity under the mouse cursor.
            </summary>
            <remarks>The sensitivity is affected by the <see cref="P:devDept.Eyeshot.ViewportLayout.PickBoxSize"/> parameter.</remarks>
            <returns>The index of the entity, -1 otherwise.</returns>
            <remarks>The returned entity index refers to the <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/> if there is no current BlockReference, else it refers to the <see cref="P:devDept.Eyeshot.Block.Entities"/>
            of the Block referred by the <see cref="P:devDept.Eyeshot.EntityList.CurrentBlockReference"/> </remarks>
            <example>
                The following code fragment demonstrate how to highlight the entity under the mouse
                cursor.
                <code lang="CS" title="[New Example]">
            private void viewportProfessional1_MouseMove(
                     object sender, MouseEventArgs e)
            {
             
               viewportProfessional1.ClearSelection();
             
               int id = viewportProfessional1.GetEntityUnderMouseCursor(e.Location);
             
               if (id != -1)
               {
             
                  Entity ent = viewportProfessional1.Entities[id] as Entity;
             
                  ent.Selected = true;
             
               }
                        
               viewportProfessional1.Invalidate();
             
            }
                </code>
            	<code lang="VB" title="[New Example]">
            Private Sub ViewportProfessional1_Move( _
                      ByVal sender As System.Object, _
                      ByVal e As System.EventArgs) _
                      Handles ViewportProfessional1.Move
                              
               ViewportProfessional1.ClearSelection()
             
               Dim id As Integer = ViewportProfessional1.GetEntityUnderMouseCursor( _ 
                     e.Location)
             
               If id &lt;&gt; -1 Then
               
                  Dim ent As Entity = ViewportProfessional1.Entities(id)
                      
                  ent.Selected = True
             
               End If
                        
               ViewportProfessional1.Invalidate()
             
            End Sub
                </code>
            </example>
            <param name="mousePos">Mouse position in screen coordinates</param>
            <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.UpdateVisibleSelection"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetLabelUnderMouseCursor(System.Drawing.Point,System.Boolean)">
            <summary>
            Returns the index of the first label under the mouse cursor.
            </summary>
            <param name="mousePos">Mouse position in screen coordinates</param>
            <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.</param>
            <remarks>The sensitivity is affected by the <see cref="P:devDept.Eyeshot.ViewportLayout.PickBoxSize"/> parameter.</remarks>
            <returns>The index of the label, -1 otherwise.</returns>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.UpdateVisibleSelection"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetEntityUnderMouseCursorInternal``1(devDept.Eyeshot.Viewport,System.Drawing.Point,System.Collections.Generic.IList{``0},devDept.Eyeshot.displayType,devDept.Eyeshot.ViewportLayout.selectionEntityType,System.Boolean)">
            <summary>
            
            </summary>
            <param name="mousePos">Mouse position in screen coordinates</param>
            <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.FindClosestTriangle(devDept.Eyeshot.Entities.IFace,System.Drawing.Point,devDept.Geometry.Point3D@,System.Int32@)">
            <summary>
            Finds the closest triangle to the viewer of the specified entity.
            </summary>
            <param name="ent">The entity</param>
            <param name="mousePos">Mouse cursor position</param>
            <param name="hitPoint">Closest triangle's intersection point</param>
            <param name="hitTriangleIndex">Closest triangle's index</param>
            <returns>The numbers of triangles found under the mouse cursor.</returns>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.FindClosestVertex(System.Drawing.Point,System.Double,devDept.Geometry.Point3D@)"/>        
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.FindClosestTriangle(devDept.Eyeshot.Entities.IFace,System.Drawing.Point)">
            <summary>
            Finds the closest triangle to the viewer of the specified entity.
            </summary>
            <param name="ent">The entity</param>
            <param name="mousePos">Mouse cursor position (zero on top)</param>
            <returns>A sorted (by distance from the viewer) list of <see cref="T:devDept.Eyeshot.Entities.HitTriangle"/> found under the mouse cursor.</returns>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.FindClosestVertex(System.Drawing.Point,System.Double,devDept.Geometry.Point3D@)"/>             
            <remarks>If the entity is inside a <see cref="T:devDept.Eyeshot.Entities.BlockReference"/>, it must be set as current.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RotateCamera(System.Drawing.Point)">
            <summary>Sets the view direction as the normal of the plane under the mouse cursor.</summary>
            <param name="mouseLocation">Location of the mouse</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RotateCamera(devDept.Geometry.Vector3D,System.Boolean,System.Int32,System.Boolean)">
            <summary>Sets the view direction of the camera to the specified direction.</summary>
            <param name="direction">The new camera direction.</param>
             <param name="fit">if true fits the scene in the viewport</param>
             <param name="margin">Pixels margin from the border, if <see cref="!:fit"/> is true</param>
             <param name="selectedOnly">If <paramref name="fit"/> is true, fits only the selected entities</param>
             <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true</remarks>
             <remarks>The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
             <remarks>Obsolete, use <see cref="M:devDept.Eyeshot.ViewportLayout.SetView(devDept.Geometry.Vector3D,System.Boolean,System.Int32,System.Boolean)"/> instead.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SetView(devDept.Geometry.Vector3D,System.Boolean,System.Int32,System.Boolean)">
            <summary>Sets the view direction of the camera to the specified direction.</summary>
            <param name="direction">The new camera direction.</param>
             <param name="fit">if true fits the scene in the viewport</param>
             <param name="margin">Pixels margin from the border, if <see cref="!:fit"/> is true</param>
             <param name="selectedOnly">If <paramref name="fit"/> is true, fits only the selected entities</param>
             <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true</remarks>
             <remarks>The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.SetView(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Boolean,System.Int32,System.Boolean)">
            <summary>Sets the view direction of the camera to the specified direction.</summary>
            <param name="direction">The new camera direction.</param>
             <param name="upVector">The camera up vector</param>
             <param name="fit">if true fits the scene in the viewport</param>
             <param name="margin">Pixels margin from the border, if <see cref="!:fit"/> is true</param>
             <param name="selectedOnly">If <paramref name="fit"/> is true, fits only the selected entities</param>
             <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true</remarks>
             <remarks>The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetAllEntitiesUnderMouseCursor(System.Drawing.Point,System.Boolean)">
            <summary>
            Returns all the visible (on screen) and selectable entities under the mouse cursor in the active viewport.
            </summary>
            <param name="mousePos">Mouse position in screen coordinates</param>
            <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.</param>
            <remarks>The sensitivity is affected by the <see cref="P:devDept.Eyeshot.ViewportLayout.PickBoxSize"/> parameter.</remarks>
            <returns>The list of entity indices.</returns>
            <remarks>Only the entities that are visible on screen and in the selectionBox are considered, the ones covered by other entities are not considered.</remarks>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.UpdateVisibleSelection"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.GetAllCrossingEntities(System.Drawing.Rectangle,System.Boolean)"/>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetAllLabelsUnderMouseCursor(System.Drawing.Point,System.Boolean)">
            <summary>
            Returns all the visible labels under the mouse cursor in the active viewport.
            </summary>
            <param name="mousePos">Mouse position in screen coordinates</param>
            <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.</param>
            <remarks>The sensitivity is affected by the <see cref="P:devDept.Eyeshot.ViewportLayout.PickBoxSize"/> parameter.</remarks>
            <returns>The list of label indices.</returns>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.UpdateVisibleSelection"/>
            <remarks>Only the labels that are visible on screen and in the selectionBox are considered, the ones covered by other labels are not considered.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetAllVisibleEntities(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Returns the list of all visible entities in the specified selection box in the active viewport.
            </summary>
            <param name="selectionBox">Selection rectangle in screen coordinates</param>
            <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.</param>
            <returns>The list of entity indices.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetAllVisibleLabels(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Returns the list of all visible labels in the specified selection box.
            </summary>
            <param name="selectionBox">Selection rectangle in screen coordinates</param>
            <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.</param>
            <returns>The list of label indices.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetVisibleEntities``1(devDept.Eyeshot.Viewport,System.Drawing.Rectangle,System.Boolean,System.Collections.Generic.IList{``0},devDept.Eyeshot.ViewportLayout.selectionEntityType,System.Boolean)">
            <summary>
            
            </summary>
            <param name="viewport"></param>
            <param name="selectionBox">Selection rectangle in screen coordinates</param>
            <param name="firstOnly">When true, returns immediately after selecting the first entity</param>
            <param name="entList">The entities to draw (null for labels)</param>
            <param name="selectionEntityMode">The kind of entities to select</param>
            <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetVisibleEntitiesFromBackBuffer(devDept.Eyeshot.Viewport,System.Byte[],System.Int32,System.Int32,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Returns the indices of the entities read from the back buffer in the selectionBox.
            </summary>
            <param name="viewport">The viewport</param>
            <param name="stride">The number of bytes per image row</param>
            <param name="selectionBox">Selection rectangle in screen coordinates</param>
            <param name="firstOnly">If true, returns the first entity that is found in the selectionBox</param>
            <param name="rgbValues">The array of pixels drawn in false colors</param>
            <returns>The array of the indices of the visible entities found in the selection box.</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.AdjustPickBoxRect(devDept.Eyeshot.Viewport,System.Drawing.Rectangle@)">
            <summary>
            Adjusts the rectangle to the viewport buonds.
            </summary>
            <param name="viewport"></param>
            <param name="rect">The rectangle in screen coordinates ((0,0) at top left of the viewportLayout)</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.MoveToPlane(System.Collections.Generic.ICollection{devDept.Eyeshot.Entities.Entity},devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Moves a list of entities from plane XY to the specified plane.
            </summary>
            <param name="entList">The entity list</param>
            <param name="origin">The destination plane origin</param>
            <param name="xAxis">The destination plane X axis</param>
            <param name="yAxis">The destination plane Y axis</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.MoveToPlane(System.Collections.Generic.ICollection{devDept.Eyeshot.Entities.Entity},devDept.Geometry.Plane)">
            <summary>
            Moves a list of entities from plane XY to the specified plane.
            </summary>
            <param name="entList">The entity list</param>
            <param name="plane">Destination plane</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.MoveToPlane(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Geometry.Plane)">
            <summary>
            Moves a list of points from plane XY to the specified plane.
            </summary>
            <param name="points">The points list</param>
            <param name="plane">Destination plane</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the color of the specified pixel in this viewport
            </summary>
            <param name="x">The x window coordinate of the pixel to retrieve</param>
            <param name="y">The y window coordinate of the pixel to retrieve (0 on bottom)</param>
            <returns>The color of the pixel</returns>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RotateLeft(System.Double)">
            <summary>
            Rotates the view to the left.
            </summary>
            <param name="degrees">Degrees of rotation</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RotateRight(System.Double)">
            <summary>
            Rotates the view to the right.
            </summary>
            <param name="degrees">Degrees of rotation</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RotateUp(System.Double)">
            <summary>
            Rotates the view upwards.
            </summary>
            <param name="degrees">Degrees of rotation</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.RotateDown(System.Double)">
            <summary>
            Rotates the view downwards.
            </summary>
            <param name="degrees">Degrees of rotation</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ZoomIn(System.Int32)">
            <summary>
            Zooms the view in.
            </summary>
            <param name="amount">Amount of zoom (in pixels)</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ZoomOut(System.Int32)">
            <summary>
            Zooms the view out.
            </summary>
            <param name="amount">Amount of zoom (in pixels)</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.PanLeft(System.Int32)">
            <summary>
            Pans the view to the left.
            </summary>
            <param name="amount">Amount of pan (in pixels)</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.PanRight(System.Int32)">
            <summary>
            Pans the view to the right.
            </summary>
            <param name="amount">Amount of pan (in pixels)</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.PanDown(System.Int32)">
            <summary>
            Pans the view downwards.
            </summary>
            <param name="amount">Amount of pan (in pixels)</param>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.PanUp(System.Int32)">
            <summary>
            Pans the view upwards.
            </summary>
            <param name="amount">Amount of pan (in pixels)</param>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.MultiTouch">
            <summary>
            Gets or sets the Multitouch settings.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.MultiTouchDown">
            <summary>
            Occurs when a multitouch surface is pressed.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.MultiTouchUp">
            <summary>
            Occurs when a multitouch surface is released.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.MultiTouchMove">
            <summary>
            Occurs when a multitouch movement is performed.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.MultiTouchDoubleClick">
            <summary>
            Occurs when a multitouch surface is double-clicked.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.MultiTouchClick">
            <summary>
            Occurs when a multitouch surface is dragged.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.LayoutMode">
            <summary>
            Gets or sets the viewports configuration.
            </summary>
            <remarks><see cref="P:devDept.Eyeshot.ViewportLayout.Viewports"/> collection needs to be initialized with the correct number of Viewport items before changing this property.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Mouse3D">
            <summary>
            3D mouse settings.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.Mouse3DButtonDown">
            <summary>
            Occurs when a Mouse3D button is pressed.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.Mouse3DButtonUp">
            <summary>
            Occurs when a Mouse3D button is pressed.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.Mouse3DMove">
            <summary>
            Occurs when a Mouse3D movement operation is performed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.HasLicense">
            <summary>
            Tells if the product has a license.
            </summary>
            <returns>A boolean indicating whether the product has a license.</returns>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.IsActivated">
            <summary>
            Tells if the product is activated.
            </summary>
            <returns>A boolean indicating whether the product is activated.</returns>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.IsUnlockedAtDesignTime">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.SerialNumber">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Username">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Organization">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.DaysRemaining">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.DaysTotal">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.BoundingBoxChanged">
            <summary>
            Occurs when the scene bounding box has changed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.IsHardwareAccelerated">
            <summary>Returns true if OpenGL hardware acceleration is currently in use.</summary>
            <seealso cref="!:AskForHardwareAcceleration">AskForHardwareAcceleration Property</seealso>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.ForceHardwareAcceleration">ForceHardwareAcceleration Property</seealso>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.IsFsaaAvailable">
            <summary>Returns true if Full Screen Anti-Aliasing is available.</summary>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.AntiAliasing">AntiAliasing Property</seealso>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.AskForFsaa">AskForFSAA Property</seealso>
            <remarks>This value is written during viewport initialization, so it must be read after the control is correctly loaded.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ForceHardwareAcceleration">
            <summary>Forces accelerated hardware modes. By default, Eyeshot automatically disables hardware acceleration on some embedded
            GPUs to obtain the maximum level of graphical output consistency between all hardware. In these cases, enabling this property 
            will forcibly activate hardware acceleration, though the resulting graphics output may be unpredictable.</summary>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.AskForFsaa">AskForFSAA Property</seealso>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Entities">
            <summary>Entity collection. This collection contains the entities displayed in the viewport.</summary>
            <remarks>
            	<b>Never</b> add a <see cref="T:devDept.Eyeshot.Block">block</see> definition to this collection. Add it to the <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks">blocks</see> collection.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Blocks">
            <summary>Block collection. This collection contains block definitions.</summary>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.Entities"></seealso>
            <seealso cref="T:devDept.Eyeshot.Entities.BlockReference"></seealso>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Materials">
            <summary>Material collection. This collection contains material definitions.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Layers">
            <summary>Layer collection.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Groups">
            <summary>
            Group collection.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.TextStyles">
            <summary>
            Gets or sets the text styles dictionary.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.ProgressChanged">
            <summary>
            Occurs when the read/write progress has changed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.UIElementsTemporaryDisabled">
            <summary>
            Tells if the UI elements must be disabled.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Font">
            <summary>Gets or sets viewport's font.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.SplitterMoving">
            <summary>
            When the viewport control is hosted inside a Grid control with GridSplitter an annoying repaint issue is present during GridSplitter moving.
            Setting properly this flag this can be avoided.</summary>
            <example>
            The following code fragment demonstrates the usage of the SplitterMoving flag to avoid the SplitControl repaint issue during GridSplitter moving.
            <code lang="CS">        
            private void GridSplitter1_PreviewMouseDown(object sender, MouseButtonEventArgs e)
            {        
            		MainViewport.SplitterMoving = true;                
            }
            private void GridSplitter1_PreviewMouseUp(object sender, MouseButtonEventArgs e)
            {        
            	MainViewport.SplitterMoving = false;
            }</code>
            <code lang="VB.NET">                
            Private Sub GridSplitter1_PreviewMouseDown(ByVal sender As System.Object, ByVal e As System.Windows.Input.MouseButtonEventArgs) Handles GridSplitter1.PreviewMouseDown        
                MainViewport.SplitterMoving = True        
            End Sub
            Private Sub GridSplitter1__PreviewMouseUp(ByVal sender As System.Object, ByVal e As System.Windows.Input.MouseButtonEventArgs) Handles GridSplitter1.PreviewMouseUp                
                MainViewport.SplitterMoving = False
            End Sub</code>
            </example>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ErrorInPaint">
            <summary>
            Gets a value indicating if an error occurred during paint.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.ErrorOccurred">
            <summary>
            Occurs when an error happens during the drawing.
            </summary>
            <remarks>When an error occurs during the drawing, to make the control usable again it's necessary to call the <see cref="M:devDept.Eyeshot.ViewportLayout.Clear"/></remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ViewportsGap">
            <summary>
            Gets or sets the gap between viewports.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.SelectionBoxColors">
            <summary>
            Gets or sets the colors used to draw the selection box and polygon.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.MagnifyingGlass">
            <summary>
            Gets or sets the settings for the magnifying glass displayed under the mouse cursor.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.UseFrameBufferObject">
            <summary>
            When true the frame buffer objects are used. Affects the quality of Realistic shadows. For debugging purpose only.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.IsBusy">
            <summary>
            Gets background worker thread status.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.WorkCompleted">
            <summary>
            Occurs when the background work has completed.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.WorkCancelled">
            <summary>
            Occurs when the background work is cancelled.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.WorkFailed">
            <summary>
            Occurs when the background work has failed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Rotate">
            <summary>
            Gets or sets the Rotate settings in the active viewport.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Zoom">
            <summary>
            Gets or sets the Zoom settings in the active viewport.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Pan">
            <summary>
            Gets or sets the Pan settings of the active viewport.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.PickBoxSize">
            <summary>Gets or sets the pick box size.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.MultipleSelection">
            <summary>
            If true, the selection ActionModes work as if the Control key was pressed, selecting multiple entities.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ActionMode">
            <summary>
            Gets or sets the active viewport action. 
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.CameraMoveBegin">
            <summary>
            Occurs when a camera Zoom/Pan/Rotate camera movement begins.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.CameraMoveEnd">
            <summary>
            Occurs when a Zoom/Pan/Rotate camera movement ends.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Viewports">
            <summary>
            Get or sets the list of viewports.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ActiveViewport">
            <summary>
            The active viewport index.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout._setViewportsForDesignTime">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout._restoreViewportsForDesignTime">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.DisplayMode">
            <summary>
            Gets or sets the active display mode in the active viewport.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.InitialView">
            <summary>
            Gets or sets the active initial view in the active viewport.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Camera">
            <summary>
            Gets or sets the camera settings in the active viewport.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ShowVertices">
            <summary>
            If true, the model vertices are displayed in the active viewport.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ShowVertexIndices">
            <summary>
            Gets or sets the vertex indices visualization flag in the active viewport (meaningful only if <see cref="P:devDept.Eyeshot.Viewport.ShowVertices"/> is also true).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.BoundingBox">
            <summary>
            Bounding box settings.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.AutoHideLabels">
            <summary>
            Gets or sets the auto hide labels flag in the active viewport. If true labels are hidden automatically when behind the model.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Labels">
            <summary>Gets or sets the master label collection in the active viewport.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ShowLabels">
            <summary>
            Gets or sets the labels visibility status in the active viewport.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ToolBar">
            <summary> 
             Gets or sets the ToolBar settings in the active viewport.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ButtonStyle">
            <summary>
            Gets or sets the style used by the <see cref="P:devDept.Eyeshot.ViewportLayout.ToolBar"/> and <see cref="P:devDept.Eyeshot.ViewportLayout.ProgressBar"/> buttons.
            </summary>
            <remarks>You need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Light1">
            <summary>
            Light 1 attribute.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Light2">
            <summary>
            Light 2 attribute.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Light3">
            <summary>
            Light 3 attribute.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Light4">
            <summary>
            Light 4 attribute.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Light5">
            <summary>
            Light 5 attribute.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Light6">
            <summary>
            Light 6 attribute.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Light7">
            <summary>
            Light 7 attribute.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Light8">
            <summary>
            Light 8 attribute.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.AmbientLight">
            <summary>
            Gets or sets the ambient light intensity.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.DefaultMaterial">
            <summary>
            Gets or sets the default material attributes used by the entities without their own material.
            </summary>
            <remarks>Only <see cref="P:devDept.Graphics.Material.Ambient"/>, <see cref="P:devDept.Graphics.Material.Specular"/> and <see cref="P:devDept.Graphics.Material.Shininess"/> are used.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.GroundPlaneDistance">
            <summary>
            Gets or sets the distance between the ground plane and the model's bounding box expressed as a fraction of the model height. 
            </summary>
            <remarks>This distance is use to compute the plane used by the planar reflections and the planar shadows</remarks>
            <seealso cref="P:devDept.Eyeshot.DisplayModeSettingsRendered.PlanarReflections"/>
            <seealso cref="P:devDept.Eyeshot.DisplayModeSettingsShaded.ShadowMode"/>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.PlanarShadowOpacity">
            <summary>
            Gets or sets the planar shadow's opacity. 
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ClippingPlane1">
            <summary>
            Clipping plane 1 attributes.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ClippingPlane2">
            <summary>
            Clipping plane 2 attributes.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ClippingPlane3">
            <summary>
            Clipping plane 3 attributes.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ClippingPlane4">
            <summary>
            Clipping plane 4 attributes.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ClippingPlane5">
            <summary>
            Clipping plane 5 attributes.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ClippingPlane6">
            <summary>
            Clipping plane 6 attributes.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ViewportBorder">
            <summary>
            Gets or sets the border settings.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Backface">
            <summary>
            Gets or sets the backface settings, shared by all viewports. This settings don't apply to multicolor entities like <see cref="!:devDept.Eyeshot.Entities.RichMesh"/> for example.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.SelectionColor">
            <summary>
            Gets or sets the color of selected entities, shared by all viewports.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Wireframe">
            <summary>
            Gets or sets the display settings for Wireframe mode, shared by all viewports.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Shaded">
            <summary>
            Gets or sets the display settings for Shaded mode, shared by all viewports.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Flat">
            <summary>
            Gets or sets the display settings for Flat mode, shared by all viewports.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.Rendered">
            <summary>
            Gets or sets the display settings for Rendered mode, shared by all viewports.
            </summary>
            <remarks>Call <see cref="!:ViewportLayout.CompileUserInterfaceElemen"/></remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.OrientationMode">
            <summary>
            Gets or sets the coordinate system orientation mode.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ShowFps">
            <summary>
            Gets or sets the frame per second rate text visibility status.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.WaitCursorMode">
            <summary>
            Gets or sets the wait cursor mode. Controls if and when the wait cursor is displayed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.AskForDirect3DLevel9_3">
            <summary>
            If true, The Direct3D feature level 9_3 is requested during viewport initialization instead of the highest feature level available.
            </summary>
            <remarks>Used for compatibility problems with old cards.</remarks>
            <remarks>Has no effect at runtime.</remarks>
            <remarks>Direct3D feature level 9_3 has some limitations and does not support all the features of higher profiles</remarks>
            <remarks>Applies only to <see cref="!:rendererType.Direct3D"/> renderer.</remarks>
            <seealso cref="!:ViewportLayout.Renderer"/>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.AskForFsaa">
            <summary>
            If true, Full Screen Anti-Aliasing modes are requested during viewport initialization. 
            The number of samples can be set with the <see cref="P:devDept.Eyeshot.ViewportLayout.FsaaSamples"/> property.
            </summary>
            <remarks>Has no effect at runtime for the OpenGL renderer.</remarks>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.IsFsaaAvailable"/>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.AntiAliasing">
            <summary>
            Gets or sets a value indicating if full screen anti-aliasing is enabled.
            </summary>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.IsFsaaAvailable">IsFsaaAvailable Property</seealso>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.AskForFsaa">AskForFSAA Property</seealso>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.FsaaSamples">
            <summary>
            Gets or sets the number of desired samples for Full Screen Anti-Aliasing.
            The Full Screen Anti-alasing can be set with the <see cref="P:devDept.Eyeshot.ViewportLayout.AskForFsaa"/> property.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.MaxTextureSize">
            <summary>
            Gets the maximum texture size allowed on current OpenGL implementation (in pixel).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.RendererName">
            <summary>
            Gets the name of the renderer. This name is typically specific to a particular configuration of a hardware platform. It does not change from release to release. 
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.RendererVersion">
            <summary>
            Gets graphics API version.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.HideSmall">
            <summary>
            If true, entities with a size on screen less than SmallSize are not drawn.
            </summary>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.SmallSize">SmallSize Property</seealso>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.MinimumFramerate">
            <summary>
            The minium acceptable framerate for dynamic movements.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.MaxPatternRepetitions">
            <summary>
            Gets or sets the maximum number of pattern repetitions allowed between two vertices of a curve.
            </summary>
            <remarks>Over this bias the line is drawn continuous without pattern. <seealso cref="P:devDept.Eyeshot.Entities.Entity.LineTypePattern"/></remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.SmallSize">
            <summary>
            Gets or sets the size (in pixel) of small entities.
            </summary>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.HideSmall">HideSmall Property</seealso>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.IsInFrustumMode">
            <summary>
            Gets or sets the modality used by IsInFrustum() method.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.HiddenLines">
            <summary>
            Sets the Hidden Lines options.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ProgressBar">
            <summary>
            Gets or sets the progress bar settings.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ShowNormals">
            <summary>
            Gets or sets the normals visibility status.
            </summary>
            <seealso cref="!:NormalLength"/>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.FramesPerSecond">
            <summary>
            Gets current frames per second rate.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.AccurateTransparency">
            <summary>
            When true, the Accurate Transparency mode is activated. Accurate Transparency provides slower but more accurate semi-transparent object drawing
            with support for non-concave objects and for objects intersection.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.AllocatedCharDefs">
            <summary>
            Gets the number of loaded character definitions.
            </summary>
            <returns>The character definitons count.</returns>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ObjectManipulator">
            <summary>
            The manipulator used to graphically position the selected entities.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.PrintResolution">
            <summary>Print resolution (dpi).</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.PrintDocumentName">
            <summary>Print document name. It also appears during print preview preparation.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.AnimationStep">
            <summary>Gets or sets the animation step that increments the <see cref="P:devDept.Eyeshot.ViewportLayout.AnimationFrameNumber"/> at each tick of the animation timer. Can be a negative number.</summary>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StartAnimation(System.Int32)">StartAnimation Method</seealso>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StopAnimation">StopAnimation Method</seealso>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.AnimationInterval">
            <summary>Gets or sets the animation interval.</summary>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StartAnimation(System.Int32)">StartAnimation Method</seealso>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StopAnimation">StopAnimation Method</seealso>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.AnimationFrameNumber">
            <summary>Gets or sets the animation frame number.</summary>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StartAnimation(System.Int32)">StartAnimation Method</seealso>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StopAnimation">StopAnimation Method</seealso>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.ViewChanged">
            <summary>
            Occurs when the <see cref="M:devDept.Eyeshot.ViewportLayout.SetView(devDept.Eyeshot.viewType)"/> is called.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.SelectionChanged">
            <summary>
            Occurs when entity selection has changed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.KeepSceneUpright">
            <summary>
            Gets or sets a flag that keeps the scene upright when doing SetView operations or clicking on the <see cref="T:devDept.Eyeshot.ViewCubeIcon"/> faces.
            </summary>
            <remarks>If false, the SetView operations and the mouse clicks on the ViewCubeIcon set the orientation with the up-vector closest to the current one.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.AnimateCamera">
            <summary>
            If true, animates the camera in the commands that change its position or orientation.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.AnimateCameraDuration">
            <summary>
            Gets or sets the duration in milliseconds of the camera animations.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ShortcutKeys">
            <summary>
            Gets or sets the keyboard shortcuts.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ViewportLayout.NavigationTimerTick">
            <summary>
            Occurs during the scene navigation with the keyboard.
            </summary>
            <remarks>Each key press of the navigation keys starts a small animation to move the camera. Subscribe to this event do something each time the camera is moved.</remarks>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.ShortcutKeys"/>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ShowCurveDirection">
            <summary>
            If true, curve direction is displayed.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.ProgressChangedEventHandler">
            <summary>Represents the method that will handle the <see cref="E:devDept.Eyeshot.ViewportLayout.ProgressChanged"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:devDept.Eyeshot.ProgressChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.ErrorOccurredEventArgs">
            <summary>Provides data for the <see cref="E:devDept.Eyeshot.ViewportLayout.ErrorOccurred"/> event.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ErrorOccurredEventArgs.Message">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ErrorOccurredEventArgs.StackTrace">
            <summary>
            Gets the stack trace of the error.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.ErrorEventHandler">
            <summary>Represents the method that will handle the <see cref="E:devDept.Eyeshot.ViewportLayout.ErrorOccurred"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="E:devDept.Eyeshot.ViewportLayout.ErrorOccurred"/> that contains the event data.</param>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.WorkCompletedEventHandler">
            <summary>Represents the method that will handle the <see cref="E:devDept.Eyeshot.ViewportLayout.WorkCompleted"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:devDept.Eyeshot.WorkCompletedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.WorkCancelledEventHandler">
            <summary>Represents the method that will handle the <see cref="E:devDept.Eyeshot.ViewportLayout.WorkCancelled"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.WorkFailedEventHandler">
            <summary>Represents the method that will handle the <see cref="E:devDept.Eyeshot.ViewportLayout.WorkFailed"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:devDept.Eyeshot.WorkFailedEventArgs"/> that contains the error message.</param>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.UIElementCursorManager">
            <summary>
            Manages cursor enter / exit on a UIElement
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.CameraMoveEventArgs">
            <summary>Provides data for the <see cref="E:devDept.Eyeshot.ViewportLayout.CameraMoveBegin"/> and <see cref="E:devDept.Eyeshot.ViewportLayout.CameraMoveEnd"/> events.</summary>    
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.CameraMoveEventArgs.ViewportIndex">
            <summary>
            Gets the index of the Viewport on which the Camera movement is performed.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.CameraMoveEventHandler">
            <summary>
             Represents the method that will handle the <see cref="E:devDept.Eyeshot.ViewportLayout.CameraMoveBegin"/> and <see cref="E:devDept.Eyeshot.ViewportLayout.CameraMoveEnd"/> events. 
            </summary>
             <param name="sender">The source of the event.</param>
             <param name="e">A <see cref="T:devDept.Eyeshot.ViewportLayout.CameraMoveEventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.DrawSceneParams">
            <summary>
            Class that holds the parameters used to draw the viewport.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.DrawSceneParams.UserInterfaceElement">
            <summary>
            If it's not null, then I'm drawing just this user interface element.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.DrawSceneParams.startZoomPt">
            <summary>
            Starting point for ReadViewport commands
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.DrawSceneParams.Rectangle">
            <summary>
            Used when drawing a portion of the viewport
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.DrawSceneParams.Entities">
            <summary>
            Gets or sets the list of entities to draw.
            </summary>
            <remarks>They can be sorted with the <see cref="M:devDept.Eyeshot.ViewportLayout.SortEntitiesForTransparency(devDept.Eyeshot.Viewport)"/></remarks>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.renderedDrawingType">
            <summary>
            Used to separate drawing of opaque entities and transparent entities in the shadow maps.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.renderedDrawingType.All">
            <summary>
            Draw all entities (opaque and transparent)
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.DrawBaseParams`3.CompileParamsForAttributes">
            <summary>
            for the compilation and regen of the attributes.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.DrawBaseParams`3.RegenParamsForAttributes">
            <summary>
            for the compilation and regen of the attributes.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.DrawForSelectionParams`1.Offset">
            <summary>
            Start index for the color coding of the entities.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.DrawForSelectionParams`1.SelectableOnly">
            <summary>
            When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/> property, otherwise no.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.GfxAttributes">
            <summary>
            Base class for attributes propagation.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.GfxAttributesColor">
            <summary>
            Class that propagates the color attribute.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.GfxAttributesWireMaterialOrColor">
            <summary>
            Class that propagates the lineWeight and material color, if material is present, else the color. Used for HDL.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.GfxAttributesWire">
            <summary>
            Class that propagates Color, LineWeight, LineTypePattern and LineTypePatternLength.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.GfxAttributesMaterialOrColor">
            <summary>
            Class that propagates the material color, if material is present, else the color. Used for edges and silhouettes.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.GfxAttributesColorAndMaterial">
            <summary>
            Class that propagates the material.diffuse attribute. Used for transparency.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.GfxAttributesHDL">
            <summary>
            Class that propagates the Color and sets the WireColor to the value of the Color.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.GfxAttributesHDL.WireColor">
            <summary>
            The color of the wireframe entities
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.GfxAttributesHDLMaterial">
            <summary>
            Class that propagates the Color and sets the WireColor to the value of the Color.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.GfxAttributesHDLSingleColor">
            <summary>
            Class that does not propagate anything.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.GfxAttributesRendered">
            <summary>
            Class that propagates also the Material.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.CameraEyePosType">
            <summary>
            Defines the position of the 3D camera.
            </summary>
            <remarks>Used for anaglyphic 3D.</remarks>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.parameterType.byChordalErr">
            <summary>
            Subdivided by chordal error.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.parameterType.byLength">
            <summary>
            Subdivided by length.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.ViewChangedEventArgs">
            <summary>
            Class that holds the arguments for <see cref="E:devDept.Eyeshot.ViewportLayout.ViewChanged"/> event.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ViewportLayout.ViewChangedEventArgs.#ctor(devDept.Eyeshot.viewType)">
            <summary>
            Standard constructor.
            </summary>
            <param name="viewType">One of the <see cref="T:devDept.Eyeshot.viewType"/> values that indicates which view was set</param>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.ViewChangedEventArgs.ViewType">
            <summary>
            Gets which view was set.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.ViewChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:devDept.Eyeshot.ViewportLayout.ViewChanged"/> event.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">A <see cref="T:devDept.Eyeshot.ViewportLayout.ViewChangedEventArgs"/> object that contains the event data</param>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.SelectionChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:devDept.Eyeshot.ViewportLayout.SelectionChanged"/> and  <see cref="E:devDept.Eyeshot.Viewport.LabelSelectionChanged"/>event. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.selectionEntityType">
            <summary>
            The selection entity mode.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.selectionEntityType.Entities">
            <summary>
            Selects the entities
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.selectionEntityType.ViewCube">
            <summary>
            Selects the viewcube parts
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.selectionEntityType.ObjectManipulator">
            <summary>
            Selects the object maniuplator parts
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ViewportLayout.selectionEntityType.Labels">
            <summary>
            Selects the labels
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.SelectionChangedEventArgs">
            <summary>Provides data for the <see cref="E:devDept.Eyeshot.ViewportLayout.SelectionChanged"/> event.</summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.SelectionChangedEventArgs.Added">
            <summary>
            Gets the list of entity indices added to selection.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ViewportLayout.SelectionChangedEventArgs.Removed">
            <summary>
            Gets the list of entity indices removed from selection.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportLayout.NavigationTimerHandler">
            <summary>Represents the method that will handle the <see cref="E:devDept.Eyeshot.ViewportLayout.NavigationTimerTick"/> event.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:devDept.Eyeshot.MultiTouch.MultiTouchEventHandler">
            <summary>
            Represents the method that will handle the multitouch events.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:devDept.Eyeshot.MultiTouch.MultiTouch.ProcessTouchDown(System.Object,devDept.Eyeshot.Multitouch.TouchEventArgs)">
            <summary>
            Processes a TouchDown event.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns>True if the selected entities are changed and a redraw is needed.</returns>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.TouchHandler">
            <summary>
            Handles touch events for a hWnd
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.TouchHandler.SetHWndTouchInfo">
            <summary>
            Register for touch event
            </summary>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.TouchHandler.WindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Intercept and fire touch events
            </summary>
            <param name="hWnd">The Windows Handle</param>
            <param name="msg">Windows Message</param>
            <param name="wparam">wParam</param>
            <param name="lparam">lParam</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.TouchHandler.DecodeMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Single,System.Single)">
            <summary>
            Decode the message and create a collection of event arguments
            </summary>
            <remarks>
            One Windows message can result a group of events
            </remarks>
            <returns>An enumerator of thr resuting events</returns>
            <param name="hWnd">the WndProc hWnd</param>
            <param name="msg">the WndProc msg</param>
            <param name="wParam">the WndProc wParam</param>
            <param name="lParam">the WndProc lParam</param>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchHandler.DisablePalmRejection">
            <summary>
            Enabling this flag disables palm rejection
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.TouchEventArgs">
            <summary>
            EventArgs passed to Touch handlers 
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.TouchEventArgs.#ctor(devDept.Eyeshot.Multitouch.IHwndWrapper,System.Single,System.Single,devDept.Eyeshot.Multitouch.Interop.TOUCHINPUT@)">
            <summary>
            Create new touch event argument instance
            </summary>
            <param name="hWndWrapper">The target control</param>
            <param name="dpiX"></param>
            <param name="dpiY"></param>
            <param name="touchInput">one of the inner touch input in the message</param>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.Location">
            <summary>
            Touch client coordinate in pixels
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.Id">
            <summary>
            A touch point identifier that distinguishes a particular touch input
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.Flags">
            <summary>
            A set of bit flags that specify various aspects of touch point
            press, release, and motion. 
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.Mask">
            <summary>
            mask which fields in the structure are valid
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.AbsoluteTime">
            <summary>
            touch event time
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.Time">
            <summary>
            touch event time from system up
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.ContactSize">
            <summary>
            the size of the contact area in pixels
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.IsPrimaryContact">
            <summary>
            Is Primary Contact (The first touch sequence)
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.IsTouchMove">
            <summary>
            Specifies that movement occurred
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.IsTouchDown">
            <summary>
            Specifies that the corresponding touch point was established through a new contact
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.IsTouchUp">
            <summary>
            Specifies that a touch point was removed
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.IsTouchInRange">
            <summary>
            Specifies that a touch point is in range
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.IsTouchNoCoalesce">
            <summary>
            specifies that this input was not coalesced.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.IsTouchPen">
            <summary>
            Specifies that the touch point is associated with a pen contact
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Multitouch.TouchEventArgs.IsTouchPalm">
            <summary>
            The touch event came from the user's palm
            </summary>
            <remarks>Set <see cref="!:DisablePalmRejection"/> to true</remarks>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Interop.TOUCHINPUT">
            <summary>
            Touch API defined structures [winuser.h]
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Interop.POINTS">
            <summary>
            A Simple POINTS Interop structure
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Interop.POINT">
            <summary>
            A Simple POINT Interop structure
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Interop.GESTURECONFIG">
            <summary>
            Gesture Config Interop Structure
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Interop.GESTUREINFO">
            <summary>
            Gesture Info Interop Structure
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Interop.Kernel32.GetCurrentThreadId">
            <summary>
            Get the native thread id
            </summary>
            <returns>Thread ID</returns>
        </member>
        <member name="T:devDept.Eyeshot.Multitouch.Win32Helper.Factory">
            <summary>
            A factory that creates touch or gesture handler for a HWnd based Window
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Multitouch.Win32Helper.Factory.CreateHandler``1(System.IntPtr)">
            <summary>
             A factory that creates touch or gesture handler for a HWnd based Window
            </summary>
            <remarks>We use factory to ensure that only one handler will be created for a window, since Gesture and Touch are mutually exclusive</remarks>
            <typeparam name="T">The handler type</typeparam>
            <param name="hWnd">The Windows handle that need touch or gesture events</param>
            <returns>TouchHandler or Gesture Handler</returns>
        </member>
        <member name="T:devDept.Eyeshot.ScreenLine">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ScreenLine.LineId">
            <summary>
            Used to recompose the split lines.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ScreenLine.Parents">
            <summary>
            Used to recompose the split lines.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.HiddenLinesViewSettings">
            <summary>
             Class that holds the settings and the result of hidden lines computation.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.HiddenLinesViewSettings.viewportLayout">
            <summary>
            ViewportLayout. To be used only in the <see cref="M:devDept.Eyeshot.HiddenLinesView.CollectData"/> to get the Text outlines.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.HiddenLinesViewSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="another">The other hiddenLinesViewSettings</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.ViewportLayout)">
            <summary>Standard constructor.
            </summary>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
             <remarks>Captures the active viewport using its camera, does not clip the area outside the viewport in orthographic.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout)">
            <summary>Standard constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
            <remarks>Uses the camera viewport, does not clip the area outside the viewport in orthographic.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double)">
            <summary>Standard constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
            <remarks>Uses the camera viewport, does not clip the area outside the viewport in orthographic.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
            <summary>Standard constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="penSilhouette">The pen used to draw silhouettes</param>
            <param name="penEdge">The pen used to draw edges</param>
            <param name="penWire">The pen used to draw wireframe</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
            <remarks>Uses the camera viewport, does not clip the area outside the viewport in orthographic.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean)">
            <summary>Standard constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="penSilhouette">The pen used to draw silhouettes</param>
            <param name="penEdge">The pen used to draw edges</param>
            <param name="penWire">The pen used to draw wireframe</param>
            <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
            <remarks>Uses the camera viewport, does not clip the area outside the viewport in orthographic.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
            <summary>Standard constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="penSilhouette">The pen used to draw silhouettes</param>
            <param name="penEdge">The pen used to draw edges</param>
            <param name="penWire">The pen used to draw wireframe</param>
            <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
            <param name="penHiddenSilhouette">The pen used to draw the hidden silhouettes</param>
            <param name="penHiddenEdge">The pen used to draw the hidden edges</param>        
            <param name="penHiddenWire">The pen used to draw the hidden wireframe</param>
            <remarks>Uses the camera viewport, does not clip the area outside the viewport in orthographic.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
            <summary>Standard constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="penSilhouette">The pen used to draw silhouettes</param>
            <param name="penEdge">The pen used to draw edges</param>
            <param name="penWire">The pen used to draw wireframe</param>
            <param name="keepEntityColor">If true, keeps the color of each entity</param>
            <param name="keepEntityLineWeight">If true, keeps the line weight of each entity</param>
            <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
            <param name="penHiddenSilhouette">The pen used to draw the hidden silhouettes</param>
            <param name="penHiddenEdge">The pen used to draw the hidden edges</param>        
            <param name="penHiddenWire">The pen used to draw the hidden wireframe</param>
            <remarks>Uses the camera viewport, does not clip the area outside the viewport in orthographic.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Boolean)" -->
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
            <summary>Extents Constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="extents">If true fits the model on view, else captures the whole viewport</param>
            <param name="penSilhouette">The pen used to draw silhouettes</param>
            <param name="penEdge">The pen used to draw edges</param>
            <param name="penWire">The pen used to draw wireframe</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean)">
            <summary>Extents Constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="extents">If true fits the model on view, else captures the whole viewport</param>
            <param name="penSilhouette">The pen used to draw silhouettes</param>
            <param name="penEdge">The pen used to draw edges</param>
            <param name="penWire">The pen used to draw wireframe</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
            <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
            <summary>Extents Constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="extents">If true fits the model on view, else captures the whole viewport</param>
            <param name="penSilhouette">The pen used to draw silhouettes</param>
            <param name="penEdge">The pen used to draw edges</param>
            <param name="penWire">The pen used to draw wireframe</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
            <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
             <param name="penHiddenSilhouette">The pen used to draw the hidden silhouettes</param>
             <param name="penHiddenEdge">The pen used to draw the hidden edges</param>
             <param name="penHiddenWire">The pen used to draw the hidden wireframe</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
            <summary>Extents Constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="extents">If true fits the model on view, else captures the whole viewport</param>
            <param name="penSilhouette">The pen used to draw silhouettes</param>
            <param name="penEdge">The pen used to draw edges</param>
            <param name="penWire">The pen used to draw wireframe</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
             <param name="keepEntityColor">If true, keeps the color of each entity</param>
             <param name="keepEntityLineWeight">If true, keeps the line weight of each entity</param>
            <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
             <param name="penHiddenSilhouette">The pen used to draw the hidden silhouettes</param>
             <param name="penHiddenEdge">The pen used to draw the hidden edges</param>
             <param name="penHiddenWire">The pen used to draw the hidden wireframe</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Drawing.RectangleF)">
            <summary>Window mode constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="window">The portion of the viewport to capture in screen coordinates (0 on top)</param>
            <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Drawing.RectangleF,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
            <summary>Window mode constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="window">The portion of the viewport to capture in screen coordinates (0 on top)</param>
            <param name="penSilhouette">The pen used to draw silhouettes</param>
            <param name="penEdge">The pen used to draw edges</param>
            <param name="penWire">The pen used to draw wireframe</param>
            <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>        
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Drawing.RectangleF,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean)">
            <summary>Window mode constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="window">The portion of the viewport to capture in screen coordinates (0 on top)</param>
            <param name="penSilhouette">The pen used to draw silhouettes</param>
            <param name="penEdge">The pen used to draw edges</param>
            <param name="penWire">The pen used to draw wireframe</param>
            <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>        
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Drawing.RectangleF,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
            <summary>Window mode constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="window">The portion of the viewport to capture in screen coordinates (0 on top)</param>
            <param name="penSilhouette">The pen used to draw silhouettes</param>
            <param name="penEdge">The pen used to draw edges</param>
            <param name="penWire">The pen used to draw wireframe</param>
            <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
             <param name="penHiddenSilhouette">The pen used to draw the hidden silhouettes</param>
             <param name="penHiddenEdge">The pen used to draw the hidden edges</param>
             <param name="penHiddenWire">The pen used to draw the hidden wireframe</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,System.Drawing.RectangleF,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
            <summary>Window mode constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="window">The portion of the viewport to capture in screen coordinates (0 on top)</param>
            <param name="penSilhouette">The pen used to draw silhouettes</param>
            <param name="penEdge">The pen used to draw edges</param>
            <param name="penWire">The pen used to draw wireframe</param>
             <param name="keepEntityColor">If true, keeps the color of each entity</param>
             <param name="keepEntityLineWeight">If true, keeps the line weight of each entity</param>
            <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
             <param name="penHiddenSilhouette">The pen used to draw the hidden silhouettes</param>
             <param name="penHiddenEdge">The pen used to draw the hidden edges</param>
             <param name="penHiddenWire">The pen used to draw the hidden wireframe</param>
        </member>
        <member name="F:devDept.Eyeshot.HiddenLinesViewSettings.Window">
            <summary>
            Area of the viewport to process in camera screen coordinates (0 on top).
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.HiddenLinesViewSettings.newOldViewportRatio">
            <summary>
            ConversionFactor between the viewport used internally for the computation and the original viewport.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double,devDept.Eyeshot.hiddenLinesViewType,System.Drawing.RectangleF,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
            <summary>General mode Constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="hdlViewMode">Determines which part of the scene will be considered </param>
            <param name="userWindow">The portion of the viewport to capture</param>
            <param name="penSilhouette">The pen used to draw silhouettes</param>
            <param name="penEdge">The pen used to draw edges</param>
            <param name="penWire">The pen used to draw wireframe</param>
            <param name="keepEntityColor">If true, keeps the color of each entity</param>
            <param name="keepEntityLineWeight">If true, keeps the line weight of each entity</param>
            <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
             <param name="penHiddenSilhouette">The pen used to draw the hidden silhouettes</param>
             <param name="penHiddenEdge">The pen used to draw the hidden edges</param>
             <param name="penHiddenWire">The pen used to draw the hidden wireframe</param>        
        </member>
        <member name="F:devDept.Eyeshot.HiddenLinesViewSettings.ControlSize">
            <summary>
            The size of the viewportlayout control.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.GetComputedData(System.Collections.Generic.List{devDept.Eyeshot.ScreenLine}@,System.Collections.Generic.List{devDept.Eyeshot.ScreenLine}@,System.Collections.Generic.List{devDept.Eyeshot.ScreenLine}@,System.Collections.Generic.List{devDept.Eyeshot.ScreenLine}@,System.Collections.Generic.List{devDept.Eyeshot.ScreenLine}@,System.Collections.Generic.List{devDept.Eyeshot.ScreenLine}@)">
            <summary>
            Gets the computed data.
            </summary>
            <param name="silho">The silhouettes</param>
            <param name="edges">The edges</param>
            <param name="wires">The wires</param>
            <param name="hiddenSilho">The hidden silhouettes</param>
            <param name="hiddenEdges">The hidden edges</param>
            <param name="hiddenWires">The hidden wires</param>
            <remarks>For internal use.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.PrintLines(System.Drawing.Graphics,System.Drawing.Pen,System.Collections.Generic.IList{devDept.Eyeshot.ScreenLine},System.Single)">
            <summary>Prints the computed lines.
            </summary>
            <param name="graphics">the graphics object</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.ViewToWorldConversion">
            <summary>
            Gets the conversion factor from view coordinates to world coordinates.
            </summary>
            <returns>The conversion factor</returns>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.ConvertToSegment2D(System.Collections.Generic.IList{devDept.Eyeshot.ScreenLine})">
            <summary>
            Converts a <see cref="T:devDept.Eyeshot.ScreenLine"/> collection to a <see cref="T:devDept.Geometry.Segment2D"/> collection.
            </summary>
            <param name="lines">The lines to convert</param>
            <returns>The <see cref="T:devDept.Geometry.Segment2D"/> collection.</returns>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.GetSilhouettes">
            <summary>
            The list of 2D segments representing the view silhouettes.
            </summary>
            <returns>A list of 2D segments</returns>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.GetEdges">
            <summary>
            The list of 2D segments representing the view edges.
            </summary>
            <returns>A list of 2D segments</returns>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.GetWires">
            <summary>
            The list of 2D segments representing the view wires.
            </summary>
            <returns>A list of 2D segments</returns>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.GetHiddenSilhouettes">
            <summary>
            The list of 2D segments representing the view hidden silhouettes.
            </summary>
            <returns>A list of 2D segments</returns>
            <remarks>They are available only if the <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepHiddenSegments"/> property is true</remarks>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.GetHiddenEdges">
            <summary>
            The list of 2D segments representing the view hidden edges.
            </summary>
            <returns>A list of 2D segments</returns>
            <remarks>They are available only if the <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepHiddenSegments"/> property is true</remarks>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.GetHiddenWires">
            <summary>
            The list of 2D segments representing the view hidden wires.
            </summary>
            <returns>A list of 2D segments</returns>
            <remarks>They are available only if the <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepHiddenSegments"/> property is true</remarks>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.PenSilhouette">
            <summary>
            The pen used to draw the silhouettes.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.PenEdge">
            <summary>
            The pen used to draw the edges.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.PenWire">
            <summary>
            The pen used to draw the wires.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.PenHiddenSilhouette">
            <summary>
            The pen used to draw the hidden silhouettes.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.PenHiddenEdge">
            <summary>
            The pen used to draw the hidden edges.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.PenHiddenWire">
            <summary>
            The pen used to draw the hidden wires.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepHiddenSegments">
            <summary>
            Tells if during the hidden lines computation the hidden segments must be preserved
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepEntityColor">
            <summary>
            If true, keeps the entity color.
            </summary>
            <seealso cref="P:devDept.Eyeshot.HiddenLinesViewSettings.TreatWhiteAsBlack"/>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepEntityLineWeight">
            <summary>
            If true, keeps the entity line weight method.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.IgnoreTransparency">
            <summary>
            If true, treats the transparent entities as if they are opaque, so they will hide the geometry behind.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.TreatWhiteAsBlack">
            <summary>
            If true and <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepEntityColor"/> is also true, treats white entities as if they were black.
            </summary>
            <seealso cref="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepEntityColor"/>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.Camera">
            <summary>
            Gets the camera.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.ViewBounds">
            <summary>
            Gets the viewport bounds.
            </summary>
        </member>
        <member name="T:StepTranslator.Trimmed_Curve">
            <summary>
            This class represents edge curve data from STEP specifications.
            It contains end points and link to geometry.
            </summary>
        </member>
        <member name="M:StepTranslator.Trimmed_Curve.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual edge data. 
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Viewport">
            <summary>
            Viewport settings.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.UpdateViewportLayout">
            <summary>
            Updates the viewport in both desing-time and run-time mode.
            If necessary adjust near and far planes to accomodate origin
            symbols of various sizes.            
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(devDept.Eyeshot.Viewport)">
            <summary>
            Shallow-copy constructor.
            </summary>
            <param name="other">The viewport whose data is copied to this</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Grid,devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings,devDept.Eyeshot.NavigationSettings)">
            <summary>
            Viewport constructor. (deprecated)
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="showVertexIndices">If true and <see cref="P:devDept.Eyeshot.Viewport.ShowVertices"/> is also true the model vertex indices are displayed</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="grid">Planar grid settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>
            <param name="navigation">Navigation settings</param>               
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Grid,devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings,devDept.Eyeshot.NavigationSettings,devDept.Eyeshot.viewType)">
            <summary>
            Viewport constructor.
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="showVertexIndices">If true and <see cref="P:devDept.Eyeshot.Viewport.ShowVertices"/> is also true the model vertex indices are displayed</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="grid">Planar grid settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>
            <param name="navigation">Navigation settings</param>       
            <param name="initialView">Initial View</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Grid,devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings)">
            <summary>
            Viewport constructor (deprecated).
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="showVertexIndices">If true and <see cref="P:devDept.Eyeshot.Viewport.ShowVertices"/> is also true the model vertex indices are displayed</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="grid">Planar grid settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>        
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Grid,devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings,devDept.Eyeshot.viewType)">
            <summary>
            Viewport constructor (deprecated).
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="showVertexIndices">If true and <see cref="P:devDept.Eyeshot.Viewport.ShowVertices"/> is also true the model vertex indices are displayed</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="grid">Planar grid settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>
            <param name="initialView">Initial View</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Grid,devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings)">
            <summary>
            Viewport constructor (deprecated).
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="grid">Planar grid settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>        
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Grid,devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings,devDept.Eyeshot.viewType)">
            <summary>
            Viewport constructor (deprecated).
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="grid">Planar grid settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>
            <param name="initialView">Initial View</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Grid},devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings)">
            <summary>
            Viewport constructor (deprecated).
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="grids">Planar grid settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>        
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Grid},devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings,devDept.Eyeshot.viewType)">
            <summary>
            Viewport constructor (deprecated).
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="grids">Planar grid settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>
            <param name="initialView">Initial View</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Grid},devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings)">
            <summary>
            Viewport constructor (deprecated).
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="showVertexIndices">If true and <see cref="P:devDept.Eyeshot.Viewport.ShowVertices"/> is also true the model vertex indices are displayed</param>
            <param name="grids">Planar grids settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>        
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Grid},devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings,devDept.Eyeshot.viewType)">
            <summary>
            Viewport constructor (deprecated).
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="showVertexIndices">If true and <see cref="P:devDept.Eyeshot.Viewport.ShowVertices"/> is also true the model vertex indices are displayed</param>
            <param name="grids">Planar grids settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>
            <param name="initialView">Initial View</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Grid},devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings,devDept.Eyeshot.NavigationSettings)">
            <summary>
            Viewport constructor. (deprecated)
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="showVertexIndices">If true and <see cref="P:devDept.Eyeshot.Viewport.ShowVertices"/> is also true the model vertex indices are displayed</param>
            <param name="grids">Planar grids settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>
            <param name="navigation">Settings for the <see cref="!:Camera.navigationType.Walk"/> and <see cref="!:Camera.navigationType.Fly"/> camera navigation modes</param>        
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Grid},devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings,devDept.Eyeshot.NavigationSettings,devDept.Eyeshot.viewType)">
            <summary>
            Viewport constructor.
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="showVertexIndices">If true and <see cref="P:devDept.Eyeshot.Viewport.ShowVertices"/> is also true the model vertex indices are displayed</param>
            <param name="grids">Planar grids settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>
            <param name="navigation">Settings for the <see cref="!:Camera.navigationType.Walk"/> and <see cref="!:Camera.navigationType.Fly"/> camera navigation modes</param>
            <param name="initialView">Initial View</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Grid},devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings,devDept.Eyeshot.NavigationSettings,devDept.Eyeshot.CoordinateSystemIcon,devDept.Eyeshot.ViewCubeIcon)">
            <summary>
            Viewport constructor. (deprecated)
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="showVertexIndices">If true and <see cref="P:devDept.Eyeshot.Viewport.ShowVertices"/> is also true the model vertex indices are displayed</param>
            <param name="grids">Planar grids settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>
            <param name="navigation">Settings for the <see cref="!:Camera.navigationType.Walk"/> and <see cref="!:Camera.navigationType.Fly"/> camera navigation modes</param>
            <param name="coordinateSystemIcon">The coordinate system icon</param>
            <param name="viewCubeIcon">The view cube icon</param>        
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Grid},devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings,devDept.Eyeshot.NavigationSettings,devDept.Eyeshot.CoordinateSystemIcon,devDept.Eyeshot.ViewCubeIcon,devDept.Eyeshot.viewType)">
            <summary>
            Viewport constructor.
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="showVertexIndices">If true and <see cref="P:devDept.Eyeshot.Viewport.ShowVertices"/> is also true the model vertex indices are displayed</param>
            <param name="grids">Planar grids settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>
            <param name="navigation">Settings for the <see cref="!:Camera.navigationType.Walk"/> and <see cref="!:Camera.navigationType.Fly"/> camera navigation modes</param>
            <param name="coordinateSystemIcon">The coordinate system icon</param>
            <param name="viewCubeIcon">The view cube icon</param>
            <param name="initialView">Initial View</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Grid},devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings,devDept.Eyeshot.NavigationSettings,devDept.Eyeshot.CoordinateSystemIcon,devDept.Eyeshot.ViewCubeIcon,devDept.Eyeshot.Viewport.SavedViewsManager)">
            <summary>
            Viewport constructor.
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="showVertexIndices">If true and <see cref="P:devDept.Eyeshot.Viewport.ShowVertices"/> is also true the model vertex indices are displayed</param>
            <param name="grids">Planar grids settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>
            <param name="navigation">Settings for the <see cref="!:Camera.navigationType.Walk"/> and <see cref="!:Camera.navigationType.Fly"/> camera navigation modes</param>
            <param name="coordinateSystemIcon">The coordinate system icon</param>
            <param name="viewCubeIcon">The view cube icon</param>
            <param name="savedViews">The saved views manager</param>        
        </member>
        <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,devDept.Eyeshot.ToolBar,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Grid},devDept.Eyeshot.OriginSymbol,System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings,devDept.Eyeshot.NavigationSettings,devDept.Eyeshot.CoordinateSystemIcon,devDept.Eyeshot.ViewCubeIcon,devDept.Eyeshot.Viewport.SavedViewsManager,devDept.Eyeshot.viewType)">
            <summary>
            Viewport constructor.
            </summary>
            <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
            <param name="size">Size of the viewport in pixels</param>
            <param name="background">Background settings</param>
            <param name="camera">Camera settings</param>
            <param name="toolBar">Toolbar settings</param>
            <param name="legends">Legends array</param>
            <param name="displayMode">Display mode</param>        
            <param name="showLabels">Labels visibility status</param>
            <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
            <param name="showVertices">If true, the model vertices are displayed</param>
            <param name="showVertexIndices">If true and <see cref="P:devDept.Eyeshot.Viewport.ShowVertices"/> is also true the model vertex indices are displayed</param>
            <param name="grids">Planar grids settings</param>
            <param name="originSymbol">Origin symbol settings</param>
            <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
            <param name="rotate">Rotate settings</param>
            <param name="zoom">Zoom settings</param>
            <param name="pan">Pan settings</param>
            <param name="navigation">Settings for the <see cref="!:Camera.navigationType.Walk"/> and <see cref="!:Camera.navigationType.Fly"/> camera navigation modes</param>
            <param name="coordinateSystemIcon">The coordinate system icon</param>
            <param name="viewCubeIcon">The view cube icon</param>
            <param name="savedViews">The saved views manager</param>
            <param name="initialView">Initial View</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SaveView(devDept.Eyeshot.Camera@)">
            <summary>
            Stores the current view. 
            </summary>
            <param name="saved">Will hold a copy of the active <see cref="P:devDept.Eyeshot.Viewport.Camera"/> object</param>
            <seealso cref="M:devDept.Eyeshot.Viewport.RestoreView(devDept.Eyeshot.Camera)"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RestoreView(devDept.Eyeshot.Camera)">
            <summary>
            Restores the previously saved view.
            </summary>
            <param name="saved">The <see cref="P:devDept.Eyeshot.Viewport.Camera"/> object previously initializiated by <see cref="M:devDept.Eyeshot.Viewport.SaveView(devDept.Eyeshot.Camera@)"/></param>
            <seealso cref="M:devDept.Eyeshot.Viewport.SaveView(devDept.Eyeshot.Camera@)"/>
            <remarks>If <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true, the operation animates the Camera using the time interval specified by <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCameraDuration"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RestoreViewInternal(devDept.Eyeshot.ViewportLayout,devDept.Eyeshot.Camera)">
            <summary>
            Restores the previously saved view.
            </summary>
            <param name="saved">The <see cref="P:devDept.Eyeshot.Viewport.Camera"/> object previously initializiated by <see cref="M:devDept.Eyeshot.Viewport.SaveView(devDept.Eyeshot.Camera@)"/></param>
            <seealso cref="M:devDept.Eyeshot.Viewport.SaveView(devDept.Eyeshot.Camera@)"/>        
            <remarks>If <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true, the operation animates the Camera using the time interval specified by <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCameraDuration"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.GetViewFrame">
            <summary>
            Gets the viewport bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.GetViewFrame(System.Int32)">
            <summary>
            Gets the viewport bounds.
            </summary>
            <returns></returns>
        </member>
        <member name="F:devDept.Eyeshot.Viewport.showLabels">
            <summary>
            Labels visibility status.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Viewport.grids">
            <summary>
            Planar grid settings.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Viewport._originSymbol">
            <summary>
            Origin symbol settings.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.GetCameraFrustum">
            <summary>
            Gets the planes of the viewport camera frustum.
            </summary>
            <returns>The camera frustum planes.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Eyeshot.viewType)">
            <summary>
            Sets the specified view.
            </summary>
            <param name="view">View type</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Eyeshot.viewType,System.Boolean,System.Boolean)">
            <summary>
            Sets the specified view.
            </summary>
            <param name="view">View type</param>
            <param name="fit">If true fits the view</param>
            <param name="animate">If true performs an animation when changing the view</param>                        
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Quaternion,System.Boolean,System.Boolean)">
            <summary>
            Sets the specified view.
            </summary>
            <param name="rotation">View rotation</param>
            <param name="fit">If true fits the view</param>
            <param name="animate">If true performs an animation when changing the view</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Eyeshot.viewType,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Sets the specified view.
            </summary>
            <param name="view">View type</param>
            <param name="fit">If true fits the view</param>
            <param name="margin">Pixels margin from the border, if <see cref="!:fit"/> is true</param>
            <param name="animate">If true performs an animation when changing the view</param>                
            <param name="selectedOnly">If <paramref name="fit"/> is true, fits only the selected entities</param>
            <param name="duration">Animation duration (use 0 to use the <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCameraDuration"/></param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Quaternion,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Sets the specified view.
            </summary>
            <param name="rotation">View rotation</param>
            <param name="fit">If true fits the view</param>
            <param name="margin">Pixels margin from the border, if <see cref="!:fit"/> is true</param>
            <param name="animate">If true performs an animation when changing the view</param>                
            <param name="selectedOnly">If <paramref name="fit"/> is true, fits only the selected entities</param>
            <param name="duration">Animation duration (use 0 to use the <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCameraDuration"/></param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SetViewInternal(devDept.Eyeshot.ViewportLayout,devDept.Eyeshot.viewType,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Sets the specified view.
            </summary>
            <param name="view">View type</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SetViewInternal(devDept.Eyeshot.ViewportLayout,devDept.Eyeshot.viewType,devDept.Geometry.Quaternion,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Sets the specified view.
            </summary>
            <param name="view">View type</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Quaternion,devDept.Geometry.Point3D,System.Double,System.Double)">
            <summary>
            Sets the specified view by doing an animation.
            </summary>
            <param name="rotation">The new camera rotation</param>
            <param name="target">The new cameratarget</param>
            <param name="distance">The new cameradistance</param>
            <param name="zoomFactor">The new camera zoomFactor</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.GetCameraRotation(devDept.Eyeshot.viewType,devDept.Geometry.Quaternion)">
            <summary>
            Gets the <see cref="P:devDept.Eyeshot.Camera.Rotation"/> <see cref="T:devDept.Geometry.Quaternion"/> that describes the orientation of the given view.
            </summary>
            <param name="view">The view to set</param>
            <param name="initialRotation">An extra rotation to apply to the final rotation</param>
            <returns>The <see cref="P:devDept.Eyeshot.Camera.Rotation"/> <see cref="T:devDept.Geometry.Quaternion"/>.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.AdjustUprightOrientation(devDept.Geometry.Quaternion@)">
            <summary>
            Adjusts the rotation so that the new camera up vector is closest to the current camera up vector.
            </summary>
            <param name="rotation">THe rotation to modify</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToViewport(System.Double@,System.Double@)">
            <summary>
            Converts Screen coordinates (0 on top of control) to viewport coordinates (0 on top of viewport)
            </summary>
            <param name="winx"></param>
            <param name="winy"></param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToViewport(System.Int32@,System.Int32@)">
            <summary>
            Converts Screen coordinates (0 on top of control) to viewport coordinates (0 on top of viewport)
            </summary>
            <param name="winx"></param>
            <param name="winy"></param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ViewportToScreen(System.Double@,System.Double@)">
            <summary>
            Converts Viewport coordinates (0 on top of viewport) to Screen coordinates (0 on top of control)
            </summary>
            <param name="winx"></param>
            <param name="winy"></param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ViewportToScreen(System.Int32@,System.Int32@)">
            <summary>
            Converts Viewport coordinates (0 on top of viewport) to Screen coordinates (0 on top of control)
            </summary>
            <param name="winx"></param>
            <param name="winy"></param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ViewportToCameraViewport(System.Drawing.Point)">
            <summary>
            Converts Viewport coordinates (0 on top of viewport) to Camera Viewport coordinates (0 on bottom of viewport)
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.CameraViewportToViewport(System.Drawing.Point)">
            <summary>
            Converts Camera Viewport coordinates (0 on bottom of viewport) to Viewport coordinates (0 on top of viewport)
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ViewportToCameraScreen(System.Drawing.Point)">
            <summary>
            Converts Viewport coordinates (0 on top of viewport) to Camera Screen coordinates (0 on bottom of control)
            </summary>
            <param name="pt">The point to convert</param>
            <returns>The point in camera screen coordinates</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.CameraScreenToViewport(System.Drawing.Point)">
            <summary>
            Converts Camera Screen coordinates (0 on bottom of control) to Viewport coordinates (0 on top of viewport)
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToViewport(System.Drawing.Point)">
            <summary>
            Converts Screen coordinates (0 on top of control) to Viewport coordinates (0 on top of viewport)
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToViewport(System.Drawing.PointF)">
            <summary>
            Converts Screen coordinates (0 on top of control) to Viewport coordinates (0 on top of viewport)
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ViewportToScreen(System.Drawing.Point)">
            <summary>
            Converts Viewport coordinates (0 on top of viewport) to Screen coordinates (0 on top of control)
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToCameraScreen(System.Drawing.Point)">
            <summary>
            Converts Screen coordinates (0 on top of control) to Camera Screen coordinates relative to the lower left corner of the control
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToCameraScreen(System.Drawing.PointF)">
            <summary>
            Converts Screen coordinates (0 on top of control) to Camera Screen coordinates relative to the lower left corner of the control
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.CameraScreenToScreen(System.Drawing.Point)">
            <summary>
            Converts Camera Screen coordinates (0 on bottom-left of control) to Screen coordinates (0 on top-left of control)
            </summary>
            <param name="pt"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.CameraViewportToScreen(System.Drawing.Point)">
            <summary>
            Converts a point in camera viewport coordinates to screen coordinates.
            </summary>
            <param name="pt">Point in camera viewport coordinates (0 on bottom left of the viewport)</param>
            <param name="viewFrame">The viewport bounds</param>
            <returns>The point in screen coordinates (0 on top).</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.CameraViewportToScreen(System.Drawing.Point,System.Int32[])">
            <summary>
            Converts a point in camera viewport coordinates to screen coordinates.
            </summary>
            <param name="pt">Point in camera viewport coordinates (0 on bottom left of the viewport)</param>
            <param name="viewFrame">The viewport bounds</param>
            <returns>The point in screen coordinates (0 on top).</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.Project(System.Int32,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Maps world coordinates to screen coordinates.
            </summary>
            <param name="controlHeight">The height of the viewport layout control</param>
            <param name="objx">The world X coordinates</param>
            <param name="objy">The world Y coordinates</param>
            <param name="objz">The world Z coordinates</param>
            <param name="winx">The computed window X coordinates</param>
            <param name="winy">The computed window Y coordinates (0 on bottom of viewport)</param>
            <param name="winz">The computed window Z coordinates</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.Project(System.Double[],System.Int32[],System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Maps world coordinates to screen coordinates.
            </summary>
            <param name="modelViewProj"></param>
            <param name="viewFrame">The camera viewport coordinates</param>
            <param name="objx">The world X coordinates</param>
            <param name="objy">The world Y coordinates</param>
            <param name="objz">The world Z coordinates</param>
            <param name="winx">The computed window X coordinates</param>
            <param name="winy">The computed window Y coordinates (0 on bottom of viewport)</param>
            <param name="winz">The computed window Z coordinates</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.Project(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32)">
            <summary>
            Projects a list of points on the screen.
            </summary>
            <returns>
            A list of 2D points. The origin point is the lower-left corner of the
            viewport.
            </returns>
            <param name="points">The list of points to project</param>
            <param name="controlHeight">The height of the viewport layout control </param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.UnProject(System.Int32,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Maps viewport coordinates to world coordinates.
            </summary>
            <param name="controlHeight">The height of the viewport layout control</param>
            <param name="winx">The screen X viewport coordinates to be mapped</param>
            <param name="winy">The screen Y viewport coordinates to be mapped (0 on bottom of viewport)</param>
            <param name="winz">The screen Z viewport coordinates to be mapped</param>
            <param name="objx">The computed world X coordinates</param>
            <param name="objy">The computed world Y coordinates</param>
            <param name="objz">The computed world Z coordinates</param>
            <returns>True if the operation succeeded, false otherwise</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.UnProject(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32)">
            <summary>
            Maps viewport coordinates to world coordinates.
            </summary>
            <returns>
            A list of 3D points in viewport coordinates. The origin point is the lower-left corner of the
            viewport.
            </returns>
            <param name="points">The list of points to unproject in viewport coordinates</param>
            <param name="controlHeight">The height of the viewport layout control </param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.UnProject(System.Int32[],System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Maps viewport coordinates to world coordinates.
            </summary>
            <param name="viewFrame">The viewport coordinates</param>
            <param name="winx">The screen X viewport coordinates to be mapped</param>
            <param name="winy">The screen Y viewport coordinates to be mapped</param>
            <param name="winz">The screen Z viewport coordinates to be mapped</param>
            <param name="objx">The computed world X coordinates</param>
            <param name="objy">The computed world Y coordinates</param>
            <param name="objz">The computed world Z coordinates</param>
            <returns>True if the operation succeeded, false otherwise</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToPlane(System.Drawing.Point,devDept.Geometry.Plane,devDept.Geometry.Point3D@)">
            <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
            <param name="mousePos">Mouse cursor position (zero on top)</param>
            <param name="plane">The plane</param>
            <param name="intPoint">The intersection point. null/Nothing if the plane perpendicular to the screen.</param>
            <returns>True if the mapping succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToPlane(System.Drawing.Point,devDept.Geometry.PlaneEquation,devDept.Geometry.Point3D@)">
            <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
            <param name="mousePos">Mouse cursor position (zero on top)</param>
            <param name="pe">The plane equation</param>
            <param name="intPoint">The intersection point. null/Nothing if the plane perpendicular to the screen.</param>
            <returns>True if the mapping succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToPlaneInternal(devDept.Eyeshot.ViewportLayout,System.Drawing.Point,devDept.Geometry.PlaneEquation,devDept.Geometry.Point3D@)">
            <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
            <param name="viewportLayout">The ViewportLayout control</param>
            <param name="mousePos">Mouse cursor position (zero on top)</param>
            <param name="pe">The plane equation</param>
            <param name="intPoint">The intersection point. null/Nothing if the plane perpendicular to the screen.</param>
            <returns>True if the mapping succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToPlane(System.Collections.Generic.IList{System.Drawing.Point},devDept.Geometry.Plane)">
            <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
            <param name="mousePointList">2D mouse point list (zero on top)</param>
            <param name="pe">The plane</param>
            <returns>The associated 3D world point list.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToPlane(System.Collections.Generic.IList{System.Drawing.Point},devDept.Geometry.PlaneEquation)">
            <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
            <param name="mousePointList">2D mouse point list (zero on top)</param>
            <param name="pe">The plane equation</param>
            <returns>The associated 3D world point list.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToPlaneInternal(devDept.Eyeshot.ViewportLayout,System.Collections.Generic.IList{System.Drawing.Point},devDept.Geometry.PlaneEquation)">
            <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
            <param name="viewportLayout">The ViewportLayout control</param>
            <param name="mousePointList">2D mouse point list (zero on top)</param>
            <param name="pe">The plane equation</param>
            <returns>The associated 3D world point list.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToWorld(System.Collections.Generic.IList{System.Drawing.Point})">
            <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
            <param name="mousePointList">2D mouse point list (zero on top)</param>
            <returns>The associated 3D world point list.</returns>
            <remarks>The depth is read from the depth buffer, so its precision affects accuracy.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToWorld(System.Drawing.Point)">
            <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
            <param name="mousePos">Mouse cursor position (zero on top)</param>
            <returns>The associated 3D world point.</returns>
            <remarks>The depth is read from the depth buffer, so its precision affects accuracy.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.WorldToScreen(devDept.Geometry.Point3D)">
            <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
            <param name="point">The 3D point to project on screen</param>
            <returns>The associated projected screen point (zero on bottom)</returns>
            <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.WorldToScreenInternal(devDept.Eyeshot.ViewportLayout,devDept.Geometry.Point3D)">
            <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
            <param name="point">The 3D point to project on screen</param>
            <returns>The associated projected screen point (zero on bottom)</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.WorldToScreen(System.Double,System.Double,System.Double)">
            <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
            <param name="x">3D point's x-coordinate</param>
            <param name="y">3D point's y-coordinate</param>
            <param name="z">3D point's z-coordinate</param>
            <returns>The associated projected screen point (zero on bottom).</returns>
            <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.WorldToScreenInternal(devDept.Eyeshot.ViewportLayout,System.Double,System.Double,System.Double)">
            <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
            <param name="viewportLayout"></param>
            <param name="x">3D point's x-coordinate</param>
            <param name="y">3D point's y-coordinate</param>
            <param name="z">3D point's z-coordinate</param>
            <returns>The associated projected screen point (zero on bottom).</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.WorldToScreen(System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
            <param name="pointList">3D point list</param>
            <returns>The associated projected screen point list (zero on bottom).</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.WorldToScreenInternal(devDept.Eyeshot.ViewportLayout,System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
            <param name="pointList">3D point list</param>
            <returns>The associated projected screen point list (zero on bottom).</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.AdjustNearAndFarPlanes">
            <summary>
            Adjusts camera near and far planes based on model extents and on origin symbol, grid and shadow visibility status.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.AdjustNearAndFarPlanes(System.Collections.Generic.List{devDept.Geometry.Point3D})">
            <summary>
            Adjusts camera near and far planes based on model extents and on origin symbol, grid and shadow visibility status.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.GetThumbnail(devDept.Eyeshot.Viewport,System.Drawing.Size,System.Drawing.Color)">
            <summary>
            Gets a bitmap of the user inteferace element.
            </summary>
            <param name="viewport">Unused</param>
            <param name="size">The desired bitmap size</param>
            <param name="backgroundColor">Unused</param>
            <returns></returns>
        </member>
        <member name="F:devDept.Eyeshot.Viewport.csIcon">
            <summary>
            Coordinate system icon settings.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Viewport._viewCubeIcon">
            <summary>
            View Cube icon settings.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.CompileUserInterfaceElements">
            <summary>
            Compiles 3D user interface elements like the origin symbol, the bitmap background, the FEM restraint and load symbols, etc.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.GetBitmapSizeToPrintInWorldUnits(System.Drawing.GraphicsUnit,devDept.Geometry.linearUnitsType,System.Double)">
            <summary>
            Gets the size to print the viewport so that world units in the model correspond to world units on paper.
            </summary>
            <param name="pageUnits">The units of the graphics used to paint the page</param>
            <param name="modelUnits">The units of the model</param>
            <param name="scale">The scale to apply to the drawing</param>
            <returns>The viewport size to use in the <see cref="M:devDept.Eyeshot.ViewportLayout.RenderToBitmap(System.Drawing.Size)"/> to print the scene so that the world units in the model correspond to world units on paper.</returns>
            <remarks>Applies to <see cref="F:devDept.Graphics.projectionType.Orthographic"/> camera ProjectionMode only.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.DrawLabels(devDept.Graphics.RenderContextBase)">
            <summary>
            Draws the labels.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ClippedByPlane(devDept.Geometry.Point3D)">
            <summary>
            Tells if a point is clipped by the clipping planes.
            </summary>
            <param name="pt">The point</param>
            <returns>True if the point is in the positive part of a clipping plane.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.ContentAlignment)">
            <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.ViewportLayout"/>'s client area.
            </summary>
            <param name="x">The text's x coordinate</param>
            <param name="y">The text's y coordinate (from the bottom of the viewport)</param>
            <param name="text">The text string to draw</param>
            <param name="textFont">The text font</param>
            <param name="textColor">The text color</param>
            <param name="textAlign">The text alignment</param>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DrawTextOutlined(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.ContentAlignment)"/>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.DrawImage(System.Int32,System.Int32,System.Drawing.Bitmap,System.Drawing.ContentAlignment,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment)">
            <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.ViewportLayout"/>'s client area.
            </summary>
            <param name="x">The text's x coordinate</param>
            <param name="y">The text's y coordinate (from the bottom of the viewport)</param>
            <param name="text">The text string to draw</param>
            <param name="textFont">The text font</param>
            <param name="textColor">The text color</param>
            <param name="fillColor">The background color (can be semi-transparent)</param>
            <param name="textAlign">The text alignment</param>
            <seealso cref="!:DrawTextOutlined"/>
            <seealso cref="!:DrawImage"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment,System.Drawing.RotateFlipType)">
            <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.ViewportLayout"/>'s client area.
            </summary>
            <param name="x">The text's x coordinate</param>
            <param name="y">The text's y coordinate (from the bottom of the viewport)</param>
            <param name="text">The text string to draw</param>
            <param name="textFont">The text font</param>
            <param name="textColor">The text color</param>
            <param name="fillColor">The background color (can be semi-transparent)</param>
            <param name="textAlign">The text alignment</param>
            <param name="rotateFlip">The text rotation</param>
            <seealso cref="!:DrawTextOutlined"/>
            <seealso cref="!:DrawImage"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.CompileBackground">
            <summary>
            Compiles the background, used by the designer.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.DrawBackground(devDept.Graphics.RenderContextBase,System.Int32,System.Drawing.RectangleF,System.Boolean,System.Single,System.Drawing.Color,System.Boolean)">
            <summary>
            Draw the gradient background.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.DrawBackground(System.Drawing.Size,devDept.Graphics.RenderContextBase,System.Boolean,System.Single,System.Drawing.Color)">
            <summary>Draws the viewport background.</summary>
            <example>
            The following code fragment demonstrates how to override the DrawBackground() method to draw a custom background.
            <code title="Example" description="" lang="CS">
            class MyViewport : Viewport
            {
                  protected override void DrawBackground()
                  {
                      // Draws standard background
                      base.DrawBackground();
             
                      // Draws a white rectangle with a margin of 50 pixel from the viewport's border
                      gl.Begin(gl.QUADS);
             
                      gl.Color3ub(255, 255, 255);
                      gl.Vertex2i(50, 50);
                      gl.Vertex2i(Width - 50, 50);
                      gl.Vertex2i(Width-50, Height -50);
                      gl.Vertex2i(50, Height - 50);
                      
                      gl.End();         
                  }
            }</code><code title="Example2" description="" lang="VB.NET">
            Class MyViewport
                Inherits Viewport
                Protected Overrides Sub DrawBackground()
                    ' Draws standard background
                    MyBase.DrawBackground()
             
                    ' Draws a white rectangle with a margin of 50 pixel from the viewport's border
                    gl.Begin(gl.QUADS)
             
                    gl.Color3ub(255, 255, 255)
                    gl.Vertex2i(50, 50)
                    gl.Vertex2i(Width - 50, 50)
                    gl.Vertex2i(Width - 50, Height - 50)
                    gl.Vertex2i(50, Height - 50)
             
                    gl.[End]()
                End Sub
            End Class
            </code></example>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.DrawOverlay(System.Single,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Draws ovelaying UI elements.
            </summary>
            <param name="drawScale">The drawing scale</param>
            <param name="zoomRect">The zoom rectange</param>
            <param name="activeViewport">Tells if the viewport is the active one</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Double)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> viewport scene. The image can be scaled even to a poster size one.</summary>
            <param name="drawScale">The bitmap scale</param>
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Double,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="drawScale">The bitmap scale</param>
            <param name="drawBackground">If false, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Double,System.Double,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="drawScale">The bitmap scale</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="drawBackground">If false, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.RectangleF,System.Double,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="rectangle">The rectangle of the viewport to capture in screen coordinates</param>
            <param name="drawScale">The bitmap scale</param>
            <param name="drawBackground">If false, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.RectangleF,System.Double,System.Double,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="rectangle">The rectangle of the viewport to capture in screen coordinates</param>
            <param name="drawScale">The bitmap scale</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="drawBackground">If false, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <returns>The 24-bit image.</returns>
            <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.Style"/> to <see cref="F:devDept.Graphics.backgroundStyleType.None"/>.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RenderToBitmapInternal(devDept.Eyeshot.Viewport.RenderToBitmapParams)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <returns>The 24-bit image.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.FitViewportSize(System.Drawing.Size,System.Drawing.Size,System.Double,System.Boolean)">
            <summary>
            Maximize the given size inside the parent size, keeping the aspect ratio.
            </summary>
            <param name="sizeToFit">THe size to maximize</param>
            <param name="containerSize">The container size</param>
            <param name="maxSize">Maximum size to constraint the maximization</param>
            <returns>The maximized size</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.Size,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="bitmapSize">The size in which the viewport will be fitted.</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration</param>
            <returns>The 24-bit image.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.Size,System.Double,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="bitmapSize">The size in which the viewport will be fitted.</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <returns>The 24-bit image.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.Size,System.Double,System.Boolean,System.Boolean)" -->
        <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.Rectangle,System.Drawing.Size,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="rectangle">The rectangle of the viewport to capture in screen coordinates</param>
            <param name="bitmapSize">The size in which the viewport will be fitted.</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <returns>The 24-bit image.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Viewport.RenderToTexture(devDept.Graphics.TextureBase,System.Drawing.Rectangle,System.Double,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Viewport.RenderToTexture(devDept.Graphics.TextureBase,System.Drawing.Rectangle,System.Double,System.Drawing.Color,System.Boolean)" -->
        <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.RectangleF,System.Drawing.Size,System.Double,System.Boolean)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="rectangle">The rectangle of the viewport to capture in screen coordinates</param>
            <param name="bitmapSize">The size in which the viewport will be fitted.</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <returns>The 24-bit image.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.RectangleF,System.Drawing.Size,System.Double,System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.RectangleF,System.Drawing.Size,System.Double,System.Drawing.Color,System.Boolean)" -->
        <member name="M:devDept.Eyeshot.Viewport.RenderToBitmapInternal(devDept.Eyeshot.Viewport.RenderToBitmapParams,System.Drawing.Size)">
            <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.ViewportLayout"/> scene. The image can be scaled even to a poster size one.</summary>
            <param name="bitmapSize">The size in which the viewport will be fitted.</param>
            <returns>The 24-bit image.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.WriteToFileRaster(System.Single,System.String,System.Drawing.Imaging.ImageFormat,System.Boolean)">
            <summary>Saves a raster image of the current viewport scene on disk.</summary>
            <param name="drawScale">The image scale</param>
            <param name="fileName">A string that contains the name of the file to which to save the raster image</param>
            <param name="format">The file format of the raster image</param>
            <param name="drawBackground">If false, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration</param>
            <remarks>The saved file will contain a 24-bit image.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.WriteToFileRaster(System.Single,System.Double,System.String,System.Drawing.Imaging.ImageFormat,System.Boolean)">
            <summary>Saves a raster image of the current viewport scene on disk.</summary>
            <param name="drawScale">The image scale</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="fileName">A string that contains the name of the file to which to save the raster image</param>
            <param name="format">The file format of the raster image</param>
            <param name="drawBackground">If false, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <remarks>The saved file will contain a 24-bit image.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.WriteToFileRasterInternal(devDept.Eyeshot.ViewportLayout,System.Single,System.Double,System.String,System.Drawing.Imaging.ImageFormat,System.Boolean,devDept.Graphics.RenderContextBase.drawSceneFuncDelegate)">
            <summary>Saves a raster image of the current viewport scene on disk.</summary>
            <param name="viewportLayout"></param>
            <param name="drawScale">The image scale</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="fileName">A string that contains the name of the file to which to save the raster image</param>
            <param name="format">The file format of the raster image</param>
            <param name="drawBackground">If false, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <remarks>The saved file will contain a 24-bit image.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.CopyToClipboardRaster(System.Single,System.Boolean)">
            <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
            <param name="drawScale">The image scale</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <remarks>The copied image will be a 24-bit bitmap.</remarks>
            <seealso cref="M:devDept.Eyeshot.Viewport.CopyToClipboardRaster(System.Single,System.Boolean)"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.CopyToClipboardRaster(System.Single,System.Double,System.Boolean)">
            <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
            <param name="drawScale">The image scale</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL)</param>
            <remarks>The copied image will be a 24-bit bitmap.</remarks>
            <seealso cref="M:devDept.Eyeshot.Viewport.CopyToClipboardRaster(System.Single,System.Boolean)"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.CopyToClipboardRasterInternal(devDept.Eyeshot.ViewportLayout,System.Single,System.Double,System.Boolean)">
            <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
            <param name="drawScale">The image scale</param>
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="drawBackground">If true, the drawing of the background is skipped</param>
            <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
            <remarks>The copied image will be a 24-bit bitmap.</remarks>
            <seealso cref="M:devDept.Eyeshot.Viewport.CopyToClipboardRaster(System.Single,System.Boolean)"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)">
            <summary>
            Zooms the view of the specified amount.
            </summary>
            <param name="dy">Zoom amount</param>
            <seealso cref="!:RotateCamera(Viewport,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Drawing.Point,System.Int32)">
            <summary>
            Zooms the view of the specified amount.
            </summary>
            <param name="mousePos">The screen point to keep fixed</param>
            <param name="dy">The zoom amount</param>
            <seealso cref="!:RotateCamera(Viewport,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32,System.Double)">
            <summary>
            Zooms the view of the specified amount.
            </summary>
            <param name="dy">Zoom amount</param>
            <param name="zoomSpeed">Zoom speed</param>
            <seealso cref="!:RotateCamera(Viewport,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ZoomCameraInternal(devDept.Eyeshot.ViewportLayout,System.Int32,System.Double)">
            <summary>
            Zooms the view of the specified amount
            </summary>
            <param name="viewportLayout"></param>
            <param name="dy">Zoom amount</param>
            <seealso cref="!:RotateCamera(Viewport,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ZoomWindow(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Zooms to the specified window.
            </summary>
            <param name="p1">Window's diagonal start point in screen coordinates</param>
            <param name="p2">Window's diagonal end point in screen coordinates</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ZoomWindowInternal(devDept.Eyeshot.ViewportLayout,System.Drawing.Point,System.Drawing.Point,System.Boolean)">
            <summary>
            Zooms to the specified window.
            </summary>
            <param name="viewportLayout"> </param>
            <param name="p1">Window's diagonal start point in screen coordinates</param>
            <param name="p2">Window's diagonal end point in screen coordinates</param>
            <param name="animate">If true performs an animation when changing the view</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ZoomFit">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ZoomFit(System.Int32)">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
            <param name="margin">Pixels margin from the border</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ZoomFit(System.Boolean,devDept.Eyeshot.Camera.perspectiveFitType)">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
            <param name="selectedOnly">If true, fits only selected entities.</param>
            <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ZoomFit(System.Boolean,devDept.Eyeshot.Camera.perspectiveFitType,System.Int32)">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
            <param name="selectedOnly">If true, fits only selected entities.</param>
            <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
            <param name="margin">Pixels margin from the border</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Boolean,devDept.Eyeshot.Camera.perspectiveFitType)">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
            <param name="entList">The list of entities to be fitted</param>
            <param name="selectedOnly">If true, fits only selected entities.</param>
            <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Boolean,devDept.Eyeshot.Camera.perspectiveFitType,System.Int32,System.Boolean)">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
            <param name="entList">The list of entities to be fitted</param>
            <param name="selectedOnly">If true, fits only selected entities.</param>
            <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
            <param name="margin">Pixels margin from the border</param>
            <param name="fitLabels">If true, fits also the labels</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ZoomFitInternal(devDept.Eyeshot.ViewportLayout,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Boolean,System.Boolean,devDept.Eyeshot.Camera.perspectiveFitType,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
            <param name="viewportLayout"> </param>
            <param name="entList">The list of entities to be fitted</param>
            <param name="fitLabels"></param>
            <param name="perspectiveFitMode"> </param>
            <param name="recurse"> </param>
            <param name="forceFitOnEntities"> </param>
            <param name="margin"></param>
            <param name="animate"></param>
            <param name="saveView"></param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.UpdateCenterOfRotationInternal(devDept.Eyeshot.ViewportLayout,System.Int32,System.Int32)">
            <summary>
            Forces the update of current center of rotation.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.UpdateCenterOfRotationInternal(devDept.Eyeshot.ViewportLayout,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Forces the update of current center of rotation on the specified window.
            </summary>
            <param name="viewportLayout"></param>
            <param name="p1">Window's diagonal start point in screen coordinates</param>
            <param name="p2">Window's diagonal end point in screen coordinates</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.UpdateCenterOfRotationInternal(devDept.Eyeshot.ViewportLayout,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates the center of rotation.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Pans the view from one screen point to the other.
            </summary>
            <param name="from">StartPoint point</param>
            <param name="to">End point</param>
            <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)"/>
            <seealso cref="!:RotateCamera()"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RotateCamera(System.Int32,System.Int32)">
            <summary>
            Rotates the view of the specified amount.
            </summary>
            <param name="dx">Horizontal rotation amount</param>
            <param name="dy">Vertical rotation amount</param>
            <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
            <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RotateCamera(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Rotates the view of the specified amount.
            </summary>
            <param name="dx">Horizontal rotation amount</param>
            <param name="dy">Vertical rotation amount</param>
            <param name="animate">If true performs an animation when changing the view</param>
            <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.OrientCamera(devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Orients the Camera between the two specified points.
            </summary>
            <param name="location">The new camera location</param>
            <param name="target">The new camera target</param>
            <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RotateCamera(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Rotates the view simulating the movement between two mouse position.
            </summary>
            <param name="mousePos1">The initial mouse position</param>
            <param name="mousePos2">The final mouse position</param>
            <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
            <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RotateCamera(System.Drawing.Point,System.Drawing.Point,System.Boolean)">
            <summary>
            Rotates the view simulating the movement between two mouse position.
            </summary>
            <param name="mousePos1">The initial mouse position</param>
            <param name="mousePos2">The final mouse position</param>
            <param name="animate">If true performs an animation when changing the view</param>
            <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RotateCamera(devDept.Geometry.Vector3D,System.Double,System.Boolean)">
            <summary>
            Rotates the view of the specified amount.
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="rotAngleInDegrees">Rotation amount</param>
            <param name="trackBall">If true, the rotation is applied after the current rotation, else it's applied before</param>
            <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RotateCamera(devDept.Geometry.Vector3D,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Rotates the view of the specified amount.
            </summary>
            <param name="axis">Rotation axis</param>
            <param name="rotAngleInDegrees">Rotation amount</param>
            <param name="trackBall">If true, the rotation is applied after the current rotation, else it's applied before</param>
            <param name="animate">If true performs an animation</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)">
            <summary>
            Rotates the view of the specified amount.
            </summary>
            <param name="last">Previous axis</param>
            <param name="current">Current axis</param>
            <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
            <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Boolean)">
            <summary>
            Rotates the view of the specified amount.
            </summary>
            <param name="last">Previous axis</param>
            <param name="current">Current axis</param>
            <param name="animate">If true performs an animation when changing the view</param>
            <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RotateCamera(devDept.Geometry.Vector3D,System.Boolean,System.Int32,System.Boolean)">
            <summary>Sets the view direction of the camera to the specified direction.</summary>
            <param name="direction">The new camera direction</param>
            <param name="fit">if true fits the scene in the viewport</param>
            <param name="margin">Pixels margin from the border, if <see cref="!:fit"/> is true</param>
            <param name="selectedOnly">If <paramref name="fit"/> is true, fits only the selected entities</param>
            <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true</remarks>
            <remarks>The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
            <remarks>Obsolete, use <see cref="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Vector3D,System.Boolean,System.Int32,System.Boolean)"/> instead.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Vector3D,System.Boolean,System.Int32,System.Boolean)">
            <summary>Sets the view direction of the camera to the specified direction.</summary>
            <param name="direction">The new camera direction</param>
            <param name="fit">if true fits the scene in the viewport</param>
            <param name="margin">Pixels margin from the border, if <see cref="!:fit"/> is true</param>
            <param name="selectedOnly">If <paramref name="fit"/> is true, fits only the selected entities</param>
            <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true</remarks>
            <remarks>The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Boolean,System.Int32,System.Boolean)">
            <summary>Sets the view direction of the camera to the specified direction.</summary>
            <param name="direction">The new camera direction</param>
            <param name="upVector">The camera up vector</param>
            <param name="fit">if true fits the scene in the viewport</param>
            <param name="margin">Pixels margin from the border, if <see cref="!:fit"/> is true</param>
            <param name="selectedOnly">If <paramref name="fit"/> is true, fits only the selected entities</param>
            <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/> is true</remarks>
            <remarks>The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SetViewInternal(devDept.Eyeshot.ViewportLayout,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>Sets the view direction of the camera to the specified direction.</summary>
            <param name="viewportLayout"></param>
            <param name="direction">The new camera direction</param>
            <param name="upVector">The up vector. Set to null to usethe default orientation mode up vectors.</param>
            <param name="fit"></param>
            <param name="margin"></param>
            <param name="selectedOnly"></param>
            <param name="skipAnimation">If true, skips the Animation, else uses the <see cref="P:devDept.Eyeshot.ViewportLayout.AnimateCamera"/></param>
            <remarks>The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RotateCamera(System.Drawing.Point)">
            <summary>Sets the view direction as the normal of the plane under the mouse cursor.</summary>
            <param name="mouseLocation">Location of the mouse</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.RotateCameraInternal(devDept.Eyeshot.ViewportLayout,System.Drawing.Point)">
            <summary>Sets the view direction as the normal of the plane under the mouse cursor.</summary>
            <param name="mouseLocation">Location of the mouse</param>
        </member>
        <member name="F:devDept.Eyeshot.Viewport.rotateSettings">
            <summary>
            Rotate settings.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Viewport.zoomSettings">
            <summary>
            Zoom settings.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Viewport.panSettings">
            <summary>
            Pan settings.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ScreenToViewport(System.Drawing.Point,System.Drawing.Point@)">
            <summary>
            Converts viewport layout screen coordinates to viewport coordinates.
            </summary>
            <param name="screenPoint">The coordinates of the point relative to the viewport layout</param>
            <param name="viewportPoint">The coordinates of the point relative to the viewport</param>
            <returns>True if the point is inside the viewport, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.ViewportToScreen(System.Drawing.Point,System.Drawing.Point@)">
            <summary>
            Converts viewport coordinates to viewport layout screen coordinates.
            </summary>
            <param name="viewportPoint">The coordinates of the point relative to the viewport</param>
            <param name="screenPoint">The coordinates of the point relative to the viewport layout</param> 
            <returns>True if the point is inside the viewport, false otherwise.</returns>
        </member>
        <member name="E:devDept.Eyeshot.Viewport.UpdateGraphics">
            <summary>
            Occurs when graphics is updated.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.Disposed">
            <summary>
            Gets a boolean indicating whether the viewport has been disposed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.SavedViews">
            <summary>
            Gets or sets the manager of the saved views.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.Location">
            <summary>
            The coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.Size">
            <summary>
            The size of the viewport in pixels.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.Camera">
            <summary>
            Gets or sets the Camera settings.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.ToolBar">
            <summary> 
             Gets or sets the ToolBar settings.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.DisplayMode">
            <summary>
            Gets or sets the active display mode.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.InitialView">
            <summary>
            Gets or sets the active initial view.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.ShowLabels">
            <summary>
            Labels visibility status.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.ShowVertices">
            <summary>
            If true, the model vertices are displayed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.ShowVertexIndices">
            <summary>
            If true, the model vertices are displayed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.AutoHideLabels">
            <summary>
            Gets or sets the auto hide labels flag. If true labels are hidden automatically when behind the model.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.Grid">
            <summary>
            Gets the first planar grids settings.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.Grids">
            <summary>
            Gets or sets the planar grids settings.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.OriginSymbol">
            <summary>
            Gets or sets the origin symbol settings.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.Legends">
            <summary>
            Gets or sets the legend objects.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.Background">
            <summary>
            Gets or sets the background settings.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Viewport.LabelSelectionChanged">
            <summary>
            Occurs when label selection has changed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.CoordinateSystemIcon">
            <summary>
            Gets or sets the coordinate system icon settings.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.ViewCubeIcon">
            <summary>
            Gets or sets the view cube icon settings.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Viewport.ViewSaved">
            <summary>
            Occurs when a view is saved in the <see cref="T:devDept.Eyeshot.Viewport.SavedViewsManager"/>.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.Viewport.ViewRestored">
            <summary>
            Occurs when a view is restored from the <see cref="T:devDept.Eyeshot.Viewport.SavedViewsManager"/>.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.SortLabels">
            <summary>
            Sorts the Labels using the depth from the viewer.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.Labels">
            <summary>Master label collection.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.Rotate">
            <summary>
            Gets or sets the Rotate settings.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.CenterOfRotation">
            <summary>
            Gets the current center of rotation.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.Navigation">
            <summary>
            Gets or sets the Navigation settings for the <see cref="!:Camera.navigationType.Walk"/> and <see cref="!:Camera.navigationType.Fly"/> camera navigation modes.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.Zoom">
            <summary>
            Gets or sets the Zoom settings.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.Pan">
            <summary>
            Gets or sets the Pan settings.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Viewport.SavedViewsManager">
            <summary>
            Class that manages the saved views stack.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.#ctor(devDept.Eyeshot.Viewport.SavedViewsManager)">
            <summary>
            Copy constructor.
            </summary>
            <param name="another">The other SavedViewsManager</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.Clear">
            <summary>
            Clears the stack of saved views.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.Suspend">
            <summary>
            Suspends the automatic saving of the views.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.Resume">
            <summary>
            Resumes the automatic saving of the views.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.Save">
            <summary>
            Saves the current view on the stack.
            </summary>
            <seealso cref="M:devDept.Eyeshot.Viewport.SavedViewsManager.Previous"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.SavedViewsManager.Next"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.Previous">
            <summary>
            Restores the previous view on the stack.
            </summary>
            <seealso cref="M:devDept.Eyeshot.Viewport.SavedViewsManager.Save"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.SavedViewsManager.Next"/>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.Next">
            <summary>
            Restores the next view on the stack.
            </summary>
            <seealso cref="M:devDept.Eyeshot.Viewport.SavedViewsManager.Save"/>
            <seealso cref="M:devDept.Eyeshot.Viewport.SavedViewsManager.Previous"/>            
        </member>
        <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.NumberOfPrevious">
            <summary>
            Gets the number of the previous views saved in the stack.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.NumberOfNext">
            <summary>
            Gets the number of the next views saved in the stack.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.MaximumNumber">
            <summary>
            Gets or sets the maximum number of saved views.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs">
            <summary>
            Class that holds data for <see cref="E:devDept.Eyeshot.Viewport.ViewSaved"/> and <see cref="E:devDept.Eyeshot.Viewport.ViewRestored"/> events.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.#ctor(devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs)">
            <summary>
            Copy constructor.
            </summary>
            <param name="another">The other object</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.#ctor(devDept.Eyeshot.Camera)">
            <summary>
            Standard constructor.
            </summary>
            <param name="camera">The camera</param>
        </member>
        <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.Restore(devDept.Eyeshot.Camera)">
            <summary>
            Assigns the saved data to the camera.
            </summary>
            <param name="camera">Camera</param>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.Target">
            <summary>
            Gets or sets the camera target.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.Rotation">
            <summary>
            Gets or sets the camera rotation.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.Distance">
            <summary>
            Gets or sets the camera distance.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.ProjectionMode">
            <summary>
            Gets or sets the camera projection mode.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.ZoomFactor">
            <summary>
            Gets or sets the camera zoom factor.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Viewport.ViewSavedEventHandler">
            <summary>
            Represents a method that will handle the <see cref="E:devDept.Eyeshot.Viewport.ViewSaved"/> event.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">A <see cref="T:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs"/> that contains the event data</param>
        </member>
        <member name="T:devDept.Eyeshot.Viewport.ViewRestoredHandler">
            <summary>
            Represents a method that will handle the <see cref="E:devDept.Eyeshot.Viewport.ViewRestored"/> event.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">A <see cref="T:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs"/> that contains the event data</param>
        </member>
        <member name="F:devDept.Eyeshot.Viewport.RenderToBitmapParams.UserInterfaceElementToDraw">
            <summary>
            If it's not null, then I'm drawing just this user interface element.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ViewportList">
            <summary>
            Class that holds and manages the list of Viewports.
            </summary>
        </member>
        <member name="T:devDept.Geometry.AnalyticSurf">
            <summary>
            Base class for analytic surfaces.
            </summary>
        </member>
        <member name="M:devDept.Geometry.AnalyticSurf.#ctor(System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="index">The surface index, when available from import of standard CAD file formats.</param>
        </member>
        <member name="M:devDept.Geometry.AnalyticSurf.#ctor(devDept.Geometry.AnalyticSurf)">
            <summary>
            Copy constructor.
            </summary>
            <param name="another">The other analytic surface object</param>
        </member>
        <member name="M:devDept.Geometry.AnalyticSurf.Clone">
            <summary>
            Creates a deep copy of this analytic surface.
            </summary>
            <returns>The new analytic surface object.</returns>
        </member>
        <member name="M:devDept.Geometry.AnalyticSurf.GetSurface(devDept.Eyeshot.Entities.ICurve[],System.Boolean)">
            <summary>
            Returns the trimmed surface(s).
            </summary>
            <returns>The resulting trimmed surface(s).</returns>
        </member>
        <member name="M:devDept.Geometry.AnalyticSurf.GetUntrimmed(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Boolean)">
            <summary>
            Gets the untrimmed parametric surface.
            </summary>
            <param name="edgeCurves">A collection of individual edge curves not organized into composite curves</param>
            <param name="sense">The surface sense, true for same sense.</param>
            <returns>The resulting untrimmed surface.</returns>
        </member>
        <member name="M:devDept.Geometry.AnalyticSurf.GetVisualRep(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
            <summary>
            Gets a visual representation of the analytic surface.
            </summary>
            <param name="trimLoops">A list of contours that define the analytic surface bounds</param>
            <param name="entList">The list of entities where the visual representation of this analytic surface will be added</param>
        </member>
        <member name="M:devDept.Geometry.AnalyticSurf.TransformBy(devDept.Geometry.Transformation)">
            <summary>
            Transforms this analytic surface by the provided transformation.
            </summary>
            <param name="transform">The transformation</param>
        </member>
        <member name="P:devDept.Geometry.AnalyticSurf.Index">
            <summary>
            Gets surface index, when available from import of standard CAD file formats.
            </summary>
        </member>
        <member name="P:devDept.Geometry.AnalyticSurf.HasSeam">
            <summary>
            Returns true when the surface has one or two seams.
            </summary>
            <value>True in case of closed surfaces.</value>
        </member>
        <member name="T:devDept.Geometry.TabulatedSurf">
            <summary>
            Analytic tabulated surface definition.
            </summary>
        </member>
        <member name="M:devDept.Geometry.TabulatedSurf.#ctor(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Vector3D,System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="directrix">The extrusion amount</param>
            <param name="generatrix">The base curve</param>
            <param name="index">The surface index, when available from import of standard CAD file formats.</param>
        </member>
        <member name="P:devDept.Geometry.TabulatedSurf.Generatrix">
            <summary>
            Gets tabulated surface generatrix 3D vector.
            </summary>
        </member>
        <member name="P:devDept.Geometry.TabulatedSurf.Directrix">
            <summary>
            Gets tabulated surface curve.
            </summary>
        </member>
        <member name="T:devDept.Geometry.NurbsSurf">
            <summary>
            Analytic nurbs surface definition.
            </summary>
        </member>
        <member name="M:devDept.Geometry.NurbsSurf.#ctor(System.Int32,System.Double[],System.Int32,System.Double[],devDept.Geometry.Point4D[0:,0:],System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="uDegree">Surface degree in the U parametric direction</param>
            <param name="uKnotVector">Knot vector in the U parametric direction</param>
            <param name="vDegree">Surface degree in the V parametric direction</param>
            <param name="vKnotVector">Knot vector in the V parametric direction</param>
            <param name="ctrlPoints">Surface control points</param>
        </member>
        <member name="P:devDept.Geometry.NurbsSurf.DegreeU">
            <summary>
            Gets the surface degree in U direction.
            </summary>
        </member>
        <member name="P:devDept.Geometry.NurbsSurf.DegreeV">
            <summary>
            Gets the surface degree in V direction.
            </summary>
        </member>
        <member name="P:devDept.Geometry.NurbsSurf.KnotVectorU">
            <summary>
            Gets the surface knot vector in U direction.
            </summary>
        </member>
        <member name="P:devDept.Geometry.NurbsSurf.KnotVectorV">
            <summary>
            Gets the surface knot vector in V direction.
            </summary>
        </member>
        <member name="P:devDept.Geometry.NurbsSurf.ControlPoints">
            <summary>
            Gets the surface control point net.
            </summary>
        </member>
        <member name="T:devDept.Geometry.PlanarSurf">
            <summary>
            Analytic planar surface definition.
            </summary>
        </member>
        <member name="M:devDept.Geometry.PlanarSurf.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="location">A 3D point representing the plane origin</param>
            <param name="normal">A 3D vector representing the plane normal</param>
            <param name="refDir">A 3D vector representing the plane X axis</param>
            <param name="index">The surface index, when available from import of standard CAD file formats.</param>
        </member>
        <member name="M:devDept.Geometry.PlanarSurf.GetLengthAlongVector(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Interval@,devDept.Geometry.Interval@)">
            <summary>
            Computes the linear and angular span of the trim loops
            </summary>
            <param name="pln">The reference plane</param>
            <param name="trimLoops">The list of trim loops</param>
            <param name="linDomain">The resulting linear domain along plane's axis Z</param>
            <param name="angDomain">The resulting angular domain. When interval length is zero, it was not possible to compute the interval.</param>
            <returns>True when the resulting linear domain is bigger than zero.</returns>
        </member>
        <member name="M:devDept.Geometry.PlanarSurf.GetLengthAlongVector(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Interval@)">
            <param name="trimLoops">A list of loops as composite curves or unrolled individual segments</param>
        </member>
        <member name="P:devDept.Geometry.PlanarSurf.Plane">
            <summary>
            Gets the planar surface plane.
            </summary>
        </member>
        <member name="T:devDept.Geometry.RevolvedSurf">
            <summary>
            Analytic revolved surface definition.
            </summary>
        </member>
        <member name="M:devDept.Geometry.RevolvedSurf.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,devDept.Eyeshot.Entities.ICurve,System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="location">A 3D point representing the plane origin</param>
            <param name="normal">A 3D vector representing the plane normal</param>
            <param name="refDir">A 3D vector representing the plane X axis</param>
            <param name="generatrix">The curve to be revolved</param>
            <param name="index">The surface index, when available from import of standard CAD file formats.</param>
        </member>
        <member name="P:devDept.Geometry.RevolvedSurf.Generatrix">
            <summary>
            Gets revolved surface curve.
            </summary>
        </member>
        <member name="T:devDept.Geometry.CylindricalSurf">
            <summary>
            Analytic cylindrical surface definition.
            </summary>
        </member>
        <member name="M:devDept.Geometry.CylindricalSurf.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Double,System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="location">A 3D point representing the plane origin</param>
            <param name="axis">A 3D vector representing the plane normal</param>
            <param name="refDir">A 3D vector representing the plane X axis</param>
            <param name="radius">The cylider radius</param>
            <param name="index">The surface index, when available from import of standard CAD file formats.</param>
        </member>
        <member name="M:devDept.Geometry.CylindricalSurf.RecoverZeroDomain(devDept.Geometry.Interval@)">
            <summary>
            Recovers zero length domain, combining its value with domain zero.
            </summary>
        </member>
        <member name="P:devDept.Geometry.CylindricalSurf.Radius">
            <summary>
            Gets cylinder radius.
            </summary>
        </member>
        <member name="T:devDept.Geometry.ConicalSurf">
            <summary>
            Analytic conical surface definition.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ConicalSurf.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Double,System.Double,System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="location">A 3D point representing the plane origin</param>
            <param name="axis">A 3D vector representing the plane normal</param>
            <param name="refDir">A 3D vector representing the plane X axis</param>
            <param name="radius">The cone radius</param>
            <param name="halfAngle">The cone half angle</param>
            <param name="index">The surface index, when available from import of standard CAD file formats.</param>
        </member>
        <member name="P:devDept.Geometry.ConicalSurf.HalfAngle">
            <summary>
            The cone half angle in radians.
            </summary>
        </member>
        <member name="T:devDept.Geometry.ToroidalSurf">
            <summary>
            Analytic toroidal surface definition.
            </summary>
        </member>
        <member name="M:devDept.Geometry.ToroidalSurf.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Double,System.Double,System.Int32)">
            <summary>
            Internal constructor.
            </summary>
            <param name="location">A 3D point representing the plane origin</param>
            <param name="axis">A 3D vector representing the plane normal</param>
            <param name="refDir">A 3D vector representing the plane X axis</param>
            <param name="majorRadius">The torus major radius</param>
            <param name="minorRadius">The torus minor radius</param>
            <param name="index">The surface index, when available from import of standard CAD file formats.</param>
        </member>
        <member name="P:devDept.Geometry.ToroidalSurf.MajorRadius">
            <summary>
            Gets toroidal surface major radius.
            </summary>
        </member>
        <member name="P:devDept.Geometry.ToroidalSurf.MinorRadius">
            <summary>
            Gets toroidal surface minor radius.
            </summary>
        </member>
        <member name="T:devDept.Geometry.SphericalSurf">
            <summary>
            Analytic spherical surface definition.
            </summary>
        </member>
        <member name="M:devDept.Geometry.SphericalSurf.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Double,System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="location">A 3D point representing the plane origin</param>
            <param name="axis">A 3D vector representing the plane normal</param>
            <param name="refDir">A 3D vector representing the plane X axis</param>
            <param name="radius">The sphere radius</param>
            <param name="index">The surface index, when available from import of standard CAD file formats.</param>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Direction">
            <summary>
            Utility class to read a Direction (Type 123) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Direction.#ctor(System.Int32,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Edge">
            <summary>
            Utility class to read a Edge (Type 504) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Edge.#ctor(System.Int32,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Iges.EdgeData.curvePointer">
            <summary>
            Pointer to the DE of the first model space curve.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Iges.EdgeData.startVertexListPointer">
            <summary>
            Pointer to the DE of the Vertex List Entity (Type 502, Form 1) for the first start vertex
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Iges.EdgeData.startVertexIndex">
            <summary>
            List Index of the first start vertex in the Vertex List Entity
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Iges.EdgeData.endVertexListPointer">
            <summary>
            Pointer to the DE of the Vertex List Entity for the first terminate vertex
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Iges.EdgeData.endVertexIndex">
            <summary>
            List Index of the first terminate vertex in the Vertex List Entity
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Face">
            <summary>
            Utility class to read a Face (Type 510) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Face.#ctor(System.Int32,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Loop">
            <summary>
            Utility class to read a Vertex (Type 508) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Loop.#ctor(System.Int32,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Iges.AdditionalEdgeData.type">
            <summary>
            Type of first edge, 0 = Edge, 1 = Vertex
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Iges.AdditionalEdgeData.listPointer">
            <summary>
            Pointer to the DE of the first Vertex List or Edge List Entity
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Iges.AdditionalEdgeData.index">
            <summary>
            List Index into Vertex List or Edge List Entity
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Iges.AdditionalEdgeData.sense">
            <summary>
            Orientation flag of first edge with respect to direction of the model space curve(s) (True = agrees)
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.ManifoldSolidBRepObject">
            <summary>
            Utility class to read a Manifold Solid B-Rep Object (Type 186) in IGES format.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.PlaneSurface">
            <summary>
            Utility class to read a Plane Surface (Type 190) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.PlaneSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.RightCircularCylindricalSurface">
            <summary>
            Utility class to read a Right Circular Cylindrical Surface (Type 192) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.RightCircularCylindricalSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Shell">
            <summary>
            Utility class to read a S(Type 514) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Shell.#ctor(System.Int32,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Vertex">
            <summary>
            Utility class to read a Vertex (Type 502) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Vertex.#ctor(System.Int32,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.RevolvedSurface">
            <summary>
            Surface of revolution definition, created by rotating the generatrix about the axis of rotation.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.RevolvedSurface.seamPlane">
            <summary>
            Always placed on torus/sphere center and cylinder/cone line's start point projection on axis.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.RevolvedSurface.Clone">
            <summary>
            Creates a deep copy of this revolution surface.
            </summary>
            <returns>The new revolution surface object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.RevolvedSurface.GetRevArcAndNurbsRevArc(System.Boolean)">
            <summary>
            Computes RevArc and NurbsRevArc.
            </summary>
            <param name="anyway">False if you want to calculate them only if they are null, True if you want them anyway (reverseU)</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.RevolvedSurface.Generatrix">
            <summary>
            Gets the generatrix of this surface of revolution.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.RevolvedSurface.Axis"/>
            <seealso cref="P:devDept.Eyeshot.Entities.RevolvedSurface.Center"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.RevolvedSurface.Center">
            <summary>
            Gets revolution center point.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.RevolvedSurface.Axis"/>
            <seealso cref="P:devDept.Eyeshot.Entities.RevolvedSurface.Generatrix"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.RevolvedSurface.Axis">
            <summary>
            Gets the revolution axis.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.RevolvedSurface.Center"/>
            <seealso cref="P:devDept.Eyeshot.Entities.RevolvedSurface.Generatrix"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.RevolvedSurface.Angle">
            <summary>
            Gets the revolution angle in radians.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.RevolvedSurface.SeamPlane">
            <summary>
            Gets the seam plane.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.CylindricalSurface">
            <summary>
            Cylindrical surface definition.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CylindricalSurface.Clone">
            <summary>
            Creates a deep copy of this cylindrical surface.
            </summary>
            <returns>The new cylindrical surface object.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.CylindricalSurface.Radius">
            <summary>
            Gets cylinder radius
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.SphericalSurface">
            <summary>
            Spherical surface definition.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.SphericalSurface.Clone">
            <summary>
            Creates a deep copy of this spherical surface.
            </summary>
            <returns>The new spherical surface object.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.SphericalSurface.Radius">
            <summary>
            Gets sphere radius
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.ConicalSurface">
            <summary>
            Conical surface definition.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ConicalSurface.Clone">
            <summary>
            Creates a deep copy of this conical surface.
            </summary>
            <returns>The new conical surface object.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ConicalSurface.HalfAngle">
            <summary>
            Gets cone's angle.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ConicalSurface.Radius">
            <summary>
            Gets the cone radius.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ConicalSurface.Tip">
            <summary>
            Gets cone's tip.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.torusType">
            <summary>
            Torus type.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.ToroidalSurface">
            <summary>
            Toroidal surface definition.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ToroidalSurface.Clone">
            <summary>
            Creates a deep copy of this toroidal surface.
            </summary>
            <returns>The new toroidal surface object.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ToroidalSurface.Type">
            <summary>
            Gets the torus type.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ToroidalSurface.MajorRadius">
            <summary>
            Gets torus' major radius.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ToroidalSurface.MinorRadius">
            <summary>
            Gets torus' minor radius.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.TabulatedSurface">
            <summary>
            Tabulated surface definition, formed by moving a line segment called the generatrix parallel to itself along a curve called the directrix.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.TabulatedSurface.Clone">
            <summary>
            Creates a deep copy of this revolution surface.
            </summary>
            <returns>The new revolution surface object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.TabulatedSurface.TryGetPlanar(devDept.Eyeshot.Entities.PlanarSurface@)">
            <summary>
            Converts this tabulated surface to <see cref="T:devDept.Eyeshot.Entities.PlanarSurface"/> (when possible).
            </summary>
            <returns>The resulting planar surface (when possible)</returns>
            <returns>True if the operation succeeds, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.TabulatedSurface.TryGetCylindrical(devDept.Eyeshot.Entities.Surface@)">
            <summary>
            Converts this tabulated surface to <see cref="T:devDept.Eyeshot.Entities.CylindricalSurface"/> (when possible).
            </summary>
            <returns>The resulting cylindrical surface (when possible)</returns>
            <returns>True if the operation succeeds, false otherwise.</returns>
            <remarks>To be converted, this tabulated surface must have a Circle or an Arc as directrix.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.TabulatedSurface.Directrix">
            <summary>
            Gets the tabulated surface generatrix.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.TabulatedSurface.Generatrix">
            <summary>
            Gets the tabulated surface generatrix.
            </summary>
        </member>
        <member name="T:StepTranslator.StepAdvancedBrepShapeRep">
            <summary>
            This class represents shape representation context of advanced brep type.
            </summary>
        </member>
        <member name="T:StepTranslator.StepAxis1Placement">
            <summary>
            This class represents location of geometry in 3D space.
            </summary>
        </member>
        <member name="T:StepTranslator.StepBlockRef">
            <summary>
            This class represents a .
            </summary>
        </member>
        <member name="T:StepTranslator.BoundedCurve">
            <summary>
            This class represents bounded curve from STEP specifications.
            
            </summary>
        </member>
        <member name="M:StepTranslator.BoundedCurve.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual spline data. 
            </summary>
        </member>
        <member name="T:StepTranslator.BoundedSurface">
            <summary>
            This class represents bounded curve from STEP specifications.
            
            </summary>
        </member>
        <member name="M:StepTranslator.BoundedSurface.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual spline data. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepShell">
            <summary>
            This class represents closed shell object from step data.
            </summary>
        </member>
        <member name="M:StepTranslator.StepShell.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual face list for this shell. 
            </summary>
        </member>
        <member name="T:StepTranslator.Degenerate_Toridal_Surface">
            <summary>
            This class represents circle data from STEP specifications.
            It contains links to center point and other arc data.
            </summary>
        </member>
        <member name="M:StepTranslator.Degenerate_Toridal_Surface.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual circle data and references. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepBrepWithVoids">
            <summary>
            This class manifold solid brep representation object from step.
            </summary>
        </member>
        <member name="T:StepTranslator.StepCircle">
            <summary>
            This class represents circle data from STEP specifications.
            </summary>
        </member>
        <member name="M:StepTranslator.StepCircle.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual circle data and references. 
            </summary>
        </member>
        <member name="T:StepTranslator.ColorDataWriter">
            <summary>
            This class writes the shape representation information and other context data.
            </summary>
        </member>
        <member name="T:StepTranslator.CompositeCurve">
            <summary>
            This class represents composite curve entity STEP specifications.
            
            </summary>
        </member>
        <member name="M:StepTranslator.CompositeCurve.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual line data. 
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.OffsetSurface">
            <summary>
            Utility class to write a Line (Type 140) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.OffsetSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:StepTranslator.CompositeCurveSegment">
            <summary>
            
            </summary>
        </member>
        <member name="T:StepTranslator.StepCone">
            <summary>
            This class represents circle data from STEP specifications.
            It contains links to center point and other arc data.
            </summary>
        </member>
        <member name="M:StepTranslator.StepCone.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual circle data and references. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepCtxDepShapeRep">
            <summary>
            This class represents context dependent shape representation.
            </summary>
        </member>
        <member name="T:StepTranslator.StepCylinder">
            <summary>
            This class represents circle data from STEP specifications.
            It contains links to center point and other arc data.
            </summary>
        </member>
        <member name="M:StepTranslator.StepCylinder.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual circle data and references. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepDefRep">
            <summary>
            This class represents edge curve data from STEP specifications.
            It contains end points and link to geometry.
            </summary>
        </member>
        <member name="M:StepTranslator.StepDefRep.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual edge data. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepEdge">
            <summary>
            This class represents edge curve data from STEP specifications.
            It contains end points and link to geometry.
            </summary>
        </member>
        <member name="M:StepTranslator.StepEdge.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual edge data. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepEllipse">
            <summary>
            This class represents ellipse data from STEP specifications.
            </summary>
        </member>
        <member name="M:StepTranslator.StepEllipse.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual circle data and references. 
            </summary>
        </member>
        <member name="T:StepTranslator.ReadingStatus">
            <summary>
            Enumeration to indicate status of a particular entity, whether it is fully processed or not.
            </summary>
        </member>
        <member name="T:StepTranslator.StepFace">
            <summary>
            This class represents face topology from STEP specifications.
            
            </summary>
        </member>
        <member name="M:StepTranslator.StepFace.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual line data. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepFaceBound">
            <summary>
            
            </summary>
        </member>
        <member name="T:StepFileParser">
            <summary>
            This class represents step file parser. It processes input file stream and
            reads step records one by one using string manipulation methods. It also acts as entity creator.
            </summary>
        </member>
        <member name="M:StepFileParser.AnalyseDataForUnits(System.Int32,System.String,System.String)">
            <summary>
            This method checks if the current step data gives any unit information.
            </summary>
            <param name="number"></param>
            <param name="commandStr"></param>
            <param name="valueStr"></param>
        </member>
        <member name="M:StepTranslator.GeometricSet.GetEntitySet(System.Collections.Generic.List{StepTranslator.StepEntity}@)">
            <summary>
            Gets the list of entities in this geometric set.
            </summary>
            <param name="entitySet"></param>
        </member>
        <member name="T:StepTranslator.GeometricCurveSet">
            <summary>
            This class represents a geometric curve set from step data. 
            </summary>
        </member>
        <member name="M:StepTranslator.GeometricCurveSet.GetEntitySet(System.Collections.Generic.List{StepTranslator.StepEntity}@)">
            <summary>
            Gets the list of entities in this geometric set.
            </summary>
            <param name="entitySet"></param>
        </member>
        <member name="T:StepTranslator.StepIntersectionCurve">
            <summary>
            This class represents edge curve data from STEP specifications.
            It contains end points and link to geometry.
            </summary>
        </member>
        <member name="M:StepTranslator.StepIntersectionCurve.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual edge data. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepItemDefTrans">
            <summary>
            This class represents Item Defination transformation.
            </summary>
        </member>
        <member name="T:StepTranslator.StepLine">
            <summary>
            This class represents line data from STEP specifications.
            It contains links to start point and direction.
            </summary>
        </member>
        <member name="M:StepTranslator.StepLine.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual line data. 
            </summary>
        </member>
        <member name="M:StepTranslator.StepParabola.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual parabola data and references. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepAxis2Placement2D">
            <summary>
            This class represents location of geometry in 3D space.
            </summary>
        </member>
        <member name="T:StepTranslator.StepLoop">
            <summary>
            
            </summary>
        </member>
        <member name="M:StepTranslator.StepLoop.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual loop data. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepOrientedEdge">
            <summary>
            
            </summary>
        </member>
        <member name="M:StepTranslator.StepOrientedEdge.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual loop data. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepSolidBrep">
            <summary>
            This class manifold solid brep representation object from step.
            </summary>
        </member>
        <member name="T:StepTranslator.StepManifoldSurfaceShapeRep">
            <summary>
            This class represents shape representation context for manifold surface model.
            </summary>
        </member>
        <member name="T:StepTranslator.StepNextAsseUsageOcc">
            <summary>
            This class represents Product Defination Shape.
            </summary>
        </member>
        <member name="T:StepTranslator.StepNurbsCurve">
            <summary>
            This class represents bspline curve with knots data from STEP specifications.
            
            </summary>
        </member>
        <member name="M:StepTranslator.StepNurbsCurve.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual spline data. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepNurbsSurface">
            <summary>
            This class represents bspline surface with knots data from STEP specifications.
            
            </summary>
        </member>
        <member name="M:StepTranslator.StepNurbsSurface.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual nurbs data. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepPCurve">
            <summary>
            This class represents edge curve data from STEP specifications.
            It contains end points and link to geometry.
            </summary>
        </member>
        <member name="M:StepTranslator.StepPCurve.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual edge data. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepAxis2Placement3D">
            <summary>
            This class represents location of geometry in 3D space.
            </summary>
        </member>
        <member name="T:StepTranslator.StepPlane">
            <summary>
            This class represents plane from STEP format, which contains placement object.
            </summary>
        </member>
        <member name="T:StepTranslator.CartesianPoint">
            <summary>
            This class represents cartesian point from STEP data standard.
            It contains X Y Z coordinates of a point. 
            </summary>
        </member>
        <member name="M:StepTranslator.CartesianPoint.ExtractEntityData">
            <summary>
            This method processes the step data record and extracts data elements.
            </summary>
        </member>
        <member name="T:StepTranslator.StepPointCloud">
            <summary>
            This class represents a point cloud entity which is a geometric set containing multiple points. 
            
            </summary>
        </member>
        <member name="T:StepTranslator.StepProdDef">
            <summary>
            This class represents Product Defination Shape.
            </summary>
        </member>
        <member name="T:StepTranslator.StepProdDefWithAssDoc">
            <summary>
            This class represents Product Defination Shape.
            </summary>
        </member>
        <member name="T:StepTranslator.StepProdDefWithSpecSrc">
            <summary>
            This class represents Product Defination Shape.
            </summary>
        </member>
        <member name="T:StepTranslator.StepProduct">
            <summary>
            This class represents Product Defination Shape.
            </summary>
        </member>
        <member name="T:StepTranslator.StepProdDefShape">
            <summary>
            This class represents Product Defination Shape.
            </summary>
        </member>
        <member name="T:StepTranslator.ProductInfo">
            <summary>
            This class holds all file attributes found in the input step file.
            </summary>
        </member>
        <member name="T:StepTranslator.ProductInfoEntry">
            <summary>
            This is a helper class to hold a file attribute information.
            </summary>
        </member>
        <member name="T:StepTranslator.ProductInfoWriter">
            <summary>
            This class writes the STEP application and product information related to AP203.
            </summary>
        </member>
        <member name="T:StepTranslator.StepProDefRep">
            <summary>
            This class represents Product Defination Shape.
            </summary>
        </member>
        <member name="T:StepTranslator.StepPropDef">
            <summary>
            This class represents Product Defination Shape.
            </summary>
        </member>
        <member name="T:StepTranslator.StepQuasiUniformCurve">
            <summary>
            This class represents bspline curve with knots data from STEP specifications.
            
            </summary>
        </member>
        <member name="M:StepTranslator.StepQuasiUniformCurve.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual spline data. 
            </summary>
        </member>
        <member name="T:StepTranslator.QuasiUniformSurface">
            <summary>
            This class represents bspline surface with knots data from STEP specifications.
            
            </summary>
        </member>
        <member name="M:StepTranslator.QuasiUniformSurface.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual nurbs data. 
            </summary>
        </member>
        <member name="T:StepTranslator.RationalBsplineCurve">
            <summary>
            This class represents rational bspline curve from STEP specifications.
            
            </summary>
        </member>
        <member name="M:StepTranslator.RationalBsplineCurve.ExtractData(System.String)">
            <summary>
            Solves the step record and extracts the actual entity data. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepRepRel">
            <summary>
            This class represents context dependent representation relation.
            </summary>
        </member>
        <member name="T:StepTranslator.StepRep">
            <summary>
            This class represents Product Defination Shape.
            </summary>
        </member>
        <member name="T:StepTranslator.RepresentationDataWriter">
            <summary>
            This class writes the shape representation information and other context data.
            </summary>
        </member>
        <member name="T:StepTranslator.StepShapeAspect">
            <summary>
            This class represents Product Defination Shape.
            </summary>
        </member>
        <member name="T:StepTranslator.StepShapeDefRep">
            <summary>
            This class represents Shape Defination Representation.
            </summary>
        </member>
        <member name="T:StepTranslator.StepShapeRep">
            <summary>
            This class represents Shape Representation.
            </summary>
        </member>
        <member name="T:StepTranslator.StepShapeRepRel">
            <summary>
            This class represents shape representation relation.
            </summary>
        </member>
        <member name="T:StepTranslator.ShellBasedSurfaceModel">
            <summary>
            This class represents shell based surface model from step data.
            </summary>
        </member>
        <member name="T:StepTranslator.StepSphere">
            <summary>
            This class represents circle data from STEP specifications.
            </summary>
        </member>
        <member name="M:StepTranslator.StepSphere.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual Sphere data and references. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepBlock">
            <summary>
            This class represents a block instance which contains group of faces from a solid body. 
            </summary>
        </member>
        <member name="P:StepTranslator.StepBlock.Surfaces">
            <summary>
            List of surfaces in this block.
            </summary>
        </member>
        <member name="P:StepTranslator.StepBlock.Layer">
            <summary>
            Gives  R,G,B values for a block color.
            </summary>
        </member>
        <member name="T:StepTranslator.ColorCode">
            <summary>
            Stuct to define R,G,B values for a entity color.
            </summary>
        </member>
        <member name="T:StepTranslator.StepCurve">
            <summary>
            Represents a edge curve from step data which might be of any shape.
            It gives the actual geometry data of a curve depending on the type.
            </summary>
        </member>
        <member name="M:StepTranslator.StepCurve.GetEndPoints(System.Double[]@,System.Double[]@)">
            <summary>
            Gives the start and end point of the edge curve.
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
        </member>
        <member name="M:StepTranslator.StepCurve.GetLineData(System.Double[]@,System.Double@,System.Double[]@)">
            <summary>
            Gives start and end point of the line curve.
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:StepTranslator.StepCurve.SetLineData(System.Double[],System.Double,System.Double[])">
            <summary>
            Sets start and end point of the line curve.
            </summary>
            <param name="startPoint"></param>
            <param name="endPoint"></param>
            
        </member>
        <member name="M:StepTranslator.StepCurve.GetCircleData(System.Double[]@,System.Double@,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Gives center point, radius and reference axes for a circle curve.
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
            <returns></returns>
        </member>
        <member name="M:StepTranslator.StepCurve.SetCircleData(System.Double[],System.Double,System.Double[],System.Double[])">
            <summary>
            Sets center point, radius and reference axes for a circle curve.
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
        </member>
        <member name="M:StepTranslator.StepCurve.GetEllipseData(System.Double[]@,System.Double@,System.Double@,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Gives center point, major and minor radius with reference axes for a ellipse curve.
            </summary>
            <param name="center"></param>
            <param name="radius1"></param>
            <param name="radius2"></param>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
            <returns></returns>
        </member>
        <member name="M:StepTranslator.StepCurve.SetEllipseData(System.Double[],System.Double,System.Double,System.Double[],System.Double[])">
            <summary>
            Sets center point, major and minor radius with reference axes for a ellipse curve.
            </summary>
            <param name="center"></param>
            <param name="radius1"></param>
            <param name="radius2"></param>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
        </member>
        <member name="M:StepTranslator.StepCurve.GetSplineData(System.Int32@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{StepTranslator.StepPoint}@)">
            <summary>
            Gives curve degree, knot list and control points for a bspline curve.
            </summary>
            <param name="degree"></param>
            <param name="knotList"></param>
            <param name="controlPoints"></param>
            <returns></returns>
        </member>
        <member name="M:StepTranslator.StepCurve.SetSplineData(System.Int32,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{StepTranslator.StepPoint})">
            <summary>
            Sets curve degree, knot list and control points for a bspline curve.
            </summary>
            <param name="degree"></param>
            <param name="knotList"></param>
            <param name="controlPoints"></param>
        </member>
        <member name="M:StepTranslator.StepCurve.SetBoundedCurveData(System.Int32,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{StepTranslator.StepPoint})">
            <summary>
            if weight is there we 
            Sets curve degree, knot list and control points for a bspline curve.
            </summary>
            <param name="degree"></param>
            <param name="knotList"></param>
            <param name="controlPoints"></param>
        </member>
        <member name="T:StepTranslator.CurveGeomType">
            <summary>
            Represents shape for a curve geometry.  
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.CompositeCurve">
            <summary>
            Composite curve definition.
            </summary>
            <remarks>
            When passing the curve list into constructors, curves are analyzed, sorted and reversed if necessary. This is not true when using the <see cref="P:devDept.Eyeshot.Entities.CompositeCurve.CurveList"/> property, in this case a call to the <see cref="M:devDept.Eyeshot.Entities.CompositeCurve.SortAndOrient(System.Double)"/> method is needed. The first curve in the list determines the contour orientation.
            </remarks>
        </member>
        <member name="T:devDept.Eyeshot.Entities.ICurve">
            <summary>
            Common properties of curve entities.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Length">
            <summary>Computes the curve's length.</summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Reverse">
            <summary>
            Reverses the curve direction.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.SubCurve(System.Double,System.Double,devDept.Eyeshot.Entities.ICurve@)">
            <summary>
            Extracts a sub curve from current one.
            </summary>
            <param name="startParam">Start parameter</param>
            <param name="endParam">End parameter</param>
            <param name="sub">The sub curve</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.SubCurve(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Eyeshot.Entities.ICurve@)">
            <summary>
            Extracts a sub curve from current one.
            </summary>
            <param name="startPt">Start 3D point</param>
            <param name="endPt">End 3D point</param>
            <param name="sub">The sub curve</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.SplitAt(System.Double,devDept.Eyeshot.Entities.ICurve@,devDept.Eyeshot.Entities.ICurve@)">
            <summary>
            Splits the curve at the parameter provided.
            </summary>
            <param name="t">The parameter indicating the split position</param>
            <param name="lower">Lower curve segment</param>
            <param name="upper">Upper curve segment</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.SplitBy(devDept.Geometry.Point3D,devDept.Eyeshot.Entities.ICurve@,devDept.Eyeshot.Entities.ICurve@)">
            <summary>
            Splits the curve at the 3D point provided.
            </summary>
            <param name="pt">The 3D point indicating the split position</param>
            <param name="lower">Lower curve segment</param>
            <param name="upper">Upper curve segment</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.SplitBy(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Eyeshot.Entities.ICurve[]@)">
            <summary>
            Splits the curve at the 3D point array provided.
            </summary>
            <param name="points">The 3D point array</param>
            <param name="segments">The resulting segments</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.TrimAt(System.Double,System.Boolean)">
            <summary>
            Trims the curve at the parameter t.
            </summary>
            <param name="flipSide">Reverse flag</param>
            <param name="t">The curve parameter</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.TrimBy(devDept.Geometry.Point3D,System.Boolean)">
            <summary>
            Trims the curve at the specified 3D point.
            </summary>
            <param name="flipSide">Reverse flag</param>
            <param name="pt">The limit point</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.GetParamFromLength(System.Double,System.Double@)">
             <summary>
             Given the length along the curve, finds the parameter value that corresponds to it.
             </summary>
            <param name="length">Length along the curve</param>
            <param name="t">Parameter value</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.ClosestPointTo(devDept.Geometry.Point3D,System.Double@)">
            <summary>
            Returns the parameter of the point on curve that is closest to given 3D point.
            </summary>
            <param name="point">The 3D test point</param>
            <param name="t">The curve parameter</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Project(devDept.Geometry.Point3D,System.Double@)">
            <summary>
            Returns the parameter of the closest perpendicular projection of the given 3D point on the curve.
            If there aren't projections inside the curve, we look for projections on the extensions of the curve.
            If no projections are found, we return the parameter of the StartPoint and false.
            </summary>
            <param name="point">The 3D test point</param>
            <param name="t">The curve parameter</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.GetIndividualCurves">
            <summary>
            Returns an array of the individual curves that form the curve.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.IsPlanar(System.Double,devDept.Geometry.Plane@)">
            <summary>
            Checks if the curve is planar.
            </summary>
            <param name="tol">The tolerance</param>
            <param name="plane">The plane where the curve lays</param>
            <returns>True if the curve is planar within tolerance, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.IsInPlane(devDept.Geometry.Plane,System.Double)">
            <summary>
            Checks if the curve lays on the specified plane.
            </summary>
            <param name="plane">The plane to test</param>
            <param name="tol">The tolerance</param>
            <returns>True if the curve lays on this plane, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.IsLinear(System.Double,devDept.Geometry.Segment3D@)">
            <summary>
            Checks if the curve is linear.
            </summary>
            <param name="line">The line where the curve lays</param>
            <param name="tol">The tolerance</param>
            <returns>True if the curve lays on this plane, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.PointAt(System.Double)">
            <summary>
            Evaluates a point on the curve.
            </summary>
            <param name="t">Evaluation parameter</param>
            <returns>The point on curve.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.TangentAt(System.Double)">
            <summary>
            Evaluates the unit tangent vector at a parameter.
            </summary>
            <param name="t">The parameter</param>
            <returns>The unit tangent.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.NormalAt(System.Double)">
            <summary>
            Evaluates the unit normal vector at a parameter.
            </summary>
            <param name="t">The parameter</param>
            <returns>The unit normal.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Offset(System.Double,devDept.Geometry.Vector3D,System.Double,System.Boolean)">
            <summary>
            Offsets the curve of the specified amount.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="planeNormal">Normal of the plane where offset occurs (normalized)</param>
            <param name="tolerance">Tolereance</param>
            <param name="sharp">If false, offset curves are connected with an arc.</param>
            <returns>The offset curve if the operation is successful, null/Nothing otherwise.</returns>
            <remarks>It doesn't work if the number of offset curves is different from the number of curves to be offsetted. For more complex cases use <see cref="M:devDept.Eyeshot.Entities.LinearPath.QuickOffset(System.Double,devDept.Geometry.Plane)"/></remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.GetPointsByLength(System.Double)">
            <summary>
            Subdivides the curve by the distance provided.
            </summary>
            <param name="length">The distance between points</param>
            <returns>An array of 3D points.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.GetPointsByLengthPerSegment(System.Double)">
            <summary>
            Subdivides the curve by the distance provided, for LinearPaths and CompositeCurves it does it segmentwise.
            </summary>
            <param name="length">The distance between points</param>
            <returns>An array of 3D points.</returns>
            <remarks>In LinearPaths and CompositeCurves, this method is applied to each segment.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Extrude(devDept.Eyeshot.Entities.Line,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Extrudes this curve along the specified direction.
            </summary>
            <param name="line">Extrusion direction</param>
            <param name="tol">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Extrude(devDept.Geometry.Vector3D,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Extrudes this curve along the specified direction.
            </summary>
            <param name="amount">Extrusion direction and length</param>
            <param name="tol">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Extrude(System.Double,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Extrudes this curve along the specified direction.
            </summary>
            <param name="dx">Extrusion amount along the X axis</param>
            <param name="dy">Extrusion amount along the Y axis</param>
            <param name="dz">Extrusion amount along the Z axis</param>
            <param name="tol">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Revolve(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Revolves this curve around an arbitrary axis.
            </summary>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axisStart">The axis start point</param>
            <param name="axisEnd">The axis end point</param>
            <param name="slices">Number of subdivisions</param>
            <param name="tol">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Revolve(System.Double,System.Double,devDept.Eyeshot.Entities.Line,System.Int32,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Revolves this curve around an arbitrary axis.
            </summary>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Revolution axis</param>
            <param name="slices">Number of subdivisions</param>
            <param name="tol">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Revolve(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Revolves this curve around an arbitrary axis.
            </summary>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Revolution axis</param>
            <param name="center">Revolution center</param>
            <param name="slices">Number of subdivisions</param>
            <param name="tol">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Sweep(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Sweeps this curve along the provided trajectory.
            </summary>
            <param name="rail">Sweep trajectory</param>
            <param name="tol">Surface trim tolerance</param>
            <param name="meshNature">Nature of the resulting mesh entity</param>
            <returns>The list of resulting surfaces.</returns>  
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.GetNurbsForm">
            <summary>
            Gets the Nurbs form of this curve.
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Extrude(devDept.Eyeshot.Entities.Line)">
            <summary>
            Extrudes this curve along the specified direction.
            </summary>
            <param name="line">Extrusion direction and length as <see cref="T:devDept.Eyeshot.Entities.Line"/></param>
            <returns>The list of resulting surfaces.</returns>  
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Extrude(System.Double,System.Double,System.Double)">
            <summary>
            Extrudes this curve along the specified direction.
            </summary>
            <param name="dx">Extrusion amount along the X axis</param>
            <param name="dy">Extrusion amount along the Y axis</param>
            <param name="dz">Extrusion amount along the Z axis</param>
            <returns>The list of resulting surfaces.</returns>  
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Extrude(devDept.Geometry.Vector3D)">
            <summary>
            Extrudes this curve along the specified direction.
            </summary>
            <param name="amount">Extrusion direction and lenght</param>
            <returns>The list of resulting surfaces.</returns>  
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Extrude(devDept.Geometry.Vector3D,System.Double,System.Double)">
            <summary>
            Extrudes this curve along the specified direction with a draft angle.
            </summary>
            <param name="amount">Extrusion direction and lenght</param>
            <param name="draftAngleInRadians">Signed draft angle in radians</param>
            <param name="tolerance">Required for non-perpendicular extrusion directions</param>
            <returns>The list of resulting surfaces.</returns>  
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Revolve(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
            <summary>
            Revolves this curve around an arbitrary axis.
            </summary>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Revolution axis direction</param>
            <param name="center">Revolution axis origin</param>
            <returns>The list of resulting surfaces.</returns>  
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Revolve(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Revolves this curve around the specified axis.
            </summary>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axisStart">Revolution axis start point</param>
            <param name="axisEnd">Revolution axis end point</param>
            <returns>The list of resulting surfaces.</returns>  
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Revolve(System.Double,System.Double,devDept.Eyeshot.Entities.Line)">
            <summary>
            Revolves this curve around the specified axis.
            </summary>
            <param name="startAngle">Revolution start angle in radians</param>
            <param name="deltaAngle">Revolution delta angle in radians</param>
            <param name="axis">Revolution axis</param>
            <returns>The list of resulting surfaces.</returns>  
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.Sweep(devDept.Eyeshot.Entities.ICurve,System.Double)">
            <summary>
            Sweeps this curve along the provided trajectory.
            </summary>
            <param name="rail">Sweep trajectory</param>
            <param name="tol">Surface trim tolerance</param>
            <returns>The list of resulting surfaces.</returns>  
        </member>
        <member name="M:devDept.Eyeshot.Entities.ICurve.WriteXml(System.Xml.XmlTextWriter)">
            <summary>
            Writes the object in Xml format.
            </summary>
            <param name="writer">The writer object</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ICurve.Domain">
            <summary>
            Gets curve's domain.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ICurve.EndPoint">
            <summary>Gets curve's end point.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ICurve.StartPoint">
            <summary>Gets curve's start point.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ICurve.IsClosed">
            <summary>Returns true if the curve is closed.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ICurve.StartTangent">
            <summary>
            Gets the unit tangent vector at the beginning of the curve.
            </summary>
            <value>The unit tangent.</value>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ICurve.EndTangent">
            <summary>
            Gets the unit tangent vector at the end of the curve.
            </summary>
            <value>The unit tangent.</value>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            Curve list constructor. The first curve in the list determines the contour orientation.
            </summary>
            <param name="curveList">The curve list</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.ICurve},System.Boolean)">
            <summary>
            Curve list and sorting flag constructor. The first curve in the list determines the contour orientation.
            </summary>
            <param name="curveList">The curve list</param>
            <param name="sortAndOrient">When true, the curves are properly sorted and oriented.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.ICurve},System.Double)">
            <summary>
            Curve list constructor. The first curve in the list determines the contour orientation.
            </summary>
            <param name="curveList">The curve list</param>
            <param name="closureTol">The max distance between the contour start and end points to assume the curve as closed.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.ICurve},System.Double,System.Boolean)">
            <summary>
            Curve list constructor. The first curve in the list determines the contour orientation.
            </summary>
            <param name="curveList">The curve list</param>
            <param name="closureTol">The max distance between the contour start and end points to assume the curve as closed.</param>
            <param name="sortAndOrient">When true, the curves are properly sorted and oriented.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(devDept.Eyeshot.Entities.ICurve[])">
            <summary>
            Curve list constructor. The first curve in the list determines the contour orientation.
            </summary>
            <param name="curveList">The curve list</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(devDept.Eyeshot.Entities.ICurve)">
            <summary>
            One curve only constructor.
            </summary>
            <param name="curve">The curve</param>        
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.Clone">
            <summary>
            Creates a deep copy of this composite curve.
            </summary>
            <returns>The new composite curve object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.Explode(System.Boolean)">
            <summary>
            Returns the list of curves as array of entities.
            </summary>
            <param name="propagateAttributes">If true, propagates the attributes of the composite curve (<see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod"/>, <see cref="P:devDept.Eyeshot.Entities.Entity.Color"/>, <see cref="P:devDept.Eyeshot.Entities.Entity.MaterialName"/>, <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod"/>, <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypePattern"/>, <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeightMethod"/>, <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeight"/>) to the exploded curves</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.GetPointsByLength(System.Double)">
            <summary>
            Subdivides the curve by the distance provided.
            </summary>
            <param name="length">The distance between points</param>
            <returns>An array of 3D points.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.GetPointsByLengthPerSegment(System.Double)">
            <summary>
            Subdivides each segment of the curve by the distance provided.
            </summary>
            <param name="length">The distance between points</param>
            <returns>An array of 3D points.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.SplitAtDiscontinuities(System.Boolean)">
            <summary>
            Splits the composite curve at derivative discontinuities (e.g. cusps, kinks) of each segment, returns an array of smooth segments.
            </summary>
            <param name="speedChange">If true, when the tangents have the same direction but different lengths, the curve will be split. If false, it won't be split.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.IsPlanar(System.Double,devDept.Geometry.Plane@)">
            <summary>
            Checks if the curve is planar.
            </summary>
            <param name="tol">The tolerance</param>
            <param name="plane">The plane where the curve lies</param>
            <returns>True if the curve is planar within tolerance, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.IntersectionLineLine(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Plane,devDept.Geometry.Point3D@)">
            <summary>
            Finds the intersection between two Line entities
            </summary>
            <param name="line1">The first line entity</param>
            <param name="line2">The second line entity</param>
            <param name="pln">The plane where the two entities lay</param>
            <param name="i0">The intersection point (when it exists)</param>
            <returns>True if the intersection is found, false when the two entities don't touch.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.IntersectionLineCircle(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
            <summary>
            Finds the intersection between an Arc/Circle and a Line entity.
            </summary>
            <param name="line">The line entity</param>
            <param name="arc">The arc/circle entity</param>
            <param name="pln">The plane where the two entities lay</param>
            <param name="i0">The first intersection point (when it exists)</param>
            <param name="i1">The second intersection point (when it exists)</param>
            <returns>True if the intersection is found, false when the two entities don't touch.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.IntersectionLineCircle(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,System.Boolean,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
            <summary>
            Finds the intersection between an Arc/Circle and a Line entity.
            </summary>
            <param name="line">The line entity</param>
            <param name="arc">The arc/circle entity</param>
            <param name="pln">The plane where the two entities lay</param>
            <param name="infiniteLine">If true, we look for intersections even outide the boundaries of the line.</param>
            <param name="i0">The first intersection point (when it exists)</param>
            <param name="i1">The second intersection point (when it exists)</param>
            <returns>True if the intersection is found, false when the two entities don't touch.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.IntersectionCircleCircle(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
            <summary>
            Finds the intersection between two Arc/Circle entities.
            </summary>
            <param name="arc1">The first arc/circle entity</param>
            <param name="arc2">The second arc/circle entity</param>
            <param name="pln">The plane where the two entities lay</param>
            <param name="i0">The first intersection point (when it exists)</param>
            <param name="i1">The second intersection point (when it exists)</param>
            <returns>True if the intersection is found, false when the two entities don't touch.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.GetNurbsFormHomogeneousSpeed">
            <summary>
            Gets the Nurbs form of this curve, the domain length is equal to the length of the curve.
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.SortAndOrient">
            <summary>
            Sorts and orients internal curves. Closure tolerance is estimated automatically using composite curve extents.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.SortAndOrient(System.Double)">
            <summary>
            Sorts and orients internal curves.
            </summary>
            <param name="closureTol">The max distance between the contour start and end points to assume the curve as closed.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.IsOrientedClockwise(devDept.Geometry.Plane)">
            <summary>
            Checks if the closed composite curve orientation is clockwise.
            </summary>
            <param name="plane">The curve plane, can be obtained using the <see cref="M:devDept.Eyeshot.Entities.CompositeCurve.IsPlanar(System.Double,devDept.Geometry.Plane@)"/> method.</param>
            <returns>True if the composite curve is oriented clockwise, false otherwise.</returns>
            <remarks>If the curve is not planar, the points are projected on the plane.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.IsOrientedClockwise(devDept.Geometry.Transformation)">
            <summary>
            Checks if the closed composite curve orientation is clockwise.
            </summary>
            <param name="t">The transformation needed to project all points on the curve plane.</param>
            <returns>True if the composite curve is oriented clockwise, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.CompositeCurve.CurveList">
            <summary>
            Gets or sets the composite curve curve list.
            </summary>
            <remarks>After altering the curve list, you should call the <see cref="M:devDept.Eyeshot.Entities.CompositeCurve.SortAndOrient(System.Double)"/> method to fix curve sorting and orientation.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.Entities.DiametricDim">
            <summary>
            Diametric dimension entity.
            </summary>
            <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.Style"/> property and calling the ViewportLayout.Entities.Regen() method.</remarks>
            <seealso cref="P:devDept.Eyeshot.Entities.Text.Style"/>
            <seealso cref="T:devDept.Eyeshot.Entities.LinearDim"/>
        </member>
        <member name="T:devDept.Eyeshot.Entities.RadialDim">
            <summary>
            Radial dimension entity.
            </summary>
            <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.Style"/> property and calling the ViewportLayout.Entities.Regen() method.</remarks>
            <seealso cref="P:devDept.Eyeshot.Entities.Text.Style"/>
            <seealso cref="T:devDept.Eyeshot.Entities.LinearDim"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.RadialDim.#ctor(devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D,System.Double)">
            <summary>Standard constructor.</summary>
            <param name="circle">The <see cref="T:devDept.Eyeshot.Entities.Circle"/> or <see cref="T:devDept.Eyeshot.Entities.Arc"/> entity to be dimensioned</param>
            <param name="dimLinePos">Dimension line position</param>
            <param name="textHeight">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.RadialDim.#ctor(devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point2D,System.Double)">
            <summary>Sketch plane constructor.</summary>
            <param name="circle">The <see cref="T:devDept.Eyeshot.Entities.Circle"/> or <see cref="T:devDept.Eyeshot.Entities.Arc"/> entity to be dimensioned</param>
            <param name="dimLinePos">Dimension line position</param>
            <param name="textHeight">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.RadialDim.Clone">
            <summary>
            Creates a deep copy of this radial dimension.
            </summary>
            <returns>The new radial dimension object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.RadialDim.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.RadialDim.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.RadialDim.CenterMarkSize">
            <summary>
            Gets or sets the size of the center mark.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.RadialDim.Arrowhead">
            <summary>
            Gets or sets the arrow head type.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.RadialDim.Radius">
            <summary>
            Gets or sets the reference circle.
            </summary>
            <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.DiametricDim.#ctor(devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D,System.Double)">
            <summary>Standard constructor.</summary>
            <param name="circle">The <see cref="T:devDept.Eyeshot.Entities.Circle"/> or <see cref="T:devDept.Eyeshot.Entities.Arc"/> entity to be dimensioned</param>
            <param name="dimLinePos">Dimension line position</param>
            <param name="textHeight">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.DiametricDim.#ctor(devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point2D,System.Double)">
            <summary>Sketch plane constructor.</summary>
            <param name="circle">The <see cref="T:devDept.Eyeshot.Entities.Circle"/> or <see cref="T:devDept.Eyeshot.Entities.Arc"/> entity to be dimensioned</param>
            <param name="dimLinePos">Dimension line position</param>
            <param name="textHeight">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.DiametricDim.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.DiametricDim.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.DiametricDim.Clone">
            <summary>
            Creates a deep copy of this diametric dimension.
            </summary>
            <returns>The new diametric dimension object.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.DiametricDim.LeftArrowhead">
            <summary>
            Gets or sets the left arrow head type.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.DiametricDim.RightArrowhead">
            <summary>
            Gets or sets the right arrow head type.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.LinearDim">
            <summary>
            Linear dimension entity. Dimension line <b>is always oriented</b> as the plane X axis.
            </summary>
            <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.Style"/> property and calling the ViewportLayout.Entities.Regen() method.</remarks>
            <seealso cref="P:devDept.Eyeshot.Entities.Text.Style"/>
            <seealso cref="T:devDept.Eyeshot.Entities.RadialDim"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)">
            <summary>Standard constructor.</summary>
            <param name="extLine1">First extension line point</param>
            <param name="extLine2">Second extension line point</param>
            <param name="dimLinePos">Dimension line position. Affects text position when the text cannot fit between extension lines.</param>
            <param name="textHeight">Text height</param>
            <param name="dimPlane">The dimension plane</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double)">
            <summary>Sketch plane constructor.</summary>
            <param name="extLine1">First extension line point</param>
            <param name="extLine2">Second extension line point</param>
            <param name="dimLinePos">Dimension line position. Affects text position when the text cannot fit between extension lines.</param>
            <param name="textHeight">Text height</param>
            <param name="sketchPlane">The sketch plane</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearDim.Clone">
            <summary>
            Creates a deep copy of this linear dimension.
            </summary>
            <returns>The new linear dimension object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearDim.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearDim.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.LinearDim.ExtensionBeyondDimLine">
            <summary>
            Specifies the amount to extend the extension line beyond the dimension line.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.LinearDim.OffsetFromOrigin">
            <summary>
            Specifies the offset of extension lines from the origin points.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.LinearDim.LeftArrowhead">
            <summary>
            Gets or sets the left arrow head type.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.LinearDim.RightArrowhead">
            <summary>
            Gets or sets the right arrow head type.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.LinearDim.ExtLine1">
            <summary>
            Gets or sets the first extension line point.
            </summary>
            <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.LinearDim.ExtLine2">
            <summary>
            Gets or sets the second extension line point.
            </summary>
            <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.LinearDim.ShowExtLine1">
            <summary>
            When true shows the first extension line.
            </summary>
            <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.LinearDim.ShowExtLine2">
            <summary>
            When true shows the second extension line.
            </summary>
            <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.BorderSettings">
            <summary>
            Viewport border settings.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.BorderSettings.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.BorderSettings.#ctor(System.Drawing.Color,System.Int32,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="color">Border's color</param>
            <param name="cornerRadius">Border's corner radius</param>
            <param name="visible">Border's visibility status</param>
        </member>
        <member name="P:devDept.Eyeshot.BorderSettings.Color">
            <summary>Gets or sets the border color.</summary>
        </member>
        <member name="P:devDept.Eyeshot.BorderSettings.Visible">
            <summary>Gets or sets the border visibility status.</summary>
        </member>
        <member name="P:devDept.Eyeshot.BorderSettings.CornerRadius">
            <summary>Gets or sets the border corner radius.</summary>
        </member>
        <member name="T:devDept.Eyeshot.EnumDescription">
            <summary>
            EnumConverter supporting System.ComponentModel.DescriptionAttribute
            </summary>
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.EnumDescription.GetDescription(System.Enum)">
            <summary>
            Gets Enum Value's Description Attribute
            </summary>
            <param name="value">The value you want the description attribute for</param>
            <returns>The description, if any, else it's .ToString()</returns>
        </member>
        <member name="M:devDept.Eyeshot.EnumDescription.GetDescription(System.Type,System.String)">
            <summary>
            Gets the description for certaing named value in an Enumeration
            </summary>
            <param name="value">The type of the Enumeration</param>
            <param name="name">The name of the Enumeration value</param>
            <returns>The description, if any, else the passed name</returns>
        </member>
        <member name="M:devDept.Eyeshot.EnumDescription.GetValue(System.Type,System.String)">
            <summary>
            Gets the value of an Enum, based on it's Description Attribute or named value
            </summary>
            <param name="value">The Enum type</param>
            <param name="description">The description or name of the element</param>
            <returns>The value, or the passed in description, if it was not found</returns>
        </member>
        <member name="T:devDept.Eyeshot.mouseButtonsZPR">
            <summary>
            Mouse buttons and their combinations for Zoom / Pan / Rotate.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.mouseButtonsZPR.None">
            <summary>
            None mouse button.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.mouseButtonsZPR.Left">
            <summary>
            Left mouse button.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.mouseButtonsZPR.Right">
            <summary>
            Right mouse button.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.mouseButtonsZPR.Middle">
            <summary>
            Middle mouse button.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.mouseButtonsZPR.XButton1">
            <summary>
            Xbutton1.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.mouseButtonsZPR.XButton2">
            <summary>
            XButton2.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.mouseButtonsZPR.LeftRight">
            <summary>
            Left + Right mouse buttons.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.mouseButtonsZPR.LeftMiddle">
            <summary>
            Left + Middle mouse buttons.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.mouseButtonsZPR.MiddleRight">
            <summary>
            Middle + Right mouse buttons.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.mouseButtonsZPR.LeftMiddleRight">
            <summary>
            Left + Middle + Right mouse buttons.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.modifierKeys">
            <summary>
            ModifierKeys and their combinations.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.modifierKeys.None">
            <summary>
            None key.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.modifierKeys.Shift">
            <summary>
            Shift key.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.modifierKeys.Alt">
            <summary>
            Alt key.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.modifierKeys.Ctrl">
            <summary>
            Ctrl key.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.modifierKeys.CtrlAlt">
            <summary>
            Ctrl + Alt keys.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.modifierKeys.CtrlShift">
            <summary>
            Ctrl + Shift keys.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.modifierKeys.ShiftAlt">
            <summary>
            Ctrl + Alt keys.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.modifierKeys.CtrlShiftAlt">
            <summary>
            Ctrl + Shift + Alt keys.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.MouseButton">
            <summary>MouseButton class.</summary>
        </member>
        <member name="M:devDept.Eyeshot.MouseButton.#ctor(System.Windows.Forms.MouseButtons,devDept.Eyeshot.modifierKeys)">
            <summary>Constructor.
            </summary>
            <param name="button">The mouse button</param>
            <param name="modifierKey">The modifier key</param>
        </member>
        <member name="M:devDept.Eyeshot.MouseButton.#ctor(devDept.Eyeshot.mouseButtonsZPR,devDept.Eyeshot.modifierKeys)">
            <summary>Constructor.
            </summary>
            <param name="button">The mouse button</param>
            <param name="modifierKey">The modifier key</param>
        </member>
        <member name="M:devDept.Eyeshot.MouseButton.ToString">
            <summary>
            Converts this MouseButton to a human readable string.
            </summary>
            <returns>A string that represents this MouseButton.</returns>
        </member>
        <member name="P:devDept.Eyeshot.MouseButton.Button">
            <summary>
            The mouse button.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.MouseButton.ModifierKey">
            <summary>
            The modifier key.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.MovementSettingsBase">
            <summary>
            Base class for Zoom/Pan/Rotate settings.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.MovementSettingsBase.#ctor(devDept.Eyeshot.MouseButton,System.Int32,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="mouseButton">Mouse button and modifier key</param>
            <param name="keysStep">Arrow keys step (in pixels)</param>
            <param name="enabled">A value indicating whether the movement is enabled</param>
        </member>
        <member name="P:devDept.Eyeshot.MovementSettingsBase.MouseButton">
            <summary>
            Mouse button and modifier key.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.MovementSettingsBase.KeysStep">
            <summary>
            Gets or sets the movement by keys step (in pixels).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.MovementSettingsBase.Enabled">
            <summary>
            Gets or sets a value indicating whether the rotate command is enabled. Born to avoid accidental rotations in 2D views.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.RotateSettings">
            <summary>Rotate command settings.</summary>
        </member>
        <member name="M:devDept.Eyeshot.RotateSettings.#ctor(devDept.Eyeshot.MouseButton,System.Double,System.Boolean,System.Double,devDept.Eyeshot.rotationType,devDept.Eyeshot.rotationCenterType)">
            <summary>Standard constructor.</summary>
            <param name="mouseButton">Rotate mouse button and modifier key</param>
            <param name="step">Rotate by arrow keys step in degrees</param>
            <param name="enabled">False to disable view rotation</param>
            <param name="speed">Rotate speed</param>
            <param name="rotationMode">Rotation mode</param>
            <param name="rotationCenter">Rotation center mode</param>
        </member>
        <member name="M:devDept.Eyeshot.RotateSettings.#ctor(devDept.Eyeshot.MouseButton,System.Double,System.Boolean,System.Double,devDept.Eyeshot.rotationType,devDept.Eyeshot.rotationCenterType,devDept.Geometry.Point3D)">
            <summary>Standard constructor.</summary>
            <param name="mouseButton">Rotate mouse button and modifier key</param>
            <param name="step">Rotate by arrow keys step in degrees</param>
            <param name="enabled">False to disable view rotation</param>
            <param name="speed">Rotate speed</param>
            <param name="rotationMode">Rotation mode</param>
            <param name="rotationCenter">Rotation center mode</param>
            <param name="center">Rotation center point</param>
        </member>
        <member name="P:devDept.Eyeshot.RotateSettings.KeysStep">
            <summary>
            Gets or sets the rotate by arrow keys step (in degrees).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.RotateSettings.Speed">
            <summary>
            Gets or sets the rotation speed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.RotateSettings.RotationMode">
            <summary>
            Gets or sets a value indicating whether rotation around model Z axis is preferred.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.RotateSettings.RotationCenter">
            <summary>
            Rotation center mode.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.RotateSettings.Center">
            <summary>
            Rotation center point (used only when <see cref="P:devDept.Eyeshot.RotateSettings.RotationCenter"/> is <see cref="F:devDept.Eyeshot.rotationCenterType.Point"/>).
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ShortcutKeysSettings">
            <summary>
            Keyboard shortcut settings.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ShortcutKeysSettings.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ShortcutKeysSettings.#ctor(System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
            <summary>
            Constructor (deprecated).
            </summary>
            <param name="selectAll">The select all shortcut</param>
            <param name="invertSelection">The invert selection shortcut</param>
            <param name="deleteSelection">The delete selection shortcut</param>
            <param name="zoomFit">The zoom fit shortcut</param>
            <param name="zoomIn">The zoom in shortcut</param>
            <param name="zoomOut">The zoom out shortcut</param>
            <param name="copySelection">The copy selection shortcut</param>
            <param name="pasteSelection">The paste selection shortcut</param>
            <param name="cutSelection">The cut selection shortcut</param>
            <param name="groupSelection">The group selection shortcut</param>
            <param name="ungroupSelection">The ungroup selection shortcut</param>
            <param name="rotateRight">The rotate right shortcut</param>
            <param name="rotateUp">The rotate up shortcut</param>
            <param name="rotateLeft">The rotate left shortcut</param>
            <param name="rotateDown">The rotate down shortcut</param>
            <param name="panRight">The pan right shortcut</param>
            <param name="panUp">The pan up shortcut</param>
            <param name="panLeft">The pan left shortcut</param>
            <param name="panDown">The pan down shortcut</param>
            <param name="cancelBackgroundWork">The cancel background work shortcut</param>
        </member>
        <member name="M:devDept.Eyeshot.ShortcutKeysSettings.#ctor(System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
            <summary>
            Constructor.
            </summary>
            <param name="selectAll">The select all shortcut</param>
            <param name="invertSelection">The invert selection shortcut</param>
            <param name="deleteSelection">The delete selection shortcut</param>
            <param name="zoomFit">The zoom fit shortcut</param>
            <param name="zoomIn">The zoom in shortcut</param>
            <param name="zoomOut">The zoom out shortcut</param>
            <param name="copySelection">The copy selection shortcut</param>
            <param name="pasteSelection">The paste selection shortcut</param>
            <param name="cutSelection">The cut selection shortcut</param>
            <param name="groupSelection">The group selection shortcut</param>
            <param name="ungroupSelection">The ungroup selection shortcut</param>
            <param name="rotateRight">The rotate right shortcut</param>
            <param name="rotateUp">The rotate up shortcut</param>
            <param name="rotateLeft">The rotate left shortcut</param>
            <param name="rotateDown">The rotate down shortcut</param>
            <param name="panRight">The pan right shortcut</param>
            <param name="panUp">The pan up shortcut</param>
            <param name="panLeft">The pan left shortcut</param>
            <param name="panDown">The pan down shortcut</param>
            <param name="cancelBackgroundWork">The cancel background work shortcut</param>
            <param name="navigationRight">The right navigation movement shortcut</param>
            <param name="navigationLeft">The left navigation movement shortcut</param>
            <param name="navigationUp">The up navigation movement shortcut</param>
            <param name="navigationDown">The down navigation movement shortcut</param>
            <param name="navigationForward">The forward navigation movement shortcut</param>
            <param name="navigationBackward">The backward navigation movement shortcut</param>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.SelectAll">
            <summary>
            Gets or sets the select all shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.InvertSelection">
            <summary>
            Gets or sets the invert selection shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.DeleteSelection">
            <summary>
            Gets or sets the delete selection shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.ZoomFit">
            <summary>
            Gets or sets the zoom fit shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.CopySelection">
            <summary>
            Gets or sets the copy selection shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.PasteSelection">
            <summary>
            Gets or sets the paste selection shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.CutSelection">
            <summary>
            Gets or sets the cut selection shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.GroupSelection">
            <summary>
            Gets or sets the group selection shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.UngroupSelection">
            <summary>
            Gets or sets the ungroup selection shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.ZoomIn">
            <summary>
            Gets or sets the zoom in shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.ZoomOut">
            <summary>
            Gets or sets the zoom out key shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.RotateRight">
            <summary>
            Gets or sets the rotate right shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.RotateUp">
            <summary>
            Gets or sets the rotate up shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.RotateLeft">
            <summary>
            Gets or sets the rotate left shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.RotateDown">
            <summary>
            Gets or sets the rotate down shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.PanRight">
            <summary>
            Gets or sets the pan right shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.PanUp">
            <summary>
            Gets or sets the pan up shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.PanLeft">
            <summary>
            Gets or sets the pan left shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.PanDown">
            <summary>
            Gets or sets the pan down shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.CancelBackgroundWork">
            <summary>
            Gets or sets the cancel background work shortcut.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.NavigationRight">
            <summary>
            Gets or sets the right navigation movement shortcut (for <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk"/> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly"/> camera navigation modes).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.NavigationLeft">
            <summary>
            Gets or sets the left navigation movement shortcut (for <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk"/> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly"/> camera navigation modes).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.NavigationUp">
            <summary>
            Gets or sets the up navigation movement shortcut (for <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk"/> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly"/> camera navigation modes).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.NavigationDown">
            <summary>
            Gets or sets the down navigation movement shortcut (for <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk"/> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly"/> camera navigation modes).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.NavigationForward">
            <summary>
            Gets or sets the forward navigation movement shortcut (for <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk"/> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly"/> camera navigation modes).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ShortcutKeysSettings.NavigationBackward">
            <summary>
            Gets or sets the backward navigation movement shortcut (for <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk"/> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly"/> camera navigation modes).
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ZoomSettings">
            <summary>Zoom command settings.</summary>
        </member>
        <member name="M:devDept.Eyeshot.ZoomSettings.#ctor(devDept.Eyeshot.MouseButton,System.Int32,System.Boolean,devDept.Eyeshot.zoomStyleType,System.Boolean,System.Double,System.Drawing.Color)">
            <summary>Standard constructor.</summary>
            <param name="mouseButton">Zoom mouse button and modifier key</param>
            <param name="keysStep">Zoom by arrow keys step (in pixels)</param>
            <param name="enabled">False to disable view zoom</param>
            <param name="mode">Zoom mode</param>
            <param name="reverse">Zoom by mouse wheel direction</param>
            <param name="speed">Zoom speed</param>
            <param name="boxColor">Color of the zoom window box</param>
        </member>
        <member name="M:devDept.Eyeshot.ZoomSettings.#ctor(devDept.Eyeshot.MouseButton,System.Int32,System.Boolean,devDept.Eyeshot.zoomStyleType,System.Boolean,System.Double,System.Drawing.Color,devDept.Eyeshot.Camera.perspectiveFitType)">
            <summary>Standard constructor.</summary>
            <param name="mouseButton">Zoom mouse button and modifier key</param>
            <param name="keysStep">Zoom by arrow keys step (in pixels)</param>
            <param name="enabled">False to disable view zoom</param>
            <param name="mode">Zoom mode</param>
            <param name="reverse">Zoom by mouse wheel direction</param>
            <param name="speed">Zoom speed</param>
            <param name="boxColor">Color of the zoom window box</param>
            <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
        </member>
        <member name="M:devDept.Eyeshot.ZoomSettings.#ctor(devDept.Eyeshot.MouseButton,System.Int32,System.Boolean,devDept.Eyeshot.zoomStyleType,System.Boolean,System.Double,System.Drawing.Color,devDept.Eyeshot.Camera.perspectiveFitType,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="mouseButton">Zoom mouse button and modifier key</param>
            <param name="keysStep">Zoom by arrow keys step (in pixels)</param>
            <param name="enabled">False to disable view zoom</param>
            <param name="mode">Zoom mode</param>
            <param name="reverse">Zoom by mouse wheel direction</param>
            <param name="speed">Zoom speed</param>
            <param name="boxColor">Color of the zoom window box</param>
            <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
            <param name="fitLabels">Zoom fit mode for labels</param>
        </member>
        <member name="M:devDept.Eyeshot.ZoomSettings.#ctor(devDept.Eyeshot.MouseButton,System.Int32,System.Boolean,devDept.Eyeshot.zoomStyleType,System.Boolean,System.Double,System.Drawing.Color,devDept.Eyeshot.Camera.perspectiveFitType,System.Boolean,System.Int32)">
            <summary>Standard constructor.</summary>
            <param name="mouseButton">Zoom mouse button and modifier key</param>
            <param name="keysStep">Zoom by arrow keys step (in pixels)</param>
            <param name="enabled">False to disable view zoom</param>
            <param name="mode">Zoom mode</param>
            <param name="reverse">Zoom by mouse wheel direction</param>
            <param name="speed">Zoom speed</param>
            <param name="boxColor">Color of the zoom window box</param>
            <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
            <param name="fitLabels">Zoom fit mode for labels</param>
            <param name="fitMargin">Zoom fit margin</param>
        </member>
        <member name="P:devDept.Eyeshot.ZoomSettings.BoxColor">
            <summary>
            Gets or sets the zoom window box color.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ZoomSettings.ZoomStyle">
            <summary>
            Zoom mode, affects only zoom by mouse wheel.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ZoomSettings.ReverseMouseWheel">
            <summary>
            Revertes the zoom by mouse wheel direction.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ZoomSettings.Speed">
            <summary>
            Gets or sets the <see cref="M:devDept.Eyeshot.ViewportLayout.ZoomCamera(System.Int32)"/> speed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ZoomSettings.PerspectiveFitMode">
            <summary>
            Gets or sets the zoom fit accuracy in perspective projection mode.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ZoomSettings.FitLabels">
            <summary>
            Gets or sets the zoom fit mode for labels.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ZoomSettings.FitMargin">
            <summary>
            Gets or sets the zoom fit margin.
            </summary>
            <see cref="M:devDept.Eyeshot.ViewportLayout.ZoomFit"/>
        </member>
        <member name="T:devDept.Eyeshot.PanSettings">
            <summary>Pan command settings.</summary>
        </member>
        <member name="M:devDept.Eyeshot.PanSettings.#ctor(devDept.Eyeshot.MouseButton,System.Int32,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="mouseButton">Pan mouse button and modifier key</param>
            <param name="keysStep">Pan by arrow keys step (in pixels)</param>
            <param name="enabled">False to disable view pan</param>
        </member>
        <member name="T:devDept.Eyeshot.BoundingBox">
            <summary>Bounding box settings.</summary>
        </member>
        <member name="F:devDept.Eyeshot.BoundingBox.modelSizeLabel">
            <summary>
            The label of the box size.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.BoundingBox.#ctor">
            <summary>Empty constructor.</summary>
        </member>
        <member name="M:devDept.Eyeshot.BoundingBox.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.UInt16,System.Boolean,System.Boolean,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>Standard constructor.</summary>  
            <param name="labelFont">Label font</param>
            <param name="labelColor">Label color</param>
            <param name="lineColor">Color used to draw the wireframe box</param>
            <param name="linePattern">Pattern used to draw the wireframe box</param>
            <param name="visible">Visibility status</param>
            <param name="overrideSceneExtents">IF true, considers the BoundingBox.Min and BoundingBox.Max as the extension of the scene</param>
            <param name="min">Defines the minimum extension of the scene</param>
            <param name="max">Defines the maximum extension of the scene</param>
        </member>
        <member name="M:devDept.Eyeshot.BoundingBox.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.UInt16,System.Boolean,System.Boolean,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String,System.String)">
            <summary>Standard constructor.</summary>  
            <param name="labelFont">Label font</param>
            <param name="labelColor">Label color</param>
            <param name="lineColor">Color used to draw the wireframe box</param>
            <param name="linePattern">Pattern used to draw the wireframe box</param>
            <param name="visible">Visibility status</param>
            <param name="overrideSceneExtents">IF true, considers the BoundingBox.Min and BoundingBox.Max as the extension of the scene</param>
            <param name="min">Defines the minimum extension of the scene</param>
            <param name="max">Defines the maximum extension of the scene</param>
            <param name="textSuffix">Text label suffix</param>
            <param name="notApplicableText">The text showed when the <see cref="T:devDept.Eyeshot.EntityList"/> is empty.</param>
        </member>
        <member name="P:devDept.Eyeshot.BoundingBox.LabelFont">
            <summary>Gets or sets the label font.</summary>
        </member>
        <member name="P:devDept.Eyeshot.BoundingBox.LabelColor">
            <summary>Gets or sets the label color.</summary>
        </member>
        <member name="P:devDept.Eyeshot.BoundingBox.LineColor">
            <summary>Gets or sets the color used to draw the wireframe box.</summary>
        </member>
        <member name="P:devDept.Eyeshot.BoundingBox.LinePattern">
            <summary>Gets or sets the pattern used to draw the wireframe box.</summary>
        </member>
        <member name="P:devDept.Eyeshot.BoundingBox.Visible">
            <summary>Visibility status.</summary>
        </member>
        <member name="P:devDept.Eyeshot.BoundingBox.OverrideSceneExtents">
            <summary>
            if true, the BoundingBox.Min and BoundingBox.Max properties override the scene extension.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.BoundingBox.Min">
            <summary>
            Defines the minimum extension of the scene (for viewport fitting and visualization puroposes).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.BoundingBox.Max">
            <summary>
            Defines the maximum extension of the scene (for viewport fitting and visualization puroposes).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.BoundingBox.TextSuffix">
            <summary>
            Gets or sets the bounding box text label suffix.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.BoundingBox.NotApplicableText">
            <summary>
            Gets or sets the text showed when the <see cref="T:devDept.Eyeshot.EntityList"/> is empty.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Mouse3DSettings">
            <summary>
            Mouse 3D settings.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Mouse3DSettings.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Standard constructor.
            </summary>
            <param name="panSpeed">Pan spee</param>
            <param name="zoomSpeed">Zoom speed</param>
            <param name="rotateSpeed">Rotation speed</param>
        </member>
        <member name="M:devDept.Eyeshot.Mouse3DSettings.#ctor(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Standard cosntructor.
            </summary>
            <param name="panSpeed">Pan speed</param>
            <param name="zoomSpeed">Zoom speed</param>
            <param name="rotateSpeed">Rotation speed</param>
            <param name="enableViewportMovements">If true, enables the viewport movements</param>
        </member>
        <member name="P:devDept.Eyeshot.Mouse3DSettings.PanSpeed">
            <summary>
            Gets or sets the 3D mouse pan speed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Mouse3DSettings.RotateSpeed">
            <summary>
            Gets or sets the 3D mouse rotation speed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Mouse3DSettings.ZoomSpeed">
            <summary>
            Gets or sets the 3D mouse zoom speed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Mouse3DSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether the movements are enabled.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.MultiTouchSettings">
            <summary>
            Multi Touch settings
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.MultiTouchSettings.#ctor(System.Boolean)">
            <summary>
            Standard constructor.
            </summary>
            <param name="enableMultiTouchMovements">If true, the movements are enabled</param>
        </member>
        <member name="P:devDept.Eyeshot.MultiTouchSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether the movements are enabled.
            </summary>
            <remarks>It must be set before the control handle is created (in the Form or Window constructor).</remarks>
        </member>
        <member name="T:devDept.Eyeshot.NavigationSettings">
            <summary>
            Settings for the <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk"/> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly"/> camera navigation modes.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.NavigationSettings.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.NavigationSettings.#ctor(devDept.Eyeshot.Camera.navigationType,devDept.Eyeshot.MouseButton,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
            <summary>
            Standard cosntructor.
            </summary>
            <param name="mouseButton">The mouse button used for the navigation</param>
            <param name="min">The minimum limit of the navigation volume</param>
            <param name="max">The maximum limit of the navigation volume</param>
            <param name="acceleration">The acceleration of the camera movement</param>
            <param name="speed">THe maximum velocity of the camera movement</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:devDept.Eyeshot.NavigationSettings.Mode" -->
        <member name="P:devDept.Eyeshot.NavigationSettings.MouseButton">
            <summary>
            Gets or sets the mouse button used for the navigation.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.NavigationSettings.Max">
            <summary>
            Gets or sets the maximum limit of the navigation volume.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.NavigationSettings.Min">
            <summary>
            Gets or sets the minimum limit of the navigation volume.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.NavigationSettings.Acceleration">
            <summary>
            Gets or sets the acceleration of the camera movement.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.NavigationSettings.Speed">
            <summary>
            Gets or sets the speed of the camera movement.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.NavigationSettings.RotationSpeed">
            <summary>
            Gets or sets the rotation speed of the camera movement.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.SelectionBoxColorsSettings">
            <summary>
            Class that holds the colors used to draw the selection box and polygon.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.SelectionBoxColorsSettings.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.SelectionBoxColorsSettings.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Standard constructor.
            </summary>
            <param name="crossing">The color used to draw the box and polygon for crossing selection mode</param>
            <param name="enclosed">The color used to draw the box and polygon for enclosed selection mode</param>
            <param name="visible">The color used to draw the box and polygon for visible selection mode</param>
        </member>
        <member name="P:devDept.Eyeshot.SelectionBoxColorsSettings.Crossing">
            <summary>
            Gets or sets the color used to draw the box and polygon for crossing selection modes (<see cref="F:devDept.Eyeshot.actionType.SelectByBox"/>, <see cref="F:devDept.Eyeshot.actionType.SelectByPolygon"/>).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.SelectionBoxColorsSettings.Enclosed">
            <summary>
            Gets or sets the color used to draw the box and polygon for enclosed selection modes (<see cref="F:devDept.Eyeshot.actionType.SelectByBoxEnclosed"/>, <see cref="F:devDept.Eyeshot.actionType.SelectByPolygonEnclosed"/>).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.SelectionBoxColorsSettings.Visible">
            <summary>
            Gets or sets the color used to draw the box and polygon for visible selection modes (<see cref="F:devDept.Eyeshot.actionType.SelectVisibleByBox"/>, <see cref="F:devDept.Eyeshot.actionType.SelectVisibleByPolygon"/>).
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.MagnifyingGlassSettings">
            <summary>
            Class that holds the settings for the magnifying glass feature.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.MagnifyingGlassSettings.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.MagnifyingGlassSettings.#ctor(System.Boolean,System.Drawing.Size,System.Double)">
            <summary>
            Standard constructor.
            </summary>
            <param name="enabled">The enable status</param>
            <param name="size">The lens size</param>
            <param name="factor">The lens magnifying factor</param>
        </member>
        <member name="M:devDept.Eyeshot.MagnifyingGlassSettings.#ctor(System.Boolean,System.Drawing.Size,System.Double,System.Boolean)">
            <summary>
            Standard constructor.
            </summary>
            <param name="enabled">The enable status</param>
            <param name="size">The lens size</param>
            <param name="factor">The lens magnifying factor</param>
            <param name="scaleLineWeight">If true, the line weights of the wireframe entities are scaled by the <see cref="P:devDept.Eyeshot.MagnifyingGlassSettings.Factor"/>, else they keep their size on screen in the magnified drawing.</param>        
        </member>
        <member name="P:devDept.Eyeshot.MagnifyingGlassSettings.Enabled">
            <summary>
            Gets or sets the Enabled state of the magnifying glass.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.MagnifyingGlassSettings.Size">
            <summary>
            Gets or sets the size of the magnifying glass lens.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to update the magnyfying glass shape.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.MagnifyingGlassSettings.Factor">
            <summary>
            Gets or sets the magnifying factor of the lens.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.MagnifyingGlassSettings.ScaleLineWeight">
            <summary>
            If true, the line weights of the wireframe entities are scaled by the <see cref="P:devDept.Eyeshot.MagnifyingGlassSettings.Factor"/>, else they keep their size on screen in the magnified drawing.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.MagnifyingGlassSettings.Suspend">
            <summary>
            Suspends the drawing of the lens when the cursor is over the toolbar or the viewcube.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.DisplayModeSettingsBase">
            <summary>Display Mode settings for Wirefame mode.</summary>
        </member>
        <member name="M:devDept.Eyeshot.DisplayModeSettingsBase.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.DisplayModeSettingsBase.#ctor(System.Boolean,System.Drawing.Color,System.Single,System.Single,devDept.Eyeshot.silhouettesDrawingType)">
            <summary>Standard constructor.</summary>
            <param name="showEdges">Edges Visibility flag</param>
            <param name="edgeColor">Edges color</param>
            <param name="edgeThickness">Edges Thickness</param>
            <param name="silhouetteThickness">Thickness used to draw the silhouettes</param>
            <param name="silhouettesDrawingMode">Silhouettes drawing mode</param>
        </member>
        <member name="P:devDept.Eyeshot.DisplayModeSettingsBase.ShowEdges">
            <summary>Gets or sets the entity edges visibility status.</summary>
        </member>
        <member name="P:devDept.Eyeshot.DisplayModeSettingsBase.EdgeColor">
            <summary>Gets or sets the entity edges color, applies only to single color style mode.</summary>
        </member>
        <member name="P:devDept.Eyeshot.DisplayModeSettingsBase.EdgeThickness">
            <summary>Gets or sets the entity edges thickness.</summary>
        </member>
        <member name="P:devDept.Eyeshot.DisplayModeSettingsBase.SilhouettesDrawingMode">
            <summary>Gets or sets the silhouettes drawing mode.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DisplayModeSettingsBase.SilhouetteThickness">
            <summary>Gets or sets the Silhouettes thickness.</summary>
        </member>
        <member name="T:devDept.Eyeshot.DisplayModeSettings">
            <summary>Display Mode settings for Wirefame mode.</summary>
        </member>
        <member name="M:devDept.Eyeshot.DisplayModeSettings.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.DisplayModeSettings.#ctor(System.Boolean,devDept.Eyeshot.edgeColorMethodType,System.Drawing.Color,System.Single,System.Single,devDept.Eyeshot.silhouettesDrawingType,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="showEdges">Edges Visibility flag</param>
            <param name="edgeColorMethod">Edges Color mode</param>
            <param name="edgeColor">Edges color</param>
            <param name="edgeThickness">Edges Thickness</param>
            <param name="silhouetteThickness">Thickness used to draw the silhouettes</param>
            <param name="silhouettesDrawingMode">Silhouettes drawing mode</param>
            <param name="showInternalWires">Internal wireframe visibility</param>
        </member>
        <member name="P:devDept.Eyeshot.DisplayModeSettings.EdgeColorMethod">
            <summary>
            Gets or sets the entity edges color method.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DisplayModeSettings.ShowInternalWires">
            <summary>Gets or sets the wisualization of internal wireframe.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.DisplayModeSettingsFlat">
            <summary>Display Mode settings for Flat mode.</summary>
            <remarks>There is no option for EdgeColorMethod and for ShowInternalWires because they would not be visible due to the flat shading.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.DisplayModeSettingsFlat.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.DisplayModeSettingsFlat.#ctor(System.Boolean,System.Drawing.Color,System.Single,System.Single,devDept.Eyeshot.silhouettesDrawingType)">
            <summary>Standard constructor.</summary>
            <param name="showEdges">Edges Visibility flag</param>
            <param name="edgeColor">Edges color</param>
            <param name="edgeThickness">Edges Thickness</param>
            <param name="silhouetteThickness">Thickness used to draw the silhouettes</param>
            <param name="silhouettesDrawingMode">Silhouettes drawing mode</param>
        </member>
        <member name="T:devDept.Eyeshot.DisplayModeSettingsShaded">
            <summary>Display Mode settings for Shaded mode.</summary>
        </member>
        <member name="M:devDept.Eyeshot.DisplayModeSettingsShaded.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DisplayModeSettingsShaded.ShadowMode">
            <summary>
            Shadow Mode.
            </summary>
            <remarks>The <see cref="F:devDept.Graphics.shadowType.Planar"/> shadows plane position is determined by the scene bounding box and the <see cref="P:devDept.Eyeshot.ViewportLayout.GroundPlaneDistance"/>.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.DisplayModeSettingsRendered">
            <summary>Display Mode settings for Rendered mode.</summary>
        </member>
        <member name="M:devDept.Eyeshot.DisplayModeSettingsRendered.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DisplayModeSettingsRendered.EnvironmentMappingImage">
            <summary>
            Gets or sets the Environment map.
            </summary>
            <remarks>The environment intensity can be changed for all entities with the <see cref="P:devDept.Graphics.Material.Environment"/> property of <see cref="P:devDept.Eyeshot.ViewportLayout.DefaultMaterial"/>, or can
            be changed individually for each entity <see cref="T:devDept.Graphics.Material"/></remarks>
        </member>
        <member name="P:devDept.Eyeshot.DisplayModeSettingsRendered.EnvironmentMapping">
            <summary>
            Gets or sets the Environment map visibility status.
            </summary>
            <remarks>The environment intensity can be changed for all entities with the <see cref="P:devDept.Graphics.Material.Environment"/> property of <see cref="P:devDept.Eyeshot.ViewportLayout.DefaultMaterial"/>, or can
            be changed individually for each entity <see cref="T:devDept.Graphics.Material"/></remarks>
        </member>
        <member name="P:devDept.Eyeshot.DisplayModeSettingsRendered.PlanarReflections">
            <summary>
            Gets or sets the planar reflections visibility status
            </summary>
            <remarks>The reflection plane position is determined by the scene bounding box and the <see cref="P:devDept.Eyeshot.ViewportLayout.GroundPlaneDistance"/>.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.DisplayModeSettingsRendered.ReflectionsIntensity">
            <summary>
            Gets or sets the planar reflections visibility status
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.DisplayModeSettingsRendered.RealisticShadowQuality">
            <summary>
            Gets or sets the quality of realistic shadows.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.HiddenLinesSettings">
            <summary>
            Viewport Hidden Lines settings.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesSettings.#ctor(System.Boolean,devDept.Eyeshot.hiddenLinesColorMethodType,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Boolean,devDept.Eyeshot.silhouettesDrawingType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.UInt16)">
            <summary>Standard constructor.</summary>
            <param name="lighting">Enable/Disable lighting in hidden lines mode</param>
            <param name="colorMethod">Color used to draw the entities</param>
            <param name="showEdges">Enable/disable the edges visualization</param>
            <param name="silhouetteThickness">Thickness used to draw the silhouettes</param>
            <param name="edgeThickness">Thickness used to draw the edges</param>
            <param name="wireThickness">Thickness used to draw the wireframe entities</param>
            <param name="dashedHiddenLinesThickness">Thickness used to draw the dashed hidden lines</param>
            <param name="dashedHiddenLines">Enable/disable the dashed hidden lines visualization</param>
            <param name="silhouettesDrawingMode">Silhouettes drawing mode</param>
            <param name="silhouetteColor">Color used to draw the silhouettes</param>
            <param name="edgeColor">Color used to draw the edges</param>
            <param name="wireColor">Color used to draw the wireframe entities</param>
            <param name="dashedHiddenLinesColor">Color used to draw the dashed hidden lines</param>
            <param name="dashedHiddenLinesPattern">Pattern used to draw the dashed hidden lines</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesSettings.#ctor(System.Boolean,devDept.Eyeshot.hiddenLinesColorMethodType,System.Boolean,devDept.Eyeshot.edgeColorMethodType,System.Single,System.Single,System.Single,System.Single,System.Boolean,devDept.Eyeshot.silhouettesDrawingType,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.UInt16)">
            <summary>Standard constructor.</summary>
            <param name="lighting">Enable/Disable lighting in hidden lines mode</param>
            <param name="colorMethod">Color used to draw the entities</param>
            <param name="showEdges">Enable/disable the edges visualization</param>
            <param name="edgeColorMethod">Edges Color mode</param>
            <param name="silhouetteThickness">Thickness used to draw the silhouettes</param>
            <param name="edgeThickness">Thickness used to draw the edges</param>
            <param name="wireThickness">Thickness used to draw the wireframe entities</param>
            <param name="dashedHiddenLinesThickness">Thickness used to draw the dashed hidden lines</param>
            <param name="dashedHiddenLines">Enable/disable the dashed hidden lines visualization</param>
            <param name="silhouettesDrawingMode">Silhouettes drawing mode</param>
            <param name="showInternalWires">Internal wireframe visibility</param>
            <param name="silhouetteColor">Color used to draw the silhouettes</param>
            <param name="edgeColor">Color used to draw the edges</param>
            <param name="wireColor">Color used to draw the wireframe entities</param>
            <param name="dashedHiddenLinesColor">Color used to draw the dashed hidden lines</param>
            <param name="dashedHiddenLinesPattern">Pattern used to draw the dashed hidden lines</param>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesSettings.Lighting">
            <summary>Gets or sets the Lighting status.</summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesSettings.ColorMethod">
            <summary>Gets or sets the entity color.</summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesSettings.SilhouetteColor">
            <summary>Gets or sets the Silhouettes color.</summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesSettings.WireColor">
            <summary>Gets or sets the Wires color.</summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesSettings.WireThickness">
            <summary>Gets or sets the Wires thickness.</summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesSettings.DashedHiddenLines">
            <summary>Gets or sets the dashed hidden lines visualization.</summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesSettings.DashedHiddenLinesColor">
            <summary>Gets or sets the dashed hidden lines color.</summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesSettings.DashedHiddenLinesThickness">
            <summary>Gets or sets the dashed hidden lines thickness.</summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesSettings.DashedHiddenLinesPattern">
            <summary>Gets or sets the dashed hidden lines pattern.</summary>
        </member>
        <member name="T:devDept.Eyeshot.Properties.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Cancel">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Cancel_b">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Next">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Next_b">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Origin">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Pan">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Pan_b">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Previous">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Previous_b">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Rotate">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Rotate_b">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Separator">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Separator_b">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Zoom">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.Zoom_b">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.ZoomFit">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.ZoomFit_b">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.ZoomWindow">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Properties.Resource.ZoomWindow_b">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.edgeColorMethodType">
            <summary>Edge color type.</summary>
        </member>
        <member name="F:devDept.Eyeshot.edgeColorMethodType.SingleColor">
            <summary>
            The color is defined <see cref="P:devDept.Eyeshot.DisplayModeSettings.EdgeColorMethod"/>
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.edgeColorMethodType.EntityColor">
            <summary>
            The color is defined by the entity color
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.hiddenLinesColorMethodType">
            <summary>Hidden Lines color type.</summary>
        </member>
        <member name="F:devDept.Eyeshot.hiddenLinesColorMethodType.SingleColor">
            <summary>
            The color is defined <see cref="P:devDept.Eyeshot.HiddenLinesSettings.WireColor"/>
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.hiddenLinesColorMethodType.EntityColor">
            <summary>
            The color is defined by the entity color
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.hiddenLinesColorMethodType.EntityMaterial">
            <summary>
            The color is defined by the entity material
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.rotationType">
            <summary>
            Rotation mode type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.rotationType.Trackball">
            <summary>
            Trackball
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.rotationType.Turntable">
            <summary>
            Turntable
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.zoomStyleType">
            <summary>
            Zoom type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.zoomStyleType.Centered">
            <summary>
            At viewport center.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.zoomStyleType.AtCursorLocation">
            <summary>
            At current mouse cursor location.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.rotationCenterType">
            <summary>
            Rotation center type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.rotationCenterType.ViewportCenter">
            <summary>
            Viewport center.
            </summary>
            <remarks>"If the model is all inside the camera frustum, it rotates around its bounding box center.
            Else it rotates around the viewport center at a mean depth of the current visible scene."
            </remarks>
        </member>
        <member name="F:devDept.Eyeshot.rotationCenterType.CursorLocation">
            <summary>
            Current mouse cursor location.
            </summary>
            <remarks>
            if the model is all inside the camera frustum, it rotates around its bounding box center. 
            Else it rotates around the point under the mouse. If under the mouse there is no depth, the rotation happens around the viewport center at a mean depth of the current visible scene.
            </remarks>
        </member>
        <member name="F:devDept.Eyeshot.rotationCenterType.Point">
            <summary>
            Rotates around the <see cref="P:devDept.Eyeshot.RotateSettings.Center"/>.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.silhouettesDrawingType">
            <summary>
            Silhouettes drawing type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.silhouettesDrawingType.Never">
            <summary>
            Never draws the silhouettes.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.silhouettesDrawingType.Always">
            <summary>
            Draws the silhouettes at each frame (slower).
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.silhouettesDrawingType.LastFrame">
            <summary>
            Draws the silhouettes only in the last frame of a zoom / pan / rotation sequence.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.booleanFailureType">
            <summary>
            Result for a boolean operation.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.booleanFailureType.NotIntersecting">
            <summary>
            The entities don't intersect.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.booleanFailureType.Failed">
            <summary>
            The operation failed.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.booleanFailureType.Success">
            <summary>
            The operation was successful.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.textureMappingType">
            <summary>Texture mapping type.</summary>
        </member>
        <member name="F:devDept.Eyeshot.textureMappingType.Plate">
            <summary>
            Applies material's texture only on top and bottom face with the same XY orientation
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.textureMappingType.Cubic">
            <summary>
            Applies material's texture using cubic mapping
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.textureMappingType.Cylindrical">
            <summary>
            Applies material's texture using cylindrical mapping
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.textureMappingType.Spherical">
            <summary>
            Applies material's texture using spherical mapping
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.actionType">
            <summary>
            Viewport action type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.Zoom">
            <summary>
            Zoom +/-
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.Pan">
            <summary>
            Pan
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.Rotate">
            <summary>
            Rotate
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.ZoomWindow">
            <summary>
            Zoom Window
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.SelectByPick">
            <summary>
            Entity selection by pick
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.SelectByBox">
            <summary>
            Entity selection by box
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.SelectByPolygon">
            <summary>
            Entity selection by polygon
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.SelectVisibleByPick">
            <summary>
            Entity selection by pick on visible only
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.SelectVisibleByBox">
            <summary>
            Entity selection by box on visible only
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.SelectVisibleByPolygon">
            <summary>
            Entity selection by polygon on visible only
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.SelectByBoxEnclosed">
            <summary>
            Entity selection by box on enclosed items only
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.SelectByPolygonEnclosed">
            <summary>
            Entity selection by polygon on enclosed only
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.actionType.SelectVisibleByPickLabel">
            <summary>
            Label selection by pick on visible only
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.viewportLayoutType">
            <summary>
            Viewports layout type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewportLayoutType.None">
            <summary>
            No viewports
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewportLayoutType.SingleViewport">
            <summary>
            One viewport
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewportLayoutType.TwoViewportsVertical">
            <summary>
            Two viewports, split vertically
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewportLayoutType.TwoViewportsHorizontal">
            <summary>
            Two viewports split horizontally
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewportLayoutType.ThreeViewportsWithOneOnLeft">
            <summary>
            One viewport on the left and two on the right
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewportLayoutType.ThreeViewportsWithOneOnTop">
            <summary>
            One viewport on top and two on bottom
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewportLayoutType.ThreeViewportsWithOneOnRight">
            <summary>
            One viewport on the right and two on the left
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewportLayoutType.ThreeViewportsWithOneOnBottom">
            <summary>
            One viewport on bottom and two on top
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewportLayoutType.FourViewports">
            <summary>
            Four viewports
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewportLayoutType.Stacked">
            <summary>
            Vertical stack layout
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.colorThemeType">
            <summary>
            Color theme for UI elements.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.colorThemeType.Light">
            <summary>
            Light color
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.colorThemeType.Dark">
            <summary>
            Dark color
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ClipboardMetafileHelper.OpenClipboard(System.IntPtr)">
            The code samples that follow demonstrate how to add a metafile to the Clipboard so that it is visible to other applications. 
        </member>
        <member name="M:devDept.Eyeshot.ClipboardMetafileHelper.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the contents of input to output. Doesn't close either stream.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.hiddenLinesViewType">
            <summary>
            Hidden lines view type.
            </summary> 
        </member>
        <member name="F:devDept.Eyeshot.hiddenLinesViewType.Extents">
            <summary>
            Zooms the current viewport to contain all objects in the model.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.hiddenLinesViewType.Window">
            <summary>
            Uses the specified window, clips the area outside it.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.hiddenLinesViewType.Viewport">
            <summary>
            Uses the camera viewport, does not clip the area outside the viewport in orthographic.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.HiddenLinesViewOnClipboard">
            <summary>Class that copies a vectorial image of the current scene of the active viewport into the clipboard.</summary>
             <example>
                 The following code fragment demonstrates how to use this class to copy a vectorial image of the current scene of the active viewport into the clipboard.
                 <code lang="CS" title="[New Example]">
                        HiddenLinesViewOnClipboard hdlView = new HiddenLinesViewOnClipboard(new HiddenLinesViewSettings(viewport1));
                        viewport1.StartWork(hdlView);
                 </code>
             	<code lang="VB" title="[New Example]">
                        Dim hdlView As New HiddenLinesViewOnClipboard(new HiddenLinesViewSettings(Viewport1))
                        Viewport1.StartWork(hdlView)
             </code>
             </example>
             <seealso cref="M:devDept.Eyeshot.ViewportLayout.CopyToClipboardVector(System.Boolean)"/>
        </member>
        <member name="T:devDept.Eyeshot.HiddenLinesView">
            <summary>Class that computes silhouettes and hidden lines.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesView.#ctor(devDept.Eyeshot.ViewportLayout)">
            <summary>Constructor.</summary>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesView.#ctor(devDept.Eyeshot.ViewportLayout,System.Double)">
            <summary>Constructor.</summary>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param> 
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesView.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout)">
            <summary>Extents mode constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesView.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.ViewportLayout,System.Double)">
            <summary>Extents mode constructor.
            </summary>
            <param name="viewport">The viewport to process</param>
            <param name="viewportLayout">The viewport layout to process</param>
            <param name="fontTolerance">This tolerance controls the font accuracy</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesView.#ctor(devDept.Eyeshot.HiddenLinesViewSettings)">
            <summary>Constructor.
            </summary>
            <param name="viewSettings">Hidden Lines computation settings</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesView.GetSilhouettes">
            <summary>
            The list of 2D segments representing the view's silhouettes.
            </summary>
            <returns>A list of 2D segments</returns>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesView.GetEdges">
            <summary>
            The list of 2D segments representing the view's edges.
            </summary>
            <returns>A list of 2D segments</returns>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesView.GetWires">
            <summary>
            The list of 2D segments representing the view's wires.
            </summary>
            <returns>A list of 2D segments</returns>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesView.GetHiddenSilhouettes">
            <summary>
            The list of 2D segments representing the view's hidden silhouettes.
            </summary>
            <returns>A list of 2D segments</returns>
            <remarks>They are available only if the <see cref="!:KeepHiddenSegments"/> property is true</remarks>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesView.GetHiddenEdges">
            <summary>
            The list of 2D segments representing the view's hidden edges.
            </summary>
            <returns>A list of 2D segments</returns>
            <remarks>They are available only if the <see cref="!:KeepHiddenSegments"/> property is true</remarks>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesView.GetHiddenWires">
            <summary>
            The list of 2D segments representing the view's hidden wires.
            </summary>
            <returns>A list of 2D segments</returns>
            <remarks>They are available only if the <see cref="!:KeepHiddenSegments"/> property is true</remarks>
        </member>
        <member name="F:devDept.Eyeshot.HiddenLinesView.checkFrustum">
            <summary>
            Tells if I must check that the entities are in frustum.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.HiddenLinesView._hdlViewSettings">
            <summary>
            Class that holds the settings and the result of hidden lines computation
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesView.FindAdjacentTriangle(System.Int32,System.Int32,System.Collections.Generic.LinkedListNode{devDept.Geometry.SharedEdge})">
            <summary>
            Returns the index of the triangle adjacent to the one specified.
            </summary>
            <param name="triangleIndex">The main triangle index</param>
            <param name="v2">the other vertex of the edge</param>
            <param name="edges">the LinkedList of the edges on the current vertex</param>
            <returns>The index of the adjacent triangle if found, -1 otherwise.</returns>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesView.ComputingVisibilityText">
            <summary>
            Gets or sets the progress bar text displayed while computing lines visibility when executed asynchronously.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesView.ComputingSilhouettesText">
            <summary>
            Gets or sets the progress bar text displayed while computing silhouettes when executed asynchronously.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.HiddenLinesView.Segment">
            <summary>
            Class that stores a Segment2D along with the entity it belongs to.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesView.Segment.#ctor(System.Double,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Entity,System.Collections.Generic.List{devDept.Eyeshot.Entities.BlockReference})">
            <summary>
            Individual coordinates constructor.
            </summary>
            <param name="x0">The X value of start point</param>
            <param name="y0">The Y value of start point</param>
            <param name="x1">The X value of end point</param>
            <param name="y1">The Y value of end point</param>
            <param name="entity">The entity the segment belongs to</param>
            <param name="parents">The nested <see cref="T:devDept.Eyeshot.Entities.BlockReference"/> parents chain</param>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesView.Segment.Entity">
            <summary>
            The entity the segment belongs to.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesView.Segment.Parents">
            <summary>
            The nested <see cref="T:devDept.Eyeshot.Entities.BlockReference"/> parents chain.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.HiddenLinesView.IntegerGrid._minX">
            <summary>
            Minimum values of the original data
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.HiddenLinesView.IntegerGrid._minY">
            <summary>
            Minimum values of the original data
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.HiddenLinesViewOnClipboard.FileName">
            <summary>
            The name of the file to save.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.HiddenLinesViewOnClipboard.Scale">
            <summary>
            The scale of the drawing
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewOnClipboard.#ctor(devDept.Eyeshot.HiddenLinesViewSettings)">
            <summary>Constructor.
            </summary>
            <param name="viewSettings">Hidden Lines computation settings</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewOnClipboard.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.Double)">
            <summary>Constructor.
            </summary>
            <param name="viewSettings">Hidden Lines computation settings</param>
            <param name="scale">The scale of the drawing</param>
        </member>
        <member name="T:devDept.Eyeshot.HiddenLinesViewOnFile">
            <summary>Class that saves a vectorial image of the current scene of the active viewport on disk in EMF format.</summary>
            <example>
                The following code fragment demonstrates how to save a vectorial image of the current scene of the active viewport on disk.
                <code lang="CS" title="[New Example]">
                       HiddenLinesViewOnFile hdlView = new HiddenLinesViewOnFile(new HiddenLinesViewSettings(viewport1), fileName);
                       viewport1.StartWork(hdlView);
                </code>
            	<code lang="VB" title="[New Example]">
                       Dim hdlView As New HiddenLinesViewOnFile(new HiddenLinesViewSettings(Viewport1), FileName)
                       Viewport1.StartWork(hdlView)
            </code>
            </example>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.WriteToFileVector(System.Boolean,System.String)"/>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewOnFile.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.String)">
            <summary>Constructor.
            </summary>
            <param name="viewSettings">Hidden Lines computation settings</param>
            <param name="filename">The name of the file to save</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewOnFile.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.String,System.Double)">
            <summary>Constructor.
            </summary>
            <param name="viewSettings">Hidden Lines computation settings</param>
            <param name="filename">The name of the file to save</param>
            <param name="scale">The scale of the drawing</param>
            <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
        </member>
        <member name="T:devDept.Eyeshot.HiddenLinesViewOnPaper">
            <summary>Class that prints a vectorial image of the current scene.</summary>
            <example>
                The following code fragment demonstrates how to print a vectorial image of the current scene of the active viewport.
                <code lang="CS" title="[New Example]">
                       HiddenLinesViewOnPaper hdlView = new HiddenLinesViewOnPaper(new HiddenLinesViewSettings(viewport1));
                       viewport1.StartWork(hdlView);
                </code>
            	<code lang="VB" title="[New Example]">
                       Dim hdlView As New HiddenLinesViewOnPaper(new HiddenLinesViewSettings(Viewport1))
                       Viewport1.StartWork(hdlView)
            </code>
            </example>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.WriteToFileVector(System.Boolean,System.String)"/>
        </member>
        <member name="F:devDept.Eyeshot.HiddenLinesViewOnPaper.PrintRect">
            <summary>
            The print rectangle in page units.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaper.#ctor(devDept.Eyeshot.HiddenLinesViewSettings)">
            <summary>Extents mode constructor.</summary>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaper.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.Double)">
            <summary>Constructor.</summary>
             <param name="viewSettings">Hidden Lines computation settings</param>
             <param name="orthographicScale">The scale of the printed drawing (orthographic camera only)</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaper.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.Double,System.Drawing.RectangleF)">
            <summary>Constructor.</summary>
             <param name="viewSettings">Hidden Lines computation settings</param>
             <param name="orthographicScale">The scale of the printed drawing (orthographic camera only)</param>
             <param name="printRect">The print rectangle in page units</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaper.Print(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>Prints the computed lines.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewOnPaper.Fit">
            <summary>
            Fits the hidden lines view on the print area.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewOnPaper.OrthographicScale">
            <summary>
            The scale of the printed drawing (orthographic camera only).
            </summary>
            <remarks>If 0, the view is fitted in the printing rectangle.</remarks>
            <seealso cref="P:devDept.Eyeshot.HiddenLinesViewOnPaper.Units"/>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewOnPaper.Units">
            <summary>
            Gets or sets the units of the model.
            </summary>
            <remarks>Affects the size of the model on paper with Orthographic camera projection mode.</remarks>
            <see cref="P:devDept.Eyeshot.HiddenLinesViewOnPaper.OrthographicScale"/>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewOnPaper.LineWeightUnits">
            <summary>
            Gets or sets the line weight units used for printing.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.LineWeight"/>
        </member>
        <member name="P:devDept.Eyeshot.HiddenLinesViewOnPaper.ScaleViewToPageUnits">
            <summary>
            Gets the factors to scale the view coordinates to page coordinates.
            </summary>
            <remarks>This data is available after the <see cref="M:devDept.Eyeshot.HiddenLinesViewOnPaper.Print(System.Drawing.Printing.PrintPageEventArgs)"/> method has been called.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.HiddenLinesViewOnPaperPreview">
            <summary>Class that prints a vectorial image of the current scene of the active viewport, opening a Print Preview dialog.</summary>
            <example>
                The following code fragment demonstrates how to print a vectorial image of the current scene of the active viewport.
                <code lang="CS" title="[New Example]">
                       HiddenLinesViewOnPaperPreview hdlView = new HiddenLinesViewOnPaperPreview(new HiddenLinesViewSettings(viewport1));
                       viewport1.StartWork(hdlView);
                </code>
            	<code lang="VB" title="[New Example]">
                       Dim hdlView As New HiddenLinesViewOnPaperPreview(new HiddenLinesViewSettings(Viewport1))
                       Viewport1.StartWork(hdlView)
            </code>
            </example>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.WriteToFileVector(System.Boolean,System.String)"/>
        </member>
        <member name="F:devDept.Eyeshot.HiddenLinesViewOnPaperPreview.PrintPreviewDlgClientSize">
            <summary>
            Size of the Print Preview form client area.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaperPreview.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.Drawing.Size)">
            <summary>Constructor.</summary>
             <param name="viewSettings">Hidden Lines computation settings</param>
             <param name="printPreviewDlgClientSize">Size of the Print Preview form client area</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaperPreview.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.Drawing.Size,System.Double)">
            <summary>Constructor.</summary>
             <param name="viewSettings">Hidden Lines computation settings</param>
             <param name="printPreviewDlgClientSize">Size of the Print Preview form client area</param>
             <param name="orthographicScale">The scale of the printed drawing (orthographic camera only)</param>
        </member>
        <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaperPreview.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.Drawing.Size,System.Double,System.Drawing.RectangleF)">
            <summary>Constructor.</summary>
             <param name="viewSettings">Hidden Lines computation settings</param>
             <param name="printPreviewDlgClientSize">Size of the Print Preview form client area</param>
             <param name="orthographicScale">The scale of the printed drawing (orthographic camera only)</param>
             <param name="printRect">The print rectangle in page units</param>
        </member>
        <member name="T:devDept.Eyeshot.SilhoTriangleData">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.silhoDataType">
            <summary>
            The type of data of the <see cref="T:devDept.Eyeshot.SilhoWireData"/> element.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.silhoDataType.LineStrip">
            <summary>
            A set of continuous vertices.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.silhoDataType.LineList">
            <summary>
            A set of lines vertices.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.SilhoWireData.DataMode">
            <summary>
            The increment to apply to the vertices to get the next line. (1 for continui
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.SilhoWireData.startPointVertices">
            <summary>
            vertices[0, ]... vertices[startPointVertices-1, ] are the vertices of the lines
            vertices[startPointVertices, vertices.GetLength(0)] are the vertices of the points
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.SilhoWireData.Attributes">
            <summary>
            Holds the attributes of the data for an entity and is also used to avoid visibility checks of a line with its sharing triangles in the same entity
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.SilhoPolygonData">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:StepTranslator.StepDesignCtx">
            <summary>
            This class represents  Design Context
            </summary>
        </member>
        <member name="T:StepTranslator.StepHeaderWriter">
            <summary>
            This class writes the file header infromation required as per STEP AP203.
            </summary>
        </member>
        <member name="T:StepTranslator.StepMechCtx">
            <summary>
            This class represents  Mechanical Context
            </summary>
        </member>
        <member name="T:StepTranslator.StepOrientedClosedShell">
            <summary>
            This class manifold solid brep representation object from step.
            </summary>
        </member>
        <member name="T:StepTranslator.StepPoint">
            <summary>
            This class represents 3D point which contains X Y Z coordinates of a point. 
            </summary>
        </member>
        <member name="T:StepTranslator.StepReader">
            <summary>
            This is the main STEP Reader class which acts as an interface for STEP namespace.
            It processes the input file and stores step data which can be accessed as and when required.
            </summary>
        </member>
        <member name="M:StepTranslator.StepReader.ProcessStepFile(devDept.Eyeshot.WorkUnit,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            This method executes STEP reading and stores all step data which is then provided as requested.
            </summary>
            <returns></returns>
        </member>
        <member name="M:StepTranslator.StepReader.GetAllCurves(System.Collections.Generic.List{StepTranslator.StepCurve}@)">
            <summary>
            This method gives list of all edge curves from the model, with curve type and actual geometry data.
            </summary>
            <param name="allCurves"></param>
        </member>
        <member name="M:StepTranslator.StepReader.GetCompositeCurves(System.Collections.Generic.List{System.Collections.Generic.List{StepTranslator.StepCurve}}@)">
            <summary>
            Gives the list of composite curves from step model. 
            Each composite curve may have one or more curve segments.
            </summary>
            <param name="compositeCurves"></param>
        </member>
        <member name="M:StepTranslator.StepReader.GetAllSurfaces(System.Collections.Generic.List{StepTranslator.StepSurface}@)">
            <summary>
            This method gives list of all surfaces from the model, with surface type and actual surface geometry.
            It does not filter surfaces according to blocks or bodies.
            </summary>
            <param name="allSurfaces"></param>
        </member>
        <member name="M:StepTranslator.StepReader.GetAllBlocks(System.Collections.Generic.List{StepTranslator.StepBlock}@)">
            <summary>
            Gives the list of blocks from the input step model. Each block represents a group of connected faces.
            </summary>
            <param name="allBlocks"></param>
            
        </member>
        <member name="M:StepTranslator.StepReader.GetSafeProductName(StepTranslator.StepProduct)">
            <summary>
            Sometimes the part name is not unique. In this cases we add the partID that it's for sure unique.
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:StepTranslator.StepReader.GetBlockCount">
            <summary>
            Gives the number of blocks in the step model. Each block represents a group of connected faces.
            </summary>
            <returns></returns>
        </member>
        <member name="M:StepTranslator.StepReader.GetBlockSurfaces(System.Int32,System.Collections.Generic.List{StepTranslator.StepSurface}@)">
            <summary>
            This method gives the list of surfaces for a given block index. 
            The index number should be less than block count.
            </summary>
            <param name="index"></param>
            <param name="faceList"></param>
        </member>
        <member name="M:StepTranslator.StepReader.GetError">
            <summary>
            Gives the error message string, in case needs to be cheked. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:StepTranslator.StepSurface">
            <summary>
            Represents a face geometry from step data which might be of any shape.
            It gives the actual surface geometry of a face depending on the type and trim curves.
            </summary>
        </member>
        <member name="M:StepTranslator.StepSurface.GetPlaneData(System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            Gives base point and normal vector for a planar surface.
            </summary>
            <param name="basePt"></param>
            <param name="normal"></param>
            <returns></returns>
        </member>
        <member name="M:StepTranslator.StepSurface.GetExtrusionSurfaceData(StepTranslator.StepCurve@,System.Double@,System.Double[]@)">
            <summary>
            Gives  swept_curve(stepCurve),  extrusion_axis(Magnitude and Direction) of Extruded surface.
            swept_curve : It only contain geometry info.It will not have Start point and end point if they are not present in step file.
            
            </summary>
            <param name="stepCurve"></param>
            <param name="vecMagnitude"></param>
            <param name="vecDirValues"></param>
            <returns></returns>
        </member>
        <member name="M:StepTranslator.StepSurface.GetSurfaceOfRevolutionData(StepTranslator.StepCurve@,System.Double[]@,System.Double[]@)">
            <summary>
            Gives  swept_curve(stepCurve) 
            swept_curve : It only contain geometry info.It will not have Start point and end point if they are not present in step file.
            
            </summary>
            <param name="stepCurve"></param>
            <param name="vecMagnitude"></param>
            <param name="vecDirValues"></param>
            <returns></returns>
        </member>
        <member name="M:StepTranslator.StepSurface.SetPlaneData(System.Double[],System.Double[])">
            <summary>
            Sets base point and normal vector for a planar surface.
            </summary>
            <param name="basePt"></param>
            <param name="normal"></param>
        </member>
        <member name="M:StepTranslator.StepSurface.SetPlaneData(System.Double[],System.Double[],System.Double[])">
            <summary>
            Sets base point and normal vector for a planar surface.
            </summary>
            <param name="basePt"></param>
            <param name="normal"></param>
            <param name="refDir"></param>
        </member>
        <member name="M:StepTranslator.StepSurface.GetNurbsData(System.Int32@,System.Int32@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Collections.Generic.List{StepTranslator.StepPoint}}@)">
            <summary>
            Gives U degree, V degree, U knots, V knots and a rectangular array of control points for a nurbs surface.
            </summary>
            <param name="uDegree"></param>
            <param name="vDegree"></param>
            <param name="uKnots"></param>
            <param name="vKnots"></param>
            <param name="controlPoints"></param>
            <returns></returns>
        </member>
        <member name="M:StepTranslator.StepSurface.SetBSplineSurfaceData(System.Int32,System.Int32,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Collections.Generic.List{StepTranslator.StepPoint}})">
            <summary>
            if Weights are not is there we can set below method  
            Sets U degree, V degree, U knots, V knots and a rectangular array of control points for a nurbs surface.
            </summary>
            <param name="uDegree"></param>
            <param name="vDegree"></param>
            <param name="uKnots"></param>
            <param name="vKnots"></param>
            <param name="controlPoints"></param>
        </member>
        <member name="M:StepTranslator.StepSurface.SetQuasiUniformSurfaceData(System.Int32,System.Int32,System.Collections.Generic.List{System.Collections.Generic.List{StepTranslator.StepPoint}})">
            <summary>
            if Weights are not is there we can set below method  
            Sets U degree, V degree, U knots, V knots and a rectangular array of control points for a nurbs surface.
            </summary>
            <param name="uDegree"></param>
            <param name="vDegree"></param>
            <param name="uKnots"></param>
            <param name="vKnots"></param>
            <param name="controlPoints"></param>
        </member>
        <member name="M:StepTranslator.StepSurface.SetBoundedSurfaceData(System.Int32,System.Int32,System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Collections.Generic.List{StepTranslator.StepPoint}})">
            <summary>
            if Weight is there we can set below method  
            Sets U degree, V degree, U knots, V knots and a rectangular array of 
            control points with weight for a nurbs surface.
            </summary>
            <param name="uDegree"></param>
            <param name="vDegree"></param>
            <param name="uKnots"></param>
            <param name="vKnots"></param>
            <param name="controlPoints"></param>
        </member>
        <member name="M:StepTranslator.StepSurface.SetSurfaceOfRevolutionData(StepTranslator.StepCurve,System.Double[],System.Double[])">
            <summary>
            Gives Surface Of Revolution .
            StepCurve 
            basePt and normal will create Axis1Placement
            </summary>
            <param name="stepCurve"></param>
            <param name="basePt"> </param>
            <param name="normal"> </param>
        </member>
        <member name="M:StepTranslator.StepSurface.GetCylinderData(System.Double[]@,System.Double@,System.Double[]@,System.Double[]@)">
            <summary>
            Gives center point, radius and reference axes for a cylindrical surface.
            </summary>
            <param name="center"></param>
            <param name="radius"></param>
            <param name="xAxis"></param>
            <param name="yAxis"></param>
            <returns></returns>
        </member>
        <member name="M:StepTranslator.StepSurface.GetTrimCurves(System.Collections.Generic.List{System.Collections.Generic.List{StepTranslator.StepCurve}}@)">
            <summary>
            Gives the list of list of trim curves for the surface, out of which first list contains outer loop boundaries.
            </summary>
            <param name="trimCurves"></param>
            <returns></returns>
        </member>
        <member name="M:StepTranslator.StepSurface.SetTrimCurves(System.Collections.Generic.List{System.Collections.Generic.List{StepTranslator.StepCurve}})">
            <summary>
            Sets the list of list of trim curves for the face. First list should contain outer loop boundaries.
            </summary>
            <param name="trimCurves"></param>
        </member>
        <member name="T:StepTranslator.SurfaceGeomType">
            <summary>
            Represents shape for a surface geometry.  
            </summary>
        </member>
        <member name="T:StepUtils">
            <summary>
            This class provides common helper methods for step processing. 
            This is a static class so that we can use all methods directly.
            </summary>
        </member>
        <member name="M:StepUtils.SeparateByComma(System.String@,System.String@)">
            <summary>
            This method returns substring from source string upto comma and removes it from source.
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
        </member>
        <member name="T:StepTranslator.StepWriter">
            <summary>
            This represents STEP Writer class which writes input data in AP203 step format.
            It is assumed that input is valid as required by step format.
            </summary>
        </member>
        <member name="M:StepTranslator.StepWriter.WriteStepFile(System.String,System.String,System.String,devDept.Geometry.linearUnitsType,devDept.Geometry.angularUnitsType,devDept.Eyeshot.WorkUnit,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Writes given input data to step file, input geometry needs to be in metric units.
            </summary>
            <returns></returns>
        </member>
        <member name="T:StepTranslator.SurfaceOfLinearExtrusion">
            <summary>
            This class represents bounded curve from STEP specifications.
            
            </summary>
        </member>
        <member name="M:StepTranslator.SurfaceOfLinearExtrusion.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual loop data. 
            </summary>
        </member>
        <member name="T:StepTranslator.SurfaceOfRevolution">
            <summary>
            This class represents location of geometry in 3D space.
            </summary>
        </member>
        <member name="T:StepTranslator.StepTorus">
            <summary>
            This class represents circle data from STEP specifications.
            It contains links to center point and other arc data.
            </summary>
        </member>
        <member name="M:StepTranslator.StepTorus.ExtractEntityData">
            <summary>
            Solves the step record and extracts the actual circle data and references. 
            </summary>
        </member>
        <member name="T:StepTranslator.UnitData">
            <summary>
            This class represents a step record which holds units data together.
            </summary>
        </member>
        <member name="T:StepTranslator.StepVertexPoint">
            <summary>
            This class represents vertex which contains actual point.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.toolBarPositionType">
            <summary>
            Viewport ToolBar position/orientation.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarPositionType.HorizontalTopLeft">
            <summary>
            Horizontal at the top-left corner of the viewport.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarPositionType.HorizontalTopCenter">
            <summary>
            Centered at the top side of the viewport.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarPositionType.HorizontalTopRight">
            <summary>
            Horizontal at the top-right corner of the viewport.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarPositionType.VerticalTopRight">
            <summary>
            Vertical at the top-right corner of the viewport.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarPositionType.VerticalMiddleRight">
            <summary>
            Centered on the right side of the viewport.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarPositionType.VerticalBottomRight">
            <summary>
            Vertical at the bottom-right corner of the viewport.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarPositionType.HorizontalBottomRight">
            <summary>
            Horizontal at the bottom-right corner of the viewport.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarPositionType.HorizontalBottomCenter">
            <summary>
            Centered at the bottom side of the viewport.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarPositionType.HorizontalBottomLeft">
            <summary>
            Horizontal at the bottom-left corner of the viewport.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarPositionType.VerticalBottomLeft">
            <summary>
            Vertical at the bottom-left corner of the viewport.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarPositionType.VerticalMiddleLeft">
            <summary>
            Centered on the left side of the viewport.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarPositionType.VerticalTopLeft">
            <summary>
            Vertical at the top-left corner of the viewport.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.BarBase">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.BarBase.Contains(System.Drawing.Point)">
            <summary>
            Tells if a point in viewport coordinates is over one of the buttons.
            </summary>
            <param name="mousePos">Mouse cursor position (zero on top) in viewport coordinates (see <see cref="M:devDept.Eyeshot.Viewport.ScreenToViewport(System.Drawing.Point)"/>) </param>
            <returns>True if the point is over the button</returns>        
        </member>
        <member name="T:devDept.Eyeshot.ToolBar">
            <summary>
            Viewport ToolBar.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to apply the changes</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ToolBar.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ToolBar.#ctor(devDept.Eyeshot.toolBarPositionType,System.Boolean,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.ToolBarButton})">
            <summary>
            Standard constructor.
            </summary>
            <param name="position">ToolBar position</param>
            <param name="visible">ToolBar visibility status</param>
            <param name="buttons">Toolbar buttons</param>
        </member>
        <member name="M:devDept.Eyeshot.ToolBar.#ctor(devDept.Eyeshot.ToolBar)">
            <summary>
            Copy constructor.
            </summary>
            <param name="another">The othe ToolBar object</param>
        </member>
        <member name="F:devDept.Eyeshot.ToolBar.Rectangle">
            <summary>
            Viewport coordinates rectangle of the toolbar (0,0 on the top-left corner of the viewport).
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ToolBar.ContainsApproximate(System.Single,System.Single)">
            <summary>
            Checks if the given point in viewport coordinates is inside the bounding box of the Toolbar.
            </summary>
            <param name="x">The x coordiante</param>
            <param name="y">The y coordiante</param>
            <returns>True if it's inside.</returns>
            <remarks>The coordiantes are viewport coordinates (0,0 on the top-left corner of the viewport).</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ToolBar.Visible">
            <summary>
            Gets or sets the ToolBar visibility status.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ToolBar.Position">
            <summary>
            Gets or sets the ToolBar position.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ToolBar.Buttons">
            <summary>
            Gets or Sets the list of ToolBar Buttons.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ButtonSettings">
            <summary>
            Settings for <see cref="T:devDept.Eyeshot.ToolBar"/> buttons and <see cref="T:devDept.Eyeshot.ProgressBar"/> buttons.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ButtonSettings.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ButtonSettings.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Standard constructor.
            </summary>
            <param name="buttonSize">The buttons size</param>
            <param name="buttonCornerRadius">The buttons corner radius</param>
            <param name="gap">Distance between the buttons</param>
            <param name="buttonHighlightColor">The buttons highlight color</param>
        </member>
        <member name="M:devDept.Eyeshot.ButtonSettings.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Color,devDept.Eyeshot.colorThemeType)">
            <summary>
            Standard constructor.
            </summary>
            <param name="buttonSize">The buttons size</param>
            <param name="buttonCornerRadius">The buttons corner radius</param>
            <param name="gap">Distance between the buttons</param>
            <param name="buttonHighlightColor">The buttons highlight color</param>
            <param name="colorTheme">The buttons color theme</param>     
            <remarks>You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>
        </member>
        <member name="P:devDept.Eyeshot.ButtonSettings.Size">
            <summary>
            Gets or sets the buttonsize.
            </summary>
            <remarks>You need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ButtonSettings.CornerRadius">
            <summary>
            Gets or sets the button corner radius.
            </summary>
            <remarks>You need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ButtonSettings.HighlightColor">
            <summary>
            Gets or sets the button highlight color.
            </summary>
            <remarks>You need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ButtonSettings.Gap">
            <summary>
            Gets or sets the distance between ToolBar Buttons.
            </summary>
            <remarks>You need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ButtonSettings.ColorTheme">
            <summary>
            Gets or sets the buttons color theme.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.toolBarButtonStyleType">
            <summary>
            Specifies the button style type within a ToolBarButton.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarButtonStyleType.PushButton">
            <summary>
            A standard, three-dimensional button.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarButtonStyleType.ToggleButton">
            <summary>
            A toggle button that appears sunken when clicked and retains the sunken appearance until clicked again.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.toolBarButtonStyleType.Separator">
            <summary>
            A space or line between toolbar buttons.       
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ToolBarButton">
            <summary>
            The ToolBarButton class that raises the Click event.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ToolBarButton.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ToolBarButton.#ctor(System.Windows.Media.ImageSource,System.String,System.String,devDept.Eyeshot.toolBarButtonStyleType,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="buttonImage">The ToolBarButton image</param>
            <param name="name">The ToolBarButton name</param>
            <param name="toolTipText">The ToolBarButton tooltip text</param>
            <param name="style">The ToolBarButton style mode</param>
            <param name="visible">The ToolBarButton visibility status</param>
        </member>
        <member name="M:devDept.Eyeshot.ToolBarButton.#ctor(System.Windows.Media.ImageSource,System.String,System.String,devDept.Eyeshot.toolBarButtonStyleType,System.Boolean,System.Boolean)">
            <summary>Constructor.
            </summary>
            <param name="buttonImage">The ToolBarButton image</param>
            <param name="name">The ToolBarButton name</param>
            <param name="toolTipText">The ToolBarButton tooltip text</param>
            <param name="style">The ToolBarButton style mode</param>
            <param name="visible">The ToolBarButton visibility status</param>
            <param name="enabled">The ToolBarButton enabled status</param>
        </member>
        <member name="M:devDept.Eyeshot.ToolBarButton.#ctor(System.Windows.Media.ImageSource,System.String,System.String,devDept.Eyeshot.toolBarButtonStyleType,System.Boolean,System.Boolean,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource)">
            <summary>Constructor.
            </summary>
            <param name="buttonImage">The ToolBarButton image</param>
            <param name="name">The ToolBarButton name</param>
            <param name="toolTipText">The ToolBarButton tooltip text</param>
            <param name="style">The ToolBarButton style mode</param>
            <param name="visible">The ToolBarButton visibility status</param>
            <param name="enabled">The ToolBarButton enabled status</param>
            <param name="downImage">The ToolBarButton bitmap for the down state (optional)</param>
            <param name="hoverImage">The ToolBarButton bitmap for the mouse hover state (optional)</param>
            <param name="disabledImage">The ToolBarButton bitmap for the disabled state (optional)</param>
            <param name="disabledDownImage">The ToolBarButton bitmap for the disabled down state (optional)</param>
        </member>
        <member name="F:devDept.Eyeshot.ToolBarButton.Rectangle">
            <summary>
            ToolBarButton rectangle in viewport coordinates (0,0 on the top-left corner of the viewport).
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ToolBarButton.Contains(System.Drawing.Point)">
            <summary>
            Tells if a point in screen coordinates is inside the button.
            </summary>
            <param name="mousePos">Mouse cursor position (zero on top) in viewport coordinates (see <see cref="M:devDept.Eyeshot.Viewport.ScreenToViewport(System.Drawing.Point)"/>) </param>
            <returns>True if the point is inside the button</returns>
        </member>
        <member name="M:devDept.Eyeshot.ToolBarButton.DrawImage(System.Drawing.Graphics,devDept.Eyeshot.colorThemeType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws the button image.
            </summary>
            <param name="g">Graphics surface.</param>
            <param name="colorTheme"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:devDept.Eyeshot.ToolBarButton.DrawInnerStroke(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draws the inner border for the control
            using the HighlightColor property.
            </summary>
            <param name="g">The graphics object used in the paint event.</param>
        </member>
        <member name="M:devDept.Eyeshot.ToolBarButton.DrawHighlight(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draws the Highlight over the top of the button.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ToolBarButton.Click">
            <summary>
            Occurs when the button is clicked.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ToolBarButton.StyleMode">
            <summary>
            Gets or sets the style mode of the ToolBarButton (DropDownButton is not supported).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ToolBarButton.Visible">
            <summary>
            Gets or sets the ToolBarButton visibility status. 
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ToolBarButton.Enabled">
            <summary>
            Gets or sets the ToolBarButton enabled status. 
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ToolBarButton.Pushed">
            <summary>
            Gets or sets a value indicating whether a toggle-style ToolBarButton is currently in the pushed state. 
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ToolBarButton.Image">
            <summary>
            The bitmap of the button.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to apply the changes</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ToolBarButton.HoverImage">
            <summary>
            Gets or sets the Image for the mouse hover state.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to apply the changes</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ToolBarButton.DownImage">
            <summary>
            Gets or sets the Image for the down state.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to apply the changes</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ToolBarButton.DisabledImage">
            <summary>
            Gets or sets the Image for the disabled state.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to apply the changes</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ToolBarButton.DisabledDownImage">
            <summary>
            Gets or sets the Image for the disabled down state.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to apply the changes</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ToolBarButton.ToolTipText">
            <summary>
            Gets or sets the text to show on the ToolTip.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ToolBarButton.ToolBarButtonClickEventHandler">
            <summary>
             Represents the method that will handle the <see cref="E:devDept.Eyeshot.ToolBarButton.Click"/> event. 
            </summary>
             <param name="sender">The source of the event</param>
             <param name="e">The event data</param>
        </member>
        <member name="T:devDept.Eyeshot.DefaultToolBarButton">
            <summary>
            Base class for default ToolBar buttons.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ZoomFitToolBarButton">
            <summary>
            The ZoomFitToolBarButton default class.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ZoomToolBarButton">
            <summary>
            The ZoomToolBarButton default class.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ZoomWindowToolBarButton">
            <summary>
            The ZoomWindowToolBarButton default class.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.RotateToolBarButton">
            <summary>
            The RotateToolBarButton default class.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.PanToolBarButton">
            <summary>
            The PanToolBarButton default class.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.CancelToolBarButton">
            <summary>
            The CancelToolBarButton default class.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.EyeshotException">
            <summary>
            An exception thrown by Eyeshot.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:devDept.Eyeshot.EyeshotException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            instance that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            instance that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified
            error message and a reference to the inners exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference, the current exception is raised
            in a catch block that handles the inners exception.</param>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.BoundaryEntity">
            <summary>
            Utility class to write a Boundary entity (type 141) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.BoundaryEntity.#ctor(System.Int32,devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Boundary entity constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.BoundaryEntity.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.BoundedSurfaceEntity">
            <summary>
            Utility class to write a Bounded surface entity (Type 143) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.BoundedSurfaceEntity.#ctor(System.Int32,System.Int32[],devDept.Eyeshot.Entities.colorMethodType,System.Int32,System.Drawing.Color)">
            <summary>
            IGES Bounded surface entity constructor.
            </summary>
            <param name="surfaceID">ID of the surface that is to be trimmed</param>
            <param name="boundaryEntitiesIDs">ID array of the closed boundary curves. The first must be the outerLoop one.</param>
            <param name="color">A <paramref name="color"/> structure that indicates the color of this entity.</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.BoundedSurfaceEntity.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.CompositeCurve">
            <summary>
            Utility class to read/write a Composite Curve entity (Type 102) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.CompositeCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Color">
            <summary>
            Utility class to write a Color (Type 314) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Import constructor.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.ParametricSplineCurve">
            <summary>
            Utility class to write a Parametric Spline Curve (Type 112) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.ParametricSplineCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Import constructor.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.CopiousData">
            <summary>
            Utility class to write a Copius Data Entity (Type 106 Form 2) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.CopiousData.#ctor(devDept.Geometry.Point3D[],System.Boolean,devDept.Eyeshot.Entities.colorMethodType,System.Int32,System.Drawing.Color)">
            <summary>
            Data points in the form of coordinate triples.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.CopiousData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.CurveOnParametricSurface">
            <summary>
            Utility class to read/write a Curve on parametric surface (Type 142) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.CurveOnParametricSurface.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Curve on parametric surface constructor
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.CurveOnParametricSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.StandardColorTable">
            <summary>
            Iges standard color table.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Line">
            <summary>
            Utility class to write a Line (Type 110) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Line.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.View">
            <summary>
            Utility class to write a Level Function Property 410  in IGES format
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.ParametricSplineSurface">
            <summary>
            Utility class to write a Parametric Spline Surface (Type 114) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.ParametricSplineSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Import constructor.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Point">
            <summary>
            Utility class to write a Point (Type 116) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Point.#ctor(devDept.Geometry.Point3D,devDept.Eyeshot.Entities.colorMethodType,System.Int32,System.Drawing.Color)">
            <summary>
            Point entity constructor 
            </summary>
            <param name="color">A <paramref name="Color"/> structure that indicates the color of this entity.</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Point.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.RationalBSplineCurve">
            <summary>
            Utility class to write a Rational B Spline Curve (Type 126) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.RationalBSplineCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Import constructor.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.RationalBSplineSurface">
            <summary>
            Utility class to read/write a Rational B Spline Surface (Type 128) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.RationalBSplineSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.RuledSurface">
            <summary>
            Utility class to read/write a Ruled surface (Type 118) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.RuledSurface.#ctor(System.Int32,System.Int32,System.Int32,devDept.Eyeshot.Entities.colorMethodType,System.Int32,System.Drawing.Color)">
            <summary>
            Ruled surface entity constructor
            </summary>
            <param name="firstCurveID">ID of the first curve entity</param>
            <param name="secondCurveID">ID of the second curve entity</param>
            <param name="form"><para>Form</para>
            <list type="table">
            <listheader><term>Form</term><description>Meaning</description></listheader>
            <item><term>0</term><description>Equal relative arc length</description></item>
            <item><term>1</term><description>Equal relative parametric values</description></item>
            </list></param>
            <param name="color">A <paramref name="Color"/> structure that indicates the color of this entity</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.RuledSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.SurfaceOfRevolution">
            <summary>
            Utility class to read/write a Surface of Revolution entity (Type 120) in IGES format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.SurfaceOfRevolution.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Transformation">
            <summary>
            Utility class to read/write a Transformation (Type 124) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Transformation.#ctor(System.Double[0:,0:])">
            <summary>
            Square matrix constructor.
            </summary>
            <param name="matrix">The matrix. Cannot be <c>null</c>.</param>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Transformation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.TrimmedParametricSurface">
            <summary>
            Utility class to read/write a Trimmed parametric surface (Type 144) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.TrimmedParametricSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Labels.Label">
            <summary>
            Base class for all labels.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.Label.color">
            <summary>
            Label color.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.Label.anchorPoint">
            <summary>
            3D attaching point.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.Label.xPos">
            <summary>
            On screen 2D projection X coord with respect to the Viewport camera (0,0 on bottom left). 
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.Label.yPos">
            <summary>
            On screen 2D projection Y coord with respect to the Viewport camera (0,0 on bottom left). 
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.Label.zPos">
            <summary>
            Z View coord. 
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.Label.alignment">
            <summary>
            Label alignment.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.Label.selectedBitmap">
            <summary>
            The selected image.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.Label.visible">
            <summary>
            Visible flag.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.Label.hidden">
            <summary>
            Tells if the label is hidden by other geometry
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.#ctor(System.Drawing.Color)">
            <summary>
            Quick constructor, 3D attaching point is (0,0,0).
            </summary>
            <param name="color">A <see cref="P:devDept.Eyeshot.Labels.Label.Color"/> structure that indicates the color Image. this label.</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.#ctor(System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Standard constructor.
            </summary>
            <param name="x">Anchor point's X coordinate</param>
            <param name="y">Anchor point's Y coordinate</param>
            <param name="z">Anchor point's Z coordinate</param>
            <param name="color">A <see cref="P:devDept.Eyeshot.Labels.Label.Color"/> structure that indicates the color Image. this label</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.#ctor(devDept.Geometry.Point3D,System.Drawing.Color)">
            <summary>
            Standard constructor.
            </summary>
            <param name="anchorPoint">Anchor point</param>
            <param name="color">A <see cref="P:devDept.Eyeshot.Labels.Label.Color"/> structure that indicates the color Image. this label.</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.#ctor(devDept.Geometry.Point3D,System.Drawing.Color,System.Boolean)">
            <summary>
            Standard constructor.
            </summary>
            <param name="anchorPoint">Anchor point</param>
            <param name="color">A <see cref="P:devDept.Eyeshot.Labels.Label.Color"/> structure that indicates the color Image. this label.</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.Dispose">
            <summary>
            Releases unmanaged resources.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.UpdatePos(devDept.Graphics.RenderContextBase,System.Double[],System.Int32[])">
            <summary>
            Update label position on screen.
            </summary>
            <param name="renderContext">The render context </param>
            <param name="modelViewProj">The modelview projection matrix</param>
            <param name="viewFrame">The viewport rectangle in camera coordinates ([0,0] at bottom left)</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.Regen(devDept.Graphics.RenderContextBase,System.Single)">
            <summary>
            Regenerates the label creating the internal data needed to draw the label.
            </summary>
            <param name="renderContext">The render context</param>
            <param name="drawScale">The drawing scale</param>
            <remarks>It must be called explicitly only for labels that are not in the <see cref="P:devDept.Eyeshot.ViewportLayout.Labels"/> list.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.Draw(devDept.Graphics.RenderContextBase)">
            <summary>
            Standard draw method.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.DrawSelected(devDept.Graphics.RenderContextBase)">
            <summary>
            Draw method for selected labels.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.GetTexture(devDept.Graphics.RenderContextBase)">
            <summary>
            Gets the proper texture according to current selection status.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.GetBitmap">
            <summary>
            Gets the proper image according to current selection status.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.DrawGdi(System.Single,System.Single,System.Drawing.Graphics)">
            <summary>
            GDI draw method.
            </summary>
            <param name="drawScaleFactor">The draw scale factor</param>/
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
            <param name="g">Active GDI+ drawing surface</param>       
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.DrawWithOffset(devDept.Graphics.RenderContextBase,System.Int32,System.Int32)">
            <summary>
            Draws the label with an offset from attaching point.
            </summary>
            <param name="dx">Horizontal distance</param>
            <param name="dy">Vertical distance</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.DrawWithOffsetGdi(System.Single,System.Single,System.Single,System.Drawing.Graphics)">
            <summary>
            Draws (GDI) the label with an offset from attaching point.
            </summary>
            <param name="dx">Horizontal distance</param>
            <param name="dy">Vertical distance</param>
            <param name="g">Active GDI+ drawing surface</param>
            <param name="scaleFactor">Scale factor</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.GetScreenOffset">
            <summary>
            Gets the offset in screen coordinates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Labels.Label.GetWorldPoints(devDept.Eyeshot.Camera,System.Int32[],System.Int32)">
            <summary>
            Gets the world points of the label corners at the depth of the AnchorPoint.
            </summary>
            <param name="camera"></param>
            <param name="viewFrame"></param>
            <param name="controlHeight"></param>
            <returns></returns>
        </member>
        <member name="P:devDept.Eyeshot.Labels.Label.Size">
            <summary>
            Gets the size of the label.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Labels.Label.Image">
            <summary>
            Gets label image.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Labels.Label.RegenMode">
            <summary>
            Gets or sets the label regeneration mode.
            </summary>
            <seealso cref="M:devDept.Eyeshot.Labels.LabelList.Regen"/>
        </member>
        <member name="P:devDept.Eyeshot.Labels.Label.Alignment">
            <summary>
            Gets or sets the label align mode.
            </summary>
            <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen"/> to apply the changes.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Labels.Label.Selected">
            <summary>
            Gets or sets the entity selected status.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Labels.Label.Selectable">
            <summary>
            Gets or sets the selectable flag.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Labels.Label.Color">
            <summary>
            Gets or sets the label color.
            </summary>
            <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen"/> to apply the changes.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Labels.Label.OnScreenPosition">
            <summary>
            Gets label position on screen.
            </summary>
            <remarks>This point is changed every time the end user ZoomPanRotate. The point coordinates refers to viewport <b>bottom</b>-left corner.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Labels.Label.AnchorPoint">
            <summary>
            Gets or sets the label anchor point.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Labels.Label.Visible">
            <summary>
            If <b>false</b> the label is not drawn.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Labels.LabelList">
            <summary>
            Label collection.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.EyeshotCollection`1">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the items of the specified collection to the end of this collection.
            </summary>
            <param name="collection">The collection whose items should be added to the end of this collection</param>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item into this collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted</param>
            <param name="item">The item to insert</param>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the items of a collection into this collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new items should be inserted</param>
            <param name="collection">The collection to insert</param>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotCollection`1.Add(`0)">
            <summary>
            Adds one item at the end of this collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotCollection`1.Contains(`0)">
            <summary>
            Determines whether an item is in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements copied from the collection.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins</param>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the items in the entire collection.
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific item from this collection.
            </summary>
            <param name="item">The object to remove from this collection</param>
            <returns>True if item is successfully removed; otherwise, false. This method also returns false if item was not found in this collection.</returns>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index of this collection.
            </summary>
            <param name="index">The zero-based index of the item to remove</param>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of items from this collection.
            </summary>
            <param name="index">The zero-based starting index of the range of items to remove</param>
            <param name="count">The number of items to remove</param>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotCollection`1.Reverse">
            <summary>
            Reverses the order of the items in the entire collection.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.EyeshotCollection`1.Count">
            <summary>
            Gets the number of items actually contained in the collection.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.EyeshotCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.EyeshotCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get or set</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="T:devDept.Eyeshot.ISelectable">
            <summary>
            Defines the methods for objects supporting selection.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ISelectable.ClearSelection">
            <summary>
            Clears selection.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ISelectable.SelectAll">
            <summary>
            Selects all selectable and visible entities.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.Visible"/>
            <seealso cref="P:devDept.Eyeshot.Layer.Visible"/>
        </member>
        <member name="M:devDept.Eyeshot.ISelectable.InvertSelection">
            <summary>
            Inverts selection.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/>
        </member>
        <member name="M:devDept.Eyeshot.ISelectable.DeleteSelected">
            <summary>
            Delete selected Entities.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ISelectable.CopySelection">
            <summary>
            Copies selected entities into the clipboard.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ISelectable.CutSelection">
            <summary>
            Cut selected entities into the clipboard.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LabelList.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LabelList.#ctor(devDept.Eyeshot.Viewport)">
            <summary>
            Constructor.
            </summary>
            <param name="viewport">The viewport this label list belong to</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LabelList.Remove(devDept.Eyeshot.Labels.Label)">
            <summary>
            Removes the first occurrence Image. a specific label from this collection.
            </summary>
            <param name="item">The object to remove from this collection</param>
            <returns>True if label is successfully removed; otherwise, false. This method also
            returns false if label was not found in this collection.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LabelList.RemoveAt(System.Int32)">
            <summary>
            Removes the label at the specified index Image. this collection.
            </summary>
            <param name="index">The zero-based index Image. the label to remove</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LabelList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range Image. <see cref="T:devDept.Eyeshot.Labels.Label">labels</see> from this collection.
            </summary>
            <param name="index">The zero-based starting index Image. the range Image. <see cref="T:devDept.Eyeshot.Labels.Label">labels</see> to remove</param>
            <param name="count">The number Image. <see cref="T:devDept.Eyeshot.Labels.Label">labels</see> to remove</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LabelList.Regen">
            <summary>
            Regeneratess only the labels that need it. Each label is automatically regenerated
            when added to the <see cref="P:devDept.Eyeshot.Viewport.Labels"/> collection. 
            You need to call this function only when you modify a label <b>already</b> in
             this collection. 
            </summary>
            <seealso cref="P:devDept.Eyeshot.Labels.Label.RegenMode"/>
        </member>
        <member name="P:devDept.Eyeshot.Labels.LabelList.Item(System.Int32)">
            <summary>
            Gets or sets the label at the specified index.
            </summary>
            <param name="index">The zero-based index Image. the label to get or set</param>
            <returns>The label at the specified index</returns>
        </member>
        <member name="T:devDept.Eyeshot.Labels.ImageOnly">
            <summary>
            Image only label.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Labels.ImageOnly.#ctor(devDept.Geometry.Point3D,System.Drawing.Bitmap)">
            <summary>
            Standard constructor.
            </summary>
            <param name="anchorPoint">Attaching point coords.</param>
            <param name="bitmap">Label image.</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.ImageOnly.#ctor(devDept.Geometry.Point3D,System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="anchorPoint">Attaching point coords</param>
            <param name="bitmap">Label image</param>
            <param name="hotspotX">Image hotspot X position</param>
            <param name="hotspotY">Image hotspot Y position</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.ImageOnly.#ctor(System.Double,System.Double,System.Double,System.Drawing.Bitmap)">
            <summary>
            Standard constructor.
            </summary>
            <param name="x">Attaching point X coord.</param>
            <param name="y">Attaching point Y coord.</param>
            <param name="z">Attaching point Z coord.</param>
            <param name="bitmap">Label image.</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.ImageOnly.#ctor(System.Double,System.Double,System.Double,System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="x">Attaching point X coord.</param>
            <param name="y">Attaching point Y coord.</param>
            <param name="z">Attaching point Z coord.</param>
            <param name="bitmap">Label image.</param>
            <param name="hotspotX">Image hotspot X position</param>
            <param name="hotspotY">Image hotspot Y position</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.ImageOnly.Draw(devDept.Graphics.RenderContextBase)">
            <summary>
            Standard draw method.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Labels.ImageOnly.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.ImageOnly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Labels.ImageOnly.HotSpot">
            <summary>
             Gets or sets the image hotspot (the point of the image that is drawn at the <see cref="P:devDept.Eyeshot.Labels.Label.AnchorPoint"/> position).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Labels.ImageOnly.Image">
            <summary>
            Gets or sets the label image.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Labels.ImageOnly.ImageForSelection">
            <summary>
            Gets or sets the image used when the label is selected.
            </summary>
            <remarks>If no image is provided, the label is drawn in negative colors when selected.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.Labels.LeaderAndImage">
            <summary>
            Leader and text image label.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LeaderAndImage.#ctor(devDept.Geometry.Point3D,System.Drawing.Bitmap,System.Drawing.Color,devDept.Geometry.Vector2D)">
            <summary>
            Standard constructor.
            </summary>
            <param name="anchorPoint">Attaching point coords.</param>
            <param name="bitmap">Label image.</param>
            <param name="leaderColor">Color of the leader line</param>
            <param name="offset">Offset between the label and the attaching point</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LeaderAndImage.#ctor(devDept.Geometry.Point3D,System.Drawing.Bitmap,System.Drawing.Color,System.Int32,System.Int32,devDept.Geometry.Vector2D)">
            <summary>
            Standard constructor.
            </summary>
            <param name="anchorPoint">Attaching point coords</param>
            <param name="bitmap">Label image</param>
            <param name="leaderColor">Color of the leader line</param>
            <param name="hotspotX">Image hotspot X position</param>
            <param name="hotspotY">Image hotspot Y position</param>
            <param name="offset">Offset between the label and the attaching point</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LeaderAndImage.#ctor(System.Double,System.Double,System.Double,System.Drawing.Bitmap,System.Drawing.Color,devDept.Geometry.Vector2D)">
            <summary>
            Standard constructor.
            </summary>
            <param name="x">Attaching point X coord.</param>
            <param name="y">Attaching point Y coord.</param>
            <param name="z">Attaching point Z coord.</param>
            <param name="bitmap">Label image.</param>
            <param name="leaderColor">Color of the leader line</param>
            <param name="offset">Offset between the label and the attaching point</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LeaderAndImage.#ctor(System.Double,System.Double,System.Double,System.Drawing.Bitmap,System.Drawing.Color,System.Int32,System.Int32,devDept.Geometry.Vector2D)">
            <summary>
            Standard constructor.
            </summary>
            <param name="x">Attaching point X coord.</param>
            <param name="y">Attaching point Y coord.</param>
            <param name="z">Attaching point Z coord.</param>
            <param name="bitmap">Label image.</param>
            <param name="leaderColor">Color of the leader line</param>
            <param name="hotspotX">Image hotspot X position</param>
            <param name="hotspotY">Image hotspot Y position</param>
            <param name="offset">Offset between the label and the attaching point</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LeaderAndImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LeaderAndImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Labels.LeaderAndImage.Offset">
            <summary>
            Gets or sets the label offset from the 3D attaching point.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Labels.LeaderAndText">
            <summary>
            Leader and text label attached to a 3D point.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Labels.TextOnly">
            <summary>
            Image only label.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.TextOnly.text">
            <summary>
            The label text.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.TextOnly.font">
            <summary>
            The label font.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.TextOnly.vertical">
            <summary>
            Horizontal/vertical switch.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.TextOnly.fill">
            <summary>
            Filled/unfilled switch.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.TextOnly.fillColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.TextOnly.fillColorForSelection">
            <summary>
            Background color used when the label is selected.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Labels.TextOnly.colorForSelection">
            <summary>
            Label color used when the label is selected.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Labels.TextOnly.#ctor(System.Double,System.Double,System.Double,System.String,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Individual anchor point coordinates constructor.
            </summary>
            <param name="x">Anchor point X coordinate</param>
            <param name="y">Anchor point Y coordinate</param>
            <param name="z">Anchor point Z coordinate</param>
            <param name="text">Label text</param>
            <param name="textFont">Text font</param>
            <param name="textColor">A <see cref="T:System.Drawing.Color"/> structure that indicates the text color of this label</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.TextOnly.#ctor(System.Double,System.Double,System.Double,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.ContentAlignment)">
            <summary>
            Text alignment constructor.
            </summary>
            <param name="x">Anchor point X coordinate</param>
            <param name="y">Anchor point Y coordinate</param>
            <param name="z">Anchor point Z coordinate</param>
            <param name="text">Label text</param>
            <param name="textFont">Text font</param>
            <param name="textColor">A <see cref="T:System.Drawing.Color"/> structure that indicates the text color of this label</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.TextOnly.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            3D point constructor.
            </summary>
            <param name="pt">Anchor point</param>
            <param name="text">Label text</param>
            <param name="textFont">Text font</param>
            <param name="textColor">A <see cref="T:System.Drawing.Color"/> structure that indicates the text color of this label</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.TextOnly.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.ContentAlignment)">
            <summary>
            3D point and text alignment constructor.
            </summary>
            <param name="pt">Anchor point</param>
            <param name="text">Label text</param>
            <param name="textFont">Text font</param>
            <param name="textColor">A <see cref="T:System.Drawing.Color"/> structure that indicates the text color of this label</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.TextOnly.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.TextOnly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Labels.TextOnly.Text">
            <summary>
            Gets or sets the label text.
            </summary>
            <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen"/> to apply the changes.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Labels.TextOnly.TextAlign">
            <summary>
            Gets or sets the text align mode.
            </summary>
            <remarks>It's the same as <see cref="P:devDept.Eyeshot.Labels.Label.Alignment"/>.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Labels.TextOnly.Font">
            <summary>
            Gets or sets the label font.
            </summary>
            <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen"/> to apply the changes.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Labels.TextOnly.Vertical">
            <summary>
            If true, the text will be drawn vertically.
            </summary>
            <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen"/> to apply the changes.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Labels.TextOnly.Fill">
            <summary>
            If true, a solid background will be drawn with the <see cref="P:devDept.Eyeshot.Labels.TextOnly.FillColor"/> color.
            </summary>
            <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen"/> to apply the changes.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Labels.TextOnly.FillColor">
            <summary>
            Gets or sets the label fill color.
            </summary>
            <remarks>Alpha channel is supported.</remarks>
            <remarks><see cref="P:devDept.Eyeshot.Labels.TextOnly.Fill"/> property must be true</remarks>
            <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen"/> to apply the changes.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Labels.TextOnly.FillColorForSelection">
            <summary>
            Gets or sets the fill color used when the label is selected.
            </summary>
            <remarks>Alpha channel is supported.</remarks>
            <remarks><see cref="P:devDept.Eyeshot.Labels.TextOnly.Fill"/> property must be true</remarks>
            <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen"/> to apply the changes.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Labels.TextOnly.ColorForSelection">
            <summary>
            Gets or sets the color used when the label is selected.
            </summary>
            <remarks>Alpha channel is supported.</remarks>
            <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen"/> to apply the changes.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LeaderAndText.#ctor(System.Double,System.Double,System.Double,System.String,System.Drawing.Font,System.Drawing.Color,devDept.Geometry.Vector2D)">
            <summary>
            Standard constructor.
            </summary>
            <param name="x">Attaching point X coord.</param>
            <param name="y">Attaching point Y coord.</param>
            <param name="z">Attaching point Z coord.</param>
            <param name="text">Label text</param>
            <param name="textFont">Text font</param>
            <param name="textColor">A <see cref="T:System.Drawing.Color"/> structure that indicates the color of this label</param>
            <param name="offset">Offset between the label and the attaching point</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LeaderAndText.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color,devDept.Geometry.Vector2D)">
            <summary>
            Standard constructor.
            </summary>
            <param name="p">Attaching point coords.</param>
            <param name="text">Label text</param>
            <param name="textFont">Text font</param>
            <param name="textColor">A <see cref="T:System.Drawing.Color"/> structure that indicates the color of this label</param>
            <param name="offset">Offset between the label and the attaching point</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LeaderAndText.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="p">Attaching point coords.</param>
            <param name="text">Label text</param>
            <param name="textFont">Text font</param>
            <param name="textColor">A <see cref="T:System.Drawing.Color"/> structure that indicates the color of this label</param>
            <param name="offsetX">X Offset between the label and the attaching point</param>
            <param name="offsetY">Y Offset between the label and the attaching point</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LeaderAndText.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.LeaderAndText.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Labels.LeaderAndText.Offset">
            <summary>
            Gets or sets the label offset from the 3D attaching point.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Triangulation.ScalarField3D">
            <summary>
            The function used by the marching cube algorithm to evaluate the 3D scalar field.
            </summary>
            <param name="x">X coordinate value</param>
            <param name="y">Y coordinate value</param>
            <param name="z">Z coordinate value</param>
            <returns>The scalar field value.</returns>
        </member>
        <member name="T:devDept.Eyeshot.Triangulation.MarchingCubes">
            <summary>
            Utility class for creating a polygonal surface representation of an isosurface of a 3D scalar field.
            <para>There are many applications for this type of technique, two very common ones are:</para>
            <list type="bullet">
            <item>Reconstruction of a surface from medical volumetric datasets. For example MRI scans result in a 3d volume of samples at the vertices of a regular 3D mesh.</item>
            <item>Creating a 3D contour of a mathematical scalar field. In this case the function is known everywhere but is sampled at the vertices of a regular 3D grid.</item>
            </list>
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.MarchingCubes.#ctor(System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,devDept.Eyeshot.Triangulation.ScalarField3D)">
            <summary>
            Centered in world origin constructor.
            </summary>
            <param name="nCellsInX">Number of cells along the X axis</param>
            <param name="cellSizeX">Cell size in X</param>
            <param name="nCellsInY">Number of cells along the Y axis</param>
            <param name="cellSizeY">Cell size in Y</param>
            <param name="nCellsInZ">Number of cells along the Z axis</param>
            <param name="cellSizeZ">Cell size in Z</param>
            <param name="func">The 3D scalar field function</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.MarchingCubes.#ctor(devDept.Geometry.Point3D,System.Int32,System.Double,System.Int32,System.Double,System.Int32,System.Double,devDept.Eyeshot.Triangulation.ScalarField3D)">
            <summary>
            Standard contructor.
            </summary>
            <param name="gridOrigin">Grid origin point</param>
            <param name="nCellsInX">Number of cells along the X axis</param>
            <param name="cellSizeX">Cell size in X</param>
            <param name="nCellsInY">Number of cells along the Y axis</param>
            <param name="cellSizeY">Cell size in Y</param>
            <param name="nCellsInZ">Number of cells along the Z axis</param>
            <param name="cellSizeZ">Cell size in Z</param>
            <param name="func">The 3D scalar field function</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.MarchingCubes.Polygonise(System.Double[0:,0:],System.Double[],System.Double,System.Collections.Generic.List{devDept.Geometry.Point3D})">
            <summary>
            Given a grid cell and an isolevel, calculate the triangular
            facets required to represent the isosurface through the cell.
            Return the number of triangular facets, the array <paramref name="triangles"/>
            will be loaded up with at most 5 triangular facets.
            </summary>
            <param name="coords">The grid cell vertices coords</param>
            <param name="values">The grid cell vertices values</param>
            <param name="isoLevel">Iso level.</param>
            <param name="triangles">A <see cref="T:devDept.Eyeshot.Entities.Triangle"/> array containing a maximum of 5 triangles.</param>
            <returns>0 will be returned if the grid cell is either totally above or totally below the isolevel.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.MarchingCubes.VertexInterp(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Linearly interpolate the position where an isosurface cuts
            an edge between two vertices, each with their own scalar value.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.MarchingCubes.ProgressBarText">
            <summary>
            Gets or sets the progress bar text string.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.MarchingCubes.IsoLevel">
            <summary>
            Gets or sets the desired iso-level value.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.MarchingCubes.Result">
            <summary>
            Gets the resulting mesh.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.MarchingCubes.LightWeight">
            <summary>
            Gets or sets the triangulation output type.
            </summary>
            <remarks>If true, the coincindent vertices of the generated mesh are not welded and the <see cref="F:devDept.Eyeshot.Entities.Mesh.meshNature"/> is set to <see cref="F:devDept.Eyeshot.Entities.Mesh.natureType.Plain"/>,
            else the vertices are welded and the <see cref="F:devDept.Eyeshot.Entities.Mesh.meshNature"/> is set to <see cref="F:devDept.Eyeshot.Entities.Mesh.natureType.Smooth"/> 
            The generated mesh is created with the same <see cref="P:devDept.Eyeshot.Entities.Mesh.LightWeight"/> value.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.Mouse3D.ButtonEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:devDept.Eyeshot.ViewportLayout.Mouse3DButtonDown"/> or <see cref="E:devDept.Eyeshot.ViewportLayout.Mouse3DButtonUp"/> event.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event data</param>
        </member>
        <member name="T:devDept.Eyeshot.Mouse3D.MoveEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:devDept.Eyeshot.ViewportLayout.Mouse3DMove"/> event.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event data</param>
        </member>
        <member name="T:devDept.Eyeshot.Mouse3D.MoveEventArgs">
            <summary>
            Provides data for the <see cref="E:devDept.Eyeshot.ViewportLayout.Mouse3DMove"/> event.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Mouse3D.MoveEventArgs.TranslationVector">
            <summary>
            Gets or sets the translation vector.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Mouse3D.MoveEventArgs.RotationVector">
            <summary>
            Gets or sets the rotation vector.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Mouse3D.MoveEventArgs.DeviceInfo">
            <summary>
            Gets or sets the device information.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Mouse3D.ButtonMask">
            <summary>
            ButtonMask from device
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Mouse3D.ButtonMask.Pressed">
            <summary>
            Gets a mask representing the pressed button.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Mouse3D.DeviceInfo">
            <summary>
            Class with the device information.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Mouse3D.DeviceInfo.DeviceName">
            <summary>
            Gets or sets the device name.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Mouse3D.DeviceInfo.DeviceHandle">
            <summary>
            Gets or sets the device handle.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Mouse3D.ButtonEventArgs">
            <summary>
            Provides data for the <see cref="E:devDept.Eyeshot.ViewportLayout.Mouse3DButtonDown"/> and <see cref="E:devDept.Eyeshot.ViewportLayout.Mouse3DButtonUp"/> event.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Mouse3D.TranslationVector">
            <summary>
            Translation Vector from device.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Mouse3D.RotationVector">
            <summary>
            Rotation Vector from device.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Mouse3D._3DxMouse.deviceList">
            <summary>
            List of 3Dx devices
            Key: the device handle
            Value: the device info class
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Mouse3D._3DxMouse.#ctor(System.IntPtr)">
            <summary>
            InputDevice constructor; registers the raw input devices
            for the calling window.
            </summary>
            <param name="hwnd">Handle of the window listening for key presses</param>
        </member>
        <member name="M:devDept.Eyeshot.Mouse3D._3DxMouse.EnumerateDevices">
            <summary>
            Iterates through the list provided by GetRawInputDeviceList,
            counting 3Dx devices and adding them to deviceList.
            </summary>
            <returns>The number of 3Dx devices found.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Mouse3D._3DxMouse.ProcessInputCommand(System.Int32,System.IntPtr,devDept.Eyeshot.ViewportLayout)">
            <summary>
            Processes WM_INPUT messages to retrieve information about any
            keyboard events that occur.
            </summary>
            <param name="message">The WM_INPUT message to process.</param>
        </member>
        <member name="M:devDept.Eyeshot.Mouse3D._3DxMouse.ProcessMessage(System.Int32,System.IntPtr,devDept.Eyeshot.ViewportLayout)">
            <summary>
            Filters Windows messages for WM_INPUT messages and calls
            ProcessInputCommand if necessary.
            </summary>
            <param name="message">The Windows message.</param>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Curve">
            <summary>
            Nurbs curve entity.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Fillet(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Arc@)">
            <summary>
            Fillets two coplanar curves with an arc of given radius.
            </summary>
            <param name="C1">First curve</param>
            <param name="C2">Second curve</param>
            <param name="radius">Radius of the fillet arc</param>
            <param name="flip1">Flips first curve direction</param>
            <param name="flip2">Flips second curve direction</param>
            <param name="trim1">When true the first curve is trimmed</param>
            <param name="trim2">When true the second curve is trimmed</param>
            <param name="fillet">The resulting fillet arc</param>
            <returns>True if the operation is successful, false if the curves don't lie on the same plane or don't touch.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Chamfer(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Line@)">
            <summary>
            Chamfers two curves.
            </summary>
            <param name="C1">First curve</param>
            <param name="C2">Second curve</param>
            <param name="distance">The chamfer distance</param>
            <param name="flip1">Flips first curve direction</param>
            <param name="flip2">Flips second curve direction</param>
            <param name="trim1">When true the first curve is trimmed</param>
            <param name="trim2">When true the second curve is trimmed</param>
            <param name="chamfer">The chamfer line</param>
            <returns>True if the operation is successful, false if the curves don't lie on the same plane or don't touch.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.LocalApproximation(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Double,devDept.Geometry.Vector3D[]@)">
            <summary>
            Local cubic approximation of a curve bounded to a certain error.
            </summary>
            <param name="Q">The list of points to approximate</param>
            <param name="err">The maximum error allowed</param>
            <param name="tangents">Automatically chosen tangents</param>
            <returns>The approximated curve if the operation is successful, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.LocalApproximation(System.Collections.Generic.IList{devDept.Geometry.PointTangent},System.Double)">
            <summary>
            Local cubic approximation of a curve bounded to a certain error.
            </summary>
            <param name="Q">The list of points with tangents to approximate</param>
            <param name="err">The maximum error allowed</param>
            <returns>The approximated curve if the operation is successful, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GlobalApproximation(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32,System.Double)">
            <summary>
            Global approximation of a curve bounded to a certain error.
            </summary>
            <param name="Q">The list of points to approximate</param>
            <param name="deg">The degree of the approximation curve</param>
            <param name="err">The maximum error allowed</param>
            <returns>The approximated curve if the operation is successful, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GlobalApproxErrBnd(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Double[],System.Int32,System.Double)">
            <summary>
            Approximation of a curve bounded to a certain error.
            </summary>
            <param name="Q">The list of points to approximate</param>
            <param name="ub">The vector of parameters where the points are located</param>
            <param name="degC">The degree of the approximation curve</param>
            <param name="E">The maximum error allowed</param>
            <remarks>ub and Q must be of the same size.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.ProjectQk(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Double[],System.Double[],System.Double)">
            <summary>
            Project the Qk and update ek[] and ub[]
            </summary>
            <param name="Q"></param>
            <param name="ub"></param>
            <param name="ek"></param>
            <param name="E"></param>
            <returns>False if ek[i] is greater than E</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.LeastSquares(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32,System.Int32)">
            <summary>
            Least squares curve approximation.
            </summary>
            <param name="Q">The list of 3D points</param>
            <param name="p">The curve degree</param>
            <param name="n">The number of control points in the new curve</param>
            <remarks>deg must be smaller than Q.Count</remarks>
            <returns>The approximated curve if the operation is successful, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.LeastSquares(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32,System.Int32,System.Double[],System.Double[]@,devDept.Geometry.Point4D[]@)">
            <summary>
            Least squares curve approximation
            </summary>
            <param name="Q">The list of 3D points</param>
            <param name="p">The curve degree</param>
            <param name="n">The number of control points in the new curve</param>
            <param name="ub">The knot coefficients</param>
            <param name="U">The curve knot vector</param>
            <returns>True if succesfull, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.LeastSquares(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32,System.Int32,System.Double[],System.Double[],devDept.Geometry.Point4D[]@)">
            <summary>
            Least squares curve approximation.
            </summary>
            <param name="Q">The list of point to approximate</param>
            <param name="p">The curve degree</param>
            <param name="n">The number of control points in the new curve</param>
            <param name="ub">The knot coefficients</param>
            <param name="U">The knot vector to use for the curve</param>
            <returns>True if succesfull, false it the number of points to approximate the curve with is too big compared to the number of points</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GetSubMatrix(devDept.Geometry.Equation[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the matrix of size (nRows, nCols) starting at (row, col).
            </summary>
            <param name="row">The index of the row</param>
            <param name="col">The index of the col</param>
            <param name="nRows">The number of rows of the submatrix</param>
            <param name="nCols">The number of columns of the submatrix</param>
            <returns>The submatrix.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.RemoveKnotsBnd(System.Double[],System.Double[],System.Double)">
            <summary>
            Remove knots from a curve without exceeding an error bound.
            </summary>
            <param name="ub">The knot coefficients</param>
            <param name="ek">The error after removing</param>
            <param name="E">The error</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GetRemovalBnd(System.Int32,System.Int32)">
            <summary>
            Get the knot removal error bound for an internal knot r 
            (non-rational).
            </summary>
            <param name="r">The index of the internal knot to check</param>
            <param name="s">The multiplicity of that knot</param>
            <returns>The maximum distance between the new curve and the old one.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.MinIndex(System.Double[])">
            <summary>
            Finds the index of its minimal item. Scans the array to 
            find its minimal value and returns the index of that value.
            </summary>
            <param name="x"></param>
            <returns>The index of the minimal value.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.ComputeCurvatureGraph(devDept.Eyeshot.ViewportLayout,System.Single)">
            <summary>
            Computes the desired curvature map.
            </summary>
            <param name="viewportLayout">The viewport layout</param>
            <param name="scaleFactor">The scale factor</param>
            <seealso cref="P:devDept.Eyeshot.Entities.Curve.ShowCurvature"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.HasMultipleSegments">
            <summary>
            Checks if the curve contains multiple connected segments.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.InsertKnot(System.Double,System.Int32)">
            <summary>
            Inserts a knot a number of times. It does not affect the shape of the curve.
            </summary>
            <param name="u">The knot to insert</param>
            <param name="r">The number of times to insert</param>
            <returns>The number of knots inserted, zero otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.InsertKnot(devDept.Geometry.Point3D,System.Int32)">
            <summary>
            Inserts a knot a number of times. It is added at the parameter corresponding to the projection of the given point on the curve. 
            The insertion does not affect the shape of the curve.
            </summary>
            <param name="ctrlPoint">The point to be projected on the curve</param>
            <param name="r">The number of times to insert</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.AddControlPoint(devDept.Geometry.Point3D)">
            <summary>
            Inserts a control point on the control polygon. The control point will be added at the projection of the given 3D point on the polygon. 
            The insertion does not affect the shape of the curve.
            </summary>
            <param name="ctrlPoint">The 3D point to be projected on the control polygon</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.RefineKnotVector(System.Double[])">
            <summary>
            Refines the curve knot vector.
            </summary>
            <param name="X">The new knots to insert in the knot vector</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.DegreeElevate(System.Int32)">
            <summary>
            Degree elevates the curve.
            </summary>
            <param name="t">The number of times to increase the degree of the curve</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Decompose">
            <summary>
            Decomposes the curve into Bézier segments.
            </summary>
            <returns>A list of curves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.RemoveKnot(System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes an internal knot from a curve.
            </summary>
            <remarks>Must be an internal knot.</remarks>
            <param name="r">The knot to remove</param>
            <param name="s">The multiplicity of the knot</param>
            <param name="num">The number of times to try to remove the knot</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.RemoveKnot(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Removes an internal knot from a curve.
            </summary>
            <remarks>Must be an internal knot.</remarks>
            <param name="r">The knot to remove</param>
            <param name="s">The multiplicity of the knot</param>
            <param name="num">The number of times to try to remove the knot</param>
            <param name="tol">The allowed tolerance</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.RemoveKnots(System.Double)">
            <summary>
            Removes as many knots as possible from a curve.
            </summary>
            <param name="tol">The allowed tolerance</param>
            <returns>Number of knots removed.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GlobalInterpolation(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32)">
            <summary>
            Global curve interpolation.
            </summary>
            <param name="Q">The list of points to interpolate</param>
            <param name="deg">The desired curve degree</param>
            <returns>The interpolated curve if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GlobalInterpolation(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32,System.Double[]@,System.Double[]@)">
            <summary>
            Global curve interpolation.
            </summary>
            <param name="Q">The list of points to interpolate</param>
            <param name="deg">The desired curve degree</param>
            <returns>The interpolated curve if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GlobalInterpolation(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Double[],System.Int32)">
            <summary>
            Curve interpolation with points in 3D and with the parametric values.
            </summary>
            <param name="Q">the 3D points to interpolate</param>
            <param name="ub">the parametric values </param>
            <param name="deg">the degree of the interpolation</param>
            <remarks>The number of points to interpolate must be greater than
            the degree specified for the curve</remarks>
            <returns>True if the interpolation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GlobalInterpolation(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Double[],System.Double[],System.Int32)">
            <summary>
            Global curve interpolation with a knot vector defined and 
            the parametric value vector defined. Used by Surface.GlobalInterpolation().
            </summary>
            <param name="Q">The list of points to interpolate</param>
            <param name="uk">The parametric values vector</param>
            <param name="Un">The knot vector to set the curve to</param>
            <param name="deg">The curve degree</param>
            <returns>The resulting curve.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GlobalInterpolationH(System.Collections.Generic.IList{devDept.Geometry.Point4D},System.Double[],System.Double[],System.Int32)">
            <summary>
            Global curve interpolation with 4D points, a knot vector defined and the parametric value vector defined.
            </summary>
            <param name="Q">the 3D points to interpolate</param>
            <param name="ub">the parametric values vector</param>
            <param name="Un">the knot vector to set the curve to</param>
            <param name="deg">the degree of the interpolation</param>
            <returns></returns>
            <remarks>The number of points to interpolate must be greater than the degree specified for the curve. Un must be compatible with the values given for Q.Count, ub.Length and deg.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.LocalInterpolation(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Boolean)">
            <summary>
            Local interpolation.
            </summary>
            <param name="Q">A list of 3D points to interpolate</param>
            <param name="cornerFlag">If true corners are mantained</param>
            <returns>The interpolated curve if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.LocalInterpolation(System.Collections.Generic.IList{devDept.Geometry.PointTangent})">
            <summary>
            Local interpolation.
            </summary>
            <param name="Q">A list of 3D points with 3D tangent to interpolate</param>
            <returns>The interpolated curve if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.CubicSplineInterpolation``1(System.Collections.Generic.IList{``0})">
            <summary>
            Cubic spline interpolation with automatic tangents.
            </summary>
            <param name="Q">The list of 3D points to interpolate</param>
            <returns>The interpolated curve if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.CubicSplineInterpolation(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)">
            <summary>
            Cubic spline interpolation.
            </summary>
            <param name="Q">The list of 3D points to interpolate</param>
            <param name="startTang">The start 3D tangent vector, magnitude matters (total chord length of the point set can be a reasonable value).</param>
            <param name="endTang">The end 3D tangent vector, magnitude matters (total chord length of the point set can be a reasonable value).</param>
            <returns>The interpolated curve if the operation succeeded, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Intersection(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Finds all 3D points where the provided curves intersect.
            </summary>
            <returns>The list of intersection points.</returns>
            <param name="C1">The first curve</param>
            <param name="C2">The second curve</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Intersection(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double)">
            <summary>
            Finds all 3D points where the provided curves intersect within the specified gap.
            </summary>
            <returns>The list of intersection points.</returns>
            <param name="C1">The first curve</param>
            <param name="C2">The second curve</param>
            <param name="maxGap">Maximum distance between curves</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Intersection2D(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Plane)">
            <summary>
            Finds all 3D points where the provided coplanar curves intersect.
            </summary>
            <returns>The list of intersection points.</returns>
            <param name="C1">The first curve</param>
            <param name="C2">The second curve</param>
            <param name="plane">The plane where the two curves lay</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.ControlBoundingBox(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
            <summary>
            Build a bbox from control points of all contours' curves. Sometimes cylinders are trimmed by two circles, therefore we cannot
            rely on the first contour being the outer.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.ControlBoundingBox(System.Double,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
            <summary>
            Computes the extension of the control polygon/net.
            </summary>
            <param name="min">Min 3D point</param>
            <param name="max">Max 3D point</param>
            <param name="inflateBy">Offset</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.lengthF(System.Double)">
            <summary>
            The function used by length.
            length needs to integrate a function over an interval
            to determine the length of the NURBS curve. 
            </summary>
            <param name="u">The parameter</param>
            <returns>Square root of the square of the x,y and z values</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.length">
            <summary>
            Computes an approximation of the length of the curve
            using a numerical automatic integrator.
            That integrator uses a Chebyshev Series Expansion
            to perform its approximation. This is why you can
            change the value n which sets the number of 
            elements in the series. 
            The method is simple, integrate between each span.
            This is necessary in case the tangent of a point
            at u_i is undefined. Add the result and return
            this as the approximation.
            </summary>
            <returns>The length of the NURBS curve</returns>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Curve.seam">
            <summary>
            Curve seam.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Curve.closed">
            <summary>
            Closed status.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Curve.rational">
            <summary>
            Rational flag.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Curve.bezSegs">
            <summary>
            Point projection subdivision starting patch.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.CheckProjection(System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)">
            <summary>
            Checks coincidence and perpendicularity. WARNING: input vectors will be normalized by this function.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,System.Double,System.Double@)">
            <summary>
            Projects a point on the curve.
            </summary>
            <param name="P">The 3D point to project</param>
            <param name="u">The U parametric coordinate of the closest point on curve to P</param>
            <param name="coincTol">Relevant only when P lays on the curve. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
            <param name="allowOutside">When true, the projection is not constrained inside the curve domain</param>
            <param name="prevU">The U parametric coordinate of a previous succesful point projection</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,System.Double@)">
            <summary>
            Projects a point on the curve.
            </summary>
            <param name="P">The 3D point to project</param>
            <param name="u">The U parametric position of the closest point on curve to P</param>
            <param name="coincTol">Relevant only when P lays on the curve. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
            <param name="allowOutside">When true, the projection is not constrained inside the curve domain</param>
            <returns>True when the projection is perpendicular to the curve, false otherwise.</returns>
            <remarks>When false is returned, the value of u is not reliable.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,System.Boolean,System.Double@)">
            <summary>
            Projects a point on the curve.
            Added the bool checkProj for ticket #3937, we need it to be false when calling it from ClosestPointTo()
            In ClosestPointTo, we are not interested in knowing if the resulting point is an orthogonal projection
            We only want it to be close to P. 
            Before adding this method, if there wasn't an orthogonal projection, we returned False and Domain.Low as parameter.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.CreateSampling(System.Int32)">
            <summary>
            Generates a number n of equally spaced parametric values for each span.
            </summary>
            <param name="nu">Number of values per span in the U knot vector</param>
            <returns>The parametric values list.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.PointAt(System.Double)">
            <summary>
            Computes the curve point at parametric value u.
            </summary>
            <param name="u">The parametric value</param>
            <returns>The 3D point.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Evaluate(System.Double)">
            <summary>
            Computes the curve point at parametric value u.
            </summary>
            <param name="u">The parametric value</param>
            <returns>The 3D point.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Evaluate(System.Double,System.Int32)">
            <summary>
            Computes the curve derivatives at parametric value u.
            </summary>
            <returns>The derivatives array.</returns>
            <example>
                The following code fragment demonstrates how to compute the first 2 derivatives of
                the curve at the parametric value [0.25].
            <code lang="CS">
            Vector3D[] CK = myCurve.Evaluate(0.25, 2);
             
            Vector3D C   = CK[0];
            Vector3D Cu  = CK[1];
            Vector3D Cuu = CK[2];
            </code>
            <code lang="VB">
            Dim CK() As Vector3D = MyCurve.Evaluate(0.25, 2)
             
            Dim C As Vector3D = CK(0)
            Dim Cu As Vector3D = CK(1)
            Dim Cuu As Vector3D = CK(2)
            </code>
            </example>
            <param name="u">The parametric value</param>
            <param name="d">The degree of the derivative</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.RatCurveDerivsAlg1(System.Double,System.Int32)">
            <summary>
            Computes curve derivatives.
            </summary>
            <param name="u">The parametric value</param>
            <param name="d">The degree of the derivative</param>
            <return>The derivatives, CK[k] is the kth derivative, 0 &lt;= k &lt;= d.</return>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.CurveDerivsAlg1(System.Double,System.Int32)">
            <summary>
            Computes curve derivatives.
            </summary>
            <param name="u">The parametric value</param>
            <param name="d">The degree of the derivative</param>
            <return>The derivatives, CK[k] is the kth derivative, 0 &lt;= k &lt;= d.</return>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Evaluate4D(System.Double)">
            <summary>
            Evaluates the curve in 4D at parameter u.
            </summary>
            <param name="u">The parametric value</param>
            <returns>The 4D point</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Curvature(System.Double)">
            <summary>
            Computes the curve curvature at parametric value u.
            </summary>
            <param name="u">The parametric value</param>
            <returns>The curvature magnitude.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.CurvatureOffset(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D@)">
            <summary>
            Computes the curve curvature of the offset curve at parametric value u.
            </summary>
            <param name="u">The parametric value</param>
            <param name="d">The offset distance</param>
            <param name="planeNormal">The normal to the plane of the curve</param>
            <returns>The curvature magnitude.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.NormalAt(System.Double)">
            <summary>
            Computes the curve normal at parametric value u.
            </summary>
            <param name="u">The parametric value</param>
            <returns>The normal vector.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.EvNormal(System.Double,devDept.Geometry.Vector3D@)">
            <summary>
            Computes the curve normal at parametric value u.
            </summary>
            <param name="u">The parametric value</param>
            <param name="normal">The curve normal</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.TangentAt(System.Double)">
            <summary>
            Evaluates unit tangent vector at a parameter.
            </summary>
            <param name="t">Evaluation parameter</param>
            <returns>Unit tangent vector of the curve at the parameter t.</returns>
            <remarks>No error handling.</remarks>
            <seealso>EvaluateTangent()</seealso>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.EvaluateTangent(System.Double,devDept.Geometry.Point3D@,devDept.Geometry.Vector3D@)">
            <summary>
            Evaluate unit tangent at a parameter with error checking.
            </summary>
            <param name="t">Evaluation parameter</param>
            <param name="point">The 3D point at t</param>
            <param name="tangent">The unit tangent at t</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.TrimBy(devDept.Geometry.Point3D,System.Boolean)">
            <summary>
            Trims the curve at the limit point projection.
            </summary>
            <param name="limit">The limit point</param>
            <param name="flipSide">The flip side flag</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.TrimAt(System.Double,System.Boolean)">
            <summary>
            Trims the curve at the provided parametric value.
            </summary>
            <param name="u">The parametric value</param>
            <param name="flipSide">The flip side flag</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.TrimBy(devDept.Geometry.Plane,System.Double,System.Boolean)">
            <summary>
            Trims the curve at the limit point projection.
            </summary>
            <param name="pln">The limit plane</param>
            <param name="tol">The tolerance</param>
            <param name="flipSide">The flip side flag</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.IntersectWith(devDept.Geometry.Plane,System.Double)">
            <summary>
            Trims the curve at the limit point projection.
            </summary>
            <param name="pln">The limit plane</param>
            <param name="tol">The search tolerance</param>
            <returns>The list of 3D intersection points.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.#ctor(System.Int32,System.Double[],devDept.Geometry.Point4D[])">
            <summary>
            Standard constructor.
            </summary>
            <param name="degree">The curve degree</param>
            <param name="knotVector">The knot vector</param>
            <param name="ctrlPoints">The control points list</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.#ctor(System.Int32,System.Double,devDept.Geometry.Vector3D[])">
            <summary>
            Power basis to Bezier constructor.
            </summary>
            <param name="degree">The curve degree</param>
            <param name="span">The segment span</param>
            <param name="b">The power basis coefficients as an array of 3D vectors</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.#ctor(System.Int32,System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Curve by control points constructor.
            </summary>
            <param name="degree">The desired curve degree</param>
            <param name="ctrlPoints">The control points list</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
            <summary>
            Elliptical arc by three points and two tangents constructor.
            </summary>
            <param name="P0">Start 3D point</param>
            <param name="T0">Start 3D tangent</param>
            <param name="P1">End 3D point</param>
            <param name="T1">End 3D tangent</param>
            <param name="P">A 3D point between P0 and P1.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Clone">
            <summary>
            Creates a deep copy of this curve.
            </summary>
            <returns>The new curve object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes a curve.
            </summary>
            <remarks>The old values are lost and new ones have to be created.</remarks>
            <param name="n">The new number of control points for the curve</param>
            <param name="deg">The new degree for the curve</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.ResizeKeep(System.Int32,System.Int32)">
            <summary>
            Resizes a curve, keeping original values.
            </summary>
            <remarks>The old values are lost and new ones have to be created.</remarks>
            <param name="n">The new number of control points for the curve</param>
            <param name="deg">The new degree for the curve</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.MergeKnotVector(System.Double[])">
            <summary>
            Merges the knot vector of a curve with another knot vector. Used by Surface.SkinU() and SkinV().
            </summary>
            <remarks>The knot U must be common with the one from the curve c.</remarks>
            <param name="Um">The knot vector to merge with</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Merge(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Joins two curves.
            </summary>
            <param name="cl">The lower curve</param>
            <param name="cu">The upper curve</param>        
            <returns>The resulting curve</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.MergeKnotsAndPw(devDept.Eyeshot.Entities.Curve,devDept.Eyeshot.Entities.Curve,System.Boolean)">
            <summary>
            Joins two curves. Curves must be properly oriented and of the same degree.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Merge(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
            <summary>
            Joins a list of curves. Curves must be properly oriented.
            </summary>
            <param name="curves">A list of curves to merge</param>
            <returns>The merged curve</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Merge(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Boolean)">
            <summary>
            Joins a list of curves. Curves must be properly oriented.
            </summary>
            <param name="curves">A list of curves to merge</param>
            <param name="clean">When true, it cleans superfluous knots from the resulting curve.</param>
            <returns>The merged curve.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.SplitAt(System.Double,devDept.Eyeshot.Entities.ICurve@,devDept.Eyeshot.Entities.ICurve@)">
            <summary>
            Splits the curve into two curves.
            </summary>
            <param name="u">Splits at this parametric value</param>
            <param name="lower">The lower curve</param>
            <param name="upper">The upper curve</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.SplitAtDiscontinuities(System.Boolean)">
            <summary>
            Splits the curve at derivative discontinuities (e.g. cusps, kinks), returns an array of the smooth segments that form the curve.
            </summary>
            <param name="speedChange">If true, when the tangents have the same direction but different lengths, the curve will be split. 
            If false, it won't be split.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.SplitAtKnot(System.Int32,devDept.Eyeshot.Entities.Curve@,devDept.Eyeshot.Entities.Curve@)">
            <summary>
            Subdivides the surface at the knot of index splitPt in the U or V direction.
            </summary>
            <param name="splitPt">Index of the knot</param>
            <param name="kid0">Lower surface</param>
            <param name="kid1">Upper surface</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Clamp(System.Boolean,System.Boolean)">
            <summary>
            Clamps the curve knot vector.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Reverse">
            <summary>
            Reverses the curve direction.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GetNurbsForm">
            <summary>
            Gets the Nurbs form of this curve.
            </summary>
            <returns>The curve itself, not cloned.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Length">
            <summary>
            Gets the curve length.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.IsLinear(System.Double,devDept.Geometry.Segment3D@)">
            <summary>
            Test a curve to see if the locus of its points is a line segment.
            </summary>
            <param name="tolerance">The tolerance</param>
            <param name="line">The line where the curve lays</param>
            <returns>True if the ends of the curve are farther than tolerance apart
            and the maximum distance from any point on the curve to
            the line segment connecting the curve's ends is &lt;= tolerance
            </returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.IsPlanar(System.Double,devDept.Geometry.Plane@)">
            <summary>
            Checks if the curve is planar.
            </summary>
            <param name="tol">The tolerance</param>
            <param name="plane">The plane where the curve lays</param>
            <returns>True if the curve is planar within tolerance, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.IsInPlane(devDept.Geometry.Plane,System.Double)">
            <summary>
            Checks if the curve lays on the specified plane.
            </summary>
            <param name="plane">The plane to test</param>
            <param name="tol">The tolerance</param>
            <returns>True if the curve lays on this plane, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info"></param>
            <param name="ctxt"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GetTrimCurve">
            <summary>
            Gets a TrimCurve representation of this curve
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GetTrimCurve(devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Gets a TrimCurve representation of this curve
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.GetTrimCurve(devDept.Eyeshot.Entities.ICurve,System.Int32,System.Int32)">
            <summary>
            Gets a TrimCurve representation of this curve
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.FreeCache">
            <summary>
            Frees point projection cache memory.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.TryGetArc(devDept.Eyeshot.Entities.Circle@)">
            <summary>
            Converts this generic curve to <see cref="T:devDept.Eyeshot.Entities.Arc"/> or <see cref="T:devDept.Eyeshot.Entities.Circle"/> (when possible).
            </summary>
            <param name="arc">The resulting circular curve (when possible)</param>
            <returns>True if the operation succeeds, false otherwise.</returns>
            <remarks>It works for arcs of angle 0, PI/2, PI, and 2PI.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.TryGetLine(devDept.Eyeshot.Entities.Line@)">
            <summary>
            Converts this generic curve to <see cref="T:devDept.Eyeshot.Entities.Line"/> (when possible).
            </summary>
            <param name="ln">The resulting linear curve (when possible)</param>
            <returns>True if the operation succeeds, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Curve.Promote">
            <summary>
            Converts this generic curve to <see cref="T:devDept.Eyeshot.Entities.Line"/>, <see cref="T:devDept.Eyeshot.Entities.Arc"/> or <see cref="T:devDept.Eyeshot.Entities.Circle"/> (when possible).
            </summary>
            <returns>The new curve when possible, null/Nothing otherwise.</returns>
            <remarks>For arcs, it works if the angle is 0, PI/2, PI or 2PI.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Curve.ShowCurvature">
            <summary>
            When true, curvature graph is displayed.
            </summary>
            <remarks>You need to call <see cref="M:devDept.Eyeshot.Entities.Curve.ComputeCurvatureGraph(devDept.Eyeshot.ViewportLayout,System.Single)"/> before enabling curvature graph display.</remarks>
            <seealso cref="M:devDept.Eyeshot.Entities.Curve.ComputeCurvatureGraph(devDept.Eyeshot.ViewportLayout,System.Single)"/>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Curve.Domain">
            <summary>
            Gets curve domain.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Curve.Order">
            <summary>
            Gets curve order.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Curve.Degree">
            <summary>
            Gets the curve degree.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Curve.IsClosed">
            <summary>
            Returns true if the curve is closed.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Curve.IsRational">
            <summary>
            Returns true if the curve is rational.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Curve.ControlPoints">
            <summary>
            Gets or sets the curve control point array.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Curve.KnotVector">
            <summary>
            Gets or sets the curve knot vector U.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Curve.IsLine">
            <summary>
            If true the curve is a line and not a degenerated one (a point).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Curve.IsLineNonRational">
            <summary>
            If true the curve is a line.
            Faster than IsLine bacause we avoid Euclid. It doesn't work well if the line is rational.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Curve.IsPoint">
            <summary>
            If true, the curve is a degenerated one (a point).
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ProgressChangedEventArgs">
            <summary>Provides data for the <see cref="E:devDept.Eyeshot.ViewportLayout.ProgressChanged"/> event.</summary>
        </member>
        <member name="M:devDept.Eyeshot.ProgressChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="progress">A value representing the current progress in the range [0-100].</param>
        </member>
        <member name="P:devDept.Eyeshot.ProgressChangedEventArgs.Progress">
            <summary>
            Current progress (0-100).
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Translators.ReadIGES">
            <summary>
            Utility class for loading IGES files asynchronously.
            <para>The list of supported entities follows:</para>
            	<table>
            		<tbody>
            			<tr>
            				<td height="13">
            					<strong>Type</strong>
            				</td>
            				<td height="13">
            					<strong>Form</strong>
            				</td>
            				<td height="13">
            					<strong>Entity Name</strong>
            				</td>
            			</tr>
            			<tr>
            				<td align="right">100</td>
            				<td></td>
            				<td>Arc</td>
            			</tr>
            			<tr>
            				<td align="right">102</td>
            				<td></td>
            				<td>Composite Curve</td>
            			</tr>
            			<tr>
            				<td align="right">104</td>
            				<td align="right">1</td>
            				<td>Conic Arc</td>
            			</tr>
            			<tr>
            				<td align="right">106</td>
            				<td align="right">1, 2, 12</td>
            				<td>Copious Data</td>
            			</tr>
            			<tr>
            				<td align="right">108</td>
            				<td></td>
            				<td>Plane</td>
            			</tr>
            			<tr>
            				<td align="right">110</td>
            				<td></td>
            				<td>Line</td>
            			</tr>
            	        <tr>
            				<td align="right">112</td>
            				<td></td>
            				<td>Parametric spline</td>
            			</tr>
            			<tr>
            				<td align="right">116</td>
            				<td></td>
            				<td>Point</td>
            			</tr>
            			<tr>
            				<td align="right">118</td>
            				<td></td>
            				<td>Ruled Surface</td>
            			</tr>
            			<tr>
            				<td align="right">120</td>
            				<td></td>
            				<td>Surface of Revolution</td>
            			</tr>
            			<tr>
            				<td align="right">122</td>
            				<td></td>
            				<td>Tabulated Surface</td>
            			</tr>
            			<tr>
            				<td align="right">124</td>
            				<td></td>
            				<td>Transformation Matrix</td>
            			</tr>
            			<tr>
            				<td align="right">126</td>
            				<td></td>
            				<td>Rational B-Spline Curve</td>
            			</tr>
            			<tr>
            				<td align="right">128</td>
            				<td></td>
            				<td>Rational B-Spline Surface</td>
            			</tr>
            			<tr>
            				<td align="right">141</td>
            				<td></td>
            				<td>Boundary Entity</td>
            			</tr>
            			<tr>
            				<td align="right">142</td>
            				<td></td>
            				<td>Curve on Parametric Surface</td>
            			</tr>
            			<tr>
            				<td align="right">143</td>
            				<td></td>
            				<td>Bounded Surface</td>
            			</tr>
            			<tr>
            				<td align="right">144</td>
            				<td></td>
            				<td>Trimmed Parametric Surface</td>
            			</tr>
            			<tr>
            				<td align="right">186</td>
            				<td></td>
            				<td>Manifold Solid BRep</td>
            			</tr>        
            			<tr>
            				<td align="right">190</td>
            				<td></td>
            				<td>Planar Surface</td>
            			</tr>        
            			<tr>
            				<td align="right">192</td>
            				<td></td>
            				<td>Right Circular Cylindrical Surface</td>
            			</tr>        
            			<tr>
            				<td align="right">194</td>
            				<td></td>
            				<td>Right Circular Conical Surface</td>
            			</tr>        
            			<tr>
            				<td align="right">196</td>
            				<td></td>
            				<td>Spherical Surface</td>
            			</tr>        
            			<tr>
            				<td align="right">198</td>
            				<td></td>
            				<td>Torical Surface</td>
            			</tr>
            			<tr>
            				<td align="right">212</td>
            				<td></td>
            				<td>General Note</td>
            			</tr>
            			<tr>
            				<td align="right">308</td>
            				<td></td>
            				<td>Subfigure Definition</td>
            			</tr>
            			<tr>
            				<td align="right">314</td>
            				<td></td>
            				<td>Color Definition</td>
            			</tr>
            			<tr>
            				<td align="right">402</td>
            				<td align="right">15</td>
            				<td>Ordered Group</td>
            			</tr>
            			<tr>
            				<td align="right">406</td>
            				<td align="right">3</td>
            				<td>Level Function Property</td>
            			</tr>
            			<tr>
            				<td align="right">408</td>
            				<td></td>
            				<td>Singular Subfigure Instance</td>
            			</tr> 			
                        <tr>
            				<td align="right">502</td>
            				<td></td>
            				<td>Vertex</td>
            			</tr>
            <tr>
            				<td align="right">504</td>
            				<td></td>
            				<td>Edge</td>
            			</tr>
            <tr>
            				<td align="right">508</td>
            				<td></td>
            				<td>Loop</td>
            			</tr>        
             <tr>
            				<td align="right">510</td>
            				<td></td>
            				<td>Face</td>
            			</tr>
                        <tr>
            				<td align="right">514</td>
            				<td></td>
            				<td>Shell</td>
            			</tr>
            		</tbody>
            	</table>
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadIGES.#ctor(System.String,System.Boolean)">
            <summary>
            File name constructor.
            </summary>
            <param name="fileName">The file name</param>
            <param name="applyScaling">Applies IGES model space scale</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadIGES.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            File stream constructor.
            </summary>
            <param name="stream">The file stream</param>
            <param name="applyScaling">Applies IGES model space scale</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadIGES.ModelSpaceScale">
            <summary>
            Gets IGES model space scale. The ratio of model space to real-world space.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadIGES.Simplify">
            <summary>
            Controls if generic surfaces are converted to <see cref="T:devDept.Eyeshot.Entities.PlanarSurface"/>, <see cref="!:TabulatedSurface"/> or <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface"/> to improve import speed.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Translators.WriteIGES">
            <summary>
            Helper class to export current model in IGES file format.
            </summary> 
        </member>
        <member name="T:devDept.Eyeshot.Translators.WriteFileAsynchWithUnits">
            <summary>
            Base class for file asynchronous writing supporting unit systems.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Translators.WriteFileAsynch">
            <summary>
            Base class for asynchronous file writing.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteFileAsynch.#ctor(devDept.Eyeshot.ViewportLayout,System.String)">
            <summary>
            Standard constructor.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="fileName">The file name (with the *.obj extension)</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteFileAsynch.#ctor(devDept.Eyeshot.ViewportLayout,System.IO.Stream)">
            <summary>
            Standard constructor with stream.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="stream">The file stream</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteFileAsynch.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String)">
            <summary>
            Entity list constructor.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="fileName">The file name</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteFileAsynch.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream)">
            <summary>
            To stream with entity list constructor.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="stream">The file stream</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteFileAsynch.EstimateTolFromSceneExtents">
            <summary>
            Estimates a regeneration tolerance from model size.
            </summary>
            <returns>The estimated tolerance</returns>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteFileAsynch.ComputeBoundingBox(devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
            <summary>
            Compute scene extents.
            </summary>
            <param name="min">Lower left front corner</param>
            <param name="max">Upper right rear corner</param>
            <returns>The 3D size.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Translators.WriteFileAsynch.Log">
            <summary>
            Gets the list of errors and warnings generated during file export.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.WriteFileAsynch.WritingText">
            <summary>
            Gets or sets the "Writing..." text string.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.WriteFileAsynch.SavingText">
            <summary>
            Gets or sets the "Saving..." text string.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.WriteFileAsynch.SavingBlocksText">
            <summary>
            Gets or sets the "Saving blocks..." text string.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.WriteFileAsynch.SavingEntitiesText">
            <summary>
            Gets or sets the "Saving entities..." text string.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteFileAsynchWithUnits.#ctor(devDept.Eyeshot.ViewportLayout,System.String,devDept.Geometry.linearUnitsType)">
            <summary>
            Standard constructor.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="fileName">The file name (with the *.obj extension)</param>
            <param name="units">The model units</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteFileAsynchWithUnits.#ctor(devDept.Eyeshot.ViewportLayout,System.IO.Stream,devDept.Geometry.linearUnitsType)">
            <summary>
            Standard constructor with stream.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="stream">The file stream</param>
            <param name="units">The model units</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteFileAsynchWithUnits.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,devDept.Geometry.linearUnitsType)">
            <summary>
            Entity list constructor.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="fileName">The file name</param>
            <param name="units">The model units</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteFileAsynchWithUnits.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,devDept.Geometry.linearUnitsType)">
            <summary>
            To stream with entity list constructor.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="stream">The file stream</param>
            <param name="units">The model units</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(devDept.Eyeshot.ViewportLayout,System.String,devDept.Geometry.linearUnitsType,System.Boolean)">
            <summary>
            Standard constructor
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="fileName">The file name (with *.igs extension)</param>
            <param name="units">The model units</param>
            <param name="selectedOnly">If true, only selected entities are written.</param>
            <remarks>If the file exists, it's overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(devDept.Eyeshot.ViewportLayout,System.IO.Stream,devDept.Geometry.linearUnitsType,System.Boolean)">
            <summary>
            Standard constructor with stream
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="stream">The file stream</param>
            <param name="units">The model units</param>
            <param name="selectedOnly">If true, only selected entities are written.</param>        
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(devDept.Eyeshot.ViewportLayout,System.String,devDept.Geometry.linearUnitsType,System.String,System.String,System.String,System.Boolean)">
            <summary>Author, organization and originating system constructor.</summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="fileName">The file name (with *.igs extension)</param>
            <param name="units">The model units</param>
            <param name="selectedOnly">If true, only selected entities are written.</param>
            <param name="author">Author name</param>
            <param name="organization">Organization name</param>
            <param name="originatingSystem">Originating system name</param>
            <remarks>If the file exists, it's overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(devDept.Eyeshot.ViewportLayout,System.IO.Stream,devDept.Geometry.linearUnitsType,System.String,System.String,System.String,System.Boolean)">
            <summary>To stream with author, organization and originating system constructor.</summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="stream">The file stream</param>
            <param name="units">The model units</param>
            <param name="selectedOnly">If true, only selected entities are written.</param>
            <param name="author">Author name</param>
            <param name="organization">Organization name</param>
            <param name="originatingSystem">Originating system name</param>        
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,devDept.Geometry.linearUnitsType,System.Boolean)">
            <summary>
            Standard constructor.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="units">The model units</param>
            <param name="blockDict">The block dictionary</param>
            <param name="fileName">The file name (with the *.stl extension)</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,devDept.Geometry.linearUnitsType,System.Boolean)">
            <summary>
            Standard constructor with stream
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="units">The model units</param>
            <param name="blockDict">The block dictionary</param>
            <param name="stream">The file stream</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>        
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,devDept.Geometry.linearUnitsType,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Tolerance constructor. The exported model will be regenerated with specified tolerance.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="fileName">The file name (with the *.stl extension)</param>
            <param name="units">The model units</param>
            <param name="author">Author name</param>
            <param name="organization">Organization name</param>
            <param name="originatingSystem">Originating system name</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,devDept.Geometry.linearUnitsType,System.String,System.String,System.String,System.Boolean)">
            <summary>
            To stream with tolerance constructor. The exported model will be regenerated with specified tolerance.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="stream">The file stream</param>
            <param name="units">The model units</param>
            <param name="author">Author name</param>
            <param name="organization">Organization name</param>
            <param name="originatingSystem">Originating system name</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>        
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.Translators.ReadSTEP">
            <summary>
            Utility class for loading STEP files asynchronously.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTEP.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            File stream constructor.
            </summary>
            <param name="stream">The file stream</param>
            <param name="includeWires">Include free point/curves entities</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTEP.#ctor(System.String,System.Boolean)">
            <summary>
            File name constructor.
            </summary>
            <param name="fileName">The file name</param>
            <param name="includeWires">Include free point/curves entities</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTEP.ReadStepFile(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Reads a STEP file. Assembly structure is converted to nested block instances.
            </summary>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTEP.RemoveOrphanEdges(devDept.Eyeshot.Entities.Solid3D.Face[],devDept.Eyeshot.Entities.Solid3D.Face[][],devDept.Eyeshot.Entities.Solid3D.Edge[]@)">
            <summary>
            Removes edges without parents.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.ReadSTEP.FixStartAndEndPointIndices(devDept.Geometry.Point3D[],devDept.Eyeshot.Entities.Solid3D.Edge[])">
            <summary>
            Some times the index of the first vertex and the index of the last vertex are inverted, we fix it here.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Translators.ReadSTEP.Simplify">
            <summary>
            Controls if generic surfaces are converted to <see cref="T:devDept.Eyeshot.Entities.PlanarSurface"/>, <see cref="!:TabulatedSurface"/> or <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface"/> to improve import speed.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Translators.WriteSTEP">
            <summary>
            Helper class to export current model in STEP file format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(devDept.Eyeshot.ViewportLayout,System.String,devDept.Geometry.linearUnitsType,System.Boolean)">
            <summary>Exports current model in STEP file format.</summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="fileName">The file name (with *.stp extension)</param>
            <param name="units">The model units. Affects only individual surfaces units, see <see cref="P:devDept.Eyeshot.Block.Units"/> for <see cref="T:devDept.Eyeshot.Entities.Solid3D"/> units.</param>
            <param name="selectedOnly">When true, only selected entities are exported.</param>
            <remarks>
            <list type="bullet">
            <item> 
            <description>If the file already exists, it will be overwritten.</description> 
            </item> 
            <item> 
            <description>If the <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/> count is bigger than zero, the STEP file is written in assembly mode. In the opposite case it is written in individual surfaces mode.</description> 
            </item> 
            <item> 
            <description>BlockReference scaling is not supported by STEP file format</description> 
            </item> 
            </list> 
            </remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(devDept.Eyeshot.ViewportLayout,System.IO.Stream,devDept.Geometry.linearUnitsType,System.Boolean)">
            <summary>Exports current model in STEP file format.</summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="stream">The file stream</param>
            <param name="units">The model units. Affects only individual surfaces units, see <see cref="P:devDept.Eyeshot.Block.Units"/> for <see cref="T:devDept.Eyeshot.Entities.Solid3D"/> units.</param>
            <param name="selectedOnly">When true, only selected entities are exported.</param>
            <remarks>
            <list type="bullet">
            <item> 
            <description>If the file already exists, it will be overwritten.</description> 
            </item> 
            <item> 
            <description>If the <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/> count is bigger than zero, the STEP file is written in assembly mode. In the opposite case it is written in individual surfaces mode.</description> 
            </item> 
            <item> 
            <description>BlockReference scaling is not supported by STEP file format</description> 
            </item> 
            </list> 
            </remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(devDept.Eyeshot.ViewportLayout,System.String,devDept.Geometry.linearUnitsType,System.String,System.String,System.String,System.Boolean)">
            <summary>Exports current model in STEP file format.</summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="fileName">The file name (with *.stp extension)</param>
            <param name="units">The model units. Affects only individual surfaces units, see <see cref="P:devDept.Eyeshot.Block.Units"/> for <see cref="T:devDept.Eyeshot.Entities.Solid3D"/> units.</param>
            <param name="author">The author name</param>
            <param name="organization">The organization name</param>
            <param name="originatingSystem">The originating system name</param>
            <param name="selectedOnly">When true, only selected entities are exported.</param>
            <remarks>If the file already exists, it will be overwritten. <see cref="T:devDept.Eyeshot.Entities.BlockReference"/> scaling and <see cref="P:devDept.Eyeshot.Block.BasePoint"/> are not supported.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(devDept.Eyeshot.ViewportLayout,System.IO.Stream,devDept.Geometry.linearUnitsType,System.String,System.String,System.String,System.Boolean)">
            <summary>Exports current model in STEP file format.</summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="stream">The file stream</param>
            <param name="units">The model units. Affects only individual surfaces units, see <see cref="P:devDept.Eyeshot.Block.Units"/> for <see cref="T:devDept.Eyeshot.Entities.Solid3D"/> units.</param>
            <param name="author">The author name</param>
            <param name="organization">The organization name</param>
            <param name="originatingSystem">The originating system name</param>
            <param name="selectedOnly">When true, only selected entities are exported.</param>
            <remarks>If the file already exists, it will be overwritten. <see cref="T:devDept.Eyeshot.Entities.BlockReference"/> scaling and <see cref="P:devDept.Eyeshot.Block.BasePoint"/> are not supported.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,devDept.Geometry.linearUnitsType,System.Boolean)">
            <summary>
            Standard constructor.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="units">The model units</param>
            <param name="blockDict">The block dictionary</param>
            <param name="fileName">The file name (with the *.stl extension)</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,devDept.Geometry.linearUnitsType,System.Boolean)">
            <summary>
            Standard constructor.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="units">The model units</param>
            <param name="blockDict">The block dictionary</param>
            <param name="stream">The file stream</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,devDept.Geometry.linearUnitsType,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Tolerance constructor. The exported model will be regenerated with specified tolerance.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="fileName">The file name (with the *.stl extension)</param>
            <param name="units">The model units</param>
            <param name="author">Author name</param>
            <param name="organization">Organization name</param>
            <param name="originatingSystem">Originating system name</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,devDept.Geometry.linearUnitsType,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Tolerance constructor. The exported model will be regenerated with specified tolerance.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="stream">The file stream</param>
            <param name="units">The model units</param>
            <param name="author">Author name</param>
            <param name="organization">Organization name</param>
            <param name="originatingSystem">Originating system name</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.WorkFailedEventArgs">
            <summary>Provides data for the <see cref="E:devDept.Eyeshot.ViewportLayout.WorkFailed"/> event.</summary>
        </member>
        <member name="M:devDept.Eyeshot.WorkFailedEventArgs.#ctor(System.String)">
            <summary>
            Standard constructor.
            </summary>
            <param name="error">The error string</param>
        </member>
        <member name="P:devDept.Eyeshot.WorkFailedEventArgs.Error">
            <summary>
            Gets the error string.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.WorkCompletedEventArgs">
            <summary>Provides data for the <see cref="E:devDept.Eyeshot.ViewportLayout.WorkCompleted"/> event.</summary>
        </member>
        <member name="M:devDept.Eyeshot.WorkCompletedEventArgs.#ctor(devDept.Eyeshot.WorkUnit)">
            <summary>
            Standard constructor.
            </summary>
            <param name="wu">The work unit</param>
        </member>
        <member name="P:devDept.Eyeshot.WorkCompletedEventArgs.WorkUnit">
            <summary>
            Gets the work unit.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.PolygonSelection.selectionFence">
            <summary>
            Point list of the selection polygon in Camera Viewport coordinates (0 on bottom of viewport).
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.PolygonSelection.ProcessDragAction(System.Windows.Forms.MouseEventArgs,devDept.Eyeshot.ViewportLayout,devDept.Eyeshot.Viewport)">
            <summary>
            Adds poitns to the selection polygon.
            </summary>
            <param name="e">The mouse event args</param>
            <param name="viewportLayout">The viewportLayout control</param>
            <returns>True if the polygon is closed and the selection must be performed, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.PolygonSelection.ComputePolygonSelection(devDept.Eyeshot.ViewportLayout,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Boolean,System.Int32[]@,System.Collections.Generic.List{System.Int32})">
            <summary>
            Mark points as selected
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.pickBoxSizeType">
            <summary>
            Pick box size.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.pickBoxSizeType.Small">
            <summary>
            6x6 pixels 
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.pickBoxSizeType.Medium">
            <summary>
            10x10 pixels
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.pickBoxSizeType.Big">
            <summary>
            14x14 pixels
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.displayType">
            <summary>
            Viewport display type.
            </summary>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.DisplayMode"/>
        </member>
        <member name="F:devDept.Eyeshot.displayType.Wireframe">
            <summary>
            Wireframe
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.displayType.Shaded">
            <summary>
            Shaded
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.displayType.Rendered">
            <summary>
            Shaded applying materials
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.displayType.Flat">
            <summary>
            Flat Shading (entities are drawn with full colors, without lighting effects)
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.displayType.HiddenLines">
            <summary>
            Hidden lines
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.waitCursorType">
            <summary>
            Viewport wait cursor type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.waitCursorType.Never">
            <summary>
            Wait cursor will never be displayed
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.waitCursorType.RegenOnly">
            <summary>
            Wait cursor will only be displayed during entity regeneration
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.waitCursorType.BoundingBoxOnly">
            <summary>
            Wait cursor will only be displayed during model's bounding box update
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.waitCursorType.RegenAndBoundingBox">
            <summary>
            Wait cursor will be displayed during entity regeneration and model's bounding box update
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ClippingPlane">
            <summary>
            Clipping plane definition.
            </summary>
            <remarks>The scene is clipped on the positive side of the plane.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.ClippingPlane.#ctor">
            <summary>Empty constructor.</summary>
        </member>
        <member name="M:devDept.Eyeshot.ClippingPlane.#ctor(devDept.Geometry.Vector3D,System.Double,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="normal">Plane normal</param>
            <param name="distance">Distance from the origin</param>
            <param name="active">Status</param>
        </member>
        <member name="M:devDept.Eyeshot.ClippingPlane.#ctor(devDept.Geometry.Plane,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="plane">The plane</param>
            <param name="active">Status</param>
        </member>
        <member name="M:devDept.Eyeshot.ClippingPlane.Edit(System.Double,System.Drawing.Color)">
            <summary>
            Edits a clipping plane.
            </summary>
            <param name="size">The size of the clipping plane</param>
            <param name="color">The color of the clipping plane</param>
            <see cref="M:devDept.Eyeshot.ClippingPlane.Apply"/>
            <seealso cref="M:devDept.Eyeshot.ClippingPlane.Cancel"/>
        </member>
        <member name="M:devDept.Eyeshot.ClippingPlane.Apply">
            <summary>
            Applies the changes of the editing.
            </summary>
            <see cref="M:devDept.Eyeshot.ClippingPlane.Edit(System.Double,System.Drawing.Color)"/>
            <seealso cref="M:devDept.Eyeshot.ClippingPlane.Cancel"/>
        </member>
        <member name="M:devDept.Eyeshot.ClippingPlane.Cancel">
            <summary>
            Cancels the changes of the editing.
            </summary>
            <see cref="M:devDept.Eyeshot.ClippingPlane.Edit(System.Double,System.Drawing.Color)"/>
            <seealso cref="M:devDept.Eyeshot.ClippingPlane.Apply"/>
        </member>
        <member name="T:devDept.Eyeshot.viewType">
            <summary>
            View type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.Front">
            <summary>
            Front view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.Right">
            <summary>
            Right view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.Rear">
            <summary>
            Rear view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.Left">
            <summary>
            Left view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.Top">
            <summary>
            Top view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.Bottom">
            <summary>
            Bottom view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.Isometric">
            <summary>
            Isometric view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.Dimetric">
            <summary>
            Dimetric view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.Trimetric">
            <summary>
            Trimetric view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcFrontFaceBottom">
            <summary>
            View cube front face bottom view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcFrontFaceRight">
            <summary>
            View cube front face right view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcFrontFaceTop">
            <summary>
            View cube front face top view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcFrontFaceLeft">
            <summary>
            View cube front face left view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcRightFaceBottom">
            <summary>
            View cube right face bottom view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcRightFaceRight">
            <summary>
            View cube right face right view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcRightFaceTop">
            <summary>
            View cube right face top view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcRightFaceLeft">
            <summary>
            View cube right face left view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcBackFaceBottom">
            <summary>
            View cube back face bottom view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcBackFaceRight">
            <summary>
            View cube back face right view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcBackFaceTop">
            <summary>
            View cube back face top view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcBackFaceLeft">
            <summary>
            View cube back face left view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcLeftFaceBottom">
            <summary>
            View cube left face bottom view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcLeftFaceRight">
            <summary>
            View cube left face right view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcLeftFaceTop">
            <summary>
            View cube left face top view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcLeftFaceLeft">
            <summary>
            View cube left face left view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcBottomFaceBottom">
            <summary>
            View cube bottom face bottom view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcBottomFaceRight">
            <summary>
            View cube bottom face right view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcBottomFaceTop">
            <summary>
            View cube bottom face top view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcBottomFaceLeft">
            <summary>
            View cube front face left view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcTopFaceBottom">
            <summary>
            View cube top face bottom view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcTopFaceRight">
            <summary>
            View cube top face right view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcTopFaceTop">
            <summary>
            View cube top face top view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcTopFaceLeft">
            <summary>
            View cube top face left view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcFrontFaceBottomLeft">
            <summary>
            View cube front face bottom-left view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcFrontFaceBottomRight">
            <summary>
            View cube front face bottom-right view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcFrontFaceTopLeft">
            <summary>
            View cube front face top-left view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcFrontFaceTopRight">
            <summary>
            View cube front face top-right view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcBackFaceBottomLeft">
            <summary>
            View cube back face bottom-left view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcBackFaceBottomRight">
            <summary>
            View cube back face bottom-right view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcBackFaceTopLeft">
            <summary>
            View cube back face top-left view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.vcBackFaceTopRight">
            <summary>
            View cube back face top-right view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.viewType.Other">
            <summary>
            View orientation not belonging to the predefined ones
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Arc">
            <summary>
            Arc entity.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Circle">
            <summary>
            Circle entity.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.IEvaluable">
            <summary>
            Common properties of curve entities.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.IEvaluable.Evaluate(System.Double,System.Int32)">
            <summary>
            Computes the curve derivatives at parametric value u.
            </summary>
            <param name="u">The parametric value</param>
            <param name="d">The degree of the derivative</param>
            <returns>The derivatives array.</returns>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Circle.radius">
            <summary>Circle's radius.</summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>Circle parallel to XY plane constructor.</summary>
            <param name="x">Center's X coordinate</param>
            <param name="y">Center's Y coordinate</param>
            <param name="z">Center's Z coordinate</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Geometry.Point3D,System.Double)">
            <summary>Circle parallel to XY plane constructor.</summary>
            <param name="center">3D center point</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double)">
            <summary>Circle not parallel to XY plane constructor.</summary>
            <param name="plane">Plane</param>
            <param name="center">3D center point</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Geometry.Plane,System.Double)">
            <summary>Circle not parallel to XY plane constructor.</summary>
            <param name="plane">Plane</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double)">
            <summary>Plane, center and radius constructor.</summary>
            <param name="plane">Plane</param>
            <param name="center">2D center point</param>
            <param name="radius">Radius</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
            <summary>
            Circle from three points constructor.
            </summary>
            <param name="plane">Plane</param>
            <param name="first">First 2D point</param>
            <param name="second">Second 2D point</param>
            <param name="third">Third 2D point</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Circle from three 3D points constructor.
            </summary>
            <param name="first">First 3D point</param>
            <param name="second">Second 3D point</param>
            <param name="third">Third 3D point</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.Clone">
            <summary>
            Creates a deep copy of this circle.
            </summary>
            <returns>The new circle obejct.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.IsInPlane(devDept.Geometry.Plane,System.Double)">
            <summary>
            Checks if the Circle lies on a specific plane.
            </summary>
            <param name="testPlane">The plane</param>
            <param name="tolerance">Tolerance</param>
            <returns>True if the test succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.IsPointInside(devDept.Geometry.Point3D)">
            <summary>
            Checks if a point is inside the Circle.
            </summary>
            <param name="testPoint">The point to be tested</param>
            <returns>True if the point is inside, false if it is outside or on the circle.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.PointAt(System.Double)">
            <summary>
            Evaluates a point on the circle using trigonometric parameterization.
            </summary>
            <param name="t">Parameter</param>
            <returns>The 3D point.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.Length">
            <summary>
            Gets the circle length.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.GetPointsByLength(System.Double)">
            <summary>
            Subdivides the curve by the distance provided.
            </summary>
            <param name="length">The distance</param>
            <returns>An array of 3D points.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.TangentAt(System.Double)">
            <summary>
            Evaluates the unit tangent vector at a parameter.
            </summary>
            <param name="t">Evaluation parameter</param>
            <returns>Unit tangent vector of the curve at the parameter t.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.DerivativeAt(System.Int32,System.Double)">
            <summary>
            Computes the circle derivative at a parameter. 
            </summary>
            <param name="d">The desired derivative (>=0)</param>
            <param name="t">Evaluation parameter</param>
            <returns>The d<sup>th</sup> circle derivative at the parameter t.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Circle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Circle.Center">
            <summary>
            Gets or sets circle's center point.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Circle.Radius">
            <summary>
            Gets or sets circle's radius.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Circle.Diameter">
            <summary>
            Gets circle's diameter.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Arc.angle">
            <summary>Angle interval.</summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Point3D,System.Double,System.Double)">
            <summary>Arc parallel to XY plane constructor.</summary>
            <param name="center">3D center point</param>
            <param name="radius">Radius</param>
            <param name="angleInRadians">Span angle in radians</param>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double)">
            <summary>Arc not parallel to XY plane constructor.</summary>
            <param name="arcPlane">Plane</param>
            <param name="center">3D center point</param>
            <param name="radius">Radius</param>
            <param name="angleInRadians">Span angle in radians</param>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
            <summary>Arc parallel to XY plane constructor.</summary>
            <param name="center">3D center point</param>
            <param name="radius">Radius</param>
            <param name="startAngleInRadians">Start angle in radians</param>
            <param name="endAngleInRadians">End angle in radians</param>
            <remarks>Angles can be negative. StartAngle must be smaller than EndAngle.</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Arc parallel to XY plane constructor.</summary>
            <param name="x">Center's X coordinate</param>
            <param name="y">Center's Y coordinate</param>
            <param name="z">Center's Z coordinate</param>
            <param name="radius">Radius</param>
            <param name="startAngleInRadians">Start angle in radians</param>
            <param name="endAngleInRadians">End angle in radians</param>
            <remarks>Angles can be negative. StartAngle must be smaller than EndAngle.</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
            <summary>Arc not parallel to XY plane constructor.</summary>
            <param name="arcPlane">Plane</param>
            <param name="center">3D center point</param>
            <param name="radius">Radius</param>
            <param name="startAngleInRadians">Start angle in radians</param>
            <param name="endAngleInRadians">End angle in radians</param>
            <remarks>Angles can be negative. StartAngle must be smaller than EndAngle.</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double,System.Double,System.Double)">
            <summary>Plane, center, radius and angles constructor.</summary>
            <param name="arcPlane">Plane</param>
            <param name="center">2D center point</param>
            <param name="radius">Radius</param>
            <param name="startAngleInRadians">Start angle in radians</param>
            <param name="endAngleInRadians">End angle in radians</param>
            <remarks>Angles can be negative. StartAngle must be smaller than EndAngle.</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>Center, start and end point constructor.</summary>
            <param name="center">3D center point</param>
            <param name="start">3D start point</param>
            <param name="end">3D end point</param>
            <remarks>Center, start point and end point must be non collinear.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
            <summary>Plane, center, start and end point constructor.</summary>
            <param name="arcPlane">Plane</param>
            <param name="center">2D center point</param>
            <param name="start">2D start point</param>
            <param name="end">2D end point</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Boolean)">
            <summary>Plane, center, radius, start and end point constructor.</summary>
            <param name="arcPlane">Plane</param>
            <param name="center">3D center point</param>
            <param name="radius">Radius</param>
            <param name="start">3D start point</param>
            <param name="end">3D end point</param>
            <param name="flip">If true, the complementary arc is created.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Boolean)">
            <summary>
            Arc from three points constructor.
            </summary>
            <param name="arcPlane">Plane</param>
            <param name="first">First 2D point</param>
            <param name="second">Second 2D point</param>
            <param name="third">Third 2D point</param>
            <param name="flip">When true, the complementary arc is created.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Boolean)">
            <summary>
            Arc from three 3D points constructor.
            </summary>
            <param name="first">First 3D point</param>
            <param name="second">Second 3D point</param>
            <param name="third">Third 3D point</param>
            <param name="flip">When true, the complementary arc is created.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.Clone">
            <summary>
            Creates a deep copy of this arc.
            </summary>
            <returns>The new arc object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.Reverse">
            <summary>
            Reverses the arc direction.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.Length">
            <summary>Gets arc length.</summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.GetPointsByLength(System.Double)">
            <summary>
            Subdivides the curve by the distance provided.
            </summary>
            <param name="length">The distance</param>
            <returns>An array of 3D points.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.TrimBy(devDept.Geometry.Point3D,System.Boolean)">
            <summary>
            Trims the arc at the limit point projection.
            </summary>
            <param name="limit">The limit point</param>
            <param name="flipSide">The flip side flag</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.ClosestPointToUnclamped(devDept.Geometry.Point3D,System.Double@)">
            <summary>
            Computes the parameter closest to the given point, not limited by the arc domain.
            </summary>
            <param name="pt"></param>
            <param name="t"></param>
            <returns>The computed parameter</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.GetNurbsFormParameterFromRadian(System.Double,System.Double@)">
            <summary>
            Converts an arc radians parameter to a Nurbs curve arc parameter.
            </summary>
            <param name="radianParam">Radians parameter (0 to 2PI)</param>
            <param name="nurbsParam">The curve arc parameter</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.GetNurbsFormParameterFromRadian(System.Double,System.Double@,devDept.Eyeshot.Entities.Curve)">
            <summary>
            Converts an arc radians parameter to a Nurbs curve arc parameter.
            </summary>
            <param name="radianParam">Radians parameter (0 to 2PI)</param>
            <param name="nurbsParam">The curve arc parameter</param>
            <param name="crv">The arc in Nurbs form</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.GetRadianFromNurbFormParameter(System.Double,System.Double@)">
            <summary>
            Converts a Nurbs curve arc parameter to an arc radian parameter.
            </summary>
            <param name="nurbParameter">The Nurbs curve arc parameter</param>
            <param name="radianParameter">The arc radian parameter </param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.GetRadianFromNurbFormParameter(System.Double,System.Double@,devDept.Eyeshot.Entities.Curve)">
            <summary>
            Converts a Nurbs curve arc parameter to an arc radian parameter.
            </summary>
            <param name="nurbParameter">The Nurbs curve arc parameter</param>
            <param name="radianParameter">The arc radian parameter </param>
            <param name="nurbsArc">The arc in Nurbs form</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Arc.AngleInRadians">
            <summary>
            Gets arc's angle in radians.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Arc.AngleInDegrees">
            <summary>
            Gets arc's angle in degrees.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Arc.MidPoint">
            <summary>
            Gets the arc's middle point.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Arc.Domain">
            <summary>Gets or sets the arc's domains in radians.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Arc.IsCircle">
            <summary>Returns true if the Arc is closed.</summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Bar">
            <summary>
            Bar entity. A line drawn like a cylinder.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Bar.radius">
            <summary>
            Bar radius.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Bar.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Draws a line as a Cylinder.
            </summary>
            <param name="x1">StartPoint X coordinate</param>
            <param name="y1">StartPoint Y coordinate</param>
            <param name="z1">StartPoint Z coordinate</param>
            <param name="x2">End X coordinate</param>
            <param name="y2">End Y coordinate</param>
            <param name="z2">End Z coordinate</param>
            <param name="radius">Bar's radius</param>
            <param name="slices">Number of faces of the cylinder approximation</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Bar.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double,System.Int32)">
            <summary>
            Draws a line as a Cylinder.
            </summary>
            <param name="start">StartPoint point</param>
            <param name="end">End point</param>
            <param name="radius">Bar's radius</param>
            <param name="slices">Number of faces of the cylinder approximation</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Bar.Clone">
            <summary>
            Creates a deep copy of this bar.
            </summary>
            <returns>The new bar object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Bar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Bar.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Bar.Slices">
            <summary>
            Gets or sets the number of faces of the cylinder approximation.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Bar.Radius">
            <summary>
            Gets or sets the radius of the Bar.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Bar.Triangles">
            <summary>
            Gets the bar triangles.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.HitTriangle">
            <summary>
            Triangle hit by a ray definition.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.HitTriangle.IntersectionPoint">
            <summary>
            3D intersection point.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.HitTriangle.TriangleIndex">
            <summary>
            Triangle index.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.HitTriangle.FaceIndex">
            <summary>
            <see cref="T:devDept.Eyeshot.Entities.Solid3D.Face"/>, <see cref="!:Solid.Portion"/> or <see cref="!:ElementFace"/> index.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.HitTriangle.ShellOrElementIndex">
            <summary>
            Shell or <see cref="!:Element"/> index.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.HitTriangle.ParamSurfaceIndex">
            <summary>
            <see cref="F:devDept.Eyeshot.Entities.Solid3D.Face.Parametric"/> index.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.entityNatureType">
            <summary>
            Entity nature type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.entityNatureType.None">
            <summary>
            None (e.g. <see cref="T:devDept.Eyeshot.Entities.BlockReference"/>)
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.entityNatureType.Point">
            <summary>
            Points only, (e.g. <see cref="F:devDept.Eyeshot.Entities.entityNatureType.Point"/>, <see cref="T:devDept.Eyeshot.Entities.PointCloud"/>)
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.entityNatureType.Wire">
            <summary>
            Wireframe only (e.g. <see cref="T:devDept.Eyeshot.Entities.Line"/>, <see cref="T:devDept.Eyeshot.Entities.Arc"/>)
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.entityNatureType.Polygon">
            <summary>
            Polyhedral only (e.g. <see cref="T:devDept.Eyeshot.Entities.Mesh"/>)
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.entityNatureType.RichPolygon">
            <summary>
            Multicolor or textured polyhedral
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.regenType">
            <summary>
            Entity regen type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.regenType.NotNeeded">
            <summary>
            The entity is up to date.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.regenType.RegenAndCompile">
            <summary>
            The entity needs regen and compile
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.regenType.CompileOnly">
            <summary>
            The entity needs only to be compiled. When using this option, you need to call the <see cref="M:devDept.Eyeshot.Entities.Entity.UpdateBoundingBox(devDept.Eyeshot.TraversalParams)"/> method to compute a valid bounding box for the entity.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.colorMethodType">
            <summary>
            Color method type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.colorMethodType.byEntity">
            <summary>
            Entity color
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.colorMethodType.byLayer">
            <summary>
            Layer color
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.colorMethodType.byParent">
            <summary>
            Parent entity color (byBlock)
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Joint">
            <summary>
            Joint entity. A point drawn like a sphere.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Joint.#ctor(System.Double,System.Double,System.Double,System.Double,System.UInt32)">
            <summary>
            Draws a point like a sphere.
            </summary>
            <param name="x">Center's X-coordinate</param>
            <param name="y">Center's y-coordinate</param>
            <param name="z">Center's Z-coordinate</param>
            <param name="radius">Sphere's radius</param>
            <param name="subdivisionLevel">The sphere is subdivided recursively, this parameter represents the number of iterations.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Joint.#ctor(devDept.Geometry.Point3D,System.Double,System.UInt32)">
            <summary>
            Draws a point like a sphere.
            </summary>
            <param name="center">Center point</param>
            <param name="radius">Sphere's radius</param>
            <param name="subdivisionLevel">The sphere is subdivided recursively, this is the number of loops</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Joint.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double,System.UInt32)">
            <summary>
            Draws a point like a sphere.
            </summary>
            <param name="pln">Skecth plane.</param>
            <param name="center">2D center point</param>
            <param name="radius">Sphere's radius</param>
            <param name="subdivisionLevel">The sphere is subdivided recursively, this is the number of levels</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Joint.Clone">
            <summary>
            Creates a deep copy of this joint.
            </summary>
            <returns>The new joint object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Joint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Joint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Joint.SubdivisionLevel">
            <summary>
            Gets or sets the number of recursive subdivisions of the sphere.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Joint.Position">
            <summary>
            Joint position.
            </summary>       
        </member>
        <member name="P:devDept.Eyeshot.Entities.Joint.Radius">
            <summary>
            Gets or sets the radius of the sphere.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Joint.Triangles">
            <summary>
            Gets the joints triangles.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Line">
            <summary>
            Line entity.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Line on XY plane constructor.
            </summary>
            <param name="x1">Start point's X coordinate</param>
            <param name="y1">Start point's Y coordinate</param>
            <param name="x2">End point's X coordinate</param>
            <param name="y2">End point's Y coordinate</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sketch plane constructor.</summary>
            <param name="sketchPlane">The sketch plane</param>
            <param name="x1">Start point's X coordinate</param>
            <param name="y1">Start point's Y coordinate</param>
            <param name="x2">End point's X coordinate</param>
            <param name="y2">End point's Y coordinate</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
            <summary>Sketch plane constructor.</summary>
            <param name="sketchPlane">The sketch plane</param>
            <param name="startPoint">Start point</param>
            <param name="endPoint">End point</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Individual coordinates constructor.
            </summary>
            <param name="x1">Start point's X coordinate</param>
            <param name="y1">Start point's Y coordinate</param>
            <param name="z1">Start point's Z coordinate</param>
            <param name="x2">End point's X coordinate</param>
            <param name="y2">End point's Y coordinate</param>
            <param name="z2">End point's Z coordinate</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Two 3D points constructor.
            </summary>
            <param name="start">Start point</param>
            <param name="end">End point</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Geometry.Segment2D)">
            <summary>
            2D segment constructor.
            </summary>
            <param name="seg">The 2D segment</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Geometry.Segment3D)">
            <summary>
            3D segment constructor.
            </summary>
            <param name="seg">The 3D segment</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.Clone">
            <summary>
            Creates a deep copy of this line.
            </summary>
            <returns>The new line object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.Length">
            <summary>
            Gets the line length.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.GetPointsByLength(System.Double)">
            <summary>
            Subdivides the curve by the distance provided.
            </summary>
            <param name="length">The distance</param>
            <returns>An array of 3D points.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.PointAt(System.Double)">
            <summary>
            Evaluates a point on (infinite) line.
            </summary>
            <param name="t">Evaluation parameter</param>
            <returns>(1 - t/Domain.Length) * start + t/Domain.Length * end</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.TrimBy(devDept.Geometry.Point3D,System.Boolean)">
            <summary>
            Trims the line at the limit point projection.
            </summary>
            <param name="limit">The limit point</param>
            <param name="flipSide">The flip side flag</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.InPlane(devDept.Geometry.Plane@,System.Double)">
            <summary>
            Gets a plane that contains the line.
            </summary>
            <param name="plane">A plane that contains the line.  The origin
            of the plane is at the start of the line.  The distance
            from the end of the line to the plane is &lt;= tolerance.
            If possible a plane parallel to the world xy, yz or zx
            plane is returned.</param>
            <param name="tolerance">The tolerance</param>
            <returns>true if a coordinate of the line's direction vector is larger than tolerance</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Line.AreCollinear(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Line)">
            <summary>
            Returns true if the two lines are collinear.
            </summary>
            <param name="l1">The first line</param>
            <param name="l2">The second line</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Line.MidPoint">
            <summary>
            Gets the line's middle point.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Line.Tangent">
            <summary>
            Evaluates the unit tangent vector, it is the same at all the points of the line.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Line.Direction">
            <summary>
            Gets the line direction as a 3D vector.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.Line.Tangent"/>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Point">
            <summary>
            Point entity.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Point.#ctor(System.Double,System.Double,System.Double,System.Single)">
            <summary>
            Position and size constructor.
            </summary>
            <param name="x">Point's X coordinate</param>
            <param name="y">Point's Y coordinate</param>
            <param name="z">Point's Z coordinate</param>
            <param name="size">On screen size</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Point.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Position constructor.
            </summary>
            <param name="x">Point's X coordinate</param>
            <param name="y">Point's Y coordinate</param>
            <param name="z">Point's Z coordinate</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Point.#ctor(System.Double,System.Double)">
            <summary>
            2D point constructor.
            </summary>
            <param name="x">Point's X coordinate</param>
            <param name="y">Point's Y coordinate</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Geometry.Point2D,System.Single)">
            <summary>
            2D point constructor.
            </summary>
            <param name="p">Point position</param>
            <param name="size">On screen size</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Geometry.Point2D)">
            <summary>
            2D point constructor.
            </summary>
            <param name="p">Point position</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Geometry.Point3D,System.Single)">
            <summary>
            3D point and size constructor.
            </summary>
            <param name="p">Point position</param>
            <param name="size">On screen size</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Geometry.Point3D)">
            <summary>
            3D point constructor.
            </summary>
            <param name="p">Point position</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Sketch plane constructor.
            </summary>
            <param name="sketchPlane">Sketch plane</param>
            <param name="x">Point's X coordinate</param>
            <param name="y">Point's Y coordinate</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D)">
            <summary>
            Sketch plane constructor.
            </summary>
            <param name="sketchPlane">Sketch plane</param>
            <param name="p">Point's position</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Point.Clone">
            <summary>
            Creates a deep copy of this point.
            </summary>
            <returns>The new point object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Point.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Point.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Point.Position">
            <summary>
            Point position.
            </summary>       
        </member>
        <member name="T:devDept.Eyeshot.Entities.cornerType">
            <summary>
            Quick offset corner type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.cornerType.Miter">
            <summary>
            Angled corners
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.cornerType.Round">
            <summary>
            Rounded corners
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.cornerType.Flat">
            <summary>
            Flat corners
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.LinearPath">
            <summary>
            Linear path entity (piecewise linear curve).
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="numVertices">Number of points</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(System.Collections.Generic.ICollection{devDept.Geometry.Point3D})">
            <summary>
            3D point array constructor.
            </summary>
            <param name="points">The point array</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(devDept.Geometry.Point3D[])">
            <summary>
            Point list constructor.
            </summary>
            <param name="points">The point list</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(devDept.Geometry.Plane,System.Collections.Generic.ICollection{devDept.Geometry.Point2D})">
            <summary>
            Sketch pln constructor.
            </summary>
            <param name="sketchPlane">The sketch pln</param>
            <param name="points">The 2D point array</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(System.Double,System.Double)">
            <summary>
            2D rectangle on the origin constructor.
            </summary>
            <param name="width">Rectangle's width</param>
            <param name="height">Rectangle's height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            2D rectangle constructor.
            </summary>
            <param name="x">Lower-left corner position along X-axis</param>
            <param name="y">Lower-left corner position along y-axis</param>
            <param name="width">Rectangle's width</param>
            <param name="height">Rectangle's height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.Clone">
            <summary>
            Creates a deep copy of this linear path.
            </summary>
            <returns>The new linear path object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.Length">
            <summary>
            Gets the linear path length.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.Explode">
            <summary>
            Returns the linear path individual <see cref="T:devDept.Eyeshot.Entities.Line">lines</see> list.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.GetPointsByLength(System.Double)">
            <summary>
            Subdivides the curve by the distance provided.
            </summary>
            <param name="length">The distance</param>
            <returns>An array of 3D points.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.GetPointsByLengthPerSegment(System.Double)">
            <summary>
            Subdivides each segment of the curve by the distance provided.
            </summary>
            <param name="length">The distance</param>
            <returns>An array of 3D points.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.MergeWith(devDept.Eyeshot.Entities.LinearPath)">
            <summary>
            Merges this linear path with a consecutive linear path.
            </summary>
            <param name="other">The second Linear Path.</param>
            <returns>True if the linear paths were merged, false otherwise.</returns>
            <remarks>The EndPoint of the first linear path must be equal to the StartPoint of the second.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.PointAt(System.Double)">
            <summary>
            Evaluates a point on the linear path.
            </summary>
            <param name="t">Evaluation parameter</param>
            <returns>Returns the point at length t</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.Inflate(System.Double,System.Double)">
            <summary>
            Inflates this linear path of the desired amount.
            </summary>
            <param name="amount">The inflate amount</param>
            <param name="tol">The tessellation tolerance</param>
            <returns>The resulting array of closed contours.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.Inflate(System.Double,devDept.Geometry.Vector3D,System.Double)">
            <summary>
            Inflates this linear path of the desired amount.
            </summary>
            <param name="amount">The inflate amount</param>
            <param name="planeNormal">Normal of the plane where inflate occurs (normalized), it is useful for lines.</param>
            <param name="tol">The tessellation tolerance</param>
            <returns>The resulting array of closed contours. Use planeNormal only for lines.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.Offset(System.Double)">
            <summary>
            Offsets the curve of the specified amount.
            </summary>
            <param name="amount">Signed offset amount</param>
            <returns>The offset curve if the operation is successful, null/Nothing otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.QuickOffset(System.Double,devDept.Geometry.Plane)">
            <summary>
            Quick offset function for NC toolpaths.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="pln">Toolpath pln</param>
            <returns>An array of curves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.QuickOffset(System.Double,devDept.Geometry.Plane,devDept.Eyeshot.Entities.cornerType)">
            <summary>
            Quick offset function for NC toolpaths.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="pln">Toolpath pln</param>
            <param name="ct">Corner type</param>
            <returns>An array of curves.</returns>
            <remarks>For open linear paths, different corner types are not supported.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.QuickOffset(System.Double,devDept.Geometry.Plane,devDept.Eyeshot.Entities.cornerType,System.Double,System.Double)">
            <summary>
            Quick offset function for NC toolpaths.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="pln">Toolpath pln</param>
            <param name="ct">Corner type</param>
            <param name="tol">Tolerance, used only with Round corners.</param>
            <param name="miterLimit">The higher the miter limit setting, the sharper the corner can be while retaining its miter.</param>
            <returns>An array of curves.</returns>
            <remarks>For open linear paths, different corner types are not supported.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.Pocket(System.Double,devDept.Geometry.Plane)">
            <summary>
            Pocket function for NC toolpaths.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="pln">Toolpath pln</param>
            <returns>An array of curves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.Pocket(System.Double,devDept.Geometry.Plane,devDept.Eyeshot.Entities.cornerType)">
            <summary>
            Pocket function for NC toolpaths.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="pln">Toolpath pln</param>
            <param name="ct">Corner type</param>
            <returns>An array of curves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.Pocket(System.Double,devDept.Geometry.Plane,devDept.Eyeshot.Entities.cornerType,System.Double,System.Double)">
            <summary>
            Pocket function for NC toolpaths.
            </summary>
            <param name="amount">Signed offset amount</param>
            <param name="pln">Toolpath pln</param>
            <param name="ct">Corner type</param>
            <param name="tol">Tolerance, used only with Round corners.</param>
            <param name="miterLimit">The higher the miter limit setting, the sharper the corner can be while retaining its miter.</param>
            <returns>An array of curves.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.SplitAtDiscontinuities">
            <summary>
            Splits the curve at derivative discontinuities (e.g. kinks), returns an array of the smooth segments that form the curve.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.CreateHelix(System.Double,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>Creates a Linear path in the form of an Helix.
            </summary>
            <param name="radius">Radius of the helix</param>
            <param name="pitch">Height of each full turn of the helix</param>
            <param name="turns">Number of turns</param>
            <param name="reverseTwist">Reverse direction of the Helix</param>
            <param name="chordalErr">Some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
            <returns>The created helix.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.IsOrientedClockwise(devDept.Geometry.Plane)">
            <summary>
            Checks if the closed curve orientation is clockwise.
            </summary>
            <param name="plane">The curve plane, can be obtained using the <see cref="M:devDept.Eyeshot.Entities.LinearPath.IsPlanar(System.Double,devDept.Geometry.Plane@)"/> method.</param>
            <returns>True if the curve is oriented clockwise, false otherwise.</returns>
            <remarks>If the curve is not planar, the points are projected on the plane.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.LinearPath.IsOrientedClockwise(devDept.Geometry.Transformation)">
            <summary>
            Checks if the closed curve orientation is clockwise.
            </summary>
            <param name="t">The transformation needed to project all points on the curve plane.</param>
            <returns>True if the curve is oriented clockwise, false otherwise.</returns>
        </member>
        <member name="T:devDept.Eyeshot.Entities.SmartFill">
            <summary>
            Closes an open curve to a rectangular domain.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Quad">
            <summary>
            Quadrangular face entity.
            </summary>
            <remarks>Does not support material's texture.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Quad.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Standard constructor
            </summary>
            <param name="v1x">First vertex's X-coordinate</param>
            <param name="v1y">First vertex's y-coordinate</param>
            <param name="v1z">First vertex's Z-coordinate</param>
            <param name="v2x">Second vertex's X-coordinate</param>
            <param name="v2y">Second vertex's y-coordinate</param>
            <param name="v2z">Second vertex's Z-coordinate</param>
            <param name="v3x">Third vertex's X-coordinate</param>
            <param name="v3y">Third vertex's y-coordinate</param>
            <param name="v3z">Third vertex's Z-coordinate</param>
            <param name="v4x">Fourth vertex's X-coordinate</param>
            <param name="v4y">Fourth vertex's y-coordinate</param>
            <param name="v4z">Fourth vertex's Z-coordinate</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Quad.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Standard constructor.
            </summary>
            <param name="v1">First vertex</param>
            <param name="v2">Second vertex</param>
            <param name="v3">Third vertex</param>
            <param name="v4">Fourth vertex</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Quad.Clone">
            <summary>
            Creates a deep copy of this triangle.
            </summary>
            <returns>The new triangle object.</returns>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Quad.myTriangles">
            <summary>
            Used for common methods that accepts the IndexTriangle[].
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Quad.VisibleEdgeFlag">
            <summary>Determines which Quad's edge is drawn.</summary>
            <example>
            The following code fragment demonstrates how to draw only the first, third and forth edges of the Quad entity.
            	<code lang="CS" title="[New Example]">
            myQuad.VisibleEdgeFlag = 0x01 | 0x04 | 0x08;
            </code>
            	<code lang="VB" title="[New Example]">
            myQuad.VisibleEdgeFlag = &amp;H01 | &amp;H04 | &amp;H08;
            </code>
            </example>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Triangle">
            <summary>
            Triangular face entity.
            </summary>
            <remarks>Does not support material's texture.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Triangle.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Standard constructor.
            </summary>
            <param name="v1x">First vertex's X-coordinate</param>
            <param name="v1y">First vertex's Y-coordinate</param>
            <param name="v1z">First vertex's Z-coordinate</param>
            <param name="v2x">Second vertex's X-coordinate</param>
            <param name="v2y">Second vertex's Y-coordinate</param>
            <param name="v2z">Second vertex's Z-coordinate</param>
            <param name="v3x">Third vertex's X-coordinate</param>
            <param name="v3y">Third vertex's Y-coordinate</param>
            <param name="v3z">Third vertex's Z-coordinate</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Triangle.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            3D point constructor.
            </summary>
            <param name="v1">First vertex</param>
            <param name="v2">Second vertex</param>
            <param name="v3">Third vertex</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Triangle.Clone">
            <summary>
            Creates a deep copy of this triangle.
            </summary>
            <returns>The new triangle object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Triangle.Regen(devDept.Eyeshot.RegenParams)">
            <summary>
            Updates triangle normal.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.Triangle.myTriangles">
            <summary>
            Used for common methods that accepts the IndexTriangle[].
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Triangle.DrawNormals(devDept.Eyeshot.DrawParams)">
            <summary>
            Standard DrawNormal method.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Triangle.DrawEdges(devDept.Eyeshot.DrawParams)">
            <summary>
            Standard DrawEdges method.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Triangle.Area(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Computes the area of a triangle.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Triangle.Area2D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the projected area (on plane XY) of a triangle.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Triangle.Centroid(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Computes the centroid of a triangle.
            </summary>
            <param name="p1">First vertex</param>
            <param name="p2">Second vertex</param>
            <param name="p3">Third vertex</param>
            <returns>The 3D centroid position.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Triangle.VisibleEdgeFlag">
            <summary>
            Determines which IndexTriangle's edge is drawn.
            </summary>
            <example>
            The following code fragment demonstrates how to draw only the first, and third edges of the IndexTriangle entity.
            	<code lang="CS" title="[New Example]">
            myTriangle.VisibleEdgeFlag = 0x01 | 0x04;
            </code>
            	<code lang="VB" title="[New Example]">
            myTriangle.VisibleEdgeFlag = &amp;H01 | &amp;H04;
            </code>
            </example>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Triangle.Normal">
            <summary>
            Gets or sets the triangle's normal.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Block">
            <summary>
            Block definition. Blocks have to be added to the master block array <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/>
            and inserted in the <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/> list using the <see cref="T:devDept.Eyeshot.Entities.BlockReference"/> entity.
            <para>A block in Eyeshot is a collection of entities that create an object, grouped together
            to make one selectable object. Selecting one particular entity will select all entities contained
            within the block. They can be moved, rotated, mirrored etc and will always be treated by Eyeshot
            as one whole object.</para>
            	<para>Blocks are an invaluable way of quickly arranging complex pieces of a model. Selecting the 
            object is a breeze, it is no longer necessary to painstakingly select each individual entities. 
            Blocks also make it easy to duplicate the same object throughout a drawing, and as Eyeshot recognizes
            that each copy of a block is identical to the previous, the memory and processing time required 
            by Eyeshot is reduced.</para>
            </summary>
            <seealso cref="T:devDept.Eyeshot.Entities.BlockReference">BlockReference Class</seealso>
        </member>
        <member name="F:devDept.Eyeshot.Block.regenerated">
            <summary>
            If true, it's already been regenerated. It's set to false before each regen.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Block.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Block.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Base point individual coordinates constructor.
            </summary>
            <param name="basePointX">Base point's X coordinate</param>
            <param name="basePointY">Base point's Y coordinate</param>
            <param name="basePointZ">Base point's Z coordinate</param>
        </member>
        <member name="M:devDept.Eyeshot.Block.#ctor(devDept.Geometry.Point3D)">
            <summary>
            Base point constructor.
            </summary>
            <param name="basePoint">Base point</param>
        </member>
        <member name="M:devDept.Eyeshot.Block.#ctor(devDept.Geometry.Point3D,devDept.Geometry.linearUnitsType)">
            <summary>
            Base point and units constructor.
            </summary>
            <param name="basePoint">Base point</param>
            <param name="units">Unit system</param>
        </member>
        <member name="M:devDept.Eyeshot.Block.RegenAllCurved(devDept.Eyeshot.RegenParams)">
            <summary>
            Regens all curved entities (<see cref="T:devDept.Eyeshot.Entities.Circle"/>, <see cref="T:devDept.Eyeshot.Entities.Arc"/>, <see cref="T:devDept.Eyeshot.Entities.Ellipse"/>, <see cref="T:devDept.Eyeshot.Entities.EllipticalArc"/>, <see cref="T:devDept.Eyeshot.Entities.Curve"/>, <see cref="T:devDept.Eyeshot.Entities.Surface"/>) to uniformize the visual refinement.
            </summary>
            <param name="data">The regeneration parameters</param>
        </member>
        <member name="M:devDept.Eyeshot.Block.Compile(devDept.Eyeshot.CompileParams)">
            <summary>
            Compiles the block entities.
            </summary>
            <param name="data">The data for compilation</param>
        </member>
        <member name="M:devDept.Eyeshot.Block.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Block.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Block.PartColor">
            <summary>
            Get or set STEP part color in STEP assembly writing.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Block.IsResolved">
            <summary>If true, the block is resolved. In DWG/DXF import the Block could be defined as an external reference (XRef), when true it was successfully located.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Block.Entities">
            <summary>
            Gets or sets entity collection.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Block.BasePoint">
            <summary>
            Gets or sets block definition base point.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Block.Units">
            <summary>
            Gets or sets block unit system.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Block.Description">
            <summary>
            Gets or sets a description text for this block definition.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.EyeshotDisposableDictionary`1">
            <summary>
            Eyeshot disposable dictionary.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.EyeshotDisposableDictionary`1.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific object from this collection.
            </summary>
            <param name="name">The object name to remove from this collection</param>
            <returns>True if label is successfully removed; otherwise, false. This method also
            returns false if label was not found in this collection.</returns>
        </member>
        <member name="P:devDept.Eyeshot.EyeshotDisposableDictionary`1.Item(System.String)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <param name="name">The name of the object to get or set</param>
            <returns>The object at the specified index</returns>
        </member>
        <member name="T:devDept.Eyeshot.BlockDictionary">
            <summary>
            Blocks dictionary.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.BlockDictionary.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific block from this collection.
            </summary>
            <param name="name">The object name to remove from this collection</param>
            <returns>True if label is successfully removed; otherwise, false. This method also
            returns false if label was not found in this collection.</returns>
        </member>
        <member name="M:devDept.Eyeshot.BlockDictionary.RemoveLayer(System.Int32,System.Boolean)">
            <summary>
            Utility function to remove a layer.
            </summary>
            <param name="layerIndex">The layer to be removed</param>
            <param name="reassignLayerIndex">If true, re-assigns the layer for the entities unremoved</param>        
            <returns>The blocks from which the entities are removed</returns>
        </member>
        <member name="T:devDept.Eyeshot.Camera">
            <summary>
            35 mm camera definition.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Camera.UpdateLocation">
            <summary>
            Updates the camera location.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Camera.allModelInsideFrustum">
            <summary>
            Tells if the model is all inside the view frustum, so the Center of rotation will be put at its center.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Camera.#ctor">
            <summary>Empty constructor.</summary>
        </member>
        <member name="M:devDept.Eyeshot.Camera.#ctor(devDept.Geometry.Point3D,System.Double,devDept.Geometry.Quaternion,devDept.Graphics.projectionType,System.Double,System.Double)">
            <summary>Standard constructor.</summary>
            <example>
                The following code fragment demonstrates how to setup a perspective projection
                camera at 100 units of distance from the origin and with a rotation of 30 degrees
                about the X axis and 60 degrees about the Z axis. The default rotation coincide
                with the model Right view.
                <code lang="CS" title="[New Example]">
            myViewport.Camera = new Camera(Point3D.Origin, 100, (new Quaternion(Vector3D.AxisZ, 60)) * (new Quaternion(Vector3D.AxisY, 30)), cameraProjectionType.Perspective, 50, 1);
            </code>
            	<code lang="VB" title="[New Example]">
            MyViewport.Camera = New Camera(Point3D.Origin, 100, (New Quaternion(Vector3D.AxisZ, 60)) * (New Quaternion(Vector3D.AxisY, 30)), cameraProjectionType.Perspective, 50, 1)
            </code>
            </example>
            <param name="target">Aiming point</param>
            <param name="distance">The distance between the camera location and the aiming point</param>
            <param name="rotation">A quaternion object representing the 3D rotation</param>
            <param name="projectionMode">Projection mode</param>
            <param name="focalLength">Focal length</param>
            <param name="zoomFactor">Zoom factor</param>
        </member>
        <member name="M:devDept.Eyeshot.Camera.#ctor(devDept.Geometry.Point3D,System.Double,devDept.Geometry.Quaternion,devDept.Graphics.projectionType,System.Double,System.Double,System.Boolean)">
            <summary>Standard constructor.</summary>
            <example>
                The following code fragment demonstrates how to setup a perspective projection
                camera at 100 units of distance from the origin and with a rotation of 30 degrees
                about the X axis and 60 degrees about the Z axis. The default rotation coincide
                with the model Right view.
                <code lang="CS" title="[New Example]">
            myViewport.Camera = new Camera(Point3D.Origin, 100, (new Quaternion(Vector3D.AxisZ, 60)) * (new Quaternion(Vector3D.AxisY, 30)), cameraProjectionType.Perspective, 50, 1);
            </code>
            	<code lang="VB" title="[New Example]">
            MyViewport.Camera = New Camera(Point3D.Origin, 100, (New Quaternion(Vector3D.AxisZ, 60)) * (New Quaternion(Vector3D.AxisY, 30)), cameraProjectionType.Perspective, 50, 1)
            </code>
            </example>
            <param name="target">Aiming point</param>
            <param name="distance">The distance between the camera location and the aiming point</param>
            <param name="rotation">A quaternion object representing the 3D rotation</param>
            <param name="projectionMode">Projection mode</param>
            <param name="focalLength">Focal length</param>
            <param name="zoomFactor">Zoom factor</param>
            <param name="analgyphic3D">If true enables the anaglyph 3D visualization</param>
        </member>
        <member name="M:devDept.Eyeshot.Camera.Clone">
            <summary>
            Creates a deep copy of this camera.
            </summary>
            <returns>The new camera object.</returns>
        </member>
        <member name="F:devDept.Eyeshot.Camera.pickMatrix">
            <summary>
            Matrix used to select the area to draw in the RenderToBitmap.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Camera.LimitNearFor3DAnaglyph(System.Double)">
            <summary>
            Limits the near to half the convergence distance, to avoid strain on the eyes.
            </summary>
            <param name="myNear">The near value to limit</param>
            <returns>The limited near value</returns>
        </member>
        <member name="M:devDept.Eyeshot.Camera.GetProjMatricesOutsideRange(System.Boolean,System.Double,System.Double,devDept.Eyeshot.ViewportLayout.CameraEyePosType,System.Double[]@,System.Double[]@)">
            <summary>
            Returns the matrices to draw the grid, origin symbol etc. outside the camera.near-camera.far range ([minNear, near], [far, maxFar])
            </summary>
            <param name="whole">If true, the matrix include the whole range [minNear, maxFar]</param>
            <param name="minNear">minimum near value</param>
            <param name="maxFar">maximum far value</param>
            <param name="cameraEyePos">camera eye position</param>
            <param name="minGridProjMatrix">Projection matrix to draw from minNear to camera.near</param>
            <param name="maxGridProjMatrix">Projection matrix to draw from camera.far to maxFar. null if "whole" is true.</param>
        </member>
        <member name="M:devDept.Eyeshot.Camera.GetProjectionMatrix(System.Double,System.Double,devDept.Eyeshot.ViewportLayout.CameraEyePosType)">
            <summary>
            Gets the projection matrix.
            </summary>
            <param name="nearDistance">The near plane distance</param>
            <param name="farDistance">The far plane distance</param>
            <param name="cameraEyePos">The camera 3D position (for anaglyphic 3D)</param>
            <returns>The computed projection matrix.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Camera.SetupModelView(System.Boolean,System.Boolean,devDept.Eyeshot.ViewportLayout.CameraEyePosType)">
             <summary>
             Gives a chance to derived classes to setup camera by two points and a vector.
             </summary>
            <example>
                 The following example demonstrates how to override the standard camera aiming behaviour.
                 <code lang="CS" title="[New Example]">
             public class myCamera : devDept.Eyeshot.Camera
             {
                 
                 Point3D myLocation = new Point3D(100,0,0);
                 Point3D myTarget = Point3D.Origin;
                 Vector3D myUpVector = Vector3D.AxisZ;
              
                 protected override void SetupModelView()
                 {
              
                     gl.MatrixMode(gl.MODELVIEW);
                     gl.LoadIdentity();
              
                     LookAt(myLocation, myTarget, myUpVector);
                                    
                 }
              
             }
             
             public partial class Form1 : Form
             {
                   
                 public Form1()
                 {
            
                     InitializeComponent();
             
                     myViewport.Camera = New myCamera;
            
                 }
            
             }
             </code>
             	<code lang="VB" title="[New Example]">
             Public Class MyCamera
              
                 Inherits devDept.Eyeshot.Camera
              
                 Dim myLocation As Point3D = New Point3D(100, 0, 0)
                 Dim myTarget As Point3D = Point3D.Origin
                 Dim myUpVector As Vector3D = Vector3D.AxisZ
                     
                 Protected Overrides Sub SetupModelView()
              
                     gl.MatrixMode(gl.MODELVIEW)
                     gl.LoadIdentity()
              
                     LookAt(myLocation, myTarget, myUpVector)
                                    
                 End Sub
              
             End Class
             
             Public Class Form1
            
                 Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
            
                     MyViewport.Camera = New MyCamera
            
                 End Sub
            
             End Class
             </code>
             </example>
        </member>
        <member name="M:devDept.Eyeshot.Camera.IsInFrustum(devDept.Geometry.Point3D,devDept.Geometry.PlaneEquation[])">
            <summary>
            Checks whether a point is inside the given frustum planes.
            </summary>
            <param name="point">The point</param>
            <param name="frustum">The frustum planes</param>
            <returns>True if the point is inside the frustum planes.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Camera.LookAt(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Vector3D,System.Boolean)">
            <summary>
            Aims the camera.
            </summary>
            <param name="eye">Viewer position</param>
            <param name="center">Target point</param>
            <param name="up">Up vector</param>
        </member>
        <member name="M:devDept.Eyeshot.Camera.UpdateBoundingBox(System.Int32[],System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.ViewportLayout,System.Boolean)">
            <summary>
            Updates the scene bounding box.
            </summary>
            <param name="viewFrame"></param>
            <param name="viewportLayout">The viewport layout</param>
            <param name="selectedOnly"></param>
            <returns>True if the computation was successful.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Camera.ComputeOffsetOnCameraAxes(devDept.Geometry.Point3D,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
            <summary>
            Computes the intersection of the lines passing from the vertex and oriented like the frustum planes with the X and Y axes of the camera.
            </summary>
            <param name="pt">The vertex in camera coordinates</param>
            <param name="m1">Angular coefficients of right and top frustum lines</param>
            <param name="m2">Angular coefficients of left and bottom frustum lines</param>
            <param name="minQ">Minimum offset of the lines intersections on X and Y camera axes</param>
            <param name="maxQ">Maximum offset of the lines intersections on X and Y camera axes</param>
            <remarks>Used internally for precise fit in perspective mode.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Camera.ProjectToCameraPlane(devDept.Geometry.Point3D[])">
            <summary>
            Projects a list of points to the camera plane.
            </summary>
            <param name="points">The list of points to project</param>
            <returns>A list of 3D points. The Z values will be all negative (the camera Z axis is directed away from the model).</returns>
        </member>
        <member name="M:devDept.Eyeshot.Camera.Move(System.Double,System.Double,System.Double)">
            <summary>
            Moves the camera along the axes of its own coordinate system.
            </summary>
            <param name="dx">Amount along X-axis</param>
            <param name="dy">Amount along Y-axis</param>
            <param name="dz">Amount along Z-axis</param>
        </member>
        <member name="M:devDept.Eyeshot.Camera.Tilt(devDept.Geometry.Vector3D)">
            <summary>
            Tilts the camera
            </summary>
            <param name="newUp">New Up Vector</param>
        </member>
        <member name="M:devDept.Eyeshot.Camera.UpdateMatrices">
            <summary>
            Updates the camera matrices, for WorldToScreen and ScreenToWorld purposes.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Camera.ScreenToPlane(System.Drawing.Point,devDept.Geometry.Plane,System.Int32,System.Int32[],devDept.Geometry.Point3D@)">
            <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
            <param name="mousePos">Mouse cursor position (zero on top)</param>
            <param name="plane">The plane</param>
            <param name="controlHeight">The height of the viewport layout control</param>
            <param name="viewFrame">The viewport coordinates</param>
            <param name="intPoint">The intersection point. null/Nothing if the plane perpendicular to the screen.</param>
            <returns>True if the mapping succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Camera.ScreenToPlane(System.Drawing.Point,devDept.Geometry.PlaneEquation,System.Int32,System.Int32[],devDept.Geometry.Point3D@)">
            <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
            <param name="mousePos">Mouse cursor position relative to the viewport (zero on top)</param>
            <param name="pe">The plane equation</param>
            <param name="controlHeight">The height of the viewport layout control</param>
            <param name="viewFrame">The viewport coordinates</param>
            <param name="intPoint">The intersection point. null/Nothing if the plane perpendicular to the screen.</param>
            <returns>True if the mapping succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Camera.ScreenToPlane(System.Collections.Generic.IList{System.Drawing.Point},devDept.Geometry.PlaneEquation,System.Int32,System.Int32[])">
            <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
            <param name="mousePointList">2D mouse point list (zero on top)</param>
            <param name="controlHeight">The height of the viewport layout control</param>
            <param name="viewFrame">The viewport coordinates</param>
            <param name="pe">The plane equation</param>
            <returns>The associated 3D world point list.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Camera.WorldToScreen(devDept.Geometry.Point3D,System.Int32[])">
            <summary>
            Maps world coordinates to screen mouse coordinates.
            </summary>
            <param name="point">The 3D point to project on screen</param>
            <param name="viewFrame">The viewport coordinates</param>
            <returns>The associated projected screen point relative to the viewport (zero on bottom)</returns>
            <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Camera.WorldToScreen(System.Double,System.Double,System.Double,System.Int32[])">
            <summary>
            Maps world coordinates to screen mouse coordinates. 
            </summary>
            <param name="x">3D point's x-coordinate</param>
            <param name="y">3D point's y-coordinate</param>
            <param name="z">3D point's z-coordinate</param>
            <param name="viewFrame">The viewport coordinates</param>
            <returns>The associated projected screen point relative to the screen (zero on bottom).</returns>
            <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Camera.WorldToScreen(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32[])">
            <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
            <param name="pointList">3D point list</param>
            <param name="viewFrame">The viewport coordinates</param>
            <returns>The associated projected screen point list relative to the screen (zero on bottom).</returns>
            <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Camera.CheckScreenPointVisibility(System.Int32,System.Drawing.Size,System.Int32[],System.Single,System.Single,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Checks the visibility of the given screen point.
            </summary>
            <param name="viewport"></param>
            <param name="renderContext"></param>
            <param name="size"></param>
            <param name="viewFrame"></param>
            <param name="xPos"></param>
            <param name="yPos"></param>
            <param name="zPos"></param>
            <param name="leftBorder"></param>
            <param name="rightBorder"></param>
            <param name="bottomBorder"></param>
            <param name="topBorder"></param>
            <param name="hidden"></param>
        </member>
        <member name="M:devDept.Eyeshot.Camera.UnProject(System.Int32[],System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Maps viewport coordinates to world coordinates.
            </summary>
            <param name="viewFrame">The viewport coordinates</param>
            <param name="winx">The screen X viewport coordinates to be mapped</param>
            <param name="winy">The screen Y viewport coordinates to be mapped</param>
            <param name="winz">The screen Z viewport coordinates to be mapped</param>
            <param name="objx">The computed world X coordinates</param>
            <param name="objy">The computed world Y coordinates</param>
            <param name="objz">The computed world Z coordinates</param>
            <returns>True if the operation succeeded, false otherwise</returns>
        </member>
        <member name="M:devDept.Eyeshot.Camera.AccelerateValue(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Accelerate the movement.
            </summary>
            <param name="direction"></param>
            <param name="maxSpeed"></param>
            <param name="acceleration"></param>
            <param name="delta"></param>
            <param name="currValue"></param>
            <returns></returns>
        </member>
        <member name="P:devDept.Eyeshot.Camera.Target">
            <summary>Gets or sets camera aiming point.</summary>
            <example>
                The following code fragment demonstrates how to set a new camera target point.
                <code lang="CS" title="[New Example]">
            myViewport.Camera.Target = new Point3D(0, 0, 100);
            myViewport.AdjustNearAndFarPlanes();
            </code>
            	<code lang="VB" title="[New Example]">
            MyViewport.Camera.Target = New Point3D(0, 0, 100)
            MyViewport.AdjustNearAndFarPlanes()
            </code>
            </example>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.AdjustNearAndFarPlanes">AdjustNearAndFarPlanes Method (devDept.Eyeshot.Viewport)</seealso>
            <remarks>The set is allowed only if <see cref="!:NavigationMode"/> is <see cref="F:devDept.Eyeshot.Camera.navigationType.Examine"/>, otherwise the <see cref="P:devDept.Eyeshot.Camera.Location"/> must be changed to move the camera.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Camera.Location">
            <summary>Gets or sets the camera location (eye) point.</summary>
            <remarks>The set is allowed only if <see cref="!:NavigationMode"/> is <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk"/> or <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly"/>, otherwise the <see cref="P:devDept.Eyeshot.Camera.Target"/> must be changed to move the camera.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Camera.Distance">
            <summary>Gets or sets the distance between camera and target point.</summary>
            <remarks>Must be bigger than zero.</remarks>
            <example>
                The following code fragment demonstrates how to set a new camera distance from the target point.
                <code lang="CS" title="[New Example]">
            myViewport.Camera.Distance = 400;
            myViewport.AdjustNearAndFarPlanes();
            </code>
            	<code lang="VB" title="[New Example]">
            MyViewport.Camera.Distance = 400
            MyViewport.AdjustNearAndFarPlanes()
            </code>
            </example>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.AdjustNearAndFarPlanes">AdjustNearAndFarPlanes Method (devDept.Eyeshot.Viewport)</seealso>
        </member>
        <member name="P:devDept.Eyeshot.Camera.Rotation">
            <summary>3D rotation.</summary>
            <example>
                The following code fragment demonstrates how to set a rotation of 30 degrees about
                the X axis and 60 degrees about the Z axis. The default rotation coincide with the
                model Right view.
                <code lang="CS" title="[New Example]">
            myViewport.Camera.Rotation = (new Quaternion(Vector3D.AxisZ, 60)) * (new Quaternion(Vector3D.AxisY, 30));
            myViewport.AdjustNearAndFarPlanes();
            </code>
            	<code lang="VB" title="[New Example]">
            MyViewport.Camera.Rotation = (New Quaternion(Vector3D.AxisZ, 60)) * (New Quaternion(Vector3D.AxisY, 30))
            MyViewport.AdjustNearAndFarPlanes()
            </code>
            </example>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.AdjustNearAndFarPlanes">AdjustNearAndFarPlanes Method (devDept.Eyeshot.Viewport)</seealso>
        </member>
        <member name="P:devDept.Eyeshot.Camera.ProjectionMode">
            <summary>Gets or sets the camera projection mode.</summary>
            <example>
                The following code fragment demonstrates how to change camera projection mode.
                <code lang="CS" title="[New Example]">
            myViewport.Camera.ProjectionMode = cameraProjectionType.Orthographic;
            myViewport.AdjustNearAndFarPlanes();
            </code>
            	<code lang="VB" title="[New Example]">
            MyViewport.Camera.ProjectionMode = cameraProjectionType.Orthographic
            MyViewport.AdjustNearAndFarPlanes()
            </code>
            </example>
            <seealso cref="P:devDept.Eyeshot.Camera.FocalLength">FocalLength Property</seealso>
            <seealso cref="P:devDept.Eyeshot.Camera.ZoomFactor">ZoomFactor Property</seealso>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.AdjustNearAndFarPlanes">AdjustNearAndFarPlanes Method (devDept.Eyeshot.Viewport)</seealso>
        </member>
        <member name="P:devDept.Eyeshot.Camera.FocalLength">
            <summary>
            Gets or sets the camera focal length. Applies only to Perspective projection mode.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Camera.ProjectionMode">ProjectionMode Property</seealso>
        </member>
        <member name="P:devDept.Eyeshot.Camera.ZoomFactor">
            <summary>
            Gets or sets the current zoom factor. Applies only to Orthographic projection mode.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Camera.ProjectionMode"/>
        </member>
        <member name="P:devDept.Eyeshot.Camera.Near">
            <summary>Gets the near clipping plane position.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Camera.Far">
            <summary>Gets the far clipping plane position.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Camera.Frame">
            <summary>
            Defines the size of the camera film frame (affects the perspective camera).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Camera.AngleOfView">
            <summary>Gets the Camera vertical angle of view (in degrees).</summary>
        </member>
        <member name="P:devDept.Eyeshot.Camera.Anaglyph3D">
            <summary>
            Enables the anaglyph 3D visualization.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Camera.NearPlane">
            <summary>
            Gets the near plane of the Camera.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Camera.FarPlane">
            <summary>
            Gets the far plane of the Camera.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Camera.ViewAnimator.Camera">
            <summary>
            The camera on which the animation is performed.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Camera.ViewAnimator.Start(System.Int32)">
            <summary>
            Starts the interpolation of the viewport.
            </summary>
            <param name="viewportIndex">Thei ndex of the viewport</param>
            <returns>True if the interpolation is taking place.</returns>
        </member>
        <member name="T:devDept.Eyeshot.Camera.navigationType">
            <summary>
            Camera navigation modes.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Camera.navigationType.Examine">
            <summary>
            Rotate the 3D world to study the scene.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Camera.navigationType.Walk">
            <summary>
            Walks around the scene.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Camera.navigationType.Fly">
            <summary>
            Moves and turns the viewer like a flying airplane.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Camera.perspectiveFitType">
            <summary>
            Perspective fit type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Camera.perspectiveFitType.Quick">
            <summary>
            Quick fit.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Camera.perspectiveFitType.Accurate">
            <summary>
            Accurate fit.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Picture">
            <summary>
            Picture entity.
            </summary>
            <remarks>In case of semitransparent bitmaps, the Picture must be added as last entity.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Picture.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,System.Drawing.Image)">
            <summary>
            Plane, base point and dimensions constructor.
            </summary>
            <param name="pln">The picture plane (also determines the picture rotation)</param>
            <param name="basePoint">The base point (also determines the distance from world origin)</param>
            <param name="width">The picture width</param>
            <param name="height">The picture height</param>
            <param name="image">The picture image</param>
            <remarks>The supported pixel formats are: <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/></remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Picture.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,System.Drawing.Image,System.Boolean)">
            <summary>
            Plane, base point, dimensions and tiling constructor.
            </summary>
            <param name="pln">The picture plane (also determines the picture rotation)</param>
            <param name="basePoint">The base point (also determines the distance from world origin)</param>
            <param name="width">The picture width</param>
            <param name="height">The picture height</param>
            <param name="image">The picture image</param>
            <param name="tiling">If true, texture coordinates are adjusted so that a big image can be decomposed in smaller pictures with one pixel overlap</param>
            <remarks>The supported pixel formats are: <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb"/>, <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb"/></remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Picture.Clone">
            <summary>
            Creates a deep copy of this picture entity.
            </summary>
            <returns>The new picture object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Picture.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Picture.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Picture.Accelerated">
            <summary>
            Gets or sets the use of hardware acceleration to draw the picture.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Picture.Tiling">
            <summary>
            If true, texture coordinates are adjusted so that a big image can be decomposed in smaller images with one pixel overlapping.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Picture.Lighted">
            <summary>
            If false, the picture is not involved in lighting.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Picture.DrawEdge">
            <summary>
            If false, the picture edge is never drawn.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Picture.Image">
            <summary>
            Gets or sets the picture image.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Picture.MinifyingFunction">
            <summary>Gets or sets the texture minifying function. The texture minifying function is used whenever
            the pixel being textured maps to an area greater than one texture element. There are
            six defined minifying functions. Two of them use the nearest one or nearest four texture
            elements to compute the	texture	value. The other four use mipmaps.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Picture.MagnifyingFunction">
            <summary>Gets or sets the texture magnifying function. The texture magnifying function is used whenever
            the pixel being textured maps to an area smaller than one texture element. There are
            six defined minifying functions. Two of them use the nearest one or nearest four texture
            elements to compute the	texture	value. The other four use mipmaps.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Picture.Height">
            <summary>
            Gets or sets picture height.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Picture.Width">
            <summary>
            Gets or sets picture width.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.OrderedGroup.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Utility class to read a Ordered Group (Type 402 form 15) in IGES format
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Property">
            <summary>
            Utility class to write a Propery entity (Type 406) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Property.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Import constructor.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.SubfigureDefinition">
            <summary>
            Utility class to read/write a subfigure definition (Type 308) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.SubfigureDefinition.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.SubfigureInstance">
            <summary>
            Utility class to read/write a single subfigure instance (Type 408) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.SubfigureInstance.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Level">
            <summary>
            Utility class to write a Level Function Property 406 (Form 3) in IGES format
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Layer">
            <summary>
            Layer definition. Layers are a way to group objects so that the groups can have common formatting.
            For example, you may want your objects to show up in one color and your dimensions to show in another.
            Create a separate layer for each, then you can change all the dimensions or all the objects at the 
            same time. You may show or hide layers, change the color, lineweight, or linetype. Layers are utilized
            often to make drawings easier to read.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Layer.#ctor(System.String,System.Drawing.Color,System.Single[],System.Single,System.Boolean)">
            <summary>
            Name, color, linetype pattern, line weight and status constructor.
            </summary>
            <param name="name">Layer name</param>
            <param name="color">Layer color</param>
            <param name="lineWeight">Line weight</param>
            <param name="lineTypePattern">Line type pattern</param>
            <param name="visible">Layer status (On/Off)</param>
        </member>
        <member name="M:devDept.Eyeshot.Layer.#ctor(System.String)">
            <summary>
            Name only constructor.
            </summary>
            <param name="name">Layer name</param>
        </member>
        <member name="M:devDept.Eyeshot.Layer.#ctor(System.String,System.Drawing.Color)">
            <summary>
            Name and color constructor.
            </summary>
            <param name="name">Layer name</param>
            <param name="color">Layer color</param>
        </member>
        <member name="M:devDept.Eyeshot.Layer.#ctor(System.String,System.Drawing.Color,System.Boolean)">
            <summary>
            Name color and visible constructor. Layer's material is created automatically using the provided color.
            </summary>
            <param name="name">Layer name</param>
            <param name="color">Layer color</param>
            <param name="visible">Layer status (On/Off)</param>
        </member>
        <member name="M:devDept.Eyeshot.Layer.#ctor(System.String,System.Drawing.Color,System.String)">
            <summary>
            Name, color and material constructor.
            </summary>
            <param name="name">Layer name</param>
            <param name="color">Layer color</param>
            <param name="materialName">Layer material name (used in rendered <see cref="P:devDept.Eyeshot.ViewportLayout.DisplayMode">display mode</see>)</param>
        </member>
        <member name="M:devDept.Eyeshot.Layer.Clone">
            <summary>
            Creates a deep copy of this layer.
            </summary>
            <returns>The new layer object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Layer.Equals(devDept.Eyeshot.Layer)">
            <summary>
            Compares layer names ignoring cases.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Layer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Layer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Layer.Name">
            <summary>
            Gets or sets layer name.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Layer.Color">
            <summary>
            Gets or sets layer color.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Layer.MaterialName">
            <summary>
            Gets or sets layer material.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Layer.Visible">
            <summary>
            Gets or sets layer status (On/Off).
            </summary>
            <remarks>When changing the visibility of a Layer, call <see cref="M:devDept.Eyeshot.EntityList.UpdateBoundingBox"/> and <see cref="M:devDept.Eyeshot.ViewportLayout.AdjustNearAndFarPlanes"/> to avoid visualization problems.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Layer.LineWeight">
            <summary>
            Gets or sets layer line weight.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Layer.LineTypePattern">
            <summary>
            Gets or sets layer line type pattern.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.LayerList">
            <summary>
            Layers collection. When necessary, Layer name comparison is performed case insensitive.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.#ctor(devDept.Eyeshot.Layer)">
            <summary>
            Constructor.
            </summary>
            <param name="defaultLayer">The default layer</param>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.TurnOn(System.String)">
            <summary>
            Turns the specified layer on.
            </summary>
            <param name="layerName">The layer name</param>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.TurnOn(System.Int32)">
            <summary>
            Turns the specified layer on.
            </summary>
            <param name="layerIndex">The layer index</param>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.TurnAllOn">
            <summary>
            Turns all layers on.
            </summary>        
        </member>
        <member name="M:devDept.Eyeshot.LayerList.TurnOff(System.String)">
            <summary>
            Turns the specified layer off.
            </summary>
            <param name="layerName">The layer name</param>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.TurnOff(System.Int32)">
            <summary>
            Turns the specified layer off.
            </summary>
            <param name="layerIndex">The layer index</param>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.TurnAllOff">
            <summary>
            Turns all layers off.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.IndexOf(System.String)">
            <summary>
            Gets the index of the specified layer.
            </summary>
            <param name="layerName">The layer name</param>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.IndexOf(devDept.Eyeshot.Layer)">
            <summary>
            Gets the index of the specified layer.
            </summary>
            <param name="layer">The layer</param>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.Remove(System.String)">
            <summary>
            Removes the specified layer and all entities on it.
            </summary>
            <param name="layerName">The layer name</param>
            <remarks>It removes also entities on the specified layer inside the <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/>. If a block becomes empty after the removal of the entities on the layer, all the BlockReferences referring to it are removed as well.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.Remove(devDept.Eyeshot.Layer)">
            <summary>
            Removes the specified layer and all entities on it.
            </summary>
            <param name="layer">The layer</param>
            <remarks>It removes also entities on the specified layer inside the <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/>. If a block becomes empty after the removal of the entities on the layer, all the BlockReferences referring to it are removed as well.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.RemoveAt(System.Int32)">
            <summary>
            Removes the specified layer and all entities on it.
            </summary>
            <param name="layerIndex">The layer index</param>
            <remarks>It removes also entities on the specified layer inside the <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/>. If a block becomes empty after the removal of the entities on the layer, all the BlockReferences referring to it are removed as well.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.Empty(System.String)">
            <summary>
            Removes all the entities on the specified layer.
            </summary>
            <param name="layerName">The layer name</param>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.Empty(System.Int32)">
            <summary>
            Removes all the entities on the specified layer.
            </summary>
            <param name="layerIndex">The layer index</param>
            <remarks>It removes also entities on the specified layer inside the <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/>. If a block becomes empty after the removal of the entities on the layer, all the BlockReferences referring to it are removed as well.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.Clear(devDept.Eyeshot.Layer)">
            <summary>
            Clears this collection and adds a layer called "Default".
            </summary>        
            <param name="defaultLayer">The default layer added after the clear</param>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.AddRange(System.Collections.Generic.IList{devDept.Eyeshot.Layer})">
            <summary>
            Adds the Layers of the specified collection to the end of this one.
            </summary>
            <param name="layerList">A list of layers to add</param>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.Add(System.String,System.Drawing.Color)">
            <summary>
            Adds one <see cref="T:devDept.Eyeshot.Layer"/> at the end of this collection.
            </summary>
            <param name="layerName">The layer name</param>
            <param name="color">The layer color</param>
            <returns>The layer index.</returns>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.Add(System.String,System.Drawing.Color,System.String)">
            <summary>
            Adds one <see cref="T:devDept.Eyeshot.Layer"/> at the end of this collection.
            </summary>
            <param name="layerName">The layer name</param>
            <param name="color">The layer color</param>
            <param name="materialName">The layer material name</param>
            <returns>The layer index.</returns>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.Add(System.String,System.Drawing.Color,System.Boolean)">
            <summary>
            Adds a layer at the end of this collection.
            </summary>
            <param name="layerName">The layer name</param>
            <param name="color">The layer color</param>
            <param name="visible">The layer status</param>
            <returns>The layer index.</returns>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.Add(System.String,System.Drawing.Color,System.Single[])">
            <summary>
            Adds a layer at the end of this collection.
            </summary>
            <param name="layerName">The layer name</param>
            <param name="color">The layer color</param>
            <param name="linetypePattern">The line type pattern (<see cref="P:devDept.Eyeshot.Entities.Entity.LineTypePattern"/></param>
            <returns>The layer index.</returns>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.Add(devDept.Eyeshot.Layer)">
            <summary>
            Adds one layer at the end of this collection.
            </summary>
            <param name="layer">The layer object</param>
            <returns>The layer index.</returns>
        </member>
        <member name="M:devDept.Eyeshot.LayerList.Add(System.String)">
            <summary>
            Adds one <see cref="T:devDept.Eyeshot.Layer"/> at the end of this collection.
            </summary>
            <param name="layerName">The layer name</param>
            <returns>The layer index.</returns>
        </member>
        <member name="T:devDept.Eyeshot.Legend">
            <summary>
            Viewport's Fem legend.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Legend.ColorTableProperty">
            <summary>
            Gets or sets the legend color table.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Legend.SetRange(System.Double,System.Double)">
            <summary>
            Sets the range of legend values.
            </summary>
            <param name="min">The legend's minimum value</param>
            <param name="max">The legend's maximum value</param>
        </member>
        <member name="M:devDept.Eyeshot.Legend.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Legend.#ctor(System.Collections.ObjectModel.ObservableCollection{System.Windows.Media.Brush})">
            <summary>
            Color table constructor.
            </summary>
            <param name="colorTable">The color table</param>
        </member>
        <member name="M:devDept.Eyeshot.Legend.#ctor(devDept.Eyeshot.Legend)">
            <summary>
            Copy constructor.
            </summary>
            <param name="another">The legend object to copy</param>
        </member>
        <member name="M:devDept.Eyeshot.Legend.#ctor(System.Double,System.Double,System.String,System.String,System.Drawing.Point,System.Drawing.Size,System.Boolean,System.Boolean,System.Boolean,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,System.Drawing.Font,System.Collections.ObjectModel.ObservableCollection{System.Windows.Media.Brush})">
             <summary>
             Standard constructor.
             </summary>
             <param name="min">Minimum value</param>
             <param name="max">Maximum value</param>
             <param name="title">Title</param>
             <param name="subtitle">Subtitle</param>
             <param name="position">Top left corner position</param>
             <param name="itemSize">Size of each color rectangle</param>
             <param name="slave">If true, the legend minimum and maximum values are set automatically (FEM only)</param>
             <param name="visible">Visibility status</param>
             <param name="alignRight">If true, values are aligned right</param>
             <param name="formatString">Value's numeric format</param>
             <param name="textBackgroundColor">Text background color</param>
             <param name="titleColor">Title text color</param>
             <param name="textColor">Value text color</param>
             <param name="titleFont">Title font</param>
             <param name="textFont">Value font</param>
             <param name="colorTable">Color table</param>
            <param name="alignMiddle">If true, values are vertically aligned to the middle of the color rectangles</param>
        </member>
        <member name="F:devDept.Eyeshot.Legend.MinProperty">
            <summary>
            Gets or sets legend minimum value.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Legend.MaxProperty">
            <summary>
            Gets or sets legend maximum value.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Legend.TitleProperty">
            <summary>
            Gets or sets the legend title.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Legend.SubtitleProperty">
            <summary>
            Gets or sets the legend subtitle.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Legend.CreateLabelsTextures(devDept.Eyeshot.ViewportLayout)">
            <summary>
            Creates the bitmaps shown next to the legend items.
            </summary>
            <param name="control">The parent control</param>
            <returns>An array of bitmaps with ColorTable.Length + 1 elements</returns>
        </member>
        <member name="P:devDept.Eyeshot.Legend.Values">
            <summary>
            Gets the legend values.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.IsSlave">
            <summary>
            If true, the legend minimum and maximum values are set automatically (FEM only).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.Position">
            <summary>Top left corner position.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.ItemSize">
            <summary>Size of each color rectangle.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.Visible">
            <summary>
            Visibility status.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.FormatString">
            <summary>
             Value's numeric format. Useful to change number format and decimal places.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.AlignValuesRight">
            <summary>If true, values are aligned right.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.TextBackgroundColor">
            <summary>Text background color (supports semi-transparent colors).</summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.TextColor">
            <summary>Value text color.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.TitleColor">
            <summary>Title text color.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.TextFont">
            <summary>Value font.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.TitleFont">
            <summary>Title font.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.RedToBlue17">
            <summary>
            Standard Red to Blue color gradient (17 items).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.RedToBlue9">
            <summary>
            Standard Red to Blue color gradient (9 items).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.RedToBlue33">
            <summary>
            Standard Red to Blue color gradient (33 items).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Legend.FactorOfSafety15">
            <summary>
            Factor of safety color gradient (15 items).
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Nurbs.CurveEx">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Triangulation.mesherSmoothingType">
            <summary>
            Mesh smoothing type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.mesherSmoothingType.Laplacian">
            <summary>
            Laplacian
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.mesherSmoothingType.AreaCentroidWeighted">
            <summary>
            Area centroid weighted
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Triangulation.Mesher">
            <summary>2D meshing.</summary>
            <seealso cref="T:devDept.Eyeshot.Triangulation.EarClipping">EarClipping Class</seealso>
            <seealso cref="T:devDept.Eyeshot.Triangulation.Delaunay">Delaunay Class</seealso>
            <example>
            The following sample summarizes the steps needed to perform an asynchronous composite curve meshing.
            <code lang="CS">
            public partial class Form1 : Form
             {
             
                 public Form1()
                 {	
                     InitializeComponent();
                     // adds event handler for WorkCompleted event
                     viewport1.WorkCompleted += new Viewport.WorkCompletedEventHandler(viewport1_WorkCompleted);
                 }
              
                 protected override void OnShown(EventArgs e)
                 {
              
                     viewport1.DisplayMode = displayType.Shaded;
              
                     CompositeCurve outer = new CompositeCurve();
              
                     outer.CurveList.Add(new Line(0, 0, 10, 0));
                     outer.CurveList.Add(new Line(10, 0, 10, 6));
                     outer.CurveList.Add(new Line(10, 6, 0, 6));
                     outer.CurveList.Add(new Line(0, 6, 0, 0));
              
                     CompositeCurve inner1 = new CompositeCurve();
              
                     inner1.CurveList.Add(new Line(2, 2, 6, 2));
                     inner1.CurveList.Add(new Line(6, 2, 2, 3));
                     inner1.CurveList.Add(new Line(2, 3, 2, 2));
              
                     CompositeCurve inner2 = new CompositeCurve();
              
                     inner2.CurveList.Add(new Circle(8, 4, 0, 1));
              
                     CompositeCurve inner3 = new CompositeCurve();
              
                     inner3.CurveList.Add(new Circle(6, 4, 0, .75));
              
                     Mesher me = new Mesher(outer, new CompositeCurve[] { inner1, inner2, inner3 }, .15, mesherSmoothingType.AreaCentroidWeighted, 2);
              
                     viewport1.StartWork(me);
              
                     base.OnShown(e);
              
                 }
              
                 public void viewport1_WorkCompleted(object sender, WorkCompletedEventArgs e)
                 {
              
                     // checks the WorkUnit type, more than one can be present in the same application 
                     if (e.WorkUnit is Mesher)
                     {
              
                         Mesher me = (Mesher)e.WorkUnit;
              
                         Mesh m = me.Result;
              
                         // adds the mesh to the viewport
                         viewport1.Entities.Add(m, 0, Color.Coral);
            
                         viewport1.SetView(viewType.Trimetric);
                         viewport1.ZoomFit();
                         viewport1.Invalidate();
              
                     }
              
                 }
              
             }</code>
            <code lang="VB.NET">
            Public Partial Class Form1
             	Inherits Form
              
            	Public Sub New()
             
            		InitializeComponent()
             
            		' adds event handler for WorkCompleted event
            		Viewport1.WorkCompleted += New Viewport.WorkCompletedEventHandler(Viewport1_WorkCompleted)
             
            	End Sub
              
             	Protected Overrides Sub OnShown(e As EventArgs)
              
             		Viewport1.DisplayMode = displayType.Shaded
              
             		Dim outer As New CompositeCurve()
              
             		outer.CurveList.Add(New Line(0, 0, 10, 0))
             		outer.CurveList.Add(New Line(10, 0, 10, 6))
             		outer.CurveList.Add(New Line(10, 6, 0, 6))
             		outer.CurveList.Add(New Line(0, 6, 0, 0))
              
             		Dim inner1 As New CompositeCurve()
              
             		inner1.CurveList.Add(New Line(2, 2, 6, 2))
             		inner1.CurveList.Add(New Line(6, 2, 2, 3))
             		inner1.CurveList.Add(New Line(2, 3, 2, 2))
              
             		Dim inner2 As New CompositeCurve()
              
             		inner2.CurveList.Add(New Circle(8, 4, 0, 1))
              
             		Dim inner3 As New CompositeCurve()
              
             		inner3.CurveList.Add(New Circle(6, 4, 0, 0.75))
              
             		Dim [me] As New Mesher(outer, New CompositeCurve() {inner1, inner2, inner3}, 0.15, mesherSmoothingType.AreaCentroidWeighted, 2)
              
             		Viewport1.StartWork([me])
              
             		MyBase.OnShown(e)
              
             	End Sub
              
             	Public Sub Viewport1_WorkCompleted(sender As Object, e As WorkCompletedEventArgs)
              
             		' checks the WorkUnit type, more than one can be present in the same application 
             		If TypeOf e.WorkUnit Is Mesher Then
              
             			Dim [me] As Mesher = DirectCast(e.WorkUnit, Mesher)
              
             			Dim m As Mesh = [me].Result
              
             			' adds the mesh to the viewport
              
             			Viewport1.Entities.Add(m, 0, Color.Coral)
            
                        Viewport1.SetView(viewType.Trimetric)
                        Viewport1.ZoomFit()
                        Viewport1.Invalidate()
            
             		End If
              
             	End Sub
              
             End Class</code></example>
        </member>
        <member name="T:devDept.Eyeshot.Triangulation.Delaunay">
            <summary>Triangulation by Delaunay method.</summary>
            <seealso cref="T:devDept.Eyeshot.Triangulation.EarClipping">EarClipping Class</seealso>
            <seealso cref="T:devDept.Eyeshot.Triangulation.Mesher">Mesher Class</seealso>
            <example>
            The following sample summarizes the steps needed to perform an asynchronous terrain triangulation.
            <code lang="CS">
            public partial class Form1 : Form
            {
             
                public Form1()
                {	
                    InitializeComponent();
            
                    // adds event handler for WorkCompleted event
                    viewport1.WorkCompleted += new Viewport.WorkCompletedEventHandler(viewport1_WorkCompleted);
                }
             
                protected override void OnShown(EventArgs e)
                {
             
                    viewport1.DisplayMode = displayType.Rendered;
                    viewport1.Rendered.ShowSilhouettes = false;
             
                    int countPerSide = 100;
                    double height = 1;
             
                    int len = countPerSide * countPerSide;
             
                    Point3D[] coloredPoints = new Point3D[len];
             
                    Random rand = new Random(3);
             
                    for (int j = 0; j &lt; countPerSide; j++)
             
                        for (int i = 0; i &lt; countPerSide; i++)
                        {
             
                            double x = rand.NextDouble() * countPerSide;
                            double y = rand.NextDouble() * countPerSide;
                            double z = rand.NextDouble() * height;
             
                            byte R = (byte)(255 * z / height);
             
                            PointRGB pt = new PointRGB(x, y, z, R, 255, 255);
             
                            coloredPoints[i + j * countPerSide] = pt;
             
                        }
             
                    Delaunay del = new Delaunay(coloredPoints);
             
                    del.OutputType = Mesh.natureType.MulticolorPlain;
             
                    viewport1.StartWork(del);
             
                    base.OnShown(e);
             
                }
             
                public void viewport1_WorkCompleted(object sender, WorkCompletedEventArgs e)
                {
             
                    // checks the WorkUnit type, more than one can be present in the same application 
                    if (e.WorkUnit is Delaunay)
                    {
             
                        Delaunay del = (Delaunay)e.WorkUnit;
             
                        Mesh m = del.Result;
             
                        m.EdgeStyle = Mesh.edgeStyleType.Free;
             
                        // adds the mesh to the viewport
                        viewport1.Entities.Add(m);
             
                        viewport1.SetView(viewType.Trimetric);
                        viewport1.ZoomFit();
                        viewport1.Invalidate();
             
                    }
             
                }
             
            }</code>
            <code lang="VB.NET">
            Public Partial Class Form1
            	Inherits Form
             
            	Public Sub New()
             
            		InitializeComponent()
             
            		' adds event handler for WorkCompleted event
            		Viewport1.WorkCompleted += New Viewport.WorkCompletedEventHandler(Viewport1_WorkCompleted)
             
            	End Sub
             
            	Protected Overrides Sub OnShown(e As EventArgs)
             
            		Viewport1.DisplayMode = displayType.Rendered
            		Viewport1.Rendered.ShowSilhouettes = False
             
            		Dim countPerSide As Integer = 100
            		Dim height As Double = 1
             
            		Dim len As Integer = countPerSide * countPerSide
             
            		Dim coloredPoints As Point3D() = New Point3D(len - 1) {}
             
            		Dim rand As New Random(3)
             
            		For j As Integer = 0 To countPerSide - 1
             
            			For i As Integer = 0 To countPerSide - 1
             
            				Dim x As Double = rand.NextDouble() * countPerSide
            				Dim y As Double = rand.NextDouble() * countPerSide
            				Dim z As Double = rand.NextDouble() * height
             
            				Dim R As Byte = CByte(Math.Truncate(255 * z / height))
             
            				Dim pt As New PointRGB(x, y, z, R, 255, 255)
             
            				coloredPoints(i + j * countPerSide) = pt
            			Next
            		Next
             
            		Dim del As New Delaunay(coloredPoints)
             
            		del.OutputType = Mesh.natureType.MulticolorPlain
             
            		Viewport1.StartWork(del)
             
            		MyBase.OnShown(e)
             
            	End Sub
             
            	Public Sub Viewport1_WorkCompleted(sender As Object, e As WorkCompletedEventArgs)
             
            		' checks the WorkUnit type, more than one can be present in the same application 
            		If TypeOf e.WorkUnit Is Delaunay Then
             
            			Dim del As Delaunay = DirectCast(e.WorkUnit, Delaunay)
             
            			Dim m As Mesh = del.Result
             
            			m.EdgeStyle = Mesh.edgeStyleType.Free
             
            			' adds the mesh to the viewport
             
            			Viewport1.Entities.Add(m)
            
            
                        Viewport1.SetView(viewType.Trimetric)
                        Viewport1.ZoomFit()
                        Viewport1.Invalidate()
            
            		End If
             
            	End Sub
             
            End Class</code></example>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.Delaunay._min">
            <summary>
            Min corner of the problem bounding rectangle.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.Delaunay._range">
            <summary>
            Size of the bounding rectangle.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}})">
            <summary>
            Loops only constructor.
            </summary>
            <param name="outer">The outer loop (oriented counter-clockwise), can be null/Nothing.</param>
            <param name="inners">The inner loops (oriented clockwise), can be null/Nothing.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}})">
            <summary>
            Points/loops constructor.
            </summary>
            <param name="points">The list of point to be triangulated, can be null/Nothing.</param>
            <param name="outer">The outer loop (oriented counter-clockwise). Must be closed. Can be null/Nothing.</param>
            <param name="inners">The inner loops list  (oriented clockwise). Must be closed. Can be null/Nothing.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}})">
            <summary>
            Points/loops constructor.
            </summary>
            <param name="points">The list of point to be triangulated, can be null/Nothing.</param>
            <param name="outer">The outer loop (oriented counter-clockwise). Must be closed. Can be null/Nothing.</param>
            <param name="inners">The inner loops list  (oriented clockwise). Must be closed. Can be null/Nothing.</param>
            <param name="internals">The internal curve list. Can be open. Can be null/Nothing.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Points only constructor.
            </summary>
            <param name="points">The list of point to be triangulated</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.Triangulate(devDept.Geometry.Point3D[]@,devDept.Geometry.IndexTriangle[]@)">
            <summary>
            Performs triangulation.
            </summary>
            <param name="ecVertices">Resulting vertices</param>
            <param name="ecTriangles">Resulting triangles</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.ProcessTriangulation(System.Int32,System.Int32,System.String,System.Boolean,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Triangulate the points with indices between startFrom and endAt indices.
            </summary>
            <param name="startFrom">Start index</param>
            <param name="endAt">End index</param>
            <param name="title">Update progress message</param>
            <param name="checkInside">Checks if cavity triangles to be added are inside the loops</param>
            <param name="worker">Worker thread</param>
            <param name="doWorkEventArgs">Worker thread do work event arguments</param>
            <returns>True if the triangulation is successful.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.RecoveredSibling(devDept.Eyeshot.Triangulation.Delaunay.DelaunayTriangle,System.Collections.Generic.List{devDept.Geometry.IndexLine})">
             <summary>
            Returns true if the triangle shares an edge with a recovered one.
             </summary>
             <param name="dt">The triangle</param>
             <param name="recoveredEdges">The recovered edges list</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.FormsNewTrianglesForCurrentPoint(System.Int32,System.Collections.Generic.LinkedList{devDept.Geometry.IndexLine},System.Boolean)">
            <summary>
            Forms the cavity of the point i.
            </summary>
            <param name="i">Vertex index</param>
            <param name="edges">Edge list</param>
            <param name="checkInside">Checks if the triangle centroid is inside the loops</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.GetArea2(devDept.Geometry.IndexTriangle)">
            <summary>
            Gets triangle area using integer coordinates.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.ProcessTriangle(System.Int64,System.Int64,System.Collections.Generic.LinkedList{devDept.Geometry.IndexLine},System.Collections.Generic.LinkedListNode{devDept.Eyeshot.Triangulation.Delaunay.DelaunayTriangle},System.Int32,System.Int32)">
            <summary>
            Checks if the point P is inside the triangle provided.
            </summary>
            <param name="x">Point X coordinate</param>
            <param name="y">Point Y coordinate</param>
            <param name="edges">Edge list</param>
            <param name="tn">Triangle list node</param>
            <param name="level">Level</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.FindTriangle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the triangle that share the edge v1, v2 and not the vertex 'not'.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.ProcessTriangleInternal(System.Int64,System.Int64,System.Collections.Generic.LinkedList{devDept.Geometry.IndexLine},System.Collections.Generic.LinkedListNode{devDept.Eyeshot.Triangulation.Delaunay.DelaunayTriangle},System.Int32,System.Int32)">
            <summary>
            Removes the triangle tn and update the cavity (hole) represented by the edge list.
            </summary>
            <param name="x">Point X coordinate</param>
            <param name="y">Point Y coordinate</param>
            <param name="edges">Edge list</param>
            <param name="tn">Triangle list node</param>
            <param name="level">Level</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.ProcessList(System.Int64,System.Int64,System.Int32,System.Collections.Generic.LinkedList{devDept.Geometry.IndexLine},System.Int32,System.Int32)">
            <summary>
            Processes all the triangles connected to the vertex vIndex.
            </summary>
            <param name="x">Point X coordinate</param>
            <param name="y">Point Y coordinate</param>
            <param name="vIndex">Reference vertex index</param>
            <param name="edges">Edge list</param>
            <param name="level">Recursion level</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.Inside``1(``0)">
            <summary>
            Checks if the test point P is inside the region defined by the loops.
            </summary>
            <typeparam name="T">The point type</typeparam>
            <param name="p">The test point</param>
            <returns>True if the point P is inside.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Delaunay.PointInThreePointCircle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Checks if the point D is inside the circumcircle of the triangle A,B,C.
            </summary>
            <param name="dx">X coord of the test point D </param>
            <param name="dy">Y coord of the test point D</param>
            <param name="ax">X coord of the test point A</param>
            <param name="ay">Y coord of the test point A</param>
            <param name="bx">X coord of the test point B</param>
            <param name="by">Y coord of the test point B</param>
            <param name="cx">X coord of the test point C</param>
            <param name="cy">Y coord of the test point C</param>
            <returns>True if the point is inside the circumcircle.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.Delaunay.TriangulatingText">
            <summary>
            Gets or sets the progress bar text displayed when executed asynchronously.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.Delaunay.Result">
            <summary>
            Gets the resulting mesh.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.Delaunay.OutputType">
            <summary>
            Gets or sets the triangulation output type.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Mesher.#ctor(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double)">
            <summary>
            Element size constructor.
            </summary>
            <param name="outer">The outer loop. Must be closed.</param>
            <param name="inners">The inner loops list. Can contain open loops (after closed ones). Can be null/Nothing.</param>
            <param name="elementSize">The element size</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Mesher.#ctor(devDept.Eyeshot.Entities.Region,System.Double)">
            <summary>
            Element size constructor.
            </summary>
            <param name="region">The region to triangulate</param>
            <param name="elementSize">The element size</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Mesher.#ctor(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double)">
            <summary>
            Element size and internal curves constructor.
            </summary>
            <param name="outer">The outer loop. Must be closed.</param>
            <param name="inners">The inner loops list. Must be closed. Can be null/Nothing.</param>
            <param name="internals">The internal curve list. Can be open. Can be null/Nothing.</param>
            <param name="elementSize">The element size</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Mesher.#ctor(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,devDept.Eyeshot.Triangulation.mesherSmoothingType,System.Int32)">
            <summary>
            Element size and smoothing control constructor.
            </summary>
            <param name="outer">The outer loop. Must be closed.</param>
            <param name="inners">The inner loops list. Must be closed. Can be null/Nothing.</param>
            <param name="elementSize">The element size</param>
            <param name="smoothingMode">The smoothing mode</param>
            <param name="smoothingPasses">Number of smoothing passes</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Mesher.#ctor(devDept.Eyeshot.Entities.Region,System.Double,devDept.Eyeshot.Triangulation.mesherSmoothingType,System.Int32)">
            <summary>
            Element size and smoothing control constructor.
            </summary>
            <param name="region">The region to triangulate</param>
            <param name="elementSize">The element size</param>
            <param name="smoothingMode">The smoothing mode</param>
            <param name="smoothingPasses">Number of smoothing passes</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Mesher.#ctor(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,devDept.Eyeshot.Triangulation.mesherSmoothingType,System.Int32)">
            <summary>
            Smoothing control constructor.
            </summary>
            <param name="outer">The outer loop. Must be closed.</param>
            <param name="inners">The inner loops list. Must be closed. Can be null/Nothing.</param>
            <param name="internals">The internal curve list. Can be open. Can be null/Nothing.</param>
            <param name="elementSize">The element size</param>
            <param name="smoothingMode">The smoothing mode</param>
            <param name="smoothingPasses">Number of smoothing passes</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Mesher.InitializeMesher(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,devDept.Eyeshot.Triangulation.mesherSmoothingType,System.Int32)">
            <summary>
            Initialize the mesher
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Mesher.CollectEdges(System.Collections.Generic.List{devDept.Geometry.IndexLine})">
            <summary>
            Prepares a list of unique edges.
            </summary>
            <param name="edgeList"></param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Mesher.AddPointsAlongEdge(devDept.Geometry.IndexLine,System.Int32@)">
            <summary>
            Adds points along the edge if possible (not too close to the others).
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.Mesher.UpdateMinDist(devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double@)">
            <summary>
            Takes the square distance between two points and updates the minimum if necessary.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.Mesher.SmoothingText">
            <summary>
            Gets or sets the progress bar text displayed when executed asynchronously.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Triangulation.Mesher.ComputeMeshQuality">
            <summary>
            If <b>true</b>, mesh quality will be computed.
            </summary>
            <remarks>Mesh quality computation will increase meshing time.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.Entities.CurveTessellator">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CurveTessellator.SplitCurve(devDept.Eyeshot.Nurbs.CurveEx,devDept.Eyeshot.Nurbs.CurveEx@,devDept.Eyeshot.Nurbs.CurveEx@,System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Splits a curve into two halves. First inserts multiplicity k knots
            in the center of the parametric range. After refinement, the two
            resulting curves are copied into separate data structures.
            </summary>
            <param name="parent">Parent curve</param>
            <param name="kid0">First kid</param>
            <param name="kid1">Second kid</param>
            <param name="subdPoints">Subdivision point list</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CurveTessellator.MakeNewCorner(devDept.Eyeshot.Nurbs.CurveEx,devDept.Eyeshot.Nurbs.CurveEx,System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Build the new corner in the two new curves, computing the point
            on the curve. 
            </summary>
            <param name="kid0">First kid</param>
            <param name="kid1">Second kid</param>
            <param name="subdPoints">Subdivision points</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CurveTessellator.EmitLines(devDept.Eyeshot.Nurbs.CurveEx)">
            <summary>
            Turn a sufficiently flat curve into line.
            </summary>
            <param name="curve">The curve</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CurveTessellator.DoSubdivision(devDept.Eyeshot.Nurbs.CurveEx,System.Double,System.Int32)">
            <summary>
            The recursive subdivision algorithm. Test if the curve is flat.
            If so, split it into lines.  Otherwise, split it into two halves,
            and invoke the procedure on each half.
            </summary>
            <param name="curve">The curve</param>
            <param name="tolerance">Subdivision tolerance</param>
            <param name="level">Recursion level</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CurveTessellator.DrawSubdivision(devDept.Eyeshot.Entities.Curve,System.Double)">
            <summary>
            Main entry point for subdivision.
            </summary>
            <param name="original">The curve</param>
            <param name="tolerance">Subdivision tolerance</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CurveTessellator.AddPoint(devDept.Eyeshot.Entities.Curve,System.Int32,System.Double,System.Collections.Generic.ICollection{devDept.Geometry.Point3D})">
            <summary>Adds a subdivision point.</summary>
            <param name="curve">The curve</param>
            <param name="pwIndex">Index of the control point to be added</param>
            <param name="u">Point's parametric value</param>
            <param name="subdPoints">Subdivision point list</param>
            <returns>The index of the last point added.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CurveTessellator.IsCurveStraight(devDept.Eyeshot.Entities.Curve,System.Double)">
            <summary>
            Test if control points in a curve is "straight" with respect to a particular tolerance. Returns true if it is.
            </summary>
            <returns>True if the curve is straight.</returns>
            <param name="curve">Curve</param>
            <param name="tolerance">
            Max distance between the curve inner control points and the line connecting the
            first and last control point
            </param>
        </member>
        <member name="T:devDept.Eyeshot.Entities.CurveSurface">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Nurbs.SurfaceEx">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.Entities.sweepMethodType">
            <summary>
            Surface sweep type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.sweepMethodType.FrenetSerret">
            <summary>
            Frenet-Serret formulas
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.sweepMethodType.RotationMinimizingFrames">
            <summary>
            Rotation minimizing frames
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.sweepMethodType.RoadlikeTop">
            <summary>
            The section curve maintains its angle to the XY plane throughout the sweep
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.sweepMethodType.RoadlikeFront">
            <summary>
            The section curve maintains its angle to the ZX plane throughout the sweep
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.sweepMethodType.RoadlikeRight">
            <summary>
            The section curve maintains its angle to the YZ plane throughout the sweep
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.SurfTessellator">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.SurfTessellator.SplitSurface(devDept.Eyeshot.Nurbs.SurfaceEx,devDept.Eyeshot.Nurbs.SurfaceEx@,devDept.Eyeshot.Nurbs.SurfaceEx@,System.Boolean,System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.Polygon2D})">
            <summary>
            Split a surface into two halves. First inserts multiplicity k knots
            in the center of the parametric range. After refinement, the two
            resulting surfaces are copied into separate data structures. If the
            parent surface had straight edges, the points of the children are
            projected onto those edges.
            </summary>
            <param name="parent">Parent surface</param>
            <param name="kid0">First kid</param>
            <param name="kid1">Second kid</param>
            <param name="dirFlag">If true subdivided in U, else in V</param>
            <param name="subdPoints">Subdivision point list</param>
            <param name="trimLoops">Trim loop list</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.SurfTessellator.SplitSurface(devDept.Eyeshot.Nurbs.SurfaceEx,devDept.Eyeshot.Nurbs.SurfaceEx@,devDept.Eyeshot.Nurbs.SurfaceEx@,System.Boolean)">
            <summary>
            Split a surface into two halves. First inserts multiplicity k knots
            in the center of the parametric range. After refinement, the two
            resulting surfaces are copied into separate data structures. If the
            parent surface had straight edges, the points of the children are
            projected onto those edges.
            </summary>
            <param name="parent">Parent surface</param>
            <param name="kid0">First kid</param>
            <param name="kid1">Second kid</param>
            <param name="dirFlag">If true subdivided in U, else in V</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.SurfTessellator.MakeNewCorners(devDept.Eyeshot.Nurbs.SurfaceEx,devDept.Eyeshot.Nurbs.SurfaceEx,devDept.Eyeshot.Nurbs.SurfaceEx,System.Boolean,System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>
            Build the new corners in the two new surfaces, computing both point
            on the surface along with the normal. Prevent cracks that may occur.
            </summary>
            <param name="parent">Parent surface</param>
            <param name="kid0">First kid</param>
            <param name="kid1">Second kid</param>
            <param name="dirFlag">If true subdivided in U, else in V</param>
            <param name="subdPoints">Subdivision point list</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.SurfTessellator.ProjectToLine(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Moves the mid point onto the line.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.SurfTessellator.IsCurveStraight(devDept.Eyeshot.Entities.Surface,System.Double,System.Int32,System.Boolean)">
            <summary>
            Test if a particular row or column of control points in a mesh
            is "straight" with respect to a particular tolerance. Returns true
            if it is.
            </summary>
            <param name="s">The surface</param>
            <param name="tolerance">Max dist with internal control points</param>
            <param name="crvIndex">Curve index</param>
            <param name="dirflag">If true, test in U direction, else test in V</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.SurfTessellator.TestFlat(devDept.Eyeshot.Nurbs.SurfaceEx,System.Double)">
            <summary>
            Check to see if a surface is flat. Tests are only performed on edges and
            directions that aren't already straight.  If an edge is flagged as straight
            (from the parent surface) it is assumed it will stay that way.
            </summary>
            <param name="s">The surface</param>
            <param name="tolerance">The tolerance</param>
            <returns>True if the surface is flat.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.SurfTessellator.EmitTriangles(System.Int32[],System.Collections.Generic.IList{devDept.Geometry.IndexTriangle})">
            <summary>
            Turn a sufficiently flat surface into triangles.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.SurfTessellator.DoSubdivision(devDept.Eyeshot.Nurbs.SurfaceEx,System.Double,System.Boolean,System.Int32,System.Collections.Generic.IList{devDept.Geometry.Polygon2D})">
            <summary>
            The recursive subdivision algorithm. Test if the surface is flat.
            If so, split it into triangles.  Otherwise, split it into two halves,
            and invoke the procedure on each half.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.SurfTessellator.IsPointInsideSubject(System.Int32,devDept.Geometry.IntPoint)">
            <summary>
            Tests if a 2D point is inside the 2D polygon.
            </summary>
            <param name="testPoint">The test 2D point</param>
            <returns>True if the 2D point is inside, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.SurfTessellator.DrawSubdivision(devDept.Eyeshot.Entities.Surface,System.Double,System.Collections.Generic.IList{devDept.Geometry.Polygon2D})">
            <summary>
            Main entry point for subdivision
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.SurfTessellator.ContainsSplittedEdge(System.Int32,System.Int32,System.Collections.Generic.IList{System.Collections.Generic.LinkedList{System.Int32}},System.Int32@)">
            <summary>
            Checks if the edge is splitted in two.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.CurveOnSurfaceTessellator">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CurveOnSurfaceTessellator.SubdivideCurve(devDept.Eyeshot.Entities.Curve,devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean,devDept.Geometry.Point2D[]@,devDept.Geometry.Point3D[]@)">
            <summary>
            Subdivide a single trim curve.
            </summary>
            <param name="c">The curve to be subdivided</param>
            <param name="s">The surface</param>
            <param name="tolerance">The subdivision tolerance</param>
            <param name="includeLast">If true, the last point is included in the returned lists of points</param>
            <param name="list2D">A list of 2D points</param>
            <param name="list3D">A list of 3D points</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.CurveOnSurfaceTessellator.BinarySearch(System.Double,System.Double,devDept.Eyeshot.Entities.Curve,devDept.Eyeshot.Entities.Surface,System.Double,devDept.Geometry.Point2D,devDept.Geometry.Point2D@,devDept.Geometry.Point3D@)">
            <summary>
            Estimates the end parameter of the subdivision segment keeping the distance from
            inner control points between tol/2 and tol.
            </summary>
            <param name="low">Segment start param</param>
            <param name="high">Segment end param</param>
            <param name="c">The curve</param>
            <param name="s">The surface</param>
            <param name="tolerance">Subdivision tolerance</param>
            <param name="lastAdded">Last 2D paramentric point added</param>
            <param name="lastPt2D">Returns the 2D curve point that meets the tolerance requirements</param>
            <param name="lastPt3D">Returns the associated 3D point that meets the tolerance requirements</param>
            <returns>The estimated segment end parameter.</returns>
        </member>
        <member name="T:devDept.Eyeshot.ssiFailureType">
            <summary>
            Intersection types of failure.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ssiFailureType.DontTouch">
            <summary>
            The two entities don't touch
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ssiFailureType.InvalidIntersectionCurves">
            <summary>
            The intersection was found but the intersection points/curves are not
            valid
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ssiFailureType.Success">
            <summary>
            The intersection was successfully found
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ssiFailureType.BoundaryProcessingFailed">
            <summary>
            The intersection failed during boundary processing, check intersection curves first.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ssiFailureType.UnknownFailure">
            <summary>
            Unknown failure
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ssiFailureType.FilletIntersectionNotFound">
            <summary>
            Surface-surface intersection not found.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ssiFailureType.InvalidFillet">
            <summary>
            There are no arcs to make the fillet with.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.TrimCurve">
            <summary>
            Trim curve definition (2D parametric).
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.TrimCurve.contourIndex">
            <summary>
            These variables are used only to sort out how to project 3D edge curves on surfaces. In
            particular when curved are splitted on seam and need to be reconnected in 2D parametric 
            space.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.TrimCurve.curveIndex">
            <summary>
            These variables are used only to sort out how to project 3D edge curves on surfaces. In
            particular when curved are splitted on seam and need to be reconnected in 2D parametric 
            space.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.TrimCurve.#ctor(System.Int32,System.Double[],devDept.Geometry.Point4D[],devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Parametric space curve data and edge constructor.
            </summary>
            <param name="degree">The parametric space curve degree</param>
            <param name="knotVector">The parametric space curve knot vector</param>
            <param name="ctrlPoints">The parametric space curve control points</param>
            <param name="edge">The associated model space edge</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.TrimCurve.#ctor(devDept.Eyeshot.Entities.Curve,devDept.Eyeshot.Entities.ICurve)">
            <summary>
            Parametric space curve and model space edge constructor.
            </summary>
            <param name="parametricSpace">The parametric space curve</param>
            <param name="modelSpace">The associated model space edge</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.TrimCurve.Clone">
            <summary>
            Creates a deep copy of this trim curve.
            </summary>
            <returns>The new trim curve object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.TrimCurve.Reverse">
            <summary>
            Reverses both the 2D parametric trim curve and the associated 3D geometric edge.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.TrimCurve.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info"></param>
            <param name="ctxt"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.TrimCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.TrimCurve.Edge">
            <summary>
            Associated 3D edge of this trim curve (model space).
            </summary>
        </member>
        <member name="T:devDept.Geometry.InterPoint">
            <summary>
            Intersection point definition.
            </summary>
        </member>
        <member name="F:devDept.Geometry.InterPoint.tangent">
            <summary>
            When true, the intersection is a tangent one.
            </summary>
        </member>
        <member name="M:devDept.Geometry.InterPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Standard constructor
            </summary>
            <param name="x">X coordinate value</param>
            <param name="y">Y coordinate value</param>
            <param name="z">Z coordinate value</param>
            <param name="u">First surface parametric U coordinate value</param>
            <param name="v">First surface parametric V coordinate value</param>
            <param name="s">Second surface parametric U coordinate value</param>
            <param name="t">Second surface parametric V coordinate value</param>
        </member>
        <member name="M:devDept.Geometry.InterPoint.Clone">
            <summary>
            Creates a deep copy of this intersection point.
            </summary>
            <returns>The new intersection point object.</returns>
        </member>
        <member name="M:devDept.Geometry.InterPoint.ToString">
            <summary>
            Converts this 3D point to a human readable string.
            </summary>
            <returns>A string that represents this 3d point.</returns>
        </member>
        <member name="T:devDept.Geometry.InitialPoint">
            <summary>
            Intersection initial point definition.
            </summary>
        </member>
        <member name="F:devDept.Geometry.InitialPoint.quality">
            <summary>
            Initial point quality:
             -1 no tangent available
              0 fine
            </summary>
        </member>
        <member name="M:devDept.Geometry.InitialPoint.Clone">
            <summary>
            Creates a deep copy of this initial point.
            </summary>
            <returns>The new initial point object.</returns>
        </member>
        <member name="M:devDept.Geometry.InitialPoint.ToString">
            <summary>
            Converts this 3D point to a human readable string.
            </summary>
            <returns>A string that represents this 3d point.</returns>
        </member>
        <member name="M:devDept.Geometry.InitialPoint.FixUvSt(System.Boolean)">
            <summary>
            This function ensures that the IP, if generated from a seam edge curve, is relaxed on the proper side of the domain.
            </summary>
            <param name="first">Surface G or F?</param>
        </member>
        <member name="P:devDept.Geometry.InitialPoint.CurveTangent">
            <summary>
            Gets or set the tangent of the curve in Curve - Surface intersection.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.progressBarStyleType">
            <summary>
            Progress bar style type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.progressBarStyleType.Linear">
            <summary>
            A linear bar that covers one third of the viewport width and starts from the bottom right corner.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.progressBarStyleType.Circular">
            <summary>
            A clock-like circular bar with Cancel button in the center.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.progressBarStyleType.Docked">
            <summary>
            A linear bar that spans the complete viewport width and it's docked to the viewport bottom side.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ProgressBar">
            <summary>
            Viewport progress bar.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ProgressBar.#ctor(devDept.Eyeshot.progressBarStyleType,System.Int32,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Boolean,devDept.Eyeshot.ToolBarButton)">
            <summary>
            Standard constructor.
            </summary>
            <param name="style">Progress bar style mode</param>
            <param name="value">Progress bar value [0-100]</param>
            <param name="text">Progress bar text</param>
            <param name="textColor">Progress bar text color</param>
            <param name="textBackgroundColor">Progress bar text background color</param>
            <param name="color">Progress bar color</param>
            <param name="drawScale">Drawing scale</param>
            <param name="visible">Visibility status</param>
            <param name="button">The Cancel button</param>
        </member>
        <member name="M:devDept.Eyeshot.ProgressBar.#ctor(devDept.Eyeshot.ProgressBar)">
            <summary>
            Copy constructor.
            </summary>
            <param name="another">The other ProgressBar object</param>
        </member>
        <member name="M:devDept.Eyeshot.ProgressBar.#ctor(devDept.Eyeshot.progressBarStyleType,System.Int32,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Standard constructor. Deprecated, use the other constructor instead.
            </summary>
            <param name="style">Progress bar style mode</param>
            <param name="value">Progress bar value [0-100]</param>
            <param name="text">Progress bar text</param>
            <param name="textColor">Progress bar text color</param>
            <param name="textBackgroundColor">Progress bar text background color</param>
            <param name="color">Progress bar color</param>
            <param name="drawScale">Drawing scale</param>
            <param name="visible">Visibility status</param>
            <param name="hideCancelButton">Cancel button visibility status</param>
        </member>
        <member name="M:devDept.Eyeshot.ProgressBar.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ProgressBar.Stop(devDept.Eyeshot.ViewportLayout)">
            <summary>
            Stops and hides the progress bar.
            </summary>
            <param name="viewportLayout">The viewportlayout control</param>
        </member>
        <member name="P:devDept.Eyeshot.ProgressBar.CancelButton">
            <summary>
            Gets or sets the Cancel button.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to apply the changes</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ProgressBar.StyleMode">
            <summary>
            Gets or sets the progress bar style mode.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ProgressBar.Value">
            <summary>
            Gets or sets the progress bar value.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ProgressBar.Text">
            <summary>
            Gets or sets the progress bar text.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ProgressBar.CancellingText">
            <summary>
            Gets or sets the progress bar "Cancelling..." text shown during the cancelling of the WorkUnit.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ProgressBar.Visible">
            <summary>
            Gets or sets the progress bar visibility status.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ProgressBar.Color">
            <summary>
            Gets or sets the progress bar tick color.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ProgressBar.TextColor">
            <summary>
            Gets or sets the progress bar text color.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ProgressBar.TextBackgroundColor">
            <summary>
            Gets or sets the progress bar text background color.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ProgressBar.DrawScale">
            <summary>
            Gets or sets the scale of the progress bar.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ProgressBar.Cancelling">
            <summary>
            Returns True if the BackgroundWorker is with pending Cancel action.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ProgressBar.ViewportIndex">
            <summary>
            Gets the index of the viewport on which the progress bar is displayed. 
            </summary>
            <remarks>This index is set to the ActiveViewport when the Workunit is started</remarks>
        </member>
        <member name="T:devDept.Eyeshot.coordinateSystemPositionType">
            <summary>
            Position type.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.CoordinateSystemBase">
            <summary>
             Base class for <see cref="T:devDept.Eyeshot.CoordinateSystemIcon"/>, <see cref="T:devDept.Eyeshot.OriginSymbol"/> and <see cref="T:devDept.Eyeshot.ViewCubeIcon"/>.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.CoordinateSystemBase.CreateLabels(devDept.Graphics.RenderContextBase,devDept.Geometry.Point3D,System.String,devDept.Geometry.Point3D,System.String,devDept.Geometry.Point3D,System.String,devDept.Geometry.Point3D,System.String)">
            <summary>
            Creates the labels of the object.
            </summary>
            <param name="renderContext">The render context</param>
            <param name="posLabelAxisX">Position of the axis-X label</param>
            <param name="textAxisX">Text of the axis-X label</param>
            <param name="posLabelAxisY">Position of the axis-Y label</param>
            <param name="textAxisY">Text of the axis-Y label</param>
            <param name="posLabelAxisZ">Position of the axis-Z label</param>
            <param name="textAxisZ">Text of the axis-Z label</param>
            <param name="posLabelOrigin">Position of the origin label</param>
            <param name="textOrigin">Text of the origin label</param>
        </member>
        <member name="M:devDept.Eyeshot.CoordinateSystemBase.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>Standard constructor.</summary>  
            <param name="labelFont">Label font</param>
            <param name="labelColor">Label color</param>
            <param name="arrowColorX">X axis arrow color</param>
            <param name="arrowColorY">Y axis arrow color</param>
            <param name="arrowColorZ">Z axis arrow color</param> 
            <param name="labelOrigin">Origin label string</param>
            <param name="labelAxisX">X axis label string</param>
            <param name="labelAxisY">Y axis label string</param>
            <param name="labelAxisZ">Z axis label string</param> 
            <param name="visible">Visibility status</param>
            <param name="size">Size in pixels</param>
        </member>
        <member name="M:devDept.Eyeshot.CoordinateSystemBase.Dispose">
            <summary>
            Releases unmanaged resources.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelFont">
            <summary>Gets or sets the label font.</summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>
        </member>
        <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelColor">
            <summary>Gets or sets the label color.</summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>
        </member>
        <member name="P:devDept.Eyeshot.CoordinateSystemBase.ArrowColorX">
            <summary>Gets or sets the color of the X axis arrow, applies only to the coordinate system style mode.</summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>
        </member>
        <member name="P:devDept.Eyeshot.CoordinateSystemBase.ArrowColorY">
            <summary>Gets or sets the color of the Y axis arrow.</summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>
        </member>
        <member name="P:devDept.Eyeshot.CoordinateSystemBase.ArrowColorZ">
            <summary>Gets or sets the color of the Z axis arrow.</summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>
        </member>
        <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelAxisX">
            <summary>Gets or sets the X axis label.</summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>
        </member>
        <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelAxisY">
            <summary>Gets or sets the Y axis label.</summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>
        </member>
        <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelAxisZ">
            <summary>Gets or sets the Z axis label.</summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>
        </member>
        <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelOrigin">
            <summary>Gets or sets the origin label.</summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>
        </member>
        <member name="T:devDept.Eyeshot.CoordinateSystemIcon">
            <summary>Coordinate System icon settings. This user interface element will never be added to images and printouts.</summary>
        </member>
        <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor">
            <summary>Empty constructor.</summary>
        </member>
        <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType)">
            <summary>Standard constructor.</summary>  
            <param name="labelFont">Label font</param>
            <param name="labelColor">Label color</param>
            <param name="arrowColorX">X axis arrow color</param>
            <param name="arrowColorY">Y axis arrow color</param>
            <param name="arrowColorZ">Z axis arrow color</param> 
            <param name="labelOrigin">Origin label string</param>
            <param name="labelAxisX">X axis label string</param>
            <param name="labelAxisY">Y axis label string</param>
            <param name="labelAxisZ">Z axis label string</param> 
            <param name="visible">Visibility status</param>
            <param name="position">Position </param>
        </member>
        <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType,System.Int32)">
            <summary>Standard constructor.</summary>  
            <param name="labelFont">Label font</param>
            <param name="labelColor">Label color</param>
            <param name="arrowColorX">X axis arrow color</param>
            <param name="arrowColorY">Y axis arrow color</param>
            <param name="arrowColorZ">Z axis arrow color</param> 
            <param name="labelOrigin">Origin label string</param>
            <param name="labelAxisX">X axis label string</param>
            <param name="labelAxisY">Y axis label string</param>
            <param name="labelAxisZ">Z axis label string</param> 
            <param name="visible">Visibility status</param>
            <param name="position">Position </param>
            <param name="size">Size in pixels</param>
        </member>
        <member name="M:devDept.Eyeshot.CoordinateSystemIcon.Draw(devDept.Eyeshot.RenderParams)">
            <summary>
            Draws the origin symbol.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.CoordinateSystemIcon.Entities">
            <summary>
            Gets or sets the mesh entities used to draw the the CoordinateSystemIcon.
            </summary>
            <remarks>To be correctly visualized the entities must have a maximum size of 7.5 units.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.CoordinateSystemIcon.Position">
            <summary>
            The position on sceeen.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.originSymbolStyleType">
            <summary>Origin symbol style type.</summary>
        </member>
        <member name="F:devDept.Eyeshot.originSymbolStyleType.Ball">
            <summary>The black and white sphere</summary>
        </member>
        <member name="F:devDept.Eyeshot.originSymbolStyleType.CoordinateSystem">
            <summary>The three XYZ arrows</summary>
        </member>
        <member name="T:devDept.Eyeshot.OriginSymbol">
            <summary>Origin symbol settings.</summary>
        </member>
        <member name="M:devDept.Eyeshot.OriginSymbol.#ctor">
            <summary>Empty constructor.</summary>
        </member>
        <member name="M:devDept.Eyeshot.OriginSymbol.#ctor(System.Int32,devDept.Eyeshot.originSymbolStyleType,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="ballSize">Size of the sphere in pixels</param>
            <param name="styleMode">Style mode</param>
            <param name="labelFont">Label font</param>
            <param name="labelColor">Label color</param>
            <param name="arrowColorX">X axis arrow color</param>
            <param name="arrowColorY">Y axis arrow color</param>
            <param name="arrowColorZ">Z axis arrow color</param>
            <param name="labelOrigin">Origin label string</param>
            <param name="labelAxisX">X axis label string</param>
            <param name="labelAxisY">Y axis label string</param>
            <param name="labelAxisZ">Z axis label string</param> 
            <param name="alwaysOnTop">Deprecated - Always on top status.</param>
            <param name="visible">Visibility status</param>
        </member>
        <member name="M:devDept.Eyeshot.OriginSymbol.#ctor(System.Int32,devDept.Eyeshot.originSymbolStyleType,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="ballSize">Size of the sphere in pixels</param>
            <param name="styleMode">Style mode</param>
            <param name="labelFont">Label font</param>
            <param name="labelColor">Label color</param>
            <param name="arrowColorX">X axis arrow color</param>
            <param name="arrowColorY">Y axis arrow color</param>
            <param name="arrowColorZ">Z axis arrow color</param>
            <param name="labelOrigin">Origin label string</param>
            <param name="labelAxisX">X axis label string</param>
            <param name="labelAxisY">Y axis label string</param>
            <param name="labelAxisZ">Z axis label string</param> 
            <param name="visible">Visibility status</param>
        </member>
        <member name="P:devDept.Eyeshot.OriginSymbol.Position">
            <summary>
            The position on sceeen.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.OriginSymbol.StyleMode">
            <summary>Gets or sets the style mode.</summary>
        </member>
        <member name="T:devDept.Eyeshot.ObjectManipulatorPartProperties">
            <summary>
            Class that holds the properties for the ObjectManipulator parts.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ObjectManipulatorPartProperties.#ctor(System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="color">The color</param>
            <param name="visible">The visibility</param>
            <param name="selectable">The selectability</param>
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulatorPartProperties.Color">
            <summary>
            Gets or sets the color of the element.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulatorPartProperties.Visible">
            <summary>
            Gets or sets the visibility of the part.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulatorPartProperties.Selectable">
            <summary>
            if true, the part is selectable and is drawn with its <see cref="P:devDept.Eyeshot.ObjectManipulatorPartProperties.Color"/>, else it's not selectable and drawn with grey color.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ObjectManipulator">
            <summary>
            Object manipulator class.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ObjectManipulator.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ObjectManipulator.#ctor(System.Int32,System.Boolean,System.Boolean,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties)">
            <summary>
            Standard constructor (deprecated).
            </summary>
            <param name="ballSize">Size of the sphere in pixels</param>
            <param name="visible">Visibility of the Object Manipulator</param>
            <param name="showOriginalWhileEditing">If true, shows the original entities along with the copies during editing</param>
            <param name="translate">Properties of the sphere for translation on view</param>
            <param name="translateX">Properties of the arrow for translation on X</param>
            <param name="translateY">Properties of the arrow for translation on Y</param>
            <param name="translateZ">Properties of the arrow for translation on Z</param>
            <param name="rotateX">Properties of the arrow for rotation around X</param>
            <param name="rotateY">Properties of the arrow for rotation around Y</param>
            <param name="rotateZ">Properties of the arrow for rotation around Z</param>
        </member>
        <member name="M:devDept.Eyeshot.ObjectManipulator.#ctor(System.Int32,System.Boolean,System.Boolean,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,System.Double,System.Double)">
            <summary>
            Standard constructor.
            </summary>
            <param name="ballSize">Size of the sphere in pixels</param>
            <param name="visible">Visibility of the Object Manipulator</param>
            <param name="showOriginalWhileEditing">If true, shows the original entities along with the copies during editing</param>
            <param name="translate">Properties of the sphere for translation on view</param>
            <param name="translateX">Properties of the arrow for translation on X</param>
            <param name="translateY">Properties of the arrow for translation on Y</param>
            <param name="translateZ">Properties of the arrow for translation on Z</param>
            <param name="rotateX">Properties of the arrow for rotation around X</param>
            <param name="rotateY">Properties of the arrow for rotation around Y</param>
            <param name="rotateZ">Properties of the arrow for rotation around Z</param>
            <param name="rotationStep">Rotation step angle in radians</param>
            <param name="translationStep">Translation step distance</param>
        </member>
        <member name="M:devDept.Eyeshot.ObjectManipulator.Enable(devDept.Geometry.Transformation,System.Boolean)">
            <summary>
             Activates the Manipulator to move the selected entities.
            </summary>
            <param name="initialTransform">The initial transformation</param>
            <param name="centerOnEntities">If true, positions the manipulator in the center of the selected entities</param>
            <seealso cref="T:devDept.Eyeshot.ObjectManipulator"/>        
        </member>
        <member name="M:devDept.Eyeshot.ObjectManipulator.EditClippingPlane(devDept.Graphics.ClippingPlaneBase,System.Double,System.Drawing.Color)">
            <summary>
            Edits a clipping plane.
            </summary>
            <param name="clippingPlaneIndex">The index of the clipping plane to edit (range [0, 5])</param>
            <param name="size">The size of the clipping plane</param>
            <param name="color">The color of the clipping plane</param>
        </member>
        <member name="M:devDept.Eyeshot.ObjectManipulator.Enable(devDept.Geometry.Transformation,System.Boolean,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
            <summary>
            Activates the ObjectManipulator to move the given entities.
            </summary>
            <param name="initialTransform">The initial transformation</param>
            <param name="centerOnEntities">If true, positions the manipulator in the center of the entities</param>
            <param name="entities">The entities to move</param>
        </member>
        <member name="M:devDept.Eyeshot.ObjectManipulator.Apply">
            <summary>
            Applies the transformation of the <see cref="T:devDept.Eyeshot.ObjectManipulator"/> on the selected entities and hides it.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ObjectManipulator.Cancel">
            <summary>
            Cancels the transformation of the <see cref="T:devDept.Eyeshot.ObjectManipulator"/> and hides it.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.Position">
            <summary>
            The world position.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.ShowOriginalWhileEditing">
            <summary>
            If true, both the original and edited copies of the entities are shown during editing, else only the edited copies are shown.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.Translate">
            <summary>
            Gets or sets the properties of the translation on view ball.
            </summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>    
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.TranslateX">
            <summary>
            Gets or sets the properties of the arrow for the translation on X axis.
            </summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>    
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.TranslateY">
            <summary>
            Gets or sets the properties of the arrow for the translation on Y axis.
            </summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>    
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.TranslateZ">
            <summary>
            Gets or sets the properties of the arrow for the translation on Z axis.
            </summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>    
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.RotateX">
            <summary>
            Gets or sets the properties of the arc for the rotation around X axis.
            </summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>    
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.RotateY">
            <summary>
            Gets or sets the properties of the arc for the rotation around Y axis.
            </summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>    
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.RotateZ">
            <summary>
            Gets or sets the properties of the arc for the rotation around Z axis.
            </summary>
            <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.ViewportLayout.CompileUserInterfaceElements"/> to
                see the effect of your changes at run-time.
            </remarks>    
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.RotationStep">
            <summary>
            Gets or sets the rotation step angle in radians.
            </summary>
            <remarks>Use 0 for a continuous movement.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.TranslationStep">
            <summary>
            Gets or sets the translation step distance.
            </summary>
            <remarks>Use 0 for a continuous movement. Applies only to the three translation axes, not to the translation on view ball.</remarks>
        </member>
        <member name="E:devDept.Eyeshot.ObjectManipulator.MouseDown">
            <summary>
            Mouse down event.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ObjectManipulator.MouseUp">
            <summary>
            Mouse up event.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ObjectManipulator.MouseOver">
            <summary>
            Mouse over event.
            </summary>
        </member>
        <member name="E:devDept.Eyeshot.ObjectManipulator.MouseDrag">
            <summary>
            Mouse drag event.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.Transformation">
            <summary>
            Gets or sets the transformation.
            </summary>
            <remarks>To correctly update the drawing of the selected entities preview it's necessary to set a new Transformation object and not change the inner values of the Transformation.Matrix.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.InitialTransformation">
            <summary>
            Gets or sets the initial transformation.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.FullTransformation">
            <summary>
            Gets the final transformation given by the <see cref="P:devDept.Eyeshot.ObjectManipulator.Transformation"/> multiplied by the <see cref="P:devDept.Eyeshot.ObjectManipulator.InitialTransformation"/>.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.Active">
            <summary>
            Sets the Active status. It is Activated by the Enable() method. Setting the manipulator to Visible doesn't activate it,
            to avoid issues with the SelectionModes.
            (i.e. if there is a selection mode, set the manipulator as visible and then do a quick action, it would give an exception.)
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ObjectManipulator.ObjectManipulatorEventArgs">
            <summary>
            Object manipulator event arguments class.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.ObjectManipulator.ObjectManipulatorEventArgs.#ctor(devDept.Eyeshot.ObjectManipulator.actionType,devDept.Geometry.Vector3D)">
            <summary>
            Standard constructor
            </summary>
            <param name="actionMode">The action mode</param>
            <param name="axis">The axis on which the transformation is performed</param>
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.ObjectManipulatorEventArgs.ActionMode">
            <summary>
            Gets the current action mode.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.ObjectManipulator.ObjectManipulatorEventArgs.Axis">
            <summary>
            Gets the axis on which the transformation is performed.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.ObjectManipulator.ObjectManipulatorEventHandler">
            <summary>
            Event handler for ObjectManipulator events.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The arguments</param>
        </member>
        <member name="T:devDept.Eyeshot.ObjectManipulator.actionType">
            <summary>
            Object manipulator action type enum.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ObjectManipulator.actionType.TranslateOnView">
            <summary>
            Translation on view
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ObjectManipulator.actionType.TranslateOnAxis">
            <summary>
            Translation on one of the three manipulator axes
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.ObjectManipulator.actionType.Rotate">
            <summary>
            Rotation on one of the three manipulator axes
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.EyeshotDisposableCollection`1">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Eyeshot.EntityList">
            <summary>
            Entity collection.
            </summary>
            <remarks>When overriding a method of this class, never forget to call its base class implementation.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Remove(devDept.Eyeshot.Entities.Entity)">
            <summary>
            Removes the first occurrence of a specific entity from this collection.
            </summary>
            <param name="item">The object to remove from this collection</param>
            <returns>True if entity is successfully removed; otherwise, false. This method also
            returns false if entity was not found in this collection.</returns>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.RemoveAt(System.Int32)">
            <summary>
            Removes the entity at the specified index of this collection.
            </summary>
            <param name="index">The zero-based index of the entity to remove</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> from this collection.
            </summary>
            <param name="index">The zero-based starting index of the range of <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> to remove</param>
            <param name="count">The number of <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> to remove</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.GetVisualRefinementTolerance">
            <summary>
            Gets the internal refinement tolerance used by the <see cref="M:devDept.Eyeshot.EntityList.Regen"/> method, computed automatically from the scene dimensions.
            </summary>
            <returns>The refinement tolerance</returns>
            <remarks>It can be overridden to return a different tolerance.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Regen">
            <summary>
            Regens only entities that need it. Each entity is automatically regenerated
            when added to the <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/> or <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/> collection. 
            You need to call this function only when you change/transform an entity <b>already</b> in
             these collections. 
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.RegenMode"/>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.RegenAllCurved">
            <summary>
            Regens all curved entities (<see cref="T:devDept.Eyeshot.Entities.Circle"/>, <see cref="T:devDept.Eyeshot.Entities.Arc"/>, <see cref="T:devDept.Eyeshot.Entities.Ellipse"/>, <see cref="T:devDept.Eyeshot.Entities.EllipticalArc"/>, <see cref="T:devDept.Eyeshot.Entities.Curve"/>, <see cref="T:devDept.Eyeshot.Entities.Surface"/>) to uniformize the visual refinement.
            </summary>
            <remarks>Block definitions are affected by this command.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.RegenAllCurved(System.Double)">
            <summary>
            Regens all curved entities (<see cref="T:devDept.Eyeshot.Entities.Circle"/>, <see cref="T:devDept.Eyeshot.Entities.Arc"/>, <see cref="T:devDept.Eyeshot.Entities.Ellipse"/>, <see cref="T:devDept.Eyeshot.Entities.EllipticalArc"/>, <see cref="T:devDept.Eyeshot.Entities.Curve"/>, <see cref="T:devDept.Eyeshot.Entities.Surface"/>) to uniformize the visual refinement.
            </summary>
            <param name="tol">The desired chordal error.</param>
            <remarks>Block definitions are affected by this command.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.ProcessSemiTransparent">
            <summary>
            Performs semi-transparent entities pre-processing.
            </summary>
            <remarks>It is meaningful only when <see cref="P:devDept.Eyeshot.ViewportLayout.AccurateTransparency"/> is true.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.UpdateBoundingBox">
            <summary>
            Computes the model bounding box and updates some important variables.
            If the <see cref="P:devDept.Eyeshot.ViewportLayout.BoundingBox">bounding box</see>, <see cref="!:ViewportLayout.Grid">grid</see>, or <see cref="!:ViewportLayout.Shadow">shadow</see> are visible, it updates them too.
            </summary>
            <remarks>Shadow is updated only if it is visible and if the model has the bounding box height bigger than zero.</remarks>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.BoundingBox"/>
            <seealso cref="!:ViewportLayout.Grid"/>
            <seealso cref="!:ViewportLayout.Shadow"/>
            <seealso cref="P:devDept.Eyeshot.EntityList.BoxMin"/>
            <seealso cref="P:devDept.Eyeshot.EntityList.BoxMax"/>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Add(devDept.Eyeshot.Entities.Entity,System.Int32)">
            <summary>
            Adds one <see cref="T:devDept.Eyeshot.Entities.Entity"/> at the end of this collection using the specified layer.
            </summary>
            <param name="item">The entity to be added</param>
            <param name="layerIndex">The destination layer index</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Add(devDept.Eyeshot.Entities.Entity,System.Int32,System.Drawing.Color)">
            <summary>
            Adds one <see cref="T:devDept.Eyeshot.Entities.Entity"/> at the end of this collection using the specified layer and color.
            </summary>
            <param name="item">The entity to be added.</param>
            <param name="layerIndex">The destination layer index</param>
            <param name="color">The entity color</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Add(devDept.Eyeshot.Entities.Entity,System.String)">
            <summary>
            Adds one <see cref="T:devDept.Eyeshot.Entities.Entity"/> at the end of this collection using the specified the layer.
            </summary>
            <param name="item">The entity to be added</param>
            <param name="layerName">The destination layer name</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.AddRange(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.Entity},System.Int32)">
            <summary>
            Adds the <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> of the specified collection to the end of this collection using the specified layer.
            </summary>
            <param name="collection">The collection whose entities should be added to the end of this collection.</param>
            <param name="layerIndex">The destination layer index</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.AddRange(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.Entity},System.Int32,System.Drawing.Color)">
            <summary>
            Adds the <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> of the specified collection to the end of this collection using the specified layer and color.
            </summary>
            <param name="collection">The collection whose entities should be added to the end of this collection.</param>
            <param name="layerIndex">The destination layer index</param>
            <param name="color">The color assigned to the entities of the collection</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.AddRange(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.Entity},System.String)">
            <summary>
            Adds the <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> of the specified collection to the end of this collection using the specified layer.
            </summary>
            <param name="collection">The collection whose entities should be added to the end of this collection.</param>
            <param name="layerName">The destination layer name</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.CopySelection">
            <summary>
            Copies selected entities into the clipboard.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.CutSelection">
            <summary>
            Cut selected entities into the clipboard.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Paste">
            <summary>
            Pastes copied entities from the clipboard.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.RemoveLayer(System.Int32,System.Boolean)">
            <summary>
            Utility function to remove a layer.
            </summary>
            <param name="layerIndex">The layer to be removed</param>
            <param name="reassignLayerIndex">If true, re-assigns the layer for the entities unremoved</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Translate(devDept.Geometry.Vector3D)">
            <summary>
            Translates all the entities in the collection.
            </summary>
            <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen"/> to see the effect of this command.
            </remarks>
            <param name="dv">Amount</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Translates all the entities in this collection.
            </summary>
            <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen"/> to see the effect of this command.
            </remarks>
            <param name="dx">Amount in X</param>
            <param name="dy">Amount in Y</param>
            <param name="dz">Amount in Z</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Rotate(System.Double,devDept.Geometry.Vector3D)">
            <summary>
            Rotates all the entities in this collection around an arbitray axis by the specified angle.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="angleInRadians">The angle in radians</param>
            <param name="axis">The rotation axis</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Rotate(System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
            <summary>
            Rotates all the entities in this collection around an arbitray axis by the specified angle.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="angleInRadians">The angle in radians</param>
            <param name="axis">The rotation axis' direction</param>
            <param name="center">The rotation axis' origin</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Rotate(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Rotates all the entities in this collection around an arbitray axis by the specified angle.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="angleInRadians">The angle in radians</param>
            <param name="axisStart">The rotation axis' start point</param>
            <param name="axisEnd">The rotation axis' end point</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Scale(devDept.Geometry.Point3D,System.Double)">
            <summary>
            Scales all the entities in this collection of the specified scale factor.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="fixedPoint">Base point</param>
            <param name="factor">Scale factor</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Scale(devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
            <summary>
            Scales all the entities in this collection of the specified scale factor.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="fixedPoint">Base point</param>
            <param name="sx">Scale factor along X-axis</param>
            <param name="sy">Scale factor along Y-axis</param>
            <param name="sz">Scale factor along Z-axis</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scales all the entities in this collection of the specified scale factor.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="sx">Scale factor along X-axis</param>
            <param name="sy">Scale factor along Y-axis</param>
            <param name="sz">Scale factor along Z-axis</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Scale(devDept.Geometry.Vector3D)">
            <summary>
            Scales all the entities in this collection of the specified scale factor.
            </summary>
            <remarks>
            You need to call Viewport.Entities.Regen() to see the effect of this command.
            </remarks>
            <param name="sv">Scale vector</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.ClearSelection">
            <summary>
            Clears selection.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.SelectAll">
            <summary>
            Selects all selectable and visible entities.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.Visible"/>
            <seealso cref="P:devDept.Eyeshot.Layer.Visible"/>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.InvertSelection">
            <summary>
            Inverts selection.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.Entity.Selectable"/>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.DeleteSelected">
            <summary>
            Delete selected Entities.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.GetStats">
            <summary>
            Get the statistics.
            </summary>        
            <returns>The dictionary with the count of each entity's type.</returns>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.GetStats(System.Collections.Generic.Dictionary{System.String,devDept.Eyeshot.Block},System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get the statistics.
            </summary>
            <param name="blocks">The blocks to process.</param>
            <param name="entitiesCount">The count of all the entities.</param>
            <param name="verticesCount">The count of all the vertices.</param>
            <param name="trianglesCount">The count of all the triangles.</param>
            <returns>The dictionary with the count of each entity's type.</returns>
            <remarks>The entities inside the blocks are processed only for the counting of vertices and triangles.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.GetStats(System.Collections.Generic.Dictionary{System.String,devDept.Eyeshot.Block},System.Boolean)">
            <summary>
            Get the statistics.
            </summary>
            <param name="blocks">The blocks to process. It can be null if showTotals is false.></param>
            <param name="showTotals">When true it shows also the total's count, otherwise no.</param>
            <returns>The string with the count of each entity's type.</returns>
            <remarks>The entities inside the blocks are processed only for the counting of vertices and triangles.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.SetCurrent(devDept.Eyeshot.Entities.BlockReference)">
            <summary>
            Sets a BlockReference as current.
            </summary>
            <param name="blockReference">The BlockReference to set as current</param>
            <remarks>If it is null, the current BlockReference is unset. It must be a first-level child of the BlockReference that is currently set.
            If no BlockReference is currently set, it must be a top-level BlockReference (i.e. it must be in the <see cref="P:devDept.Eyeshot.ViewportLayout.Entities"/>)</remarks>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.SetParentAsCurrent">
            <summary>
            Sets the parent of the current BlockReference (if it exists) as current.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.SetSelectionAsCurrent">
            <summary>
            Sets the selected BlockReference as current (if there is one).
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.ResetCurrentBlockReference">
            <summary>
            Resets the current BlockReference to null.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Explode(devDept.Eyeshot.Entities.BlockReference)">
            <summary>
            Returns the block reference individual entity list.
            </summary>
            <param name="br">The block reference</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.ConvertToLinearPath(devDept.Eyeshot.Entities.Text,System.Double)">
            <summary>
            Converts the text outlines to LinearPath.
            </summary>
            <param name="text">The text object to convert</param>
            <param name="chordalErr">The font chordal error</param>
            <returns>The array of LinearPath,</returns>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.ConvertToLinearPath(devDept.Eyeshot.Entities.Text,System.Double,devDept.Eyeshot.Entities.Entity[]@,devDept.Eyeshot.Entities.Entity[][]@)">
            <summary>
            Converts the text outlines to LinearPath, separating outer and inner loops.
            </summary>
            <param name="text">The text object to convert</param>
            <param name="chordalErr">The font chordal error</param>
            <param name="outers">The outer loops</param>
            <param name="inners">The inner loops belonging to each outer loops</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.ReplaceBlockNames(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.Dictionary{System.String,devDept.Eyeshot.Block}@)">
            <summary>
            Replaces the block names in the BlockReference and Block objects found in the given entities and blocks with the ones specified by the mapping.
            </summary>
            <param name="blockNamesMapping">The dictionary that maps the old block name to the new one</param>
            <param name="entities">The entities to process</param>
            <param name="blocks">The blocks to process</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.AdjustBlockReferenceBockNames(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
            <summary>
            Updates the BlockReferences block names according to the specified mapping.
            </summary>
            <param name="blockNamesMapping">The mapping of the old and new block names</param>
            <param name="entities">The collection of entities to update</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)">
            <summary>
            Synchronizes <see cref="T:devDept.Eyeshot.AttributeReference"/> entities of the <see cref="T:devDept.Eyeshot.Entities.BlockReference"/> referring to the <paramref name="blockName"/> block with the data of its <see cref="T:devDept.Eyeshot.Entities.Attribute"/> entities.
            </summary>
            <param name="blockName">The name of the block containing the Attributes to synchronize</param>
        </member>
        <member name="M:devDept.Eyeshot.EntityList.Intersection2D(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Plane)">
            <summary>
            Finds all 3D points where the provided coplanar curves intersect.
            </summary>
            <returns>The list of intersection points.</returns>
            <param name="C1">The first curve</param>
            <param name="C2">The second curve</param>
            <param name="plane">The plane where the two curves lay</param>
            <remarks>For PROFESSIONAL edition, this method doesn't work for Ellipses, Elliptical Arcs and CompositeCurve containing Ellipses or Elliptical Arcs.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.EntityList.VisualRefinementTolerance">
            <summary>
            Gets current visual refinement tolerance.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.EntityList.LastRegenCount">
            <summary>
            Gets the number of <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> regenerated during the last operation.
            </summary>
            <returns>The <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> count.</returns>
        </member>
        <member name="P:devDept.Eyeshot.EntityList.Parallel">
            <summary>
            When true, entities regeneration is executed in parallel (on multiple CPU cores).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.EntityList.BoxMin">
            <summary>
            Gets the minimum 3D extent of the model.
            </summary>
            <seealso cref="M:devDept.Eyeshot.EntityList.UpdateBoundingBox"/>
            <seealso cref="P:devDept.Eyeshot.EntityList.BoxMax"/>
        </member>
        <member name="P:devDept.Eyeshot.EntityList.BoxMax">
            <summary>
            Gets the maximum 3D extent of the model.
            </summary>
            <seealso cref="M:devDept.Eyeshot.EntityList.UpdateBoundingBox"/>
            <seealso cref="P:devDept.Eyeshot.EntityList.BoxMin"/>
        </member>
        <member name="P:devDept.Eyeshot.EntityList.BoxSize">
            <summary>
            Gets the 3D extent of the model.
            </summary>
            <seealso cref="M:devDept.Eyeshot.EntityList.UpdateBoundingBox"/>
            <seealso cref="P:devDept.Eyeshot.EntityList.BoxMin"/>
            <seealso cref="P:devDept.Eyeshot.EntityList.BoxMax"/>
        </member>
        <member name="P:devDept.Eyeshot.EntityList.MaxCandidates">
            <summary>
            Accurate transparency. This parameter affects transparency pre-processing and redrawing speed. 
            Valid values are between 1 and the total number of semi-transparent triangles.
            The lower is this value the lower will be the time need for pre-processing, penalizing redrawing speed.
            Higher values normally improve the FPS rate.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.EntityList.FrontFacingOnly">
            <summary>
            Accurate transparency. If true, skips back facing semi-tranparent triangles drawing, increasing the FPS rate. 
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.EntityList.CurrentBlockReference">
            <summary>
            Gets the current BlockReference.
            </summary>
            <seealso cref="M:devDept.Eyeshot.EntityList.SetCurrent(devDept.Eyeshot.Entities.BlockReference)"/>
        </member>
        <member name="T:devDept.Eyeshot.Grid">
            <summary>Planar grid definition.</summary>
        </member>
        <member name="M:devDept.Eyeshot.Grid.#ctor">
            <summary>Empty constructor.</summary>
        </member>
        <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double)">
            <summary>Limits and step constructor.</summary>
            <overloads>Set line color to gray and axis color to black.</overloads>
            <param name="min">Minimum 2D grid point</param>
            <param name="max">Maximum 2D grid point</param>
            <param name="step">Grid step</param>
        </member>
        <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane)">
            <summary>Limits and step constructor.</summary>
            <overloads>Set line color to gray and axis color to black.</overloads>
            <param name="min">Minimum 2D grid point</param>
            <param name="max">Maximum 2D grid point</param>
            <param name="step">Grid step</param>
            <param name="plane">Grid plane</param>
        </member>
        <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color)">
            <summary>Standard constructor.</summary>
            <param name="min">Minimum 2D grid point</param>
            <param name="max">Maximum 2D grid point</param>
            <param name="step">Grid step</param>
            <param name="plane">Grid plane</param>
            <param name="lineColor">Color used to draw lines</param>
            <param name="axisColor">Color used to draw axes</param>
        </member>
        <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="min">Minimum 2D grid point</param>
            <param name="max">Maximum 2D grid point</param>
            <param name="step">Grid step</param>
            <param name="plane">Grid plane</param>
            <param name="lineColor">Color used to draw lines</param>
            <param name="axisColor">Color used to draw axes</param>
            <param name="autoSize">If true, the grid is resized automatically.</param>
            <param name="visible">Visibility status</param>
            <param name="alwaysBehind">If true, the grids is drawn always behind the geometry</param>
        </member>
        <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
            <summary>Standard constructor.</summary>
            <param name="min">Minimum 2D grid point</param>
            <param name="max">Maximum 2D grid point</param>
            <param name="step">Grid step</param>
            <param name="plane">Grid plane</param>
            <param name="lineColor">Color used to draw lines</param>
            <param name="axisColor">Color used to draw axes</param>
            <param name="autoSize">If true, the grid is resized automatically.</param>
            <param name="visible">Visibility status</param>
            <param name="alwaysBehind">If true, the grids is drawn always behind the geometry</param>
            <param name="autoStep">If true, the grid real step is a multiple of the Step to keep the number of lines between MinLines and MaxLines</param>
            <param name="minNumberOfLines">If AutoStep is true, defines the Minimum number of lines</param>
            <param name="maxNumberOfLines">If AutoStep is true, defines the Maximum number of lines</param>
        </member>
        <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>Standard constructor.</summary>
            <param name="min">Minimum 2D grid point</param>
            <param name="max">Maximum 2D grid point</param>
            <param name="step">Grid step</param>
            <param name="plane">Grid plane</param>
            <param name="lineColor">Color used to draw lines</param>
            <param name="axisColor">Color used to draw axes</param>
            <param name="autoSize">If true, the grid is resized automatically.</param>
            <param name="visible">Visibility status</param>
            <param name="alwaysBehind">If true, the grids is drawn always behind the geometry</param>
            <param name="autoStep">If true, the grid real step is a multiple of the Step to keep the number of lines between MinLines and MaxLines</param>
            <param name="minNumberOfLines">If AutoStep is true, defines the Minimum number of lines</param>
            <param name="maxNumberOfLines">If AutoStep is true, defines the Maximum number of lines</param>
            <param name="majorLinesEvery">The number of steps between two major lines</param>
            <param name="majorLineColor">Color used to draw major lines</param>
        </member>
        <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>Standard constructor.</summary>
            <param name="min">Minimum 2D grid point</param>
            <param name="max">Maximum 2D grid point</param>
            <param name="step">Grid step</param>
            <param name="plane">Grid plane</param>
            <param name="lineColor">Color used to draw lines</param>
            <param name="colorAxisX">Color used to draw X axis</param>
            <param name="colorAxisY">Color used to draw Y axis</param>
            <param name="autoSize">If true, the grid is resized automatically.</param>
            <param name="visible">Visibility status</param>
            <param name="alwaysBehind">If true, the grids is drawn always behind the geometry</param>
            <param name="autoStep">If true, the grid real step is a multiple of the Step to keep the number of lines between MinLines and MaxLines</param>
            <param name="minNumberOfLines">If AutoStep is true, defines the Minimum number of lines</param>
            <param name="maxNumberOfLines">If AutoStep is true, defines the Maximum number of lines</param>
            <param name="majorLinesEvery">The number of steps between two major lines</param>
            <param name="majorLineColor">Color used to draw major lines</param>
        </member>
        <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>Standard constructor.</summary>
            <param name="min">Minimum 2D grid point</param>
            <param name="max">Maximum 2D grid point</param>
            <param name="step">Grid step</param>
            <param name="plane">Grid plane</param>
            <param name="lineColor">Color used to draw lines</param>
            <param name="colorAxisX">Color used to draw X axis</param>
            <param name="colorAxisY">Color used to draw Y axis</param>
            <param name="autoSize">If true, the grid is resized automatically.</param>
            <param name="visible">Visibility status</param>
            <param name="alwaysBehind">If true, the grids is drawn always behind the geometry</param>
            <param name="autoStep">If true, the grid real step is a multiple of the Step to keep the number of lines between MinLines and MaxLines</param>
            <param name="minNumberOfLines">If AutoStep is true, defines the Minimum number of lines</param>
            <param name="maxNumberOfLines">If AutoStep is true, defines the Maximum number of lines</param>
            <param name="majorLinesEvery">The number of steps between two major lines</param>
            <param name="majorLineColor">Color used to draw major lines</param>
            <param name="fillColor">Color used to draw the grid plane</param>
        </member>
        <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Eyeshot.Grid)">
            <summary>
            Copy constructor.
            </summary>
            <param name="other">The other grid</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Grid.Draw(devDept.Eyeshot.Viewport,System.Int32,devDept.Eyeshot.Grid.partToDrawType)" -->
        <member name="M:devDept.Eyeshot.Grid.Draw(devDept.Graphics.RenderContextBase)">
            <summary>
            Draws the grid lines.
            </summary>
            <param name="context">The render context</param>
        </member>
        <member name="P:devDept.Eyeshot.Grid.Min">
            <summary>Gets or sets the grid minimum 2D point relative to the grid plane.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.Max">
            <summary>Gets or sets the grid maximum 2D point relative to the grid plane.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.Step">
            <summary>Gets or sets the step between grid lines (meaningful only when <see cref="P:devDept.Eyeshot.Grid.AutoStep"/> is false).</summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.LineColor">
            <summary>Gets or sets the color used to draw lines.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.ColorAxisX">
            <summary>Gets or sets the color used to draw axis X.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.ColorAxisY">
            <summary>Gets or sets the color used to draw axis Y.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.FillColor">
            <summary>Gets or sets the color used to draw the grid plane.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.AutoSize">
            <summary>If true, the grid is resized automatically every time the model's bounding box changes.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.Visible">
            <summary>Grid visibility status.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.Plane">
            <summary>
            Grid plane.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.AlwaysBehind">
            <summary>
            If true, the grids is drawn always behind the geometry.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.AutoStep">
            <summary>If true, the grid real step is a multiple of the <see cref="P:devDept.Eyeshot.Grid.Step"/> to keep the number of lines between <see cref="P:devDept.Eyeshot.Grid.MinNumberOfLines"/> and <see cref="P:devDept.Eyeshot.Grid.MaxNumberOfLines"/>.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.MajorLinesEvery">
            <summary>
            Gets or sets the number of steps between two major lines.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.MajorLineColor">
            <summary>
            Color used to draw major lines.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.MinNumberOfLines">
            <summary>
            If <see cref="P:devDept.Eyeshot.Grid.AutoStep"/> is true, defines the Minimum number of lines.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Grid.MaxNumberOfLines">
            <summary>
            If <see cref="P:devDept.Eyeshot.Grid.AutoStep"/> is true, defines the Maximum number of lines.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Grid.partToDrawType">
            <summary>
            Defines the part of the grid to draw.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Arc">
            <summary>
            Utility class to write an Circular arc (Type 100) in IGES format
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.PlanarEntity">
            <summary>
            Base class for all IGES planar entities
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Arc.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.ConicArc">
            <summary>
            Utility class to write a Conic (Type 104) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.ConicArc.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.TabulatedSurface">
            <summary>
            Utility class to read/write a Tabulated surface (Type 122) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.TabulatedSurface.#ctor(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Point3D,devDept.Eyeshot.Entities.colorMethodType,System.Int32,System.Drawing.Color)">
            <summary>
            Tabulated surface entity constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.TabulatedSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Plane">
            <summary>
            Utility class to read/write a Plane Entity (Type 108) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Plane.#ctor(devDept.Geometry.Point3D,devDept.Geometry.PlaneEquation,System.Single,devDept.Eyeshot.Entities.colorMethodType,System.Int32,System.Drawing.Color)">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Plane.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Iges.Text">
            <summary>
            Utility class to read/write a General Note (Type 212) in IGES format
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Iges.Text.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Used during import.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Labels.OutlinedText">
            <summary>
            Outlined text label.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Labels.OutlinedText.#ctor(System.Double,System.Double,System.Double,System.String,System.Drawing.Font)">
            <summary>
            Standard constructor.
            </summary>
            <param name="x">Anchor point X coord.</param>
            <param name="y">Anchor point Y coord.</param>
            <param name="z">Anchor point Z coord.</param>
            <param name="text">Label text</param>
            <param name="textFont">Text font</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.OutlinedText.#ctor(System.Double,System.Double,System.Double,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment)">
            <summary>
            Standard constructor.
            </summary>
            <param name="x">Anchor point X coord</param>
            <param name="y">Anchor point Y coord</param>
            <param name="z">Anchor point Z coord</param>
            <param name="text">Label text</param>
            <param name="textFont">Text font</param>
            <param name="textColor">A <see cref="T:System.Drawing.Color"/> structure that indicates the text color of this label</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.OutlinedText.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color)">
            <summary>
            Standard constructor.
            </summary>
            <param name="p">Anchor point</param>
            <param name="text">Label text</param>
            <param name="textFont">Text font</param>
            <param name="textColor">A <see cref="T:System.Drawing.Color"/> structure that indicates the text color of this label</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.OutlinedText.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment)">
            <summary>
            <see cref="T:devDept.Geometry.Point3D"/> constructor.
            </summary>
            <param name="p">Anchor point</param>
            <param name="text">Label text</param>
            <param name="textFont">Text font</param>
            <param name="textColor">A <see cref="T:System.Drawing.Color"/> structure that indicates the text color of this label</param>
            <param name="alignment">Text alignment</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.OutlinedText.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Labels.OutlinedText.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Labels.OutlinedText.OutlineColor">
            <summary>
            Gets or sets the outline color.
            </summary>
            <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen"/> to apply the changes.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.Entities.ConicBar">
            <summary>
            Conic Bar entity. A line drawn like a cone.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ConicBar.Clone">
            <summary>
            Creates a deep copy of this conic bar.
            </summary>
            <returns>The new conic bar object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ConicBar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.ConicBar.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ConicBar.BaseRadius">
            <summary>
            Gets or sets the base radius of the ConicBar.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.ConicBar.TopRadius">
            <summary>
            Gets or sets the top radius of the ConicBar.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Ellipse">
            <summary>
            Ellipse entity.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.#ctor(devDept.Geometry.Point3D,System.Double,System.Double)">
            <summary>Ellipse parallel to XY plane constructor.</summary>
            <param name="center">3D center point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Ellipse parallel to XY plane constructor.</summary>
            <param name="x">Center's X coordinate</param>
            <param name="y">Center's Y coordinate</param>
            <param name="z">Center's Z coordinate</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double,System.Double)">
            <summary>Plane, center, radius X and radius Y constructor.</summary>
            <param name="ellipsePlane">Plane</param>
            <param name="center">2D center point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double)">
            <summary>Ellipse not parallel to XY plane constructor.</summary>
            <param name="ellipsePlane">Plane</param>
            <param name="center">3D center point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.Clone">
            <summary>
            Creates a deep copy of this ellipse.
            </summary>
            <returns>The new ellipse object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.IsInPlane(devDept.Geometry.Plane,System.Double)">
            <summary>
            Checks if the Ellipse lies on a specific plane.
            </summary>
            <param name="testPlane">The plane</param>
            <param name="tolerance">Tolerance</param>
            <returns>True if the test succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.IsPointInside(devDept.Geometry.Point3D)">
            <summary>
            Checks if a point is inside the Ellipse.
            </summary>
            <param name="testPoint">The point to be tested</param>
            <returns>True if the point is inside, false if it is outside or on the ellipse.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.GetFoci(devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
            <summary>Gets ellipse's foci.</summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.PointAt(System.Double)">
            <summary>Evaluates a point on the ellipse using the trigonometric parameterization.</summary>
            <param name="t">The parameter</param>
            <returns>The 3D point.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.TangentAt(System.Double)">
            <summary>
            Evaluates the unit tangent vector at a parameter.
            </summary>
            <param name="t">The parameter</param>
            <returns>The unit tangent.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.CurvatureAt(System.Double)">
            <summary>
            Evaluates the curvature 3D vector.
            </summary>
            <param name="t">Evaluation parameter</param>
            <returns>The 3D curvature vector.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Ellipse.Length">
            <summary>
            Gets the ellipse length.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Ellipse.IsCircle">
            <summary>Returns true if Ellipse is a Circle.</summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Ellipse.RadiusX">
            <summary>
            Gets or sets ellipse's X radius.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Ellipse.RadiusY">
            <summary>
            Gets or sets ellipse's Y radius.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Ellipse.Center">
            <summary>
            Gets ellipse's center.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Ellipse.FocalDistance">
            <summary>
            Distance between foci, commonly called "2c".
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Ellipse.Domain">
            <summary>
            Gets or sets the ellipse's domain.
            The parameter t on an ellipse is not the angle of ellipse.PointAt(t) with the X-axis, even if t is in [0, 2*PI].
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.EllipticalArc">
            <summary>
            Elliptical arc entity.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.EllipticalArc.angle">
            <summary>Angle interval.</summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
            <summary>Arc parallel to XY plane constructor.</summary>
            <param name="center">3D center point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="endParameter">Span parameter [0, endParameter]</param>
            <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Arc parallel to XY plane constructor.</summary>
            <param name="x">Center's X coordinate</param>
            <param name="y">Center's Y coordinate</param>
            <param name="z">Center's Z coordinate</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="endParameter">Span parameter will be [0, endParameter]</param>
            <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Point3D,System.Double,System.Double,System.Double,System.Double)">
            <summary>Arc parallel to XY plane constructor.</summary>
            <param name="center">3D center point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="startParameter">Start parameter</param>
            <param name="endParameter">End parameter</param>
            <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Point3D,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>Arc parallel to XY plane constructor.</summary>
            <param name="center">3D center point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="startAngleInRadians">Start angle in radians</param>
            <param name="endAngleInRadians">End angle in radians</param>
            <param name="polarAngles">When True the two previous parameters represent angles from the X-axis, otherwise they represent parameters on the ellipse.</param>
            <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Arc parallel to XY plane constructor.</summary>
            <param name="x">Center's X coordinate</param>
            <param name="y">Center's Y coordinate</param>
            <param name="z">Center's Z coordinate</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="startParameter">Start parameter</param>
            <param name="endParameter">End parameter</param>
            <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>Arc parallel to XY plane constructor.</summary>
            <param name="x">Center's X coordinate</param>
            <param name="y">Center's Y coordinate</param>
            <param name="z">Center's Z coordinate</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="startAngleInRadians">Start angle in radians</param>
            <param name="endAngleInRadians">End angle in radians</param>
            <param name="polarAngles">When True the two previous parameters represent angles from the X-axis, otherwise they represent parameters on the ellipse.</param>
            <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
            <summary>Arc not parallel to XY plane constructor.</summary>
            <param name="arcPlane">Plane</param>
            <param name="center">3D center point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="endParameter">Span parameter will be [0, endParameter]</param>
            <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,System.Double,System.Double)">
            <summary>Arc not parallel to XY plane constructor.</summary>
            <param name="arcPlane">Plane</param>
            <param name="center">3D center point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="startParameter">Start parameter</param>
            <param name="endParameter">End parameter</param>
            <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>Arc not parallel to XY plane constructor.</summary>
            <param name="arcPlane">Plane</param>
            <param name="center">3D center point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="startAngleInRadians">Start angle in radians</param>
            <param name="endAngleInRadians">End angle in radians</param>
            <param name="polarAngles">When True the two previous parameters represent angles from the X-axis, otherwise they represent parameters on the ellipse.</param>
            <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double,System.Double,System.Double,System.Double)">
            <summary>Sketch plane constructor.</summary>
            <param name="arcPlane">Plane</param>
            <param name="center">2D center point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="startParameter">Start parameter</param>
            <param name="endParameter">End parameter</param>
            <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>Sketch plane constructor.</summary>
            <param name="arcPlane">Plane</param>
            <param name="center">2D center point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="startAngleInRadians">Start angle in radians</param>
            <param name="endAngleInRadians">End angle in radians</param>
            <param name="polarAngles">When True the two previous parameters represent angles from the X-axis, otherwise they represent parameters on the ellipse.</param>
            <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
            <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)"/>
            <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Boolean)">
            <summary>Plane, center, radius X, radius Y, start and end point constructor.</summary>
            <param name="arcPlane">Plane</param>
            <param name="center">3D center point</param>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="start">3D start point</param>
            <param name="end">3D end point</param>
            <param name="flip">If true, the complementary arc is created.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.Clone">
            <summary>
            Creates a deep copy of this elliptical arc.
            </summary>
            <returns>The new elliptical arc object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.GetIntervalOfAngles(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Gets an interval of angles corresponding to and interval of parameters.
            </summary>
            <param name="rx">Radius X</param>
            <param name="ry">Radius Y</param>
            <param name="startParam">Start parameter</param>
            <param name="endParam">End parameter</param>
            <param name="startAngleInRadians">Start angle in radians</param>
            <param name="endAngleInRadians">End angle in radians</param>
            <returns>True if the interval of parameters is decreasing.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.TrimBy(devDept.Geometry.Point3D,System.Boolean)">
            <summary>
            Trims the arc at the limit point projection.
            </summary>
            <param name="limit">The limit point</param>
            <param name="flipSide">The flip side flag</param>
            <returns>True if the operation is successful, false otherwise.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.Length">
            <summary>
            Gets elliptical arc length. Only Nurbs and Ultimate editions provide accurate values.
            </summary>
            <returns>The curve length.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.EllipticalArc.AngleInRadians">
            <summary>
            Gets arc's angle in radians.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.EllipticalArc.AngleInDegrees">
            <summary>
            Gets arc's angle in degrees.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.EllipticalArc.Domain">
            <summary>
            Gets or sets the elliptical arc's domain.
            The parameter t on an elliptical arc is not the angle of ellipticalArc.PointAt(t) with the X-axis, even if t is in [0, 2*PI].
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Box3D">
            <summary>
            Defines a 3D box.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.BlockReference">
            <summary>
            BlockReference entity.
            </summary>
            <remarks>
            Please note that scaling entities of the <see cref="T:devDept.Eyeshot.Entities.Mesh"/> family is not
            recommended. It will result in color alteration because scaling is applied also to
            triangles normal.
            </remarks>
            <seealso cref="T:devDept.Eyeshot.Block"/>
            <seealso cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/>
        </member>
        <member name="F:devDept.Eyeshot.Entities.BlockReference.transformedEntityBoxes">
            <summary>
            Dictionary of the transformed boxes of each sub-entity, to avoid recomputing the BoundingBoxes of the entities that have not changed when doing a Regen().
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.GetFullTransformation``1(System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Gets the BlockReference transformation combined with the <see cref="P:devDept.Eyeshot.Block.BasePoint"/> position.
            </summary>
            <param name="blocks">The blocks dictionary</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(System.Double,System.Double,System.Double,System.String,System.Double)">
            <summary>
            Individual insertion point coordinates constructor.
            </summary>
            <param name="x">Insertion point's X coordinates</param>
            <param name="y">Insertion point's Y coordinates</param>
            <param name="z">Insertion point's Z coordinates</param>
            <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block"/> to be inserted</param>
            <param name="rotationAngleInRadians">Rotation angle in radians</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Individual insertion point coordinates and scale constructor.
            </summary>
            <param name="x">Insertion point's X coordinates</param>
            <param name="y">Insertion point's Y coordinates</param>
            <param name="z">Insertion point's Z coordinates</param>
            <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block"/> to be inserted</param>
            <param name="sx">Scale factor along X axis</param>
            <param name="sy">Scale factor along Y axis</param>
            <param name="sz">Scale factor along Z axis</param>
            <param name="rotationAngleInRadians">Rotation angle in radians</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(devDept.Geometry.Point3D,System.String,System.Double)">
            <summary>
            3D insertion point constructor.
            </summary>
            <param name="insPoint">Insertion point</param>
            <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block"/> to be inserted</param>
            <param name="rotationAngleInRadians">Rotation angle in radians</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            3D insertion point and scale constructor.
            </summary>
            <param name="insPoint">Insertion point</param>
            <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block"/> to be inserted</param>
            <param name="sx">Scale factor along X axis</param>
            <param name="sy">Scale factor along Y axis</param>
            <param name="sz">Scale factor along Z axis</param>
            <param name="rotationAngleInRadians">Rotation angle in radians</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(devDept.Geometry.Transformation,System.String)">
            <summary>
            3D insertion point constructor.
            </summary>
            <param name="t">Transformation object</param>
            <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block"/> to be inserted</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.Clone">
            <summary>
            Creates a deep copy of this block reference.
            </summary>
            <returns>The new block reference object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.GetBlockUnits(devDept.Eyeshot.BlockDictionary)">
            <summary>
            Gets the block definition linear units.
            </summary>
            <param name="blocks">The <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/> collection</param>
            <returns>The referenced block linear units.</returns>
        </member>
        <member name="F:devDept.Eyeshot.Entities.BlockReference.maxScaleFactor">
            <summary>
            Used to multiply adjust the screenToViewport coefficient
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.GetBlocksNamesInternal(System.Collections.Generic.Dictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            Gets all the blocks names used by the BlockReference (recursive loop).
            </summary>
            <param name="blocks">The blocks dictionary.</param>
            <param name="blockNameList">The list of the blocks names.</param>
            <param name="includeCurrentBlock">When true the name of the current block is added to the list.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.Explode(System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block})">
            <summary>
            Returns the block reference individual entity list.
            </summary>
            <param name="blocks">The <see cref="P:devDept.Eyeshot.ViewportLayout.Blocks"/> collection</param>
            <returns>The list of individual entities.</returns>
            <seealso cref="M:devDept.Eyeshot.EntityList.Explode(devDept.Eyeshot.Entities.BlockReference)"/>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.MoveTo(devDept.Eyeshot.DrawParams)">
            <summary>
            Allow the entity to be moved/rotated on the GPU using OpenGL calls during
            animation.
            </summary>
            <remarks>
            	<para>There is no need to encapsulate the transformations into the gl.PushMatrix()
                / gl.PopMatrix() calls</para>
            	<para>It is always recommended to call base class implementation from
                overriders.</para>
            </remarks>
            <example>
                The following code demonstrates how to animate a subclassed BlockReference entity.
                <code lang="CS" title="[New Example]">
            		<![CDATA[
            class Oscillating : BlockReference
            {
             
            double alpha;
             double beta;
             double xPos;
             
            public Oscillating(string blockName)
             : base(0, 0, 0, blockName, 1, 1, 1, 0)
             {
             }
             
            protected override void Animate(int frameNumber)
             {
             
            alpha += 1;
             
            if (alpha &gt; 359)
             
            alpha = 0;
             
            // cranckshaft radius
             double r = 50;
             // connecting rod length
             double l = 120;
             
            beta = Math.Asin(r * Math.Sin(Utility.DegToRad(alpha)) / l);
             
            xPos = r * Math.Cos(Utility.DegToRad(alpha)) - l * Math.Cos(beta);
             
            }
             
            public override void MoveTo()
             {
             
            base.MoveTo();
             
            gl.Translated(xPos, 0, 0); 
            gl.Rotated(Utility.RadToDeg(beta), 0, 1, 0);
             
            }
             
            }]]>
            	</code>
            	<code lang="VB" title="[New Example]">
            		<![CDATA[
            Class Oscillating
             Inherits BlockReference
             
            Private alpha As Double
             Private beta As Double
             Private xPos As Double
             
            Public Sub New(ByVal blockName As String)
             MyBase.New(0, 0, 0, blockName, 1, 1, _ 
            1, 0)
             End Sub
             
            Protected Overloads Overrides Sub Animate(ByVal frameNumber As Integer)
             
            alpha += 1
             
            If alpha &gt; 359 Then
             
            alpha = 0
             
            End If
             
            ' cranckshaft radius
             Dim r As Double = 50
             ' connecting rod length
             Dim l As Double = 120
             
            beta = Math.Asin(r * Math.Sin(Utility.DegToRad(alpha)) / l)
             
            xPos = r * Math.Cos(Utility.DegToRad(alpha)) - l * Math.Cos(beta)
             
            End Sub
             
            Public Overloads Overrides Sub MoveTo()
             
            MyBase.MoveTo()
             
            gl.Translated(xPos, 0, 0)
             
            gl.Rotated(Utility.RadToDeg(beta), 0, 1, 0)
             
            End Sub
             
            End Class]]>
            	</code>
            </example>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StartAnimation(System.Int32)">StartAnimation Method (devDept.Eyeshot.Viewport)</seealso>
            <seealso cref="M:devDept.Eyeshot.ViewportLayout.StopAnimation">StopAnimation Method (devDept.Eyeshot.Viewport)</seealso>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.Transform(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.Dictionary{System.String,devDept.Eyeshot.Block})">
            <summary>
            Applies the block reference transformation to a list of 3D points.
            </summary>
            <param name="points">A list of 3D points</param>
            <param name="blocks">Blocks dictionary</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.BlockReference.SynchronizeAttributes(System.Collections.Generic.Dictionary{System.String,devDept.Eyeshot.Block})">
            <summary>
            Updates the data of <see cref="P:devDept.Eyeshot.Entities.BlockReference.Attributes"/> with the data of the <see cref="T:devDept.Eyeshot.Entities.Attribute"/> entities contained in the block.
            </summary>
            <param name="blocks">The blocks dictionary</param>
            <remarks>AttributeReference entities that don't have a corresponding Attribute in the block are removed. The <see cref="P:devDept.Eyeshot.AttributeReference.Value"/> is preserved.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.BlockReference.Attributes">
            <summary>
            Gets the dictionary of AttributeReference.
            </summary>
            <remarks>The suffixes "#1", "#2" etc... are used to distinguish between different AttributeReferences with the same tag name when reading from dwg and are removed from the tag names when the file is written to dwg.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.BlockReference.AccumulatedParentsTransform">
            <summary>
            Gets the global transformation given by the current BlockReference's transformation and its parents' ones.
            </summary>
            <remarks>The BlockReference must have been set as current with <see cref="M:devDept.Eyeshot.EntityList.SetCurrent(devDept.Eyeshot.Entities.BlockReference)"/>.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.BlockReference.BlockName">
            <summary>
            Gets or sets the name of the referenced <see cref="T:devDept.Eyeshot.Block"/>.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.BlockReference.InsertionPoint">
            <summary>
            Gets or sets the insertion point for this block reference.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.BlockReference.ScaleFactorX">
            <summary>
            Gets the scale factor along X.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.BlockReference.ScaleFactorY">
            <summary>
            Gets the scale factor along Y.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.BlockReference.ScaleFactorZ">
            <summary>
            Gets the scale factor along Z.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.BlockReference.Transformation">
            <summary>
            Gets or sets the transformation matrix for this block reference.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.PointCloud">
            <summary>
            	<para>Point cloud entity. Depending on the types of vertices can assume
                different configurations, see table below:</para>
            	<para>
            		<list type="table">
            			<item>
            				<term>
            					<see cref="T:devDept.Geometry.Point3D"/>
            				</term>
            				<description>
            					<see cref="T:devDept.Geometry.PointRGB"/>
            				</description>
            			</item>
            			<item>
            				<term>Plain</term>
            				<description>Multicolor</description>
            			</item>
            		</list>
            	</para>
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PointCloud.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point3D})">
            <summary>Standard constructor.</summary>
            <param name="points">The collection of 3D points</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PointCloud.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Single)">
            <summary>Point list and point size constructor.</summary>
            <param name="points">The collection of 3D points</param>
            <param name="pointSize">On screen point size</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PointCloud.#ctor(System.Int32,System.Single,devDept.Eyeshot.Entities.PointCloud.natureType)">
            <summary>Point list, point size and point cloud nature constructor.</summary>
            <param name="numPoints">Number of point the point cloud will hold</param>
            <param name="pointSize">On screen point size</param>
            <param name="nature">The point cloud nature</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PointCloud.Clone">
            <summary>
            Creates a deep copy of this point cloud.
            </summary>
            <returns>The new point cloud object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PointCloud.FitLine(devDept.Geometry.Point3D@,devDept.Geometry.Vector3D@)">
            <summary>
            Fits a line to the point cloud vertices.
            </summary>
            <param name="p">The line start point</param>
            <param name="v">The line direction</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PointCloud.FitCircle(devDept.Geometry.Plane@,System.Double@)">
            <summary>
            Fits a circle to the point cloud vertices.
            </summary>
            <param name="pln">The plane of the circle, whose origin is the center of the circle</param>
            <param name="radius">The radius of the circle</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PointCloud.FitPlane">
            <summary>
            Fits a plane to the point cloud vertices.
            </summary>
            <returns>The plane.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PointCloud.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PointCloud.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PointCloud.ConvertToFastPointCloud">
            <summary>
            Converts this point cloud into a FastPointCloud.
            </summary>
            <returns>The resulting FastPointCloud.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.PointCloud.Nature">
            <summary>
            Gets point cloud nature.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.PointCloud.DrawingStyle">
            <summary>
            Gets or sets point cloud drawing style.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.PointCloud.Vertices">
            <summary>
            Gets or sets point cloud's 3D vertices.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.PointCloud.natureType">
            <summary>
            Point cloud nature type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.PointCloud.natureType.Undefined">
            <summary>
            Not yet defined
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.PointCloud.natureType.Plain">
            <summary>
            Plain, all the points of the same color.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.PointCloud.natureType.Multicolor">
            <summary>
            Multicolor, one color for each point.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.PointCloud.drawingStyleType">
            <summary>
            Point cloud drawing style type.
            </summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.PointCloud.drawingStyleType.Points">
            <summary>Points only</summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.PointCloud.drawingStyleType.Lines">
            <summary>Lines only</summary>
        </member>
        <member name="F:devDept.Eyeshot.Entities.PointCloud.drawingStyleType.PointsAndLines">
            <summary>Both points and lines</summary>
        </member>
        <member name="T:devDept.Eyeshot.Triangulation.EarClipping">
            <summary>2D triangulation by Ear Clipping method.</summary>
            <seealso cref="T:devDept.Eyeshot.Triangulation.Delaunay">Delaunay Class</seealso>
            <seealso cref="T:devDept.Eyeshot.Triangulation.Mesher">Mesher Class</seealso>
            <example>
            The following sample demonstrates how to triangulate two contours. The checkDir parameter is set to false because the contours are already
            properly oriented.
            <code lang="CS">
            Point2D[] outer = new Point2D[]
                                    {
                                        new Point2D(0, 0),
                                        new Point2D(10, 0),
                                        new Point2D(10, 6),
                                        new Point2D(0, 6),
                                        new Point2D(0, 0)
                                    };
             
            Point2D[] inner = new Point2D[]
                                    {
                                        new Point2D(2, 2),
                                        new Point2D(2, 3),
                                        new Point2D(6, 2),
                                        new Point2D(2, 2)
                                    };
                        
            EarClipping ea = new EarClipping(outer, new Point2D[][] { inner }, false);
             
            Mesh m = ea.Triangulate(Mesh.natureType.MulticolorSmooth);
             
            viewport1.Entities.Add(m, 0, Color.Coral);
            </code>
            <code lang="VB.NET">
            Dim outer As Point2D() = New Point2D() 
                                     {
                                        New Point2D(0, 0), 
                                        New Point2D(10, 0), 
                                        New Point2D(10, 6), 
                                        New Point2D(0, 6), 
                                        New Point2D(0, 0)
                                     }
             
            Dim inner As Point2D() = New Point2D() 
                                     {
                                        New Point2D(2, 2), 
                                        New Point2D(2, 3), 
                                        New Point2D(6, 2), 
                                        New Point2D(2, 2)
                                     }
             
            Dim ea As New EarClipping(outer, New Point2D()() {inner}, False)
             
            Dim m As Mesh = ea.Triangulate(Mesh.natureType.MulticolorSmooth)
             
            Viewport1.Entities.Add(m, 0, Color.Coral)</code></example>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.EarClipping.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point2D}},System.Boolean)">
            <summary>
            Point2D loops constructor.
            </summary>
            <param name="outerLoop">The outer loop (oriented counter-clockwise)</param>
            <param name="innerLoops">The inner loops list (oriented clockwise). Can be null/Nothing.</param>
            <param name="checkDir">If true, loops orientation is checked and reversed if necessary.</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.EarClipping.Triangulate(devDept.Geometry.Point2D[]@,devDept.Geometry.IndexTriangle[]@)">
            <summary>
            Performs triangulation and output result in the <paramref name="ecVertices"/> and <paramref name="ecTriangles"/> arrays.
            </summary>
            <param name="ecVertices">The vertices array</param>
            <param name="ecTriangles">The triangles array</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.EarClipping.FlippingDelaunayStep(devDept.Geometry.Point2D[],devDept.Geometry.IndexTriangle[])">
            <summary>
            Changes triangle edges so that all triangles satisfy the Delaunay condition to get a better tessellation
            </summary>
            <param name="vertices"></param>
            <param name="triangles"></param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.EarClipping.FlipTriangle(devDept.Geometry.IndexTriangle,devDept.Geometry.IndexTriangle,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.LinkedList{devDept.Geometry.SharedEdge}[])">
            <summary>
            Changes the 2 adjacent triangles so that their common edge v1-v2 becomes vA-vB
            </summary>
            <param name="tri1">first triangle</param>
            <param name="tri2">second triangle</param>
            <param name="v1">common edge vertex with minimm index</param>
            <param name="v2">common edge second vertex with maximum index</param>
            <param name="vA">first triangle third vertex</param>
            <param name="vB">second triangle third vertex</param>
            <param name="edgesPerVertex">shared edges linked list</param>        
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.EarClipping.ChangeSharedEdgeTriangle(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.LinkedList{devDept.Geometry.SharedEdge}[])">
            <summary>
            Adjust the edge v1-v2, changing the old triangle index with the new triangle index
            </summary>
            <param name="v1">edge's first vertex</param>
            <param name="v2">edge's second vertex</param>
            <param name="oldTri1">old mum triangle index</param>
            /// <param name="oldTri2">old dad triangle index</param>
            <param name="newTri">new triangle index</param>
            <param name="edgesPerVertex">shared edges linked list</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.EarClipping.DelaunayCondition(System.Int32,System.Int32,System.Int32,System.Int32,devDept.Geometry.Point2D[])">
            <summary>
            Tests if two triangles meet the Delaunay condition
            </summary>
            <param name="v1">common edge first vertex</param>
            <param name="v2">common edge second vertex</param>
            <param name="vA">first triangle third vertex</param>
            <param name="vB">second triangle third vertex</param>
            <param name="vertices">vertices array</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.EarClipping.Triangulate(devDept.Eyeshot.Entities.Mesh.natureType)">
            <summary>
            Performs triangulation and output result in a ready to use <see cref="T:devDept.Eyeshot.Entities.Mesh"/> entity.
            </summary>
            <param name="meshNature">The desired mesh nature</param>
            <returns>The mesh object.</returns>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.EarClipping.WriteXML(System.String,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point2D}})">
            <summary>
            Write the EarClipping contours to an XML file for debugging purpose.
            </summary>
            <param name="fileName">The file name</param>
            <param name="outer">The outer contour</param>
            <param name="inners">The inner contours</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.EarClipping.WriteXML(System.String,System.Collections.Generic.List{devDept.Geometry.IntPoint},System.Collections.Generic.List{System.Collections.Generic.List{devDept.Geometry.IntPoint}})">
            <summary>
            Write the EarClipping contours to an XML file for debugging purpose.
            </summary>
            <param name="fileName">The file name</param>
            <param name="outer">The outer contour</param>
            <param name="inners">The inner contours</param>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.EarClipping.#ctor(System.String)">
            <summary>
            Loops contructor that loads the contours from a XML file generated by <see cref="M:devDept.Eyeshot.Triangulation.EarClipping.WriteXML(System.String,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point2D}})"/> method, for debugging purpose.
            </summary>
            <param name="fileName">The file name</param>
        </member>
        <member name="F:devDept.Eyeshot.Triangulation.PointTri.connected">
            <summary>
            The list of points along edges added in the current Mesh iteration connected to this point.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Triangulation.PointTri.DistanceInt(devDept.Eyeshot.Triangulation.PointTri,devDept.Eyeshot.Triangulation.PointTri)">
            <summary>
            Returns the distance between the integer components two EC points.
            </summary>
            <param name="a">First point</param>
            <param name="b">Second point</param>
            <returns>The squared distance between a and b.</returns>
        </member>
        <member name="M:devDept.Eyeshot.BinarySpacePartitioning.PartitionFaceListWithPlane(devDept.Eyeshot.BinarySpacePartitioning.Plane,devDept.Eyeshot.BinarySpacePartitioning.Face@,devDept.Eyeshot.BinarySpacePartitioning.Face@,devDept.Eyeshot.BinarySpacePartitioning.Face@,devDept.Eyeshot.BinarySpacePartitioning.Face@,devDept.Eyeshot.BinarySpacePartitioning.Face@)">
            <summary>
            Partitions a 3D convex polygon (face) with an arbitrary plane into its 
            negative and positive fragments, if any, w.r.t. the partitioning plane.
            Note that faceList is unusable afterwards since its vertex list has been
            parceled out to the other faces. It's set to null to avoid dangling
            pointer problem. Faces embedded in the plane are separated into two lists,
            one facing the same direction as the partitioning plane, faceSameDir, and 
            the other facing the opposite direction, faceOppDir.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.BinarySpacePartitioning.FindNextIntersection(devDept.Eyeshot.BinarySpacePartitioning.Vertex,devDept.Eyeshot.BinarySpacePartitioning.Plane,devDept.Eyeshot.BinarySpacePartitioning.Vertex@,devDept.Eyeshot.BinarySpacePartitioning.Sign@)">
            <summary>
            Finds next intersection on or after vstart. 
            </summary>
            <returns>If an intersection is found, a pointer to first vertex of the edge is returned, 
            the intersection point (ixx,iyy,izz) and its sign is updated. 
            Otherwise a null pointer is returned.</returns>
        </member>
        <member name="M:devDept.Eyeshot.BinarySpacePartitioning.CreateOtherFace(devDept.Eyeshot.BinarySpacePartitioning.Face,devDept.Eyeshot.BinarySpacePartitioning.Vertex,devDept.Eyeshot.BinarySpacePartitioning.Vertex,devDept.Eyeshot.BinarySpacePartitioning.Vertex,devDept.Eyeshot.BinarySpacePartitioning.Vertex)">
            <summary>
            Memory allocated for split face's vertices and pointers tediously updated.
            face - face to be split
            v1   - 1st vertex of edge of where 1st intersection was found 
            (ixx1,iyy1,izz1) - 1st intersection
            v2   - 1st vertex of edge of where 2nd intersection was found 
            (ixx2,iyy2,izz2) - 2nd intersection
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.BinarySpacePartitioning.WhichSideIsFaceWRTplane(devDept.Eyeshot.BinarySpacePartitioning.Face,devDept.Eyeshot.BinarySpacePartitioning.Plane)">
            <summary>
            Determines which side a face is with respect to a plane. However, due to numerical problems, when a face is very close to the plane,
            some vertices may be misclassified. 
            There are several solutions, two of which are mentioned here:
              1) classify the one vertex furthest away from the plane, (note that
                 one need not compute the actual distance) and use that side.
              2) count how many vertices lie on either side and pick the side
                 with the maximum. (this is the one implemented).
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.BinarySpacePartitioning.ConstructTree(devDept.Eyeshot.BinarySpacePartitioning.Face)">
            <summary>
            Returns a BSP tree of scene from a list of convex faces.
            These faces' vertices are oriented in counterclockwise order where the last 
            vertex is a duplicate of the first, i.e., a square has five vertices.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.BinarySpacePartitioning.TraverseTreeAndRender(devDept.Eyeshot.displayType,devDept.Eyeshot.BinarySpacePartitioning.Node,devDept.Geometry.Point3D,devDept.Geometry.Vector3D,devDept.Eyeshot.BinarySpacePartitioning.CheckPlaneDelegate,devDept.Graphics.IEnvironment,System.Drawing.Color)">
            <summary>
            Traverses BSP tree to render scene back-to-front based on viewer position.
            </summary>
            <param name="displayMode">The display mode of the viewport to draw</param>
            <param name="bspNode">a node in BSP tree</param>
            <param name="position">position of viewer</param>
            <param name="viewNormal">view normal</param>
            <param name="checkPlaneFunc">delegate to the function that performs the positive-plane check</param>
            <param name="environment"></param>
        </member>
        <member name="M:devDept.Eyeshot.BinarySpacePartitioning.TraverseTreeAndRender(devDept.Eyeshot.BinarySpacePartitioning.Node,devDept.Geometry.Point3D,devDept.Geometry.Vector3D,devDept.Eyeshot.BinarySpacePartitioning.CheckPlaneDelegate,devDept.Graphics.IEnvironment,System.Drawing.Color,devDept.Eyeshot.BinarySpacePartitioning.DrawFaceListDelegate)">
            <summary>
            Traverses BSP tree to render scene back-to-front based on viewer position.
            </summary>
            <param name="bspNode">a node in BSP tree</param>
            <param name="position">position of viewer</param>
            <param name="viewNormal">view normal</param>
            <param name="checkPlaneFunc">delegate to the function that performs the positive-plane check</param>
            <param name="environment"></param>
            <param name="selectionColor"> </param>
            <param name="drawFaceListDelegate"></param>
        </member>
        <member name="M:devDept.Eyeshot.BinarySpacePartitioning.IsViewerInPositiveSideOfPlanePerspective(devDept.Eyeshot.BinarySpacePartitioning.Plane,devDept.Geometry.Point3D,devDept.Geometry.Vector3D)">
            <summary>
            Returns a boolean to indicate whether or not point is in + side of plane.
            </summary>
            <param name="plane">plane </param>
            <param name="position">position of point</param>
            <param name="normal">view normal</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.BinarySpacePartitioning.IsViewerInPositiveSideOfPlaneOrthographic(devDept.Eyeshot.BinarySpacePartitioning.Plane,devDept.Geometry.Point3D,devDept.Geometry.Vector3D)">
            <summary>
            Returns a boolean to indicate whether or not point is in + side of plane.
            </summary>
            <param name="plane">plane </param>
            <param name="position">position of point</param>
            <param name="normal">view normal</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Eyeshot.BinarySpacePartitioning.ChoosePlane(devDept.Eyeshot.BinarySpacePartitioning.Face,devDept.Eyeshot.BinarySpacePartitioning.Plane@)">
            <summary>
            Chooses plane with which to partition. 
            The algorithm is to examine the first MAX_CANDIDATES on face list. For
            each candidate, count how many splits it would make against the scene.
            Then return the one with the minimum amount of splits as the 
            partitioning plane.
            </summary>
            <param name="faceList">list of faces</param>
            <param name="plane">plane equation returned</param>
        </member>
        <member name="M:devDept.Eyeshot.BinarySpacePartitioning.DoesFaceStraddlePlane(devDept.Eyeshot.BinarySpacePartitioning.Face,devDept.Eyeshot.BinarySpacePartitioning.Plane)">
            <summary>
            Returns a boolean to indicate whether the face straddles the plane.
            </summary>
            <param name="face">face to check</param>
            <param name="plane">plane</param>
        </member>
        <member name="M:devDept.Eyeshot.BinarySpacePartitioning.Vertex.AnyEdgeIntersectWithPlane(devDept.Eyeshot.BinarySpacePartitioning.Vertex,devDept.Eyeshot.BinarySpacePartitioning.Plane,devDept.Eyeshot.BinarySpacePartitioning.Vertex@)">
            <summary>
            Determines if an edge bounded by (x1,y1,z1).(x2,y2,z2) intersects the plane.
            </summary>
            <returns>If there's an intersection, the sign of (x1,y1,z1), Sign.Negative or Positive, w.r.t. the plane is
            returned with the intersection (ixx,iyy,izz) updated. Otherwise Zero is returned.</returns>
        </member>
        <member name="T:devDept.Eyeshot.BinarySpacePartitioning.Face">
            <summary>
            class that Holds transparency data for shaded mode
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.BinarySpacePartitioning.RenderedFace">
            <summary>
            Class that holds transparency data for Rendered mode or for Rendered and Shaded
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.BinarySpacePartitioning.RenderedTexturedFace">
            <summary>
            Class that holds transparency data for Rendered mode or for Rendered and Shaded
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Translators.WriteASC">
            <summary>
            Helper class to export a <see cref="T:devDept.Eyeshot.Entities.FastPointCloud"/> in ASC file format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteASC.#ctor(devDept.Eyeshot.Entities.FastPointCloud,System.String,System.Char)">
            <summary>
            Standard constructor.
            </summary>
            <param name="fastPointCloud">The <see cref="T:devDept.Eyeshot.Entities.FastPointCloud"/></param>
            <param name="fileName">The file name</param>
            <param name="separator">The separator between coordinates values character</param>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteASC.#ctor(devDept.Eyeshot.Entities.FastPointCloud,System.IO.Stream,System.Char)">
            <summary>
            Standard constructor.
            </summary>
            <param name="fastPointCloud">The <see cref="T:devDept.Eyeshot.Entities.FastPointCloud"/></param>
            <param name="stream">The file stream</param>
            <param name="separator">The separator between coordinates values character</param>
        </member>
        <member name="T:devDept.Eyeshot.Translators.WriteOBJ">
            <summary>
            Helper class to export current model in OBJ file format.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(devDept.Eyeshot.ViewportLayout,System.String,System.Boolean)">
            <summary>
            Standard constructor.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="fileName">The file name (with the *.obj extension)</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(devDept.Eyeshot.ViewportLayout,System.IO.Stream,System.Boolean)">
            <summary>
            Standard constructor with stream.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="stream">The file stream</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>The material file will be NOT written.</remarks>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(devDept.Eyeshot.ViewportLayout,System.String,System.Double,System.Boolean)">
            <summary>
            Tolerance constructor. The exported model will be regenerated with specified tolerance.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="fileName">The file name (with the *.obj extension)</param>
            <param name="tol">Tolerance used to tessellate surface entities</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(devDept.Eyeshot.ViewportLayout,System.IO.Stream,System.Double,System.Boolean)">
            <summary>
            To stream with tolerance constructor. The exported model will be regenerated with specified tolerance.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="stream">The file stream</param>
            <param name="tol">Tolerance used to tessellate surface entities</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>The material file will be NOT written.</remarks>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.IDictionary{System.String,devDept.Graphics.Material},System.String,System.Boolean)">
            <summary>
            Standard constructor.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="matDict">The material dictionary</param>
            <param name="fileName">The file name (with the *.obj extension)</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.IDictionary{System.String,devDept.Graphics.Material},System.IO.Stream,System.Boolean)">
            <summary>
            Standard constructor with stream.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="matDict">The material dictionary</param>
            <param name="stream">The file stream</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>The material file will be NOT written.</remarks>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.IDictionary{System.String,devDept.Graphics.Material},System.String,System.Double,System.Boolean)">
            <summary>
            Tolerance constructor. The exported model will be regenerated with specified tolerance.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="matDict">The material dictionary</param>
            <param name="fileName">The file name (with the *.obj extension)</param>
            <param name="tol">Tolerance used to tessellate surface entities</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.IDictionary{System.String,devDept.Graphics.Material},System.IO.Stream,System.Double,System.Boolean)">
            <summary>
            To stream with tolerance constructor. The exported model will be regenerated with specified tolerance.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="matDict">The material dictionary</param>
            <param name="stream">The file stream</param>
            <param name="tol">Tolerance used to tessellate surface entities</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>The material file will be NOT written.</remarks>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.Translators.WriteSTL">
            <summary>
            Helper class to export current model in STL file format. It supports both binary and ascii file formats.
            </summary> 
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(devDept.Eyeshot.ViewportLayout,System.String,System.Boolean,System.Boolean)">
            <summary>
            Standard constructor.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="fileName">The file name (with *.stl extension)</param>
            <param name="ascii">When true, ASCII STL is used. This file format supports multiple parts.</param>
            <param name="selectedOnly">If true, only selected entities are written.</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(devDept.Eyeshot.ViewportLayout,System.IO.Stream,System.Boolean,System.Boolean)">
            <summary>
            Standard constructor with stream.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="stream">The file stream</param>
            <param name="ascii">When true, ASCII STL is used. This file format supports multiple parts.</param>
            <param name="selectedOnly">If true, only selected entities are written.</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(devDept.Eyeshot.ViewportLayout,System.String,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Tolerance constructor. The exported model will be regenerated with specified tolerance.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="fileName">The file name (with *.stl extension)</param>
            <param name="selectedOnly">If true, only selected entities are written.</param>
            <param name="ascii">When true, ASCII STL is used. This file format supports multiple parts.</param>
            <param name="tol">Tolerance used to tessellate surface entities</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(devDept.Eyeshot.ViewportLayout,System.IO.Stream,System.Double,System.Boolean,System.Boolean)">
            <summary>
            To stream with tolerance constructor. The exported model will be regenerated with specified tolerance.
            </summary>
            <param name="viewportLayout">The <see cref="T:devDept.Eyeshot.ViewportLayout"/> control</param>
            <param name="stream">The file stream</param>
            <param name="selectedOnly">If true, only selected entities are written.</param>
            <param name="ascii">When true, ASCII STL is used. This file format supports multiple parts.</param>
            <param name="tol">Tolerance used to tessellate surface entities</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,System.Boolean)">
            <summary>
            Standard constructor.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="fileName">The file name (with the *.stl extension)</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,System.Boolean)">
            <summary>
            Standard constructor with stream.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="stream">The file stream</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,System.Double,System.Boolean)">
            <summary>
            Tolerance constructor. The exported model will be regenerated with specified tolerance.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="fileName">The file name (with the *.stl extension)</param>
            <param name="tol">Tolerance used to tessellate surface entities</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>If the file already exists, it will be overwritten.</remarks>
        </member>
        <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,System.Double,System.Boolean)">
            <summary>
            To stream with tolerance constructor. The exported model will be regenerated with specified tolerance.
            </summary>
            <param name="entList">The entity list</param>
            <param name="layerList">The layer list</param>
            <param name="blockDict">The block dictionary</param>
            <param name="stream">The file stream</param>
            <param name="tol">Tolerance used to tessellate surface entities</param>
            <param name="selectedOnly">When true, only selected entities are written.</param>
            <remarks>The closing of the stream is delegated to you.</remarks>
        </member>
        <member name="T:devDept.Eyeshot.AttributeReference">
            <summary>
            AutoCAD attribute reference.
            </summary>
            <seealso cref="P:devDept.Eyeshot.Entities.BlockReference.Attributes"/>
        </member>
        <member name="M:devDept.Eyeshot.AttributeReference.#ctor(System.Double,System.Double,System.Double,System.String,System.Double)">
            <summary>
            Individual coordinates constructor.
            </summary>
            <param name="x">Insertion point X-coordinate (determines the <see cref="P:devDept.Eyeshot.AttributeReference.Plane"/> origin)</param>
            <param name="y">Insertion point X-coordinate (determines the <see cref="P:devDept.Eyeshot.AttributeReference.Plane"/> origin)</param>
            <param name="z">Insertion point X-coordinate (determines the <see cref="P:devDept.Eyeshot.AttributeReference.Plane"/> origin)</param>
            <param name="value">Value text</param>
            <param name="height">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.AttributeReference.#ctor(devDept.Geometry.Point3D,System.String,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="insPoint">Insertion point (determines the <see cref="P:devDept.Eyeshot.AttributeReference.Plane"/> origin)</param>
            <param name="value">Value text</param>
            <param name="height">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.AttributeReference.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="pln">Orientation plane</param>
            <param name="insPoint">Insertion point (determines the <see cref="P:devDept.Eyeshot.AttributeReference.Plane"/> origin)</param>
            <param name="value">Text</param>
            <param name="height">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.AttributeReference.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="value">Value text</param>
        </member>
        <member name="M:devDept.Eyeshot.AttributeReference.#ctor(devDept.Eyeshot.AttributeReference)">
            <summary>
            Copy constructor.
            </summary>
            <param name="another">The other AttributeReference</param>
        </member>
        <member name="M:devDept.Eyeshot.AttributeReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Copy constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:devDept.Eyeshot.AttributeReference.SynchronizeAttributes(devDept.Eyeshot.Entities.Attribute)">
            <summary>
            Synchronizes the data of the <see cref="T:devDept.Eyeshot.AttributeReference"/> with the data of the <paramref name="attribute"/>, copying all the data except the <see cref="P:devDept.Eyeshot.AttributeReference.Value"/>.
            </summary>        
            <param name="attribute">The attribute entity from which to copy the data</param>
        </member>
        <member name="M:devDept.Eyeshot.AttributeReference.ToString">
            <summary>
            Converts this AttributeReference to a human readable string.
            </summary>
            <returns>A string that represents this 3d point.</returns>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.Data">
            <summary>
            Gets the <see cref="T:devDept.Eyeshot.Entities.AttributeBase"/> inner field.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.Invisible">
            <summary>
            Autodesk attribute mode. The attribute text is invisible. Note that the ATTDISP system variable can override this setting. 
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.Constant">
            <summary>
            Autodesk attribute mode. The attribute text is a fixed value and the value is preset.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.Verify">
            <summary>
            Autodesk attribute mode. The attribute value is entered twice; upon block insertion, a prompt displays to verify that the attribute value is correct. 
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.Preset">
            <summary>
            Autodesk attribute mode. The attribute is set to the default value if a preset value exists.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.NormalMode">
            <summary>If true, the attribute modes are all false.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
            <remarks>It's an override of the <see cref="P:devDept.Eyeshot.Entities.Text.TextString"/></remarks>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.Height">
            <summary>
            Gets or sets the text height.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen"/> after changing this value.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.Backward">
            <summary>
            The text is flipped in X.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.UpsideDown">
            <summary>
            The text is flipped in Y.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.WidthFactor">
            <summary>
            Gets or sets the text width factor.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen"/> after changing this value.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.Alignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
            <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen"/> after changing this value.</remarks>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.Style">
            <summary>
            Gets or sets the text style name.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.Plane">
            <summary>Gets or sets the planar entity supporting plane.</summary>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.InsertionPoint">
            <summary>
            Gets or sets the insertion point, (it corresponds to the <see cref="P:devDept.Eyeshot.AttributeReference.Plane"/> origin).
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.AttributeReference.LayerIndex">
            Methods inherited form IEntity
        </member>
        <member name="T:devDept.Eyeshot.Entities.AttributeReferenceDictionary">
            <summary>
            AttributeReference dictionary class.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.AttributeReferenceDictionary.Add(System.String,System.String)">
            <summary>
            Adds an <see cref="T:devDept.Eyeshot.AttributeReference"/> inheriting the properties from the attribute defined in the Block.
            </summary>
            <param name="tag">The tag</param>
            <param name="value">The text</param>
            <remarks>The properties are inherited at the next <see cref="M:devDept.Eyeshot.EntityList.Regen"/></remarks>
            <seealso cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)"/>
        </member>
        <member name="T:devDept.Eyeshot.Entities.Attribute">
            <summary>
            AutoCAD attribute definition.
            </summary>
        </member>
        <member name="T:devDept.Eyeshot.Entities.AttributeBase">
            <summary>
            AutoCAD attribute definition.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.AttributeBase.#ctor(System.Double,System.Double,System.Double,System.String,System.Double)">
            <summary>
            Individual coordinates constructor.
            </summary>
            <param name="x">Insertion point X-coordinate</param>
            <param name="y">Insertion point X-coordinate</param>
            <param name="z">Insertion point X-coordinate</param>
            <param name="text">Text</param>
            <param name="height">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.AttributeBase.#ctor(devDept.Geometry.Point3D,System.String,System.Double)">
            <summary>
            3D point constructor.
            </summary>
            <param name="insPoint">Insertion point</param>
            <param name="text">Text</param>
            <param name="height">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.AttributeBase.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double)">
            <summary>
            3D point and plane constructor.
            </summary>
            <param name="pln">Orientation plane</param>
            <param name="insPoint">Insertion point</param>
            <param name="text">Text</param>
            <param name="height">Text height</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.AttributeBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.AttributeBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.AttributeBase.SynchronizeAttributes(devDept.Eyeshot.Entities.Attribute)">
            <summary>
            Synchronizes the data of the <see cref="T:devDept.Eyeshot.AttributeReference"/> with the data of the <paramref name="attribute"/>, copying all the data except the <see cref="P:devDept.Eyeshot.Entities.AttributeBase.Value"/>.
            </summary>        
            <param name="attribute">The attribute entity from which to copy the data</param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AttributeBase.Invisible">
            <summary>
            Autodesk attribute mode. The attribute text is invisible.
            </summary>
            <remarks>To see the effect of this change, call <see cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)"/></remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AttributeBase.Constant">
            <summary>
            Autodesk attribute mode. The attribute text is a fixed value and the value is preset.
            </summary>
            <remarks>To see the effect of this change, call <see cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)"/></remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AttributeBase.Verify">
            <summary>
            Autodesk attribute mode. The attribute value is entered twice; upon block insertion, a prompt displays to verify that the attribute value is correct. 
            </summary>
            <remarks>To see the effect of this change, call <see cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)"/></remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AttributeBase.Preset">
            <summary>
            Autodesk attribute mode. The attribute is set to the default value if a preset value exists.
            </summary>
            <remarks>To see the effect of this change, call <see cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)"/></remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AttributeBase.NormalMode">
            <summary>
            If true, the attribute modes are all false.
            </summary>
            <remarks>To see the effect of this change, call <see cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)"/></remarks>
        </member>
        <member name="P:devDept.Eyeshot.Entities.AttributeBase.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
            <remarks>It's an override of the <see cref="P:devDept.Eyeshot.Entities.Text.TextString"/></remarks>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Attribute.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="pln"></param>
            <param name="insPoint"></param>
            <param name="tag">The tag</param>
            <param name="text">The text</param>
            <param name="height"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Attribute.#ctor(devDept.Geometry.Point3D,System.String,System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="insPoint"></param>
            <param name="tag">The tag</param>
            <param name="text">The text</param>
            <param name="height"></param>
        </member>
        <member name="M:devDept.Eyeshot.Entities.Attribute.#ctor(System.Double,System.Double,System.Double,System.String,System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="tag">The tag</param>
            <param name="text">The text</param>
            <param name="height"></param>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Attribute.Prompt">
            <summary>
            Gets or sets the attribute prompt text.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Attribute.Tag">
            <summary>
            Gets or sets the attribute tag.
            </summary>
        </member>
        <member name="P:devDept.Eyeshot.Entities.Attribute.Invisible">
            <summary>
            Gets or sets a value that determines if the <see cref="T:devDept.Eyeshot.AttributeReference"/> is visible or not.
            </summary>
            <remarks>It does not affect the visibility of the <see cref="T:devDept.Eyeshot.Entities.Attribute"/> but only of the <see cref="T:devDept.Eyeshot.AttributeReference"/>. 
            This allows to keep the Attribute visible when editing a <see cref="T:devDept.Eyeshot.Entities.BlockReference"/> (with <see cref="M:devDept.Eyeshot.EntityList.SetCurrent(devDept.Eyeshot.Entities.BlockReference)"/>), so it can be selected and
            the <see cref="P:devDept.Eyeshot.Entities.Attribute.Invisible"/> property can be set to true or false without affecting its visibility on screen that would prevent to select it again. 
            Then the <see cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)"/> will propagate the Invisible property to the AttributeReferences and make them invisible
            (after the current BlockReference is reset with <see cref="M:devDept.Eyeshot.EntityList.ResetCurrentBlockReference"/>).
            </remarks>
        </member>
        <member name="T:devDept.Eyeshot.Entities.PlanarSurface">
            <summary>
            Planar surface definition. Adds the <see cref="P:devDept.Eyeshot.Entities.PlanarSurface.Plane"/> property to standard surface.
            </summary>
        </member>
        <member name="M:devDept.Eyeshot.Entities.PlanarSurface.Clone">
            <summary>
            Creates a deep copy of this revolution surface.
            </summary>
            <returns>The new revolution surface object.</returns>
        </member>
        <member name="P:devDept.Eyeshot.Entities.PlanarSurface.Plane">
            <summary>
            Gets the planar surface plane.
            </summary>
        </member>
    </members>
</doc>
