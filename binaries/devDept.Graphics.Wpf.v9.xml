<?xml version="1.0"?>
<doc>
    <assembly>
        <name>devDept.Graphics.Wpf.v9</name>
    </assembly>
    <members>
        <member name="T:devDept.Graphics.CameraBase">
            <summary>
            Base Class for Camera
            </summary>
        </member>
        <member name="M:devDept.Graphics.CameraBase.CheckScreenPointVisibility(System.Int32,System.Int16[],System.Int32,System.Int32[],System.Single,System.Single,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Checks the visibility of the given screen point.
            </summary>
            <param name="bitmapData"></param>
            <param name="viewFrame"></param>
            <param name="xPos"></param>
            <param name="yPos"></param>
            <param name="zPos"></param>
            <param name="leftBorder"></param>
            <param name="rightBorder"></param>
            <param name="bottomBorder"></param>
            <param name="topBorder"></param>
            <param name="hidden"></param>
        </member>
        <member name="M:devDept.Graphics.CameraBase.Project2D(System.Double[],System.Int32[],System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Maps world coordinates to screen coordinates.
            </summary>
            <param name="modelViewProj">The modelview projection matrix</param>
            <param name="viewFrame">The viewport bounds</param>
            <param name="objx">The world X coordinate</param>
            <param name="objy">The world Y coordinate</param>
            <param name="objz">The world Z coordinate</param>
            <param name="winx">The computed window X coordinate</param>
            <param name="winy">The computed window Y coordinate</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Graphics.CameraBase.Project(devDept.Graphics.RenderContextBase,System.Double[],System.Int32[],System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Maps world coordinates to screen coordinates.
            </summary>
            <param name="renderContext">The rendering context</param>
            <param name="modelViewProj">The modelview projection matrix</param>
            <param name="viewFrame">The viewport bounds</param>
            <param name="objx">The world X coordinate</param>
            <param name="objy">The world Y coordinate</param>
            <param name="objz">The world Z coordinate</param>
            <param name="winx">The computed window X coordinate</param>
            <param name="winy">The computed window Y coordinate</param>
            <param name="winz">The computed window Z coordinate</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Graphics.CameraBase.Project(devDept.Graphics.RenderContextBase,System.Int32[],System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Maps world coordinates to screen coordinates.
            </summary>
            <param name="objx">The world X coordinates</param>
            <param name="objy">The world Y coordinates</param>
            <param name="objz">The world Z coordinates</param>
            <param name="winx">The computed window X coordinates</param>
            <param name="winy">The computed window Y coordinates</param>
            <param name="winz">The computed window Z coordinates</param>
            <param name="renderContext">The render context</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:devDept.Graphics.CameraBase.CheckScreenPointVisibility(devDept.Graphics.RenderContextBase,System.Int32,System.Drawing.Size,System.Int32[],System.Single,System.Single,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Checks the visibility of the given screen point.
            </summary>
            <param name="viewport"></param>
            <param name="renderContext"></param>
            <param name="size"></param>
            <param name="viewFrame"></param>
            <param name="xPos"></param>
            <param name="yPos"></param>
            <param name="zPos"></param>
            <param name="leftBorder"></param>
            <param name="rightBorder"></param>
            <param name="bottomBorder"></param>
            <param name="topBorder"></param>
            <param name="hidden"></param>
        </member>
        <member name="M:devDept.Graphics.CameraBase.GetFrame(devDept.Geometry.Point3D@,devDept.Geometry.Vector3D@,devDept.Geometry.Vector3D@,devDept.Geometry.Vector3D@)">
            <summary>
            Returns the current camera frame.
            </summary>
            <param name="origin">The camera origin</param>
            <param name="camX">The camera X axis</param>
            <param name="camY">The camera Y axis</param>
            <param name="camZ">The camera Z axis</param>
        </member>
        <member name="M:devDept.Graphics.CameraBase.InvalidateZRange(System.Boolean)">
            <summary>
            Tells if the z-range of the camera is valid.
            </summary>
            <param name="invalid"></param>
            <returns></returns>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="P:devDept.Graphics.CameraBase.ModelViewMatrix">
            <summary>
            Gets or sets the camera ModelView matrix.
            </summary>
        </member>
        <member name="P:devDept.Graphics.CameraBase.ProjectionMatrix">
            <summary>
            Gets or sets the camera Projection matrix.
            </summary>
        </member>
        <member name="P:devDept.Graphics.CameraBase.ViewNormal">
            <summary>
            Gets the camera view normal.
            </summary>
        </member>
        <member name="T:devDept.Graphics.projectionType">
            <summary>Camera projection type.</summary>
        </member>
        <member name="F:devDept.Graphics.projectionType.Orthographic">
            <summary>Orthographic projection</summary>
        </member>
        <member name="F:devDept.Graphics.projectionType.Perspective">
            <summary>Perspective projection</summary>
        </member>
        <member name="T:devDept.Graphics.Converters.BackgroundConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Graphics.Converters.BackfaceConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Graphics.Converters.LightConverter">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Graphics.D3DRenderContext">
            <summary>
            Direct3D render context class.
            </summary>
        </member>
        <member name="T:devDept.Graphics.RenderContextBase">
            <summary>
            Render context base class.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.UpdateActiveLights(devDept.Graphics.LightSettings[])">
            <summary>
            Updates the active lights used for the rendering.
            </summary>
            <param name="lights">The lights collection</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ProcessLightAttributes(System.Boolean,System.Boolean)">
            <summary>
            Updates light attributes for all light sources. Light attributes are: color and specular color.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ProcessClippingPlanes(devDept.Graphics.ClippingPlaneBase[],System.Boolean)">
            <summary>
            Updates the internal stucture with the clipping planes.
            </summary>
            <param name="clippingPlanes">The clipping planes</param>
            <param name="updateGraphics">If true, updates the corresponding data on the graphics system</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ProcessClippingPlanesVisibility(devDept.Graphics.ClippingPlaneBase[],System.Boolean)">
            <summary>
            Updates only the visibility of the clipping planes internal stucture.
            </summary>
            <param name="clippingPlanes">The clipping planes</param>
            <param name="updateGraphics">If true, updates the corresponding data on the graphics system</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.HasDeviceContext">
            <summary>
            Tells if the device context has already been created.
            </summary>
            <returns>True if the device context has already been created</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.CurrentModelViewMatrix">
            <summary>
            Gets the current modelview matrix.
            </summary>
            <returns>The current modelview matrix.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.CurrentProjectionMatrix">
            <summary>
            Gets the current projection matrix.
            </summary>
            <returns>The current projection matrix.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.IsMultisample">
            <summary>
            Tells if the graphics context is using MultiSample rasterization (either set by Viewport or by the Graphics Card settings).
            </summary>
        </member>
        <member name="F:devDept.Graphics.RenderContextBase.ColorsBits16">
            <summary>
            If the system supports only 16 bpps.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ComputePickMatrix(System.Drawing.RectangleF,System.Drawing.Size,System.Int32[])">
            <summary>
            Computes the matrix to retrict the rendering to the given rectangle.
            </summary>
            <param name="rectangle">The rectangle to render</param>
            <param name="viewportSize">The size of the viewport</param>
            <param name="viewFrame">The real viewport bounds (for Direct3D)</param>
            <returns>The pick matrix.</returns>
            <remarks>The rectangle is mapped to the lower left corner of the viewport</remarks>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetProjectionMatrix(System.Double[])">
            <summary>
            Sets the projection matrix.
            </summary>
            <param name="proj">The projection matrix.</param>
            <remarks>Use "null" for Identity.</remarks>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetMatrices(System.Double[],System.Double[])">
            <summary>
            Sets the projection and modelview matrices.
            </summary>
            <param name="proj">projection matrix</param>
            <param name="modelView">modelView matrix</param>
            <remarks>Use "null" for Identity.</remarks>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetColorWireframe(System.Drawing.Color,System.Boolean)">
            <summary>
            Wireframe color changer.
            </summary>
            <param name="color">The color</param>
            <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetColorMaterial(System.Drawing.Color,System.Boolean)">
            <summary>
            Sets the color to the diffuse component of the front and back faces, depending on the <see cref="P:devDept.Graphics.RenderContextBase.ColorMaterialMode"/> status.
            </summary>
            <param name="color">The color to set</param>
            <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetColorDiffuse(System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
            Sets the diffuse color of the front and back material.
            </summary>
            <param name="color">The front material color</param>
            <param name="backColor">The back material color</param>
            <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetMaterial(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)">
            <summary>
            Sets the material components.
            </summary>
            <param name="diffuseFront">Diffuse front face material color</param>
            <param name="diffuseBack">Diffuse back face material color</param>
            <param name="ambient">Ambient color for front and back faces</param>
            <param name="specular">Specular color</param>
            <param name="shininess">Shininess color</param>
            <param name="force">If true sets the colors regardless of the current ones, else sets them only if they are different from the current ones.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetMaterialBackDiffuse(System.Drawing.Color,System.Boolean)">
            <summary>
            Sets the material back color diffuse properties.
            </summary>
            <param name="color">The backface color</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetMaterialBackAmbient(System.Drawing.Color,System.Boolean)">
            <summary>
            Sets the material back color ambient property.
            </summary>
            <param name="color">The color</param>
            <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetMaterialFrontAmbientAndDiffuse(System.Drawing.Color,System.Boolean)">
            <summary>
            Sets the material front color ambient and diffuse properties.
            </summary>
            <param name="color">THe color</param>
            <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetMaterialBackAmbientAndDiffuse(System.Drawing.Color,System.Boolean)">
            <summary>
            Sets the material back color ambient and diffuse properties.
            </summary>
            <param name="color">THe color</param>
            <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetMaterialFrontAmbient(System.Drawing.Color,System.Boolean)">
            <summary>
            Sets the material front color ambient property.
            </summary>
            <param name="color">THe color</param>
            <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetMaterial(devDept.Graphics.Material,System.Drawing.Color,System.Boolean)">
            <summary>
            Sets the material properties.
            </summary>
            <param name="material">The material</param>
            <param name="backColor">The backface color</param>
            <param name="selected"></param>
            <returns>True if the material has a texture.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ResetColorDiffuse">
            <summary>
            Aligns the colors set in the graphics system with the current material and wire color.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PushEnvironment">
            <summary>
            Pushes the current environment map on the stack.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PopEnvironment">
            <summary>
            Pops the environment map from the stack.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.CloseEnvironment">
            <summary>
            Disables the current environment.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PushRasterizerState">
            <summary>
            Pushes the current <see cref="T:devDept.Graphics.rasterizerStateType"/> on the stack.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PopRasterizerState">
            <summary>
            Pops the <see cref="T:devDept.Graphics.rasterizerStateType"/> from the stack and sets it as current.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PushDepthStencilState">
            <summary>
            Pushes the current <see cref="T:devDept.Graphics.depthStencilStateType"/> on the stack.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PopDepthStencilState">
            <summary>
            Pops the <see cref="T:devDept.Graphics.depthStencilStateType"/> from the stack and sets it as current.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PushBlendState">
            <summary>
            Pushes the current <see cref="T:devDept.Graphics.blendStateType"/> on the stack.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PopBlendState">
            <summary>
            Pops the <see cref="T:devDept.Graphics.blendStateType"/> from the stack and sets it as current.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetState(devDept.Graphics.rasterizerStateType)">
            <summary>
            Sets the rasterizer state type preserving the current clockwiseness of the front face.
            </summary>
            <param name="state">The new state</param>
            <returns>The previous state.</returns>
            <seealso cref="P:devDept.Graphics.RenderContextBase.FrontFaceCW"/>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetupPolygonOffset(System.Boolean)">
            <summary>
            Enables or disables the PolygonOffset feature (with Factor 1 , Units 1).
            </summary>
            <param name="enable">If true the polygon offset is enabled, else it's disabled.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetState(devDept.Graphics.depthStencilStateType)">
            <summary>
            Sets the depth stencil state type.
            </summary>
            <param name="state">The new state</param>
            <returns>The previous state.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetState(devDept.Graphics.blendStateType)">
            <summary>
            Sets the blend state type.
            </summary>
            <param name="state">The new state</param>
            <returns>The previous state.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawQuadWithTextures(devDept.Graphics.TextureBase,System.Single[],System.Byte,System.Drawing.RectangleF,System.Single,System.Boolean)">
            <summary>
            Draws a Quad with a texture.
            </summary>
            <param name="texture">The texture</param>
            <param name="texCoords">The texture coordinates</param>
            <param name="zCoord">Z coordinate of the quad</param>
            <param name="alpha">The transparency</param>
            <param name="rect">The rectangle where the Quad is drawn</param>
            <param name="buffered">If true, updates the graphics only after a certain number of calls. This is used to draw many quads with the same texture minimizing the overload of updating the graphics card each time.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetShader(devDept.Graphics.shaderType,devDept.Graphics.ShaderParameters,System.Boolean)">
            <summary>
            Sets the shader as current.
            </summary>
            <param name="type">The shader type to set</param>
            <param name="shaderParams">The shader parameters (used only in case the shader is compiled for the first time)</param>
            <param name="force">If true sets the shader regardless of the current one, else sets it only if it's different from the current one.</param>
            <returns>True if the operation is successful, false otherwise</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.CreateTexture2D">
            <summary>
            Creates a texture 2D with or without multisampling dependiing on the rendering context.
            </summary>
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.CreateTexture2DNoMultisample(System.Drawing.Size,System.Boolean)">
            <summary>
            Creates a 2D texture without multisampling.
            </summary>
            <param name="Size"></param>
            <param name="depthTexture"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.CreateTexture2D(System.Drawing.Image,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a 2D texture from an image.
            </summary>
            <param name="image">The image</param>
            <param name="minFunc">Minification function</param>
            <param name="magFunc">Magnification function</param>
            <param name="anisotropicFiltering">If true, enables anisotropic filtering for mipmapping</param>
            <param name="enlargeIfSizeNotSupported">If true, the image is put in a bigger image (with some empty border, keeping the original size of image)         
            when the image is not power of two and the hardware does not support it. Else it is resized to a smaller power of two size.</param>
            <param name="repeatX">If true, the texture is repeated in the X direction</param>
            <param name="repeatY">If true, the texture is repeated in the Y direction</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.CreateTexture2D(System.Drawing.Size,System.Boolean,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType)">
            <summary>
            Creates a 2D Texture for rendering.
            </summary>
            <param name="size">The size of the texture</param>
            <param name="depthTexture">If true, it's a depth texture</param>
            <param name="minFilterFunc">The minification filtering function</param>
            <param name="magFilterFunc">The magnification filtering function</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.CreateTexture1D(System.Drawing.Color[],devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean,System.Boolean)">
            <summary>
            Creates a 1D texture from the given color table.
            </summary>
            <param name="colorTable">The color table</param>
            <param name="minFunc">The minification function</param>
            <param name="magFunc">The magnification function</param>
            <param name="anisotropicFiltering">If true, enables anisotropic filtering for mipmapping</param>
            <param name="repeatX">If true, the texture is repeated in the X direction</param>
            <returns>The texture</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ReadSurface(System.Drawing.Size,System.Boolean,System.Boolean)">
            <summary>
            Reads the whole control and stores it in internal data.
            </summary>
            <param name="controlSize">The size of the control</param>
            <param name="backBuffer">If true, captures the backbuffer, else the front buffer</param>
            <param name="antialiasing">Tells if the antialiasing is enabled or not</param>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ReadColorBuffer(devDept.Graphics.IViewport,System.Drawing.Rectangle,System.Int32@,System.Int32@)">
            <summary>
            Reads the color buffer.
            </summary>
            <param name="viewport">The viewport to read.</param>
            <param name="rect">The rectangle to read, in viewport coordinates (0 on top)</param>
            <param name="stride"></param>
            <param name="bpp"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ReadBuffer(System.Int32)">
            <summary>
            Sets the framebuffer to read from (OpenGL only).
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PushMatrices">
            <summary>
            Pushes modelview and projection matrices.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PopMatrices">
            <summary>
            Pops the modelview and projection matrices.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PushModelView">
            <summary>
            Pushes the Modelview matrix.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PushProjection">
            <summary>
            Pushes the Projection matrix.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PopModelView">
            <summary>
            Pops the Modelview matrix.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PopProjection">
            <summary>
            Pops the Projection matrix.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.MultMatrixModelView(devDept.Geometry.Transformation)">
            <summary>
            Multiplies the transformation by the current modelview matrix.
            </summary>
            <param name="transform">The transformation</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.MultMatrixModelView(System.Double[])">
            <summary>
            Multiplies the transformation by the current modelview matrix.
            </summary>
            <param name="transform">The transformation</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.CloseTexture(System.Boolean)">
            <summary>
            Disables che current texture.
            </summary>
            <param name="force">If true disables all textures states regardless if there actually is a current texture active.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetTexture(devDept.Graphics.TextureBase)">
            <summary>
            Sets the texture on 0 texture unit.
            </summary>
            <param name="texture">The texture</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetTexture(devDept.Graphics.TextureBase,System.Int32)">
            <summary>
            Sets the texture on a specific texture unit.
            </summary>
            <param name="texture">The texture</param>
            <param name="textureUnit">The texture unit</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetAlphaTexture(devDept.Graphics.TextureBase)">
            <summary>
            Sets the texture on a specific texture unit.
            </summary>
            <param name="texture">The texture</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ResolveShadowShader(devDept.Graphics.shaderType)">
            <summary>
            Gets the shader with the Shadow support.
            </summary>
            <param name="shaderType">The source shader type</param>
            <returns>The corresponding shader type with shadow support.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.RevolveAlphaMapShader(devDept.Graphics.shaderType)">
            <summary>
            Gets the shader with the AlphaMap support.
            </summary>
            <param name="shaderType">The source shader type</param>
            <returns>The corresponding shader type with alpha map support.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetLinesShader(System.Boolean,devDept.Graphics.shaderType,devDept.Graphics.ShaderParameters)">
            <summary>
            Sets the shader for the lines with or without thick lines capabilities, adjusting also the PolygonOffset.
            </summary>
            <param name="thick"></param>
            <param name="shader"></param>
            <param name="shaderParams"></param>
            <returns>True if the operation is successful, false otherwise</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetPointsShader(System.Boolean,devDept.Graphics.shaderType,devDept.Graphics.ShaderParameters)">
            <summary>
            Sets the shader for the points with or without thick points capabilities, adjusting also the PolygonOffset.
            </summary>
            <param name="thick"></param>
            <param name="shader"></param>
            <param name="shaderParams"></param>
            <returns>True if the operation is successful, false otherwise</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.RestorePolygonOffset(System.Int32@)">
            <summary>
            Restores the polygon offset to draw the polygons.
            </summary>
            <param name="prev"></param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.RemovePolygonOffset(System.Int32@)">
            <summary>
            Removes the polygon offset when drawing the wires entity with Width grater than 1
            because the wires are not influenced by the polygon offset but in Direct3D 
            they are drawn as polygons with the geometry shader, so the PolygonOffset applies to them also.
            </summary>
            <param name="prev"></param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetMaterialFrontDiffuse(System.Drawing.Color,System.Boolean)">
            <summary>
            Sets the front faces diffuse material color.
            </summary>
            <param name="color">The color</param>
            <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetMaterialFrontAndBackDiffuse(System.Drawing.Color,System.Boolean)">
            <summary>
            Sets the front and back faces diffuse material color.
            </summary>
            <param name="color">The color</param>
            <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ReadDepthValues(System.Int32[],System.Int32@)">
            <summary>
            Reads depth values from the depth buffer.
            </summary>
            <param name="layoutViewport"></param>
            <param name="stride"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ReadDepthValues(System.Int32,System.Int32,System.Drawing.Size)">
            <summary>
            Reads depth values from the depth buffer.
            </summary>
            <param name="left"></param>
            <param name="bottom"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="F:devDept.Graphics.RenderContextBase.CompilingEntity">
            <summary>
            The entity being compiled.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.Compile(devDept.Graphics.EntityGraphicsData,devDept.Graphics.DrawEntityCallBack,System.Object)">
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.CompileVBO(devDept.Graphics.EntityGraphicsData,devDept.Graphics.DrawEntityCallBack,System.Object,System.Boolean)">
            <summary>
            Compiles the Entity using Vertex Buffer Objects if possible.
            </summary>
            <param name="data">The entity graphics data</param>
            <param name="drawEntityCallBack">The draw function (used only if VBO are not supported)</param>
            <param name="vboParams">The parameters (of type <see cref="T:devDept.Graphics.VBOParams"/>)</param>
            <param name="dynamic">If true the buffer is created dynamic, so it can be updated later on.</param>
            <seealso cref="M:devDept.Graphics.RenderContextBase.UpdateVBO(devDept.Graphics.EntityGraphicsData,devDept.Graphics.DrawEntityCallBack,System.Object)"/>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.UpdateVBO(devDept.Graphics.EntityGraphicsData,devDept.Graphics.DrawEntityCallBack,System.Object)">
            <summary>
            Updates the vertex buffer object (that must have been created dynamic).
            </summary>
            <param name="data">The entity graphics data</param>
            <param name="drawEntityCallBack">The draw function (used only if VBO are not supported)</param>
            <param name="vboParams">The parameters (of type <see cref="T:devDept.Graphics.VBOParams"/>)</param>
            <seealso cref="M:devDept.Graphics.RenderContextBase.CompileVBO(devDept.Graphics.EntityGraphicsData,devDept.Graphics.DrawEntityCallBack,System.Object,System.Boolean)"/>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawBufferedLine(devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
            <summary>
            Draws a line using a buffered approach.
            </summary>
            <param name="v0">The first vertex</param>
            <param name="v1">The second vertex</param>
            <remarks>In Direct3D the vertices are stored in a buffer and drawn only when it is full. In OpenGL they are drawn immediately.</remarks>
            <seealso cref="M:devDept.Graphics.RenderContextBase.EndDrawBufferedLines"/>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawBufferedPoint(devDept.Geometry.Point3D)">
            <summary>
            Draws a point using a buffered approach.
            </summary>
            <param name="v0">The  vertex</param>
            <remarks>In Direct3D the vertices are stored in a buffer and drawn only when it is full. In OpenGL they are drawn immediately.</remarks>
            <seealso cref="M:devDept.Graphics.RenderContextBase.EndDrawBufferedLines"/>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLineStrip(System.Single[],System.Int32,System.Int32)">
            <summary>
            Draws a line strip of vertices.
            </summary>
            <param name="vertices">Array of vertices coordinates (3 float per vertex)</param>
            <param name="first">The index of the first vertex to draw</param>
            <param name="count">The number of the vertices to draw</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLineStripRGBA(System.Single[],System.Int32,System.Int32)">
            <summary>
            Draws a line strip of colored vertices.
            </summary>
            <param name="vertices">Array of vertices coordinates plus color components (7 float per vertex)</param>
            <param name="first">The index of the first vertex to draw</param>
            <param name="count">The number of the vertices to draw</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLineStrip(devDept.Geometry.Point2D[],System.Int32,System.Int32)">
            <summary>
            Draws a line strip of <see cref="T:devDept.Geometry.Point2D"/> .
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="first">The index of the first vertex to draw</param>
            <param name="count">The number of the vertices to draw</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLineStrip(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
            <summary>
            Draws a line strip of <see cref="T:devDept.Geometry.Point3D"/> .
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="first">The index of the first vertex to draw</param>
            <param name="count">The number of the vertices to draw</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLineStrip(devDept.Geometry.PointRGB[],System.Int32,System.Int32)">
            <summary>
            Draws a line strip of <see cref="T:devDept.Geometry.PointRGB"/> .
            </summary>
            <param name="vertices">Array of vertices to draw</param>
            <param name="first">The index of the first vertex to draw</param>
            <param name="count">The number of the vertices to draw</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetLightPosition(System.Int32,devDept.Graphics.lightType,System.Single[],System.Single[])">
            <summary>
            Sets the light position.
            </summary>
            <param name="lightIndex">Light index</param>
            <param name="lightType">Light type</param>
            <param name="dir">Light direction</param>
            <param name="position">Light position (spot and point light only)</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.UpdateConstantBufferPerFrame(devDept.Graphics.ShaderParameters)">
            <summary>
            Updates the constant buffer per frame with the given data.
            </summary>
            <param name="data">The data to set on the constant buffer per frame. If it's null, the current data is used.</param>
            <remarks>Direct3D only.</remarks>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.UpdateConstantBufferPerObject">
            <summary>
            Updates the constant buffer per frame with the current data.
            </summary>
            <remarks>Direct3D only.</remarks>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.CheckOutOfMemory">
            <summary>
            Tells if the graphics system is in out of memory state.
            </summary>
            <returns>True if it's in out of memory state, false elsewise.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.GetErrorString(System.Int32)">
            <summary>
            Gets the graphics system error string.
            </summary>
            <param name="errorCode">The error code</param>
            <returns>The error string.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetPointSize(System.Single,System.Boolean)">
            <summary>
            Sets the point size.
            </summary>
            <param name="size">The size (thickness) of the point in pixels</param>
            <param name="force">If true sets the size regardless of the current one, else sets it only if it's different from the current one.</param>
            <returns>The previous value.</returns>
            <remarks>Call <see cref="M:devDept.Graphics.RenderContextBase.EnableThickPoints"/> to make it effective in Direct3D renderer.</remarks>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetLineSize(System.Single,System.Boolean)">
            <summary>
            Sets the line size.
            </summary>
            <param name="size">The size (thickness) of the line in pixels</param>
            <param name="force">If true sets the size regardless of the current one, else sets it only if it's different from the current one.</param>
            <returns>The previous value.</returns>
            <remarks>Call <see cref="M:devDept.Graphics.RenderContextBase.EnableThickLines"/> to make it effective in Direct3D renderer.</remarks>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetLighting(System.Boolean)">
            <summary>
            Enables the lighting.
            </summary>
            <param name="enable">Turns the lighting on or off</param>
            <returns>The previous value</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ProcessMaterial">
            <summary>
            Updates the current material with the default material.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawOnTextureOrBitmap(devDept.Graphics.TextureBase,devDept.Graphics.TextureBase,System.Drawing.Imaging.BitmapData,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,devDept.Graphics.RenderContextBase.drawSceneFuncDelegate,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Draws the scene on the specified texture or bitmapData. 
            </summary>
            <param name="texture">The texture to draw on</param>
            <param name="bitmapData">The bitmap data. If null, the draw is done on the texture</param>
            <param name="strideInPixels"></param>
            <param name="antialiasingAvailable"></param>
            <param name="antiAliasing"></param>
            <param name="antialiasingSamples"></param>
            <param name="tileWidth"></param>
            <param name="tileHeight"></param>
            <param name="drawSceneFunc">The draw function delegate</param>
            <param name="drawSceneParams">The draw function parameters</param>
            <param name="hdwAcceleration"></param>
            <param name="transparentBackground"></param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.CompileBackground(devDept.Graphics.BackgroundSettings,System.Int32)">
            <summary>
            Compiles the background, used by the designer.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLines(System.Single[])">
            <summary>
            Draws a set of lines.
            </summary>
            <param name="vertices">Collection of line vertices (3 coordinates each).</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLines(System.Single[],System.Int32,System.Int32)">
            <summary>
            Draws a set of lines.
            </summary>
            <param name="vertices">Collection of line vertices (3 coordinates each).</param>
            <param name="first">First vertex index</param>
            <param name="count">Number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[])">
            <summary>
            Draws a set of lines.
            </summary>
            <param name="vertices">Collection of line vertices.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
            <summary>
            Draws a set of lines.
            </summary>
            <param name="vertices">Collection of line vertices.</param>
            <param name="first">The index of the first vertex to draw</param>
            <param name="count">The number of the vertices to draw</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPoints(devDept.Geometry.Point3D[])">
            <summary>
            Draws a set of points.
            </summary>
            <param name="points">The collection of points to draw.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsIndeterminate(System.Single[])">
            <summary>
            Draws a set of points without specifying the kind of display list.
            </summary>
            <param name="points">The collection of points to draw.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsIndeterminate(devDept.Geometry.Point3D[])">
            <summary>
            Draws a set of points without specifying the kind of display list.
            </summary>
            <param name="points">The collection of points to draw.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPoints(System.Single[])">
            <summary>
            Draws a set of points.
            </summary>
            <param name="points">The collection of points to draw.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPoints(System.Single[],System.Int32,System.Int32)">
            <summary>
            Draws a set of points.
            </summary>
            <param name="points">Collection of line vertices (3 coordinates each).</param>
            <param name="first">First vertex index</param>
            <param name="count">Number of floats</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPoints(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
            <summary>
            Draws a set of points.
            </summary>
            <param name="points">Collection of line vertices (3 coordinates each).</param>
            <param name="first">First vertex index</param>
            <param name="count">Number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsIndeterminate(System.Single[],System.Int32,System.Int32)">
            <summary>
            Draws a set of points without specifying the kind of geometry.
            </summary>
            <param name="points">Collection of line vertices (3 coordinates each).</param>
            <param name="first">First vertex index</param>
            <param name="count">Number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsIndeterminate(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
            <summary>
            Draws a set of points without specifying the kind of geometry.
            </summary>
            <param name="points">Collection of line vertices (3 coordinates each).</param>
            <param name="first">First vertex index</param>
            <param name="count">Number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsRGB(devDept.Geometry.Point3D[])">
            <summary>
            Draws a set of <see cref="T:devDept.Geometry.PointRGB"/>.
            </summary>
            <param name="points">The collection of vertices to draw.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithColorsRGBIndeterminate(System.Single[],System.Byte[])">
            <summary>
            Draws a set of points with the specified colors, without specifying the kind of geometry.
            </summary>
            <param name="points">The vertices</param>
            <param name="colors">The colors (in RGB form)</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithColorsRGBIndeterminate(System.Single[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Draws a set of points with the specified colors, without specifying the kind of geometry.
            </summary>
            <param name="points">The vertices</param>
            <param name="colors">The colors (in RGB form)</param>
            <param name="first">First vertex index</param>
            <param name="count">Number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithColorsRGBAIndeterminate(System.Single[],System.Byte[])">
            <summary>
            Draws a set of points with the specified colors, without specifying the kind of geometry.
            </summary>
            <param name="points">The vertices</param>
            <param name="colors">The colors (in RGBA form)</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithColorsRGBAIndeterminate(System.Single[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Draws a set of points with the specified color intensities, without specifying the kind of geometry.
            </summary>
            <param name="points">The vertices</param>
            <param name="colors">The colors (in RGBA form)</param>
            <param name="first">First vertex index</param>
            <param name="count">Number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithColorIntensitiesIndeterminate(System.Single[],System.Byte[])">
            <summary>
            Draws a set of points with the specified color intensity, without specifying the kind of geometry.
            </summary>
            <param name="points">The vertices</param>
            <param name="colors">The color intensities (one byte per pixel)</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithColorIntensitiesIndeterminate(System.Single[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Draws a set of points with the specified color intensities, without specifying the kind of geometry.
            </summary>
            <param name="points">The vertices</param>
            <param name="colors">The color intensities (one byte per pixel)</param>
            <param name="first">First vertex index</param>
            <param name="count">Number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsRGBIndeterminate(devDept.Geometry.Point3D[])">
            <summary>
            Draws a set of <see cref="T:devDept.Geometry.PointRGB"/> without specifying the kind of geometry.
            </summary>
            <param name="vertices">The collection of vertices to draw.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsRGB(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
            <summary>
            Draws a set of <see cref="T:devDept.Geometry.PointRGB"/>.
            </summary>
            <param name="points">Collection of line vertices (3 coordinates each).</param>
            <param name="first">First vertex index</param>
            <param name="count">Number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsRGBIndeterminate(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
            <summary>
            Draws a set of <see cref="T:devDept.Geometry.PointRGB"/> without specifying the kind of geometry.
            </summary>
            <param name="points">The collection of vertices to draw.</param>
            <param name="first">First vertex index</param>
            <param name="count">Number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithNormals(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Int32,System.Int32)">
            <summary>
            Draws a set of <see cref="T:devDept.Geometry.Point3D"/> specifying a normal per vertex.
            </summary>
            <param name="points">The collection of vertices to draw.</param>
            <param name="normals">The collection of normals</param>
            <param name="first">First vertex index</param>
            <param name="count">Number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithNormalsIndeterminate(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Int32,System.Int32)">
            <summary>
            Draws a set of <see cref="T:devDept.Geometry.Point3D"/> specifying a normal per vertex without specifying the kind of geometry.
            </summary>
            <param name="points">The collection of vertices to draw.</param>
            <param name="normals">The collection of normals</param>
            <param name="first">First vertex index</param>
            <param name="count">Number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.Draw(devDept.Graphics.EntityGraphicsData,devDept.Graphics.primitiveType)">
            <summary>
            Draws an entity.
            </summary>
            <param name="data">The compiled graphics data.</param>
            <param name="primitiveType">Type of primitive to draw.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawSelected(devDept.Graphics.EntityGraphicsData,devDept.Graphics.primitiveType)">
            <summary>
            Draws a selected entity.
            </summary>
            <param name="data">The compiled graphics data.</param>
            <param name="primitiveType">Type of primitive to draw.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTriangles(devDept.Geometry.Point3D[])">
            <summary>
            Draws triangles without normals.
            </summary>
            <param name="vertices">The vertices</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTriangles(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D)">
            <summary>
            Draws triangles with one normal.
            </summary>
            <param name="vertices">The vertices</param>
            <param name="normal">The normal</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTriangles(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Drawing.PointF[],System.Boolean)">
            <summary>
            Draws triangles with one normal per vertex and (optional) texture coordinates.
            </summary>
            <param name="vertices"></param>
            <param name="normals"></param>
            <param name="texCoords"></param>
            <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPartial(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Drawing.PointF[])">
            <summary>
            Draws triangles with one normal per vertex, as part of a drawing loop (no Begin-End is done).
            </summary>
            <param name="vertices"></param>
            <param name="normals"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPartialWithMaterialColor(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Boolean)">
            <summary>
            Draws triangles with one normal per vertex, as part of a drawing loop (no Begin-End is done), using the current material color.
            </summary>
            <param name="vertices"></param>
            <param name="normals"></param>
            <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPartialWithTexture(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Drawing.PointF[],System.Boolean)">
            <summary>
            Draws triangles with one normal and one texture coordinate per vertex, as part of a drawing loop (no Begin-End is done), using the current texture.
            </summary>
            <param name="vertices">The vertices array</param>
            <param name="normals">The normals array</param>
            <param name="texCoords">The texture coordinates array</param>
            <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTriangles(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Single[],System.Boolean)">
            <summary>
            Draws triangles with one normal per vertex and 1D texture coordinates.
            </summary>
            <param name="vertices"></param>
            <param name="normals"></param>
            <param name="texCoords"></param>
            <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPartial(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Single[])">
            <summary>
            Draws triangles with one normal per vertex and 1D texture coordinates, as part of a drawing loop (no Begin-End is done).
            </summary>
            <param name="vertices"></param>
            <param name="normals"></param>
            <param name="texCoords"></param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTriangles(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Drawing.Color[],System.Boolean)">
            <summary>
            Draws triangles with one normal and color per vertex per vertex and 1D texture coordinates.
            </summary>
            <param name="vertices"></param>
            <param name="normals"></param>
            <param name="colors"></param>
            <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPartial(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Drawing.Color[])">
            <summary>
            Draws triangles with one normal and color per vertex, as part of a drawing loop (no Begin-End is done).
            </summary>
            <param name="vertices"></param>
            <param name="normals"></param>
            <param name="colors"></param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPlanar(devDept.Geometry.Point3D[],devDept.Geometry.IndexTriangle[],devDept.Geometry.Vector3D)">
            <summary>
            Draws triangles with a single normal.
            </summary>
            <param name="vertices">The vertices</param>
            <param name="triangles">The triangles</param>
            <param name="normal">The normal</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPlanar(devDept.Geometry.Point3D[],System.Int32[],devDept.Geometry.Vector3D)">
            <summary>
            Draws triangles with a single normal.
            </summary>
            <param name="vertices">The vertices</param>
            <param name="trianglesIndices">The triangles indices</param>
            <param name="normal">The normal</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLineLoop(devDept.Geometry.Point3D[])">
            <summary>
            Draws a line loop.
            </summary>
            <param name="vertices">Collection of vertices.</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLineLoop(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
            <summary>
            Draws a line loop.
            </summary>
            <param name="vertices">Collection of vertices.</param>
            <param name="first">First vertex index</param>
            <param name="count">Number of points</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawIndexLinesWithDisplacement(System.Collections.Generic.IList{devDept.Geometry.IndexLine},devDept.Geometry.Point3D[],System.Double,System.Boolean)">
            <summary>
            Draws indexed lines with <see cref="T:devDept.Geometry.PointWithDisplacement"/> vertices.
            </summary>
            <param name="lines"></param>
            <param name="vertices"></param>
            <param name="ampFactor"></param>
            <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLinesWithDisplacement(devDept.Geometry.Point3D[],System.Double,System.Boolean)">
            <summary>
            Draws lines with <see cref="T:devDept.Geometry.PointWithDisplacement"/> vertices.
            </summary>
            <param name="vertices"></param>
            <param name="ampFactor"></param>
            <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.TranslateMatrixModelView(System.Double,System.Double,System.Double)">
            <summary>
            Translates the modelview matrix.
            </summary>
            <param name="x">X offset</param>
            <param name="y">Y offset</param>
            <param name="z">Z offset</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.RotateMatrixModelView(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Rotates the modelview matrix by <param name="angleInDegrees"> by an axis.</param>
            </summary>
            <param name="angleInDegrees">The rotation angle in degrees</param>
            <param name="axisX">The rotation axis X component</param>
            <param name="axisY">The rotation axis Y component</param>
            <param name="axisZ">The rotation axis Z component</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:devDept.Graphics.RenderContextBase.FreeEntityGraphicsData(devDept.Graphics.EntityGraphicsData)" -->
        <member name="M:devDept.Graphics.RenderContextBase.DrawCurrentBuffer">
            <summary>
            Ends the drawing of buffered entities, sending data to the graphics card.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.EndDrawBufferedLines">
            <summary>
            Draws the lines and points accumulated in the buffer (Direct3D only).
            </summary>
            <seealso cref="M:devDept.Graphics.RenderContextBase.DrawBufferedLine(devDept.Geometry.Point3D,devDept.Geometry.Point3D)"/>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetBlockRefTransform(System.Single[])">
            <summary>
            Sets the blockreference world transformation matrix.
            </summary>
            <param name="matrix">The transformation matrix to set</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.IsCw(devDept.Graphics.rasterizerStateType)">
            <summary>
            Tells if the front face of the given state has clockwise front faces.
            </summary>
            <param name="state">The rasterizer state type</param>
            <returns>True if the state has clockwise front faces.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.PixelZoom(System.Int32,System.Int32)">
            <summary>
            Specify the pixel zoom factors.
            </summary>
            <param name="xFactor">The x factor</param>
            <param name="yFactor">The y factor</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetColorMask(devDept.Graphics.colorMaskFlags)">
            <summary>
            Enable or disable the color components in the render buffer.
            </summary>
            <param name="colorMask">A Bitwise mask with the color components</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.HasStencil">
            <summary>
            Tells if the render context supports stencil.
            </summary>
            <returns>True if the render context supports stencil.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.HasShadow">
            <summary>
            Tells if the render context supports shadow.
            </summary>
            <returns>True if the render context supports shadow.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.HasMultiTexture">
            <summary>
            Tells if the render context supports multitexture.
            </summary>
            <returns>True if the render context supports multitexture.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesWithDisplacement(devDept.Geometry.PointWithDisplacement[],devDept.Geometry.Vector3D[],System.Drawing.Color,System.Double,System.Boolean)">
            <summary>
            Draws triangles with <see cref="T:devDept.Geometry.PointWithDisplacement"/> vertices.
            </summary>
            <param name="vertices"></param>
            <param name="normals"></param>
            <param name="singleColor"></param>
            <param name="ampFactor"></param>
            <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesWithDisplacement(devDept.Geometry.PointWithDisplacement[],devDept.Geometry.Vector3D[],System.Drawing.Color[],System.Double,System.Boolean)">
            <summary>
            Draws triangles <see cref="T:devDept.Geometry.PointWithDisplacement"/> vertices.
            </summary>
            <param name="vertices"></param>
            <param name="normals"></param>
            <param name="colors"></param>
            <param name="ampFactor"></param>
            <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesWithDisplacement(devDept.Geometry.PointWithDisplacement[],devDept.Geometry.Vector3D[],System.Double,System.Boolean)">
            <summary>
            Draws triangles <see cref="T:devDept.Geometry.PointWithDisplacement"/> vertices.
            </summary>
            <param name="vertices"></param>
            <param name="normals"></param>
            <param name="ampFactor"></param>
            <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesWithDisplacement(devDept.Geometry.PointWithDisplacement[],devDept.Geometry.Vector3D[],System.Single[],System.Double,System.Boolean)">
            <summary>
            Draws triangles <see cref="T:devDept.Geometry.PointWithDisplacement"/> vertices.
            </summary>
            <param name="vertices"></param>
            <param name="normals"></param>
            <param name="tex1DCoords"></param>
            <param name="ampFactor"></param>
            <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetRenderTarget(devDept.Graphics.TextureBase)">
            <summary>
            Sets the texture as a render target.
            </summary>
            <param name="texture">The texture</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetRenderTarget(devDept.Graphics.TextureBase,devDept.Graphics.TextureBase)">
            <summary>
            Sets the texture as a render target.
            </summary>
            <param name="texture">The color texture</param>
            <param name="depthTexture">The depth texture</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ResetRenderTarget">
            <summary>
            Resets the default render target.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.BlurTexture(devDept.Graphics.TextureBase@,devDept.Graphics.TextureBase@)">
            <summary>
            Blurs the texture.
            </summary>
            <param name="sharpTexture"></param>
            <param name="blurredTexture"></param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.InitializeStates">
            <summary>
            Initializes the current states.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.GLBeginDrawTriangles">
            <summary>
            Begins an OpenGL triangle drawing sequence.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.GLEnd">
            <summary>
            Ends an OpenGL drawing sequence.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.LockShaders(System.Boolean)">
            <summary>
            Locks the shaders so that the following calls to <see cref="M:devDept.Graphics.RenderContextBase.SetShader(devDept.Graphics.shaderType,devDept.Graphics.ShaderParameters,System.Boolean)"/> won't do anything until the shaders are unlocked.
            </summary>
            <param name="lockShader"></param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.LockBlendState(System.Boolean)">
            <summary>
            Locks the blend state so that the following calls to <see cref="M:devDept.Graphics.RenderContextBase.SetShader(devDept.Graphics.shaderType,devDept.Graphics.ShaderParameters,System.Boolean)"/> won't do anything until the blend states are unlocked.
            </summary>
            <param name="lockBlendState"></param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.EnableThickLines">
            <summary>
            Enables thick lines rendering.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.EnableThickLinesInPolygonLineMode">
            <summary>
            Enables thick lines rendering when the <see cref="P:devDept.Graphics.RenderContextBase.CurrentRasterizerState"/> state is polygon line.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.EnableThickPoints">
            <summary>
            Enables thick points rendering.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.EnableThickPointsInPolygonLineMode">
            <summary>
            Enables thick points rendering when the <see cref="P:devDept.Graphics.RenderContextBase.CurrentRasterizerState"/> state is polygon line.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[],System.Drawing.Color[])">
            <summary>
            Draws lines with colored vertices.
            </summary>
            <param name="vertices">The vertices</param>
            <param name="colors">The colors of the vertices</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[],System.Drawing.Color[],System.Int32,System.Int32)">
            <summary>
            Draws lines with colored vertices.
            </summary>
            <param name="vertices">The vertices</param>
            <param name="colors">The color of each vertex</param>
            <param name="first">The index of the first vertex to draw</param>
            <param name="count">The number of the vertices to draw</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[],System.Drawing.Color[],System.Single[])">
            <summary>
            Draws lines with colored vertices specifying a different lineWidth per line.
            </summary>
            <param name="vertices">The vertices</param>
            <param name="colors">The color of each vertex</param>
            <param name="lineWidths">The line width of each line (the size of the array must be half of the <paramref name="vertices"/> array)</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[],System.Drawing.Color[],System.Single[],System.Int32,System.Int32)">
            <summary>
            Draws lines with colored vertices specifying a different lineWidth per line.
            </summary>
            <param name="vertices">The vertices</param>
            <param name="colors">The color of each vertex</param>
            <param name="lineWidths">The line width of each line (the size of the array must be half of the <paramref name="vertices"/> array)</param>
            <param name="first">The index of the first vertex to draw</param>
            <param name="count">The number of the vertices to draw</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetSceneAmbient(System.Single[])">
            <summary>
            Sets the ambient component that is always added to the scene (multiplied by the material's ambient component).
            </summary>
            <param name="color">The color to set</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.NormalizeNormals(System.Boolean)">
            <summary>
            Turns the vertex normals normalization on or off (OpenGL only).
            </summary>
            <param name="enable">If true, turns it on, else turn it off</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawLinesAndPointsOnTheFly(System.Collections.Generic.List{devDept.Geometry.Point3D},System.Collections.Generic.List{devDept.Geometry.Point3D})">
            <summary>
            
            </summary>
            <param name="lines"></param>
            <param name="points"></param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetLineStipple(System.Int32,System.UInt16,devDept.Graphics.CameraBase)">
            <summary>
            Sets the line stipple parameters.
            </summary>
            <param name="factor">The multiplier for each bit in the line stipple pattern</param>
            <param name="pattern">Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized. Bit zero is used first; the default pattern is all 1's</param>
            <param name="camera">The camera of the viewport being drawn</param>
        </member>
        <member name="F:devDept.Graphics.RenderContextBase.lineStipple">
            <summary>
            Telss if the lineStipple is enabled or not.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.EnableLineStipple(System.Boolean)">
            <summary>
            Enables or disables the line stipple.
            </summary>
            <param name="enable">If true enables, else disables</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.ClearDynamicBuffers">
            <summary>
            Clears the dynamic buffers allocated to draw the entities (Direct3D only).
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.UpdateAntialiasing">
            <summary>
            Updates the graphics data for the Antialiasing settings.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.SetRasterizerState(devDept.Graphics.rasterizerPolygonDrawingType,devDept.Graphics.rasterizerCullFaceType)">
            <summary>
            Sets the rasterizer state.
            </summary>
            <param name="rasterizerPolygonDrawingType">the polygon drawing type</param>
            <param name="rasterizerCullFaceType">The cull face type</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.BeginCaptureZBufferOnce">
            <summary>
            Avoids multiple reading of the whole ZBuffer texture in Direct3D when reading different pick box sizes.
            </summary>
            <remarks>For internal use only.</remarks>
            <seealso cref="M:devDept.Graphics.RenderContextBase.EndCaptureZBufferOnce"/>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.EndCaptureZBufferOnce">
            <summary>
            Stops the optimization activated by <see cref="M:devDept.Graphics.RenderContextBase.BeginCaptureZBufferOnce"/>
            </summary>
            <remarks>For internal use only.</remarks>
            <seealso cref="M:devDept.Graphics.RenderContextBase.BeginCaptureZBufferOnce"/>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.LockDepthState(System.Boolean)">
            <summary>
            Locks the depth stencil state so that the following calls to <see cref="M:devDept.Graphics.RenderContextBase.SetState(devDept.Graphics.depthStencilStateType)"/> won't do anything until the state is unlocked.
            </summary>
            <param name="lockState">The lock status</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.DrawTextureOnScreen(System.Drawing.Rectangle,devDept.Graphics.TextureBase,devDept.Graphics.TextureBase)">
            <summary>
            Draws a texture on screen.
            </summary>
            <param name="rect">The screen rectangle where the texture will be drawn</param>
            <param name="textureForRendering">The texture</param>
            <param name="textureResolved">A texture used to resolve multisample textures</param>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.EnableXOR(System.Boolean)">
            <summary>
            Enables or disables the XOR (inverted color) drawing mode.
            </summary>
            <param name="enable">The enable status</param>
            <remarks>If <paramref name="enable"/> is true, it sets a white color and <see cref="F:devDept.Graphics.blendStateType.XOR"/> blend state, else it sets a <see cref="F:devDept.Graphics.blendStateType.NoBlend"/> blend state.</remarks>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.EnableXORForTexture(System.Boolean,devDept.Graphics.ShaderParameters)">
            <summary>
            Enables or disables the XOR (inverted color) drawing mode for the texture.
            </summary>
            <param name="enable">The enable status</param>
            <param name="shaderParams">The shader parameters to update the shader</param>
            <remarks>If <paramref name="enable"/> is true, it sets a white color and <see cref="F:devDept.Graphics.blendStateType.XOR"/> blend state, else it sets a <see cref="F:devDept.Graphics.blendStateType.NoBlend"/> blend state.
            It also calls the <see cref="M:devDept.Graphics.RenderContextBase.EnableAlphaClip(System.Boolean)"/> to discard the transparent texture fragments.</remarks>
        </member>
        <member name="M:devDept.Graphics.RenderContextBase.EnableAlphaClip(System.Boolean)">
            <summary>
            Discards fragments with alpha &lt; 0.1
            </summary>
            <param name="enable"></param>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.NumberOfSplits">
            <summary>
            Gets the number of splits used in the parallel split shadowmapping algorithm.
            </summary>       
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.ActiveLights">
            <summary>
            Currently active lights.
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.EnvironmentSupported">
            <summary>
            Gets a values indicating whether the Environment is supported.
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.CurrentPointSize">
            <summary>
            Gets the current point size (in pixels).
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.CurrentLineWidth">
            <summary>
            Gets the current line width (in pixels).
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.CurrentWireColor">
            <summary>
            Gets or sets the current color for wireframe entities.
            </summary>
            <remarks>use the <see cref="!:SetWireframeColor"/> to properly set it.</remarks>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.CurrentMaterial">
            <summary>
            Gets or sets the current material.
            </summary>
            <remarks>Use the <see cref="M:devDept.Graphics.RenderContextBase.SetMaterial(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)"/> to properly set it.</remarks>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.CurrentBackMaterial">
            <summary>
            Gets or sets the current material for the back faces.
            </summary>
            <remarks>Only the Ambient and Diffuse components are used. The other properties are inherited from the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/></remarks>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.IsDirect3D">
            <summary>
            Tells if the graphics system is using the Direct3D renderer.
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.CurrentEnvironmentMap">
            <summary>
            Gets the environment texture.
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.CurrentRasterizerState">
            <summary>
            Gets the current rasterizer state.
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.CurrentDepthStencilState">
            <summary>
            Gets the current depth stencil state.
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.CurrentBlendState">
            <summary>
            Gets the current blend state.
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.GraphicalIssues">
            <summary>Gets a list of graphical issues on the machine's adapter.</summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.CurrentShader">
            <summary>
            Gets the current shader.
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.GraphicsDataWithError">
            <summary>
            Gets or sets the EntityGraphicsData that caused error during the drawing.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.FrontFaceCW">
            <summary>
            Gets or sets a value telling if the current front faces are oriented clockwise.
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.SupportShadows">
            <summary>
            Tells if the rendering context supports the dynamic shadows.
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.ColorMaterialMode">
            <summary>
            Gets or sets the color material mode.
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.RendererVersion">
            <summary>
            Gets the renderer version.
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.RendererName">
            <summary>
            Gets the name of the renderer. This name is typically specific to a particular configuration of a hardware platform. It does not change from release to release. 
            </summary>
        </member>
        <member name="P:devDept.Graphics.RenderContextBase.ReflectionsSupported">
            <summary>
            Tells if the planar reflections are supported by the graphics system.
            </summary>
        </member>
        <member name="T:devDept.Graphics.RenderContextBase.matrixType">
            <summary>
            Matrix type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.RenderContextBase.matrixType.All">
            <summary>
            Modelview and projection
            </summary>
        </member>
        <member name="F:devDept.Graphics.RenderContextBase.matrixType.Projection">
            <summary>
            Projection
            </summary>
        </member>
        <member name="F:devDept.Graphics.RenderContextBase.matrixType.ModelView">
            <summary>
            Modelview
            </summary>
        </member>
        <member name="T:devDept.Graphics.RenderContextBase.drawSceneFuncDelegate">
            <summary>
            Draw scene delegate.
            </summary>
            <param name="drawSceneParams"></param>
        </member>
        <member name="M:devDept.Graphics.D3DRenderContext.DrawTriangles(devDept.Geometry.Point3D[])">
            <summary>
            Draws triangles without normals.
            </summary>
            <param name="vertices">The vertices</param>
        </member>
        <member name="F:devDept.Graphics.D3DRenderContext.wpfColorBufferTexture">
            <summary>
            Do the rendering on the <see cref="P:devDept.Graphics.D3DRenderContext.backBufferTexture"/> and copy it to the <see cref="F:devDept.Graphics.D3DRenderContext.wpfColorBufferTexture"/> to avoid issues of synchronization with the D3DImage.
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DRenderContext._depthTexture">
            <summary>
            Texture used to copy the depth buffer.
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DRenderContext.depthColorBufferTexture">
            <summary>
            Color texture used to render the Depth bufffer in level_9_3.
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DRenderContext.wpfImageSource">
            <summary>
            The WPF Image Source object. For internal use only.
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DRenderContext.lockRenderTargets">
            <summary>
            Locks the set of the render targets.
            </summary>
            <remarks>Necessary for correct depth reading in WPF with antialiasing (i.e. to compute the rotation point under the mouse).</remarks>
        </member>
        <member name="M:devDept.Graphics.D3DRenderContext.AddBufferData(System.Single[],SharpDX.Direct3D.PrimitiveTopology,System.Int32,System.Boolean)">
            <summary>
            Adds the array of floats to the current D3DEntityBuffer.
            </summary>
            <param name="vertices">Array of vertices</param>
            <param name="topology">the primitive topology</param>
            <param name="nElements">Number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.D3DRenderContext.AddBufferData(System.Single[],System.Int32[],SharpDX.Direct3D.PrimitiveTopology,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds the array of floats to the current D3DEntityBuffer.
            </summary>
            <param name="vertices">Array of vertices</param>
            <param name="indices"></param>
            <param name="topology">the primitive topology</param>
            <param name="nElements">Number of vertices</param>
            <param name="nIndices"></param>
            <param name="addToCurrentBufferPart"></param>
        </member>
        <member name="M:devDept.Graphics.D3DRenderContext.PackData``1(``0[]@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Packs the array of data so that it contains only the needed data (in case first is &gt; 0 and count is &lt; of data size).
            </summary>
            <param name="data">The data to pack</param>
            <param name="nFloatsPerVertex">Number of "T" elements per point</param>
            <param name="first">The first vertex index</param>
            <param name="count">The number of points</param>
        </member>
        <member name="M:devDept.Graphics.D3DRenderContext.ReadColorBuffer(devDept.Graphics.IViewport,System.Drawing.Rectangle,System.Int32@,System.Int32@)">
            <summary>
            Reads the color buffer.
            </summary>
            <param name="rect">Rectangle to read, in screen coordinates.</param>
            <param name="stride"></param>
            <param name="bpp"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.D3DRenderContext.GetTextureData(System.Drawing.Rectangle,SharpDX.Direct3D11.Texture2D,System.Boolean)">
            <summary>
            Get the screen RGB pixels.
            </summary>
            <param name="rect">The rectangle to read, in screen coordinates ( 0,0 on top-left)</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.D3DRenderContext.GetTextureSampler(SharpDX.Direct3D11.Filter,System.Boolean,System.Boolean,SharpDX.Direct3D11.Device,System.Single)">
            <summary>
            Gets the texture sampler or creates a new one if none is found with the required options.
            </summary>
            <param name="minMagFilter"></param>
            <param name="repeatX"></param>
            <param name="repeatY"></param>
            <param name="device"></param>
            <param name="maxLOD"></param>
            <returns>The texture sampler index.</returns>
        </member>
        <member name="M:devDept.Graphics.D3DRenderContext.ResolveMultisampleTexture(devDept.Graphics.TextureBase,devDept.Graphics.TextureBase)">
            <summary>
            Resolves a multisample texture on a single sample texture.
            </summary>
            <param name="multiSampleTexture"></param>
            <param name="singleSampleTexture"></param>
        </member>
        <member name="P:devDept.Graphics.D3DRenderContext.MaxVertexBufferSize">
            <summary>
            Maximum number of float that a vertex buffer can contain.
            </summary>
            <remarks> D3D11 must support at minimum 128MB, which is around 33'000'000 floats.</remarks>
        </member>
        <member name="T:devDept.Graphics.DXUtils">
            <summary>
            Utility Class for <see cref="T:devDept.Graphics.D3DRenderContext"/> class.
            </summary>
        </member>
        <member name="M:devDept.Graphics.DXUtils.ConvertToDX_2D(System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts the collection of vertices to a float array.
            </summary>
            <param name="vertices">The collection of vertices.</param>
            <param name="first">The first vertex index</param>
            <param name="count">The number of vertices</param>
            <param name="closeLoop">If true, adds the first point as the last to close the loop</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.DXUtils.ConvertToDX_3D(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts the collection of vertices to a float array.
            </summary>
            <param name="vertices">The collection of vertices.</param>
            <param name="first">The first vertex index</param>
            <param name="count">The number of vertices</param>
            <param name="closeLoop">If true, adds the first point as the last to close the loop</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.DXUtils.ConvertToDX_RGB(System.Collections.Generic.IList{devDept.Geometry.PointRGB},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts the collection of vertices to a float array.
            </summary>
            <param name="vertices">The collection of vertices.</param>
            <param name="first">The first vertex index</param>
            <param name="count">The number of vertices</param>
            <param name="closeLoop">If true, adds the first point as the last to close the loop</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.DXUtils.GetQuadData(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Int32,System.Int32)">
            <summary>
            Gets data for a Quad.
            </summary>
            <param name="vertices">Quads vertices</param>
            <param name="normals">quad normals (one per quad)</param>
            <param name="first">first vertex index</param>
            <param name="count">Number of vertices too get</param>
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.DXUtils.ConvertToFloatArray(System.Double[])">
            <summary>
            Converts the given array of doubles to an array of floats.
            </summary>
            <param name="array">The array of doubles</param>
            <returns>The array of floats.</returns>
        </member>
        <member name="M:devDept.Graphics.DXUtils.ConvertToDoubleArray(System.Single[])">
            <summary>
            Converts the given array of floats to an array of doubles.
            </summary>
            <param name="array">The array of doubles</param>
            <returns>The array of doubles.</returns>
        </member>
        <member name="T:devDept.Graphics.D3DEntityBuffer">
            <summary>
            Direct3D entity buffer class.
            </summary>
        </member>
        <member name="M:devDept.Graphics.D3DEntityBuffer.ComputeStride(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the Stride (the number of bytes per vertex element).
            </summary>
            <param name="bufferSize">The size of the buffer</param>
            <param name="floatLength">Length of the float array</param>
            <param name="nElements">Number of vertices in the array</param>
            <returns>The stride (number of bytes per vertex)</returns>
        </member>
        <member name="M:devDept.Graphics.D3DEntityBuffer.Draw(devDept.Graphics.RenderContextBase,System.Boolean)">
            <summary>
            Draws a part of the vertex buffer.
            </summary>
            <param name="renderContext">The render context</param>
            <param name="nextPart">If true draws the next part, else draws the current part</param>
        </member>
        <member name="M:devDept.Graphics.D3DEntityBuffer.Draw(devDept.Graphics.RenderContextBase,System.Int32)">
            <summary>
            Draws the i-th part of the vertex buffer.
            </summary>
            <param name="renderContext">The render context</param>
            <param name="part">The part to draw</param>
        </member>
        <member name="M:devDept.Graphics.D3DEntityBuffer.Draw(devDept.Graphics.D3DRenderContext,System.Int32)">
            <summary>
            Draws the i-th part of the vertex buffer.
            </summary>
            <param name="renderContext">The render context</param>
            <param name="part">The part to draw</param>
        </member>
        <member name="F:devDept.Graphics.D3DEntityBuffer.currVertices">
            <summary>
            Current vertices number of the last chunck that's being filled (chunks[n-1]).
            </summary>
        </member>
        <member name="M:devDept.Graphics.D3DEntityBuffer.AddData(System.Int32,System.Single[],System.Int32[],SharpDX.Direct3D.PrimitiveTopology,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds the array of floats to the buffer.
            </summary>
            <param name="maxVertexBufferSize">Maximum number of floats per vertex buffer</param>
            <param name="vertices">Array of vertices</param>
            <param name="indices">Array of indices</param>
            <param name="topology">the primitive topology</param>
            <param name="nVertices">Number of vertices</param>
            <param name="nIndices">Number of indices</param>
            <param name="newPart">If true adds the vertices as a new piece with new topology, else adds them to the current piece</param>
        </member>
        <member name="P:devDept.Graphics.D3DEntityBuffer.Stride">
            <summary>
            The number of bytes of each vertex in the buffer.
            </summary>
        </member>
        <member name="P:devDept.Graphics.D3DEntityBuffer.FloatPerVertex">
            <summary>
            Gets the number of floats per each vertex in the buffer.
            </summary>
        </member>
        <member name="P:devDept.Graphics.D3DEntityBuffer.currPartToDraw">
            <summary>
            The current part of the buffer to draw.
            </summary>
        </member>
        <member name="T:devDept.Graphics.DynamicBufferClearAfterDraw">
            <summary>
            Direct3D dynamic buffer class used internally for tr.
            </summary>
        </member>
        <member name="T:devDept.Graphics.DynamicBuffer">
            <summary>
            Direct3D dynamic buffer class.
            </summary>
        </member>
        <member name="M:devDept.Graphics.DynamicBuffer.#ctor(SharpDX.Direct3D11.Device,System.Int32,System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="device">The device</param>
            <param name="vertexBufferSize">The vertex buffer size</param>
            <param name="indexBufferSize">The index buffer size</param>
        </member>
        <member name="M:devDept.Graphics.DynamicBuffer.#ctor(SharpDX.Direct3D11.Device,System.Single[],System.Int32[],SharpDX.Direct3D.PrimitiveTopology,System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="device">The device</param>
            <param name="vertexData">The vertex buffer data</param>
            <param name="indexData">The index buffer data</param>
            <param name="topology">The topology</param>
            <param name="nVertices">The number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.DynamicBuffer.UpdateBuffer(System.Single[],System.Int32,System.Int32,SharpDX.Direct3D.PrimitiveTopology,System.Int32)">
            <summary>
            Updates the buffer values.
            </summary>
            <param name="data">The data to copy</param>
            <param name="offset">The zero-based offset in data at which to start copying the points</param>
            <param name="dataLength">Number of floats of "data" to copy to the buffer</param>
            <param name="topology">The primitive type to draw</param>
            <param name="nElements">Number of vertices</param>
        </member>
        <member name="M:devDept.Graphics.DynamicBuffer.UpdateBuffer">
            <summary>
            Updates the Buffer with the data already memorized.
            </summary>
        </member>
        <member name="P:devDept.Graphics.DynamicBuffer.VertexBufferSize">
            <summary>
            Gets the number of floats that the vertex buffer can contain.
            </summary>
        </member>
        <member name="P:devDept.Graphics.DynamicBuffer.IndexBufferSize">
            <summary>
            Gets the number of integers that the index buffer can contain.
            </summary>
        </member>
        <member name="T:devDept.Graphics.vertexBufferData">
            <summary>
            Class that holds the data for a portion of a vertex Buffer.
            </summary>
        </member>
        <member name="F:devDept.Graphics.vertexBufferData.nElementsPerChunk">
            <summary>
            Number of elements of each chunk.
            </summary>       
        </member>
        <member name="F:devDept.Graphics.vertexBufferData.startVertex">
            <summary>
            Start vertex of first chunk (the others start necessarily from 0).
            </summary>
        </member>
        <member name="F:devDept.Graphics.vertexBufferData.firstChunk">
            <summary>
            First chunk index.
            </summary>
        </member>
        <member name="F:devDept.Graphics.vertexBufferData.lastChunk">
            <summary>
            Last chunk index.
            </summary>
        </member>
        <member name="T:devDept.Graphics.TextureD3D_2D">
            <summary>
            2D color texture class for Direct3D.
            </summary>
        </member>
        <member name="T:devDept.Graphics.TextureD3D">
            <summary>
            Base class for Direct3D textures.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="T:devDept.Graphics.TextureBase">
            <summary>
            Base utility class to load textures. 
            </summary>
        </member>
        <member name="F:devDept.Graphics.TextureBase.AlphaTextureUnit">
            <summary>
            TextureUnit for alpha maps.
            </summary>
        </member>
        <member name="F:devDept.Graphics.TextureBase.needsDispose">
            <summary>
            Tells if the bitmap must be disposed when disposing the texture (because was created internally).
            </summary>
        </member>
        <member name="M:devDept.Graphics.TextureBase.Clear">
            <summary>
            Calls OpenGL's glDeleteTexture.
            </summary>
        </member>
        <member name="M:devDept.Graphics.TextureBase.Dispose">
            <summary>
            Calls OpenGL's glDeleteTexture.
            </summary>
        </member>
        <member name="M:devDept.Graphics.TextureBase.Load(devDept.Graphics.RenderContextBase,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Loads the texture
            </summary>
            <param name="renderContext">The render context</param>
            <param name="minFunc">Minifying function</param>
            <param name="magFunc">Magnifying function</param>
            <param name="anisotropicFiltering">If true, enables anisotropic filtering for mipmapping</param>
            <param name="repeatX">If true, the texture is repeated in the X direction</param>
            <param name="repeatY">If true, the texture is repeated in the Y direction</param>
        </member>
        <member name="M:devDept.Graphics.TextureBase.Load(devDept.Graphics.RenderContextBase,System.Drawing.Bitmap,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Loads the texture
            </summary>
            <param name="bitmap">The image</param>
            <param name="minFunc">Minifying function</param>
            <param name="magFunc">Magnifying function</param>
            <param name="anisotropicFiltering">If true, enables anisotropic filtering for mipmapping</param>
            <param name="repeatX">If true, the texture is repeated in the X direction</param>
            <param name="repeatY">If true, the texture is repeated in the Y direction</param>
            <param name="checkPowerOfTwo">If true, checks that the image size is power of two</param>
            <param name="enlargeIfSizeNotSupported">If true, the image is put in a bigger image (with some empty border, keeping the originla size of image) 
            when the image is not power of two and the hardware does not support it. Else it is resized to a smaller power of two size.</param>
        </member>
        <member name="M:devDept.Graphics.TextureBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Graphics.TextureBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>       
        </member>
        <member name="M:devDept.Graphics.TextureBase.AllocateMemory(devDept.Graphics.RenderContextBase,System.Boolean,System.Int32,System.Int32,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean,System.Boolean,System.IntPtr,System.Boolean)">
            <summary>
            Allocates memory for a texture.
            </summary>
            <param name="context">The render context</param>
            <param name="renderTarget">In true, the texture is used as a render target</param>
            <param name="width">The texture width</param>
            <param name="height">The texture height</param>
            <param name="minFilter">The minification filter</param>
            <param name="magFilter">The magnification filter</param>
            <param name="repeatS">If true the texture is repeated in the S direction, else it is clamped</param>
            <param name="repeatT">If true the texture is repeated in the T direction, else it is clamped</param>
            <param name="pixels">The pixels data pointer. If not null, they are copied to the texture memory.</param>
        </member>
        <member name="P:devDept.Graphics.TextureBase.Size">
            <summary>
            The texture size.
            </summary>
        </member>
        <member name="P:devDept.Graphics.TextureBase.BitmapSize">
            <summary>
            The size of the bitmap from which the texture was created.
            </summary>
            <remarks>It can be different from <see cref="P:devDept.Graphics.TextureBase.Size"/> if the graphics card does not support the texture non power of two.</remarks>
        </member>
        <member name="F:devDept.Graphics.TextureD3D.sampler">
            <summary>
            The texture sampler. It's the index to the textureSamples list of RenderContext.
            </summary>
        </member>
        <member name="M:devDept.Graphics.TextureD3D_2D.#ctor(devDept.Graphics.RenderContextBase,System.Drawing.Bitmap,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a 2D texture.
            </summary>
            <param name="renderContext">The render context</param>
            <param name="bmp">The image</param>
            <param name="minFunc">Minification function</param>
            <param name="magFunc">Magnification function</param>
            <param name="anisotropicFiltering">If true, enables anisotropic filtering for mipmapping</param>        
            <param name="repeatX">If true, the texture is repeated in the X direction</param>
            <param name="repeatY">If true, the texture is repeated in the Y direction</param>
            <returns></returns>
        </member>
        <member name="T:devDept.Graphics.IEnvironment">
            <summary>
            Interface for the environment mapping reflections.
            </summary>
        </member>
        <member name="T:devDept.Graphics.EntityGraphicsData">
            <summary>
            Class that holds the compiled graphics data.
            </summary>
        </member>
        <member name="F:devDept.Graphics.EntityGraphicsData.Parent">
            <summary>
            Parent object, used to identify the entity who caused an error if it was not compiled
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:devDept.Graphics.EntityGraphicsData.SetParent(System.Object)">
            <summary>
            Sets the parent object, used to identify the entity who caused an error if it was not compiled.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:devDept.Graphics.EntityGraphicsData.Dispose">
            <summary>
            Cleans up the graphics resources.
            </summary>
        </member>
        <member name="F:devDept.Graphics.EntityGraphicsData.d3dBuffer">
            <summary>
            Direct3D buffer.
            </summary>
        </member>
        <member name="M:devDept.Graphics.EntityGraphicsData.DrawD3D(devDept.Graphics.RenderContextBase,System.Int32)">
            <summary>
            Draws the specified part of the entity buffer (Direct3D only).
            </summary>
            <param name="context">The render context</param>
            <param name="part">The part of the buffer to draw</param>
        </member>
        <member name="M:devDept.Graphics.EntityGraphicsData.DrawD3D(devDept.Graphics.RenderContextBase,System.Boolean)">
            <summary>
            Draws the current part of the entity buffer or the next one (Direct3D only).
            </summary>
            <param name="context">The render context</param>
            <param name="nextPart">If true, draws the next part of the buffer, else it draws the current one</param>
        </member>
        <member name="F:devDept.Graphics.EntityGraphicsData.PrimitiveType">
            <summary>
            The type of primitive to draw;
            </summary>
        </member>
        <member name="M:devDept.Graphics.EntityGraphicsData.IsValid">
            <summary>
            Tells if the graphics data has been compiled.
            </summary>
            <returns>True if the graphics data has been compiled.</returns>
        </member>
        <member name="T:devDept.Graphics.VBOParamsBase">
            <summary>
            Base Class that holds the parameters for VBO.
            </summary>
        </member>
        <member name="F:devDept.Graphics.VBOParamsBase.indices">
            <summary>
            Triangles Indices
            </summary>
        </member>
        <member name="F:devDept.Graphics.VBOParamsBase.vertices">
            <summary>
            Triangles vertices
            </summary>
        </member>
        <member name="F:devDept.Graphics.VBOParamsBase.normals">
            <summary>
            Vertices normals
            </summary>
        </member>
        <member name="F:devDept.Graphics.VBOParamsBase.numberOfCoordPerVertex">
            <summary>
            Number of coordinates per vertex
            </summary>
        </member>
        <member name="F:devDept.Graphics.VBOParamsBase.primitiveMode">
            <summary>
            The type of primitive
            </summary>
        </member>
        <member name="T:devDept.Graphics.VBOParams">
            <summary>
            Class that holds the parameters for VBO with normals and colors.
            </summary>
        </member>
        <member name="F:devDept.Graphics.VBOParams.colors">
            <summary>
            Vertices colors (3 bytes per vertex for full color, 1 byte per vertex for color modulation).
            </summary>
        </member>
        <member name="T:devDept.Graphics.VBOParamsTexture">
            <summary>
            Class that holds the parameters for VBO with normals and texture coordinates.
            </summary>
        </member>
        <member name="P:devDept.Graphics.VBOParamsTexture.TextureCoordinates">
            <summary>
            Gets or sets the texture coordinates (1 or 2 float per vertex).
            </summary>
        </member>
        <member name="T:devDept.Graphics.GfxEnvironmentParams">
            <summary>
            Base class with graphics environment data.
            </summary>
        </member>
        <member name="M:devDept.Graphics.GfxEnvironmentParams.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Graphics.GfxEnvironmentParams.#ctor(devDept.Graphics.RenderContextBase,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="renderContext"></param>
            <param name="maxPatternRepetitions"></param>
        </member>
        <member name="M:devDept.Graphics.GfxEnvironmentParams.#ctor(devDept.Graphics.RenderContextBase,System.Single[],System.Single,System.Int32)">
            <summary>
            Standard constructor.
            </summary>
            <param name="renderContext"></param>
            <param name="pattern">The line type pattern</param>
            <param name="patternLength">The length of the line type pattern</param>
            <param name="maxPatternRepetitions">The maximum number of pattern repetitions allowed between two vertices of a curve</param>
        </member>
        <member name="P:devDept.Graphics.GfxEnvironmentParams.direct3D">
            <summary>
            If true, the graphics environment is using Direct3D to render the scene.
            </summary>
        </member>
        <member name="P:devDept.Graphics.GfxEnvironmentParams.MaxPatternRepetitions">
            <summary>
            Gets or sets the maximum number of pattern repetitions allowed between two vertices of a curve.
            </summary>
        </member>
        <member name="P:devDept.Graphics.GfxEnvironmentParams.PatternLength">
            <summary>
            Gets or sets the length of the line type pattern.
            </summary>
        </member>
        <member name="P:devDept.Graphics.GfxEnvironmentParams.Pattern">
            <summary>
            Gets or sets the line type pattern.
            </summary>
        </member>
        <member name="P:devDept.Graphics.GfxEnvironmentParams.RenderContext">
            <summary>
            Gets or sets the render context.
            </summary>
        </member>
        <member name="T:devDept.Graphics.GfxSilhoData">
            <summary>
            Base class with the data to draw silhouettes.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="F:devDept.Graphics.GfxSilhoData.Entity">
            <summary>
            The entity this data belongs to.
            </summary>
        </member>
        <member name="F:devDept.Graphics.GfxSilhoData.Parents">
            <summary>
            The  chain of nested parents.
            </summary>
        </member>
        <member name="T:devDept.Graphics.SilhoVertexArrayData">
            <exclude/>
            <excludetoc/>
        </member>
        <member name="T:devDept.Graphics.GraphicsException">
            <summary>
            An exception thrown by Eyeshot.
            </summary>
        </member>
        <member name="M:devDept.Graphics.GraphicsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:devDept.Graphics.GraphicsException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            instance that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>
            instance that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:devDept.Graphics.GraphicsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified
            error message and a reference to the inners exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference, the current exception is raised
            in a catch block that handles the inners exception.</param>
        </member>
        <member name="M:devDept.Graphics.GraphicsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:devDept.Graphics.GraphicsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Exception"/> class.
            </summary>
        </member>
        <member name="T:devDept.Graphics.IShaderTechnique">
            <summary>
            Defines the Vertex, Pixel and Geometry shader that constitute the shader technique.
            </summary>
        </member>
        <member name="T:devDept.Graphics.IShader">
            <summary>
            Shaders common methods.
            </summary>
        </member>
        <member name="P:devDept.Graphics.IShaderTechnique.UpdatedInFrame">
            <summary>
            Gets or sets a value indicating whether the shader has been updated in the current frame.
            </summary>
        </member>
        <member name="T:devDept.Graphics.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:devDept.Graphics.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:devDept.Graphics.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:devDept.Graphics.Properties.Resources.Environment">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:devDept.Graphics.RenderContextUtility">
            <summary>
            Class that provide utility methods for the render context.
            </summary>
        </member>
        <member name="M:devDept.Graphics.RenderContextUtility.ConvertColor(System.Drawing.Color)">
            <summary>
            Method that converts a <see cref="T:System.Drawing.Color"/> to a <see cref="T:System.Windows.Media.Brush"/>.
            </summary>
            <param name="color">The color to convert</param>
            <returns>The <see cref="T:System.Windows.Media.Brush"/> object.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextUtility.ConvertColorFromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new <see cref="T:System.Windows.Media.Brush"/> structure by using the specified sRGB alpha channel and color channel values.
            </summary>
            <param name="a">The alpha channel of the new color.</param>
            <param name="r">The red channel of the new color.</param>
            <param name="g">The green channel of the new color.</param>
            <param name="b">The blue channel of the new color.</param>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> structure with the specified values</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextUtility.ConvertColorFromRgb(System.Byte,System.Byte,System.Byte)">
            <summary>
            Creates a new <see cref="T:System.Windows.Media.Brush"/> structure by using the specified RGB color channel values.
            </summary>        
            <param name="r">The red channel of the new color.</param>
            <param name="g">The green channel of the new color.</param>
            <param name="b">The blue channel of the new color.</param>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> structure with the specified values</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextUtility.ConvertColor(System.Windows.Media.Brush)">
            <summary>
            Method unified between WinForms and WPF that converts a <see cref="T:System.Drawing.Color"/> or <see cref="T:System.Windows.Media.Brush"/> to a <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="color">The color (WinForms) or brush (WPF)</param>
            <returns>The converted <see cref="T:System.Drawing.Color"/>.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextUtility.ConvertPoint(System.Windows.Point)">
            <summary>
            Method that converts a <see cref="T:System.Windows.Point"/> to a <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="point">The point to convert</param>
            <returns>The <see cref="T:System.Drawing.Point"/> object.</returns>
            <remarks>The returned point is adjusted for DPI scaling.</remarks>
            <seealso cref="M:devDept.Geometry.Utility.GetScalingLevel"/>
        </member>
        <member name="M:devDept.Graphics.RenderContextUtility.ConvertPoint(System.Drawing.Point)">
            <summary>
            Method that converts a <see cref="T:System.Drawing.Point"/> to a <see cref="T:System.Windows.Point"/>.
            </summary>
            <param name="point">The point to convert</param>
            <returns>The <see cref="T:System.Windows.Point"/> object.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextUtility.AreEqual(System.Windows.Media.Brush,System.Drawing.Color)">
            <summary>
            Method unified between WinForms and WPF that checks the equality between a <see cref="T:System.Drawing.Color"/> (WinForms) or <see cref="T:System.Windows.Media.Brush"/> (WPF) object and another <see cref="T:System.Drawing.Color"/> object.
            </summary>
            <param name="color1">The first color (WinForms) or brush (WPF) object</param>
            <param name="color2">The second color</param>
            <returns>True if they are equal, false elsewise.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextUtility.AreEqual(System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            Method that checks the equality between two <see cref="T:System.Windows.Media.Brush"/> object.
            </summary>
            <param name="color1">The first brush color.</param>
            <param name="color2">The second brush color.</param>
            <returns>True if they are equal, false elsewise.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextUtility.ConvertColorTable(System.Windows.Media.Brush[])">
            <summary>
            Method unified between WinForms and WPF that converts a <see cref="T:System.Drawing.Color"/> array (WinForms) or <see cref="T:System.Windows.Media.Brush"/> array (WPF) to a <see cref="T:System.Drawing.Color"/> array.
            </summary>
            <param name="colorTable">The color array (WinForms) or brush array (WPF)</param>
            <returns>The converted <see cref="T:System.Drawing.Color"/> array.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextUtility.ConvertImage(System.Windows.Media.ImageSource)">
            <summary>
            Method unified between WinForms and WPF that converts a <see cref="T:System.Drawing.Image"/> or <see cref="T:System.Windows.Media.ImageSource"/> to a <see cref="T:System.Drawing.Image"/>.
            </summary>
            <param name="image">The image</param>
            <returns>The converted <see cref="T:System.Drawing.Image"/>.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextUtility.ConvertImage(System.Drawing.Bitmap)">
            <summary>
            Method that converts a <see cref="T:System.Drawing.Bitmap"/> to a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.
            </summary>
            <param name="bitmap">The image</param>
            <returns>The converted <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.</returns>
        </member>
        <member name="M:devDept.Graphics.RenderContextUtility.ConvertImage(System.Windows.Media.Imaging.BitmapImage)">
            <summary>
            Method unified between WinForms and WPF that converts a <see cref="T:System.Drawing.Bitmap"/> (WinForms) or <see cref="T:System.Windows.Media.Imaging.BitmapImage"/> (WPF) to a <see cref="T:System.Drawing.Bitmap"/>.        
            </summary>
            <param name="bitmapImage">The image</param>
            <returns>The converted <see cref="T:System.Drawing.Bitmap"/>.</returns>
        </member>
        <member name="T:devDept.Graphics.ShadowBase">
            <summary>
            Base class for planar shadows.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:devDept.Graphics.ShadowBase.Dispose">
            <summary>
            Releases unmanaged resources.
            </summary>
        </member>
        <member name="T:devDept.Graphics.FrustumData">
            <summary>
            Frustum data class for shadow map computation.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="T:devDept.Graphics.ShadowMapData">
            <summary>
            Class for shadow map data.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:devDept.Graphics.ShadowMapData.EnableForShaders(System.Int32)">
            <summary>
            Enables ShadowMap.
            </summary>
            <param name="texNumber">number of texture</param>
        </member>
        <member name="T:devDept.Graphics.ShadowMapData.GfxShadowParams">
            <summary>
            Class with the parameters necessary to draw the realistic shadows.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="T:devDept.Graphics.LightSettings">
            <summary>
            Directional light definition.
            </summary>
        </member>
        <member name="M:devDept.Graphics.LightSettings.GetLightDirection(System.Double[],System.Single[]@,System.Single[]@)">
            <summary>
            Gets the light direction.
            </summary>
            <param name="modelViewMatrix">The camera modelview matrix</param>
            <param name="direction">Returns the world direction for directional and spot lights</param>
            <param name="position">Returns the position for the point and spot lights</param>
        </member>
        <member name="M:devDept.Graphics.LightSettings.#ctor">
            <summary>Empty constructor.</summary>
        </member>
        <member name="M:devDept.Graphics.LightSettings.#ctor(devDept.Geometry.Vector3D,System.Drawing.Color)">
            <summary>Direction and color constructor.</summary>
            <overloads>Sets specular color to Black and active to false.</overloads>
            <param name="direction">Direction</param>
            <param name="color">Color</param>
        </member>
        <member name="M:devDept.Graphics.LightSettings.#ctor(devDept.Geometry.Vector3D,System.Drawing.Color,System.Drawing.Color)">
            <summary>Direction, color and specular color constructor.</summary>
            <overloads>Sets active to false.</overloads>
            <param name="direction">Direction</param>
            <param name="color">Color</param>
            <param name="specular">Specular color</param>
        </member>
        <member name="M:devDept.Graphics.LightSettings.#ctor(devDept.Geometry.Vector3D,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="direction">Direction</param>
            <param name="color">Color</param>
            <param name="specular">Specular color</param>
            <param name="stationary">Light behaviour, set false to mimic the Sun.</param>
            <param name="active">Light status</param>
            <param name="yieldShadow">When true the light yields shadows</param>
        </member>
        <member name="M:devDept.Graphics.LightSettings.#ctor(devDept.Geometry.Vector3D,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,devDept.Graphics.lightType,devDept.Geometry.Point3D,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Standard constructor.</summary>
            <param name="direction">Direction</param>
            <param name="color">Color</param>
            <param name="specular">Specular color</param>
            <param name="stationary">Light behaviour, set false to mimic the Sun</param>
            <param name="active">Light status</param>
            <param name="yieldShadow">When true the light yields shadows</param>
            <param name="type">Light type</param>
            <param name="position">Position of the light (spot or point lights only)</param>
            <param name="spotAngle">Half angle of the spot light cone in radians (range 0 - PI/2) (spot lights only)</param>
            <param name="spotExponent">Exponent that determines how the light is focused inside the spot light cone (spot lights only)</param>
            <param name="constantAttenuation">Constant attenuation (point and spot lights only)</param>
            <param name="linearAttenuation">Linear attenuation (point and spot lights only)</param>
            <param name="quadraticAttenuation">Quadratic attenuation (point and spot lights only)</param>
        </member>
        <member name="P:devDept.Graphics.LightSettings.Direction">
            <summary>Gets or sets the light direction.</summary>
            <remarks>Not meaningful for point lights.</remarks>
        </member>
        <member name="P:devDept.Graphics.LightSettings.Type">
            <summary>
            Gets or sets the light type.
            </summary>
        </member>
        <member name="P:devDept.Graphics.LightSettings.Position">
            <summary>
            Gets or sets the position of the spot or point light.
            </summary>
            <remarks>Not meaningful for directional lights.</remarks>
        </member>
        <member name="P:devDept.Graphics.LightSettings.SpotAngle">
            <summary>
            Gets or sets the half angle of the spot light cone in radians (range [0, PI/2]).
            </summary>
        </member>
        <member name="P:devDept.Graphics.LightSettings.SpotExponent">
            <summary>
            Gets or sets the exponent that determines how the light is focused inside the spot light cone (range [0, 128]).
            </summary>
        </member>
        <member name="P:devDept.Graphics.LightSettings.ConstantAttenuation">
            <summary>
            Gets or sets the constant attenuation (point and spot lights only).
            </summary>
        </member>
        <member name="P:devDept.Graphics.LightSettings.LinearAttenuation">
            <summary>
            Gets or sets the linear attenuation (point and spot lights only).
            </summary>
        </member>
        <member name="P:devDept.Graphics.LightSettings.QuadraticAttenuation">
            <summary>
            Gets or sets the quadratic attenuation (point and spot lights only).
            </summary>
        </member>
        <member name="P:devDept.Graphics.LightSettings.Color">
            <summary>Gets or sets the light color.</summary>
            <example>
            The following code fragment demonstrates how to change the light color at run-time.
            <code lang="CS" title="[New Example]">
            myViewport.Light2.Color = Color.Red;
            myViewport.ProcessLightAttributes();
            </code>
            <code lang="VB" title="[New Example]">
            MyViewport.Light2.Color = Color.Red
            MyViewport.ProcessLightAttributes()
            </code>
            </example>
        </member>
        <member name="P:devDept.Graphics.LightSettings.Specular">
            <summary>Gets or sets the light specular color.</summary>
            <example>
            The following code fragment demonstrates how to change the light specular color at run-time.
            <code lang="CS" title="[New Example]">
            myViewport.Light2.Specular = Color.DimGray;
            myViewport.ProcessLightAttributes();
            </code>
            <code lang="VB" title="[New Example]">
            MyViewport.Light2.Specular = Color.DimGray
            MyViewport.ProcessLightAttributes()
            </code>
            </example>
        </member>
        <member name="P:devDept.Graphics.LightSettings.Stationary">
            <summary>Gets or sets the light behaviour. Set false to mimic the Sun.</summary>
            <remarks>If true, the Light is fixed on screen, else it is fixed with the scene.</remarks>
        </member>
        <member name="P:devDept.Graphics.LightSettings.Active">
            <summary>Gets or sets the light status.</summary>
        </member>
        <member name="P:devDept.Graphics.LightSettings.YieldShadow">
            <summary>
            When true the light yields realistic shadows (Only one shadow is supported).
            </summary>
        </member>
        <member name="T:devDept.Graphics.primitiveType">
            <summary>
            Drawing primitive type.
            </summary>
        </member>
        <member name="T:devDept.Graphics.shadowType">
            <summary>
            Shadow type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.shadowType.None">
            <summary>
            The shadow will not be drawn.
            </summary>
        </member>
        <member name="F:devDept.Graphics.shadowType.Planar">
            <summary>
            A planar shadow under the model will be drawn.
            </summary>
        </member>
        <member name="F:devDept.Graphics.shadowType.Realistic">
            <summary>
            Dynamic realistic shadows will be drawn.
            </summary>
        </member>
        <member name="T:devDept.Graphics.realisticShadowQualityType">
            <summary>
            Realistic shadow quality.
            </summary>
        </member>
        <member name="F:devDept.Graphics.realisticShadowQualityType.Low">
            <summary>
            Low shadow quality (faster).
            </summary>
        </member>
        <member name="F:devDept.Graphics.realisticShadowQualityType.Medium">
            <summary>
            Medium shadow quality.
            </summary>
        </member>
        <member name="F:devDept.Graphics.realisticShadowQualityType.High">
            <summary>
            High shadow quality (slower).
            </summary>
        </member>
        <member name="T:devDept.Graphics.antialiasingSamplesNumberType">
            <summary>
            Number of antialiasing samples.
            </summary>
        </member>
        <member name="F:devDept.Graphics.antialiasingSamplesNumberType.x2">
            <summary>
            2x sampling.
            </summary>
        </member>
        <member name="F:devDept.Graphics.antialiasingSamplesNumberType.x4">
            <summary>
            4x sampling
            </summary>
        </member>
        <member name="F:devDept.Graphics.antialiasingSamplesNumberType.x8">
            <summary>
            8x sampling
            </summary> 
        </member>
        <member name="F:devDept.Graphics.antialiasingSamplesNumberType.x16">
            <summary>
            16x sampling
            </summary>
        </member>
        <member name="T:devDept.Graphics.orientationType">
            <summary>
            Viewport orientation type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.orientationType.UpAxisY">
            <summary>
            The Y axis direction is up
            </summary>
        </member>
        <member name="F:devDept.Graphics.orientationType.UpAxisZ">
            <summary>
            The Z axis direction is up
            </summary>
        </member>
        <member name="T:devDept.Graphics.backfaceColorMethodType">
            <summary>
            Backface color type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.backfaceColorMethodType.Cull">
            <summary>
            Backfaces are invisible
            </summary>
        </member>
        <member name="F:devDept.Graphics.backfaceColorMethodType.EntityColor">
            <summary>
            Backfaces color is defined by the entity color
            </summary>
        </member>
        <member name="F:devDept.Graphics.backfaceColorMethodType.SingleColor">
            <summary>
            Backfaces color is defined by <see cref="P:devDept.Graphics.BackfaceSettings.Color"/>
            </summary>
        </member>
        <member name="T:devDept.Graphics.backgroundStyleType">
            <summary>
            Viewport background style type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.backgroundStyleType.None">
            <summary>
            A solid color defined by Parent background color. In WPF it shows the underlying controls.
            </summary>
        </member>
        <member name="F:devDept.Graphics.backgroundStyleType.Solid">
            <summary>
            A solid color defined by <see cref="P:devDept.Graphics.BackgroundSettings.TopColor"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.backgroundStyleType.LinearGradient">
            <summary>
            A linear color gradient defined by <see cref="P:devDept.Graphics.BackgroundSettings.TopColor"/> and <see cref="P:devDept.Graphics.BackgroundSettings.BottomColor"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.backgroundStyleType.CubicGradient">
            <summary>
            A cubic color gradient defined by <see cref="P:devDept.Graphics.BackgroundSettings.TopColor"/>, <see cref="P:devDept.Graphics.BackgroundSettings.IntermediateColor"/> and <see cref="P:devDept.Graphics.BackgroundSettings.BottomColor"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.backgroundStyleType.Image">
            <summary>
            An image
            </summary>
        </member>
        <member name="T:devDept.Graphics.shaderType">
            <summary>
            Shader types definitions.
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.None">
            <summary>
            No shader
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.BlurVert">
            <summary>
            Applies a gaussian blur to a texture in the vertical direction
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.BlurHor">
            <summary>
            Applies a gaussian blur to a texture in the horizontal direction
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.NoLights">
            <summary>
            Draws without lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.NoLightsThickLines">
            <summary>
            Draws thick lines without lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.NoLightsThickPoints">
            <summary>
            Draws thick points without lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.NoLightsThickLinesStipple">
            <summary>
            Draws thick lines with stipple without lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.NoLightsLinesStipple">
            <summary>
            Draws lines with stipple without lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture2DNoLights">
            <summary>
            Draws without lighting using the full color of a 2D texture
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture2DNoLightsWithAlphaMap">
            <summary>
            Draws without lighting using the full color of a 2D texture modulated by an alpha map
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture2DNoLightsModulate">
            <summary>
            Draws without lighting with the full color of a 2D texture, modulated by the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture2DNoLightsModulateWithAlphaMap">
            <summary>
            Draws without lighting with the full color of a 2D texture, modulated by the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor"/> and an Alpha map
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture2DNoLightsDecal">
            <summary>
            Draws without lighting with a 2D texture in decal mode using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor"/> for the transparent areas of the texture
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture2DNoLightsDecalWithAlphaMap">
            <summary>
            Draws without lighting with a 2D texture and an alpha map in decal mode using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor"/> for the transparent areas of the texture
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture1DNoLights">
            <summary>
            Draws without lighting with a 1D texture in decal using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor"/> for the transparent areas of the texture
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.SingleColorModulatedByIntensity">
            <summary>
            Draws without lighting modulating the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor"/> by a factor specified per each vertex 
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.SingleColorModulatedByIntensityLines">
            <summary>
            Draws thick lines without lighting modulating the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor"/> by a factor specified per each vertex 
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.SingleColorModulatedByIntensityPoints">
            <summary>
            Draws thick points without lighting modulating the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor"/> by a factor specified per each vertex 
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.MultiColorNoLights">
            <summary>
            Draws without lighting specifying a color per vertex
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.MultiColorNoLightsThickLines">
            <summary>
            Draws thick lines without lighting specifying a color per vertex
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.MultiColorNoLightsThickPoints">
            <summary>
            Draws thick points without lighting specifying a color per vertex
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.MultiColorNoLightsWithNormals">
            <summary>
            Draws without lighting specifying a normal and a color per vertex
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.MultiColorNoLightsThickLinesPerVertex">
            <summary>
            Draws thick lines without lighting specifying a color and a line width per vertex
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.MultiColorNoLightsThickPointsPerVertex">
            <summary>
            Draws thick points without lighting specifying a color and point size per vertex
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.StandardThickLines">
            <summary>
            Draws thick lines with Phong lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.StandardThickPoints">
            <summary>
            Draws thick points with Phong lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Standard">
            <summary>
            Draws with Phong lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Environment">
            <summary>
            Draws with Phong lighting and environment mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.EnvironmentTexture2D">
            <summary>
            Draws with Phong lighting, environment mapping and 2D texture using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.EnvironmentTexture2DWithAlphaMap">
            <summary>
            Draws with Phong lighting, environment mapping and 2D texture with alpha map using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture2D">
            <summary>
            Draws with Phong lighting and 2D Texture using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture2DWithAlphaMap">
            <summary>
            Draws with Phong lighting and 2D Texture with Alpha map using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture2DDecal">
            <summary>
            Draws with Phong lighting and 2D texture in Decal mode using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/> for the transparent areas of the texture
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture2DDecalWithAlphaMap">
            <summary>
            Draws with Phong lighting and 2D texture in Decal mode with Alpha map using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/> for the transparent areas of the texture
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.MultiColor">
            <summary>
            Draws with Phong lighting specifying a normal and color per vertex
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.MultiColorSelected">
            <summary>
            Draws with Phong lighting specifying a normal and color (unused) per vertex but using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.EnvironmentMulticolor">
            <summary>
            Draws with Phong lighting and environment mapping specifying a normal and color per vertex
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture1D">
            <summary>
            Draws with Phong lighting ad 1D texture using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.EnvironmentTexture1D">
            <summary>
            Draws with Phong lighting, environment mapping and 1D texture using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.StandardShadow">
            <summary>
            Draws with Phong lighting and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.EnvironmentShadow">
            <summary>
            Draws with Phong lighting, environment mapping and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.EnvironmentTexture2DShadow">
            <summary>
            Draws with Phong lighting, environment mapping, 2D texture and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.EnvironmentTexture2DShadowWithAlphaMap">
            <summary>
            Draws with Phong lighting, environment mapping, 2D texture with Alpha map and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture2DShadow">
            <summary>
            Draws with Phong lighting, 2D texture and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture2DShadowWithAlphaMap">
            <summary>
            Draws with Phong lighting, 2D texture with alpha map and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.MultiColorShadow">
            <summary>
            Draws with Phong lighting and shadow mapping specifying one color per vertex
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.EnvironmentMulticolorShadow">
            <summary>
            Draws with Phong lighting, environment mapping and shadow mapping specifying one color per vertex
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.Texture1DShadow">
            <summary>
            Draws with Phong lighting, 1D texture and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.EnvironmentTexture1DShadow">
            <summary>
            Draws with Phong lighting, environment mapping, 1D texture and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial"/>
            </summary>
        </member>
        <member name="F:devDept.Graphics.shaderType.WriteDepth">
            <summary>
            Writes the depth in the red component
            </summary>
        </member>
        <member name="T:devDept.Graphics.textureEnvironmentType">
            <summary>
            Texture environment type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.textureEnvironmentType.Modulate">
            <summary>
            The texture color is multiplied by the object color.
            </summary>
        </member>
        <member name="F:devDept.Graphics.textureEnvironmentType.Replace">
            <summary>
            The texture color is used as is.
            </summary>
        </member>
        <member name="F:devDept.Graphics.textureEnvironmentType.Decal">
            <summary>
            The texture color is mixed with the object color, depending on the texture's transparency.
            </summary>
        </member>
        <member name="T:devDept.Graphics.colorMaskFlags">
            <summary>
            Color mask type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.colorMaskFlags.None">
            <summary>
            All components off
            </summary>
        </member>
        <member name="F:devDept.Graphics.colorMaskFlags.Red">
            <summary>
            Red component on
            </summary>
        </member>
        <member name="F:devDept.Graphics.colorMaskFlags.Green">
            <summary>
            Green component on
            </summary>
        </member>
        <member name="F:devDept.Graphics.colorMaskFlags.Blue">
            <summary>
            Blue component on
            </summary>
        </member>
        <member name="F:devDept.Graphics.colorMaskFlags.Alpha">
            <summary>
            Alpha component on
            </summary>
        </member>
        <member name="F:devDept.Graphics.colorMaskFlags.RGB">
            <summary>
            All components on
            </summary>
        </member>
        <member name="T:devDept.Graphics.stateEnableType">
            <summary>
            A generic enable type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.stateEnableType.Off">
            <summary>
            State disabled
            </summary>               
        </member>
        <member name="F:devDept.Graphics.stateEnableType.On">
            <summary>
            State enabled
            </summary>
        </member>
        <member name="T:devDept.Graphics.blendStateBlendFactorType">
            <summary>
            The blend factor type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.blendStateBlendFactorType.Zero">
            <summary>
            Zero
            </summary>
        </member>
        <member name="F:devDept.Graphics.blendStateBlendFactorType.One">
            <summary>
            One
            </summary>
        </member>
        <member name="F:devDept.Graphics.blendStateBlendFactorType.SrcAlpha">
            <summary>
            Source Alpha
            </summary>
        </member>
        <member name="F:devDept.Graphics.blendStateBlendFactorType.OneMinusSrcAlpha">
            <summary>
            One minus source alpha
            </summary>
        </member>
        <member name="F:devDept.Graphics.blendStateBlendFactorType.DstColor">
            <summary>
            Destination color
            </summary>
        </member>
        <member name="F:devDept.Graphics.blendStateBlendFactorType.InverseDestinationColor">
            <summary>
            Inverse destination color
            </summary>
        </member>
        <member name="T:devDept.Graphics.blendStateType">
            <summary>
            The blend state type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.blendStateType.XOR">
            <summary>
            XOR blending state. To draw with inverted colors use a white color
            </summary>
        </member>
        <member name="T:devDept.Graphics.rasterizerClockWiseType">
            <summary>
            The rasterizer clockwise type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.rasterizerClockWiseType.CCW">
            <summary>
            ClockWise
            </summary>
        </member>
        <member name="F:devDept.Graphics.rasterizerClockWiseType.CW">
            <summary>
            Counter clockwise
            </summary>
        </member>
        <member name="T:devDept.Graphics.rasterizerPolygonDrawingType">
            <summary>
            The rasterizer polygon drawing type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.rasterizerPolygonDrawingType.Line">
            <summary>
            Draws the polygons as lines
            </summary>
        </member>
        <member name="F:devDept.Graphics.rasterizerPolygonDrawingType.Fill">
            <summary>
            Draws the poligons filled
            </summary>
        </member>
        <member name="T:devDept.Graphics.rasterizerCullFaceType">
            <summary>
            The rasterizer cull face type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.rasterizerCullFaceType.None">
            <summary>
            No face culling
            </summary>
        </member>
        <member name="F:devDept.Graphics.rasterizerCullFaceType.Back">
            <summary>
            Culls the back faces
            </summary>
        </member>
        <member name="F:devDept.Graphics.rasterizerCullFaceType.Front">
            <summary>
            Culls the Front faces
            </summary>
        </member>
        <member name="T:devDept.Graphics.rasterizerPolygonOffsetType">
            <summary>
            The rasterizer polygon offset type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.rasterizerPolygonOffsetType.Off">
            <summary>
            No offset
            </summary>
        </member>
        <member name="F:devDept.Graphics.rasterizerPolygonOffsetType.F1_U1">
            <summary>
            Factor 1, units 1
            </summary>
        </member>
        <member name="F:devDept.Graphics.rasterizerPolygonOffsetType.F2_U2">
            <summary>
            Factor 2, units 2
            </summary>
        </member>
        <member name="F:devDept.Graphics.rasterizerPolygonOffsetType.FMinus3_UMinus2">
            <summary>
            Factor -3, units -2
            </summary>
        </member>
        <member name="F:devDept.Graphics.rasterizerPolygonOffsetType.F05_U05">
            <summary>
            Factor 0.5, units 0.5
            </summary>
        </member>
        <member name="F:devDept.Graphics.rasterizerPolygonOffsetType.FMinus05_UMinus1">
            <summary>
            Factor -0.5, units -1
            </summary>
        </member>
        <member name="T:devDept.Graphics.rasterizerStateType">
            <summary>
            The rasterizer state type.
            </summary>
        </member>
        <member name="T:devDept.Graphics.depthFuncType">
            <summary>
            The depth test function.
            </summary>
        </member>
        <member name="T:devDept.Graphics.stencilFuncType">
            <summary>
            The type of stencil function.
            </summary>
        </member>
        <member name="T:devDept.Graphics.stencilFuncMaskType">
            <summary>
            The mask used in the stencil test.
            </summary>
        </member>
        <member name="T:devDept.Graphics.stencilOpActionType">
            <summary>
            The stencil operation test action.
            </summary>
        </member>
        <member name="F:devDept.Graphics.stencilOpActionType.Replace">
            <summary>
            Replaces the stencil buffer entry with the stencil reference value used in the stencil test
            </summary>
        </member>
        <member name="F:devDept.Graphics.stencilOpActionType.Keep">
            <summary>
            Keeps the value in the stencil buffer
            </summary>
        </member>
        <member name="F:devDept.Graphics.stencilOpActionType.Invert">
            <summary>
            Increments the stencil buffer value
            </summary>
        </member>
        <member name="F:devDept.Graphics.stencilOpActionType.Zero">
            <summary>
            Sets the stencil bufer entry to zero
            </summary>
        </member>
        <member name="T:devDept.Graphics.depthStencilStateType">
            <summary>
            The depth stencil state type.
            </summary>
        </member>
        <member name="T:devDept.Graphics.lightType">
            <summary>
            Light type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.lightType.Directional">
            <summary>
            Directional light.
            </summary>
        </member>
        <member name="F:devDept.Graphics.lightType.Point">
            <summary>
            Positional light.
            </summary>
        </member>
        <member name="F:devDept.Graphics.lightType.Spot">
            <summary>
            Spot light.
            </summary>
        </member>
        <member name="T:devDept.Graphics.colorMaterialType">
            <summary>
            The color material type.
            </summary>
            <remarks>Call <see cref="!:RenderContextBase.SetColorMaterial(System.Drawing.Color)"/> to set the color and make it work properly for DirectX renderer.</remarks>
        </member>
        <member name="F:devDept.Graphics.colorMaterialType.Disabled">
            <summary>
            Color material disabled.
            </summary>
        </member>
        <member name="F:devDept.Graphics.colorMaterialType.FrontFaceDiffuse">
            <summary>
            The color applies only to the diffuse component of front faces.
            </summary>
        </member>
        <member name="F:devDept.Graphics.colorMaterialType.FrontAndBackFaceDiffuse">
            <summary>
            The color applies to the diffuse component of both front and back faces.
            </summary>
        </member>
        <member name="F:devDept.Graphics.colorMaterialType.FrontFaceAmbient">
            <summary>
            The color applies only to the ambient component of front faces.
            </summary>
        </member>
        <member name="F:devDept.Graphics.colorMaterialType.FrontAndBackFaceAmbient">
            <summary>
            The color applies to the ambient component of both front and back faces.
            </summary>
        </member>
        <member name="T:devDept.Graphics.D3DImageExtManager">
            <summary>
            Device Manager that handles interop between D3D11 and D3D9, and schedule global <see cref="E:System.Windows.Media.CompositionTarget.Rendering"/>.
            </summary>
            <remarks>
            To initialize one instance per Direct3D11 device for a WPF application.
            </remarks>
        </member>
        <member name="F:devDept.Graphics.D3DImageExtManager.RenderTextureDirect3D9">
            <summary>
            The D3D9 shared texture
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DImageExtManager.SurfaceDirect3D9">
            <summary>
            The D3D9 shared surface
            </summary>
        </member>
        <member name="M:devDept.Graphics.D3DImageExtManager.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D11.DeviceContext,SharpDX.Direct3D11.Texture2D)">
            <summary>
            Initialize a new instance of <see cref="T:devDept.Graphics.D3DImageExtManager"/>.
            </summary>
            <param name="device"></param>
        </member>
        <member name="T:devDept.Graphics.D3DImageExtManager.UpdateBackBufferCommand">
            <summary>
            Internal command used to push an update of the backbuffer
            </summary>
        </member>
        <member name="T:devDept.Graphics.D3DImageSurface">
            <summary>
            A surface returned by <see cref="!:D3DImageExt.BeginDraw"/>.
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DImageSurface.RenderTexture">
            <summary>
            The <see cref="T:SharpDX.Direct3D11.Texture2D"/> to render to.
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DImageSurface.RenderTargetView">
            <summary>
            The <see cref="F:devDept.Graphics.D3DImageSurface.RenderTargetView"/> to render to.
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DImageSurface.QuerySync">
            <summary>
            The internal query to wait for the end of the rendering.
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DImageSurface.State">
            <summary>
            Current state of this surface.
            </summary>
        </member>
        <member name="T:devDept.Graphics.D3DImageSurfaceState">
            <summary>
            Internal enum associated with a <see cref="T:devDept.Graphics.D3DImageSurface"/> to track the state of the shared surface.
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DImageSurfaceState.Available">
            <summary>
            The surface is available for D3D11 rendering.
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DImageSurfaceState.Rendered">
            <summary>
            The surface has been rendered and is ready to be pushed to WPF
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DImageSurfaceState.SubmittedToD3DImage">
            <summary>
            The surface has been set as a D3DImage backbuffer.
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DImageSurfaceState.Disposed">
            <summary>
            The surface is diposed.
            </summary>
        </member>
        <member name="T:devDept.Graphics.D3DWPFImageSource">
            <summary>
            Direct3D image source class.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:devDept.Graphics.D3DWPFImageSource.Initialize(devDept.Graphics.D3DImageExtManager,System.Int32,System.Int32,SharpDX.Direct3D11.Texture2D,SharpDX.Direct3D11.Texture2DDescription,System.Int32)">
            <summary>
            Initialize this instance with the specified <see cref="T:devDept.Graphics.D3DImageExtManager"/>.
            </summary>
            <param name="d3dImageManager">The D3DImageManager instance</param>
            <param name="renderSurfaceCount">The number of shared surface to use to render.</param>
            <param name="width">The width of the texture</param>
            <param name="height">The height of the texture</param>
        </member>
        <member name="M:devDept.Graphics.D3DWPFImageSource.InvalidateD3DImage">
            <summary>
            Updates the back buffer.
            </summary>
        </member>
        <member name="M:devDept.Graphics.D3DWPFImageSource.BeginDraw">
            <summary>
            Begins to draw to this instance.
            </summary>
            <returns>A shared surface or null if none are available.</returns>
        </member>
        <member name="M:devDept.Graphics.D3DWPFImageSource.EndDraw(devDept.Graphics.D3DImageSurface,System.Boolean)">
            <summary>
            Ends the draw for this instance. Must be called even if surface returned by <see cref="M:devDept.Graphics.D3DWPFImageSource.BeginDraw"/> was null.
            </summary>
            <param name="surface"></param>
        </member>
        <member name="T:devDept.Graphics.WPFUtils">
            <summary>
            WPF conversion utilities class.
            </summary>
        </member>
        <member name="T:devDept.Graphics.ClipPlanesFlags">
            <summary>
            The bitmask of enabled clip planes.
            </summary>
        </member>
        <member name="T:devDept.Graphics.ConstantBufferPerFrameData">
            <summary>
            Class that holds the application data per frame, some of which will be passed to the shader.
            </summary>
        </member>
        <member name="F:devDept.Graphics.ConstantBufferPerFrameData.ClipPlanes">
            <summary>
            Clipping planes in View Coordinates.
            </summary>
        </member>
        <member name="F:devDept.Graphics.ConstantBufferPerFrameData.ViewportSize">
            <summary>
            Viewport size in pixels.
            </summary>
        </member>
        <member name="T:devDept.Graphics.ConstantBufferPerObjectData">
            <summary>
            Class that holds the application data per object, some of which will be passed to the shader.
            </summary>
        </member>
        <member name="P:devDept.Graphics.ConstantBufferPerObjectData.WorldMat">
            <summary>
            BlockReference world matrix.
            </summary>
        </member>
        <member name="M:devDept.Graphics.ID3DShader.Set(SharpDX.Direct3D11.DeviceContext,System.Boolean)">
            <summary>
            Sets the shader on the device context.
            </summary>
            <param name="Context"></param>
        </member>
        <member name="M:devDept.Graphics.ID3DShader.EnableClipPlanesShader(SharpDX.Direct3D11.DeviceContext,System.Boolean)">
            <summary>
            Enables or disables the pixel shader that uses the clipping planes (for better performances).
            </summary>
            <param name="context">The device context</param>
            <param name="enable">The enable status</param>
        </member>
        <member name="M:devDept.Graphics.D3DShader`2.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D.FeatureLevel,System.String,SharpDX.Direct3D11.InputElement[],devDept.Graphics.ConstantBufferSlots,devDept.Graphics.ConstantBufferSlots,System.Boolean)">
            <summary>
            
            </summary>
            <param name="device"></param>
            <param name="featureLevel">Feature level of the Device</param>
            <param name="file">Shader file</param>
            <param name="inputElements"></param>
            <param name="vertexCBSlots">The constant buffer slots for the vertex shader</param>
            <param name="pixelCBSlots">The constant buffer slots for the pixel shader</param>
            <param name="clipPlanesSeparateShader">If true, loads a separate shader for the clipping planes evaluation</param>
        </member>
        <member name="M:devDept.Graphics.D3DShader`2.#ctor(SharpDX.Direct3D11.Device,SharpDX.Direct3D.FeatureLevel,System.String,System.String,SharpDX.Direct3D11.InputElement[],devDept.Graphics.ConstantBufferSlots,devDept.Graphics.ConstantBufferSlots,System.Boolean)">
            <summary>
            
            </summary>
            <param name="device"></param>
            <param name="featureLevel">Feature level of the Device</param>
            <param name="vsFile">Vertex shader file</param>
            <param name="psFile">Pixel Shader file</param>
            <param name="inputElements"></param>
            <param name="vertexCBSlots">The constant buffer slots for the vertex shader</param>
            <param name="pixelCBSlots">The constant buffer slots for the pixel shader</param>
            <param name="clipPlanesSeparateShader">If true, loads a separate shader for the clipping planes evaluation</param>
        </member>
        <member name="F:devDept.Graphics.D3DShader`2.PixelShader">
            <summary>
            The pixel shader without the clip planes evaluation (for better performances on low hardware).
            </summary>
        </member>
        <member name="F:devDept.Graphics.D3DShader`2.PixelShaderClipPlanes">
            <summary>
            The pixel shader with the clip planes evaluation.
            </summary>
        </member>
        <member name="M:devDept.Graphics.D3DShader`2.EnableClipPlanesShader(SharpDX.Direct3D11.DeviceContext,System.Boolean)">
            <summary>
            Enables or disables the pixel shader that uses the clipping planes (for better performances).
            </summary>
            <param name="context">The device context</param>
            <param name="enable">The enable status</param>
        </member>
        <member name="M:devDept.Graphics.Disposer.RemoveAndDispose``1(``0@)">
            <summary>
            Dispose an object instance and set the reference to null
            </summary>
            <typeparam name="TypeName">The type of object to dispose</typeparam>
            <param name="resource">A reference to the instance for disposal</param>
            <remarks>This method hides any thrown exceptions that might occur during disposal of the object (by design)</remarks>
        </member>
        <member name="T:devDept.Graphics.DrawEntityCallBack">
            <summary>
            Delegate of method that draws the entity.
            </summary>
            <param name="renderContext">The render context</param>
            <param name="myParams">The parameters object</param>
        </member>
        <member name="T:devDept.Graphics.DrawEntityVBOCallBack">
            <summary>
            Delegate of method that draws the entity using VBO if possible.
            </summary>
            <param name="renderContext">The render context</param>
            <param name="myParams">The parameters object</param>
        </member>
        <member name="T:devDept.Graphics.DrawForShadowMapDelegate">
            <summary>
            Delegate of method that draws the entities fro the ShadowMap.
            </summary>
            <param name="frustum"></param>
            <param name="drawForShadowParams"></param>
            <returns></returns>
        </member>
        <member name="T:devDept.Graphics.ControlData">
            <summary>
            Class that holds data of the Eyeshot control needed by the <see cref="T:devDept.Graphics.RenderContextBase"/> class.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="F:devDept.Graphics.ControlData.antialiasingSamples">
            <summary>
            Antialiasing samples requested by the user.
            </summary>
        </member>
        <member name="F:devDept.Graphics.ControlData.defaultMaterialShaded">
            <summary>
            Default material attributes for Shaded mode.
            </summary>
            <remarks>Diffuse component is not used</remarks>
        </member>
        <member name="M:devDept.Graphics.ControlData.ResetDefaultMaterial">
            <summary>
            Resets the default material.
            </summary>
        </member>
        <member name="P:devDept.Graphics.ControlData.RealAntialiasingSamples">
            <summary>
            Antialiasing samples effectively used.
            </summary>
        </member>
        <member name="T:devDept.Graphics.HqrData">
            <summary>
            Class that holds data for high quality rendering features.
            </summary>
        </member>
        <member name="T:devDept.Graphics.textureFilteringFunctionType">
            <summary>
            The	texture	filtering function is used whenever the pixel being textured maps to an area greater (minifying function) 
            or smaller (magnifying function)
            than one texture element. There are	six defined filtering functions. Two of them use the nearest
            one	or nearest four	texture	elements to compute the	texture	value. The other four use mipmaps.
            </summary>
        </member>
        <member name="F:devDept.Graphics.textureFilteringFunctionType.Nearest">
            <summary>
            Returns the value of the texture element that is nearest (in Manhattan distance) to the center of the pixel being textured.
            </summary>
        </member>
        <member name="F:devDept.Graphics.textureFilteringFunctionType.Linear">
            <summary>
            Returns the weighted average of the four texture elements that are closest to the center of the pixel being textured.
            </summary>
        </member>
        <member name="F:devDept.Graphics.textureFilteringFunctionType.NearestMipmapNearest">
            <summary>
            Chooses the mipmap that most closely matches the size of the pixel being textured and uses the Nearest criterion (the texture element nearest to the center of the pixel) to produce a texture value.
            </summary>
        </member>
        <member name="F:devDept.Graphics.textureFilteringFunctionType.LinearMipmapNearest">
            <summary>
            Chooses the mipmap that most closely matches the size of the pixel being textured and uses the Linear criterion (a weighted average of the four texture elements that are closest to the center of the pixel) to produce a texture value.
            </summary>
        </member>
        <member name="F:devDept.Graphics.textureFilteringFunctionType.NearestMipmapLinear">
            <summary>
            Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the Nearest criterion (the texture element nearest to the center of the pixel) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.
            </summary>
        </member>
        <member name="F:devDept.Graphics.textureFilteringFunctionType.LinearMipmapLinear">
            <summary>
            Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the Linear criterion (a weighted average of the four texture elements that are closest to the center of the pixel) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.
            </summary>
        </member>
        <member name="T:devDept.Graphics.TextureMosaic">
            <summary>
            Single Texture that holds more images.
            </summary>
        </member>
        <member name="F:devDept.Graphics.TextureMosaic.textureCoordsRect">
            <summary>
            Texture coordinates of each sub-image.
            </summary>
        </member>
        <member name="F:devDept.Graphics.TextureMosaic.imagesSize">
            <summary>
            Size of each sub-image.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:devDept.Graphics.TextureMosaic.#ctor(devDept.Graphics.RenderContextBase,System.Int32,System.Int32,System.Drawing.Bitmap[])" -->
        <member name="M:devDept.Graphics.TextureMosaic.Draw(devDept.Graphics.RenderContextBase,System.Int32[],System.Drawing.PointF@,System.Boolean)">
            <summary>
            Draws the images from left to right.
            </summary>
            <param name="context">Rendering context</param>
            <param name="imagesToDraw">THe array of image indices to draw</param>
            <param name="position">The position where to start drawing</param>
            <param name="drawBuffered">If true, the images are drawn when the dynamic buffer is full, else they are drawn immediately (Direct3D only)</param>
            <remarks>The position is updated to the end of the last image drawn.</remarks>
        </member>
        <member name="T:devDept.Graphics.TextureD3D_Depth">
            <summary>
            Depth texture class for Direct3D.
            </summary>
        </member>
        <member name="T:devDept.Graphics.TextureD3D_1D">
            <summary>
            1D color texture class for Direct3D.
            </summary>
        </member>
        <member name="M:devDept.Graphics.TextureD3D_1D.#ctor(System.Drawing.Color[])">
            <summary>
            Creates a 1D texture, without loading it. A call to <see cref="!:Load(devDept.Graphics.RenderContextBase,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,bool)"/> is needed to load it.
            </summary>
            <param name="colorTable"></param>
        </member>
        <member name="M:devDept.Graphics.TextureD3D_1D.#ctor(devDept.Graphics.RenderContextBase,System.Drawing.Color[],devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean)">
            <summary>
            Creates a 1D texture and loads it in memory.
            </summary>
            <param name="context"></param>
            <param name="colorTable"></param>
            <param name="minFunc"></param>
            <param name="magFunc"></param>
            <param name="anisotropicFiltering"></param>
        </member>
        <member name="T:devDept.Graphics.IViewport">
            <summary>
            Viewport coordinates conversion methods.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="M:devDept.Graphics.IViewport.ViewportToCameraScreen(System.Drawing.Point)">
            <summary>
            Converts viewport coordinates (0 on top-left, relative to Viewport location) to camera screen coordinates (0 con the control bottom-left corner).
            </summary>
            <param name="pt">The point to convert</param>
            <returns>The point in camera screen coordinates</returns>
        </member>
        <member name="M:devDept.Graphics.IViewport.ViewportToScreen(System.Drawing.Point)">
            <summary>
            Converts viewport coordinates (0 on top-left, relative to Viewport location) to screen coordinates (0 on top left, relative to the control location).
            </summary>
            <param name="pt">The point to convert</param>
            <returns>The point in screen coordinates</returns>
        </member>
        <member name="M:devDept.Graphics.IViewport.ScreenToViewport(System.Drawing.Point)">
            <summary>
            Converts viewport layout screen coordinates to viewport coordinates.
            </summary>
            <param name="screenPoint">The coordinates of the point relative to the viewport layout</param>
            <returns>The coordinates of the point relative to the viewport.</returns>
        </member>
        <member name="P:devDept.Graphics.IViewport.Location">
            <summary>
            The coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container.
            </summary>
        </member>
        <member name="T:devDept.Graphics.ZBuffer">
            <summary>
            Class that holds ZBuffer related data.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="F:devDept.Graphics.ZBuffer.Location">
            <summary>
            Camera location.
            </summary>
        </member>
        <member name="M:devDept.Graphics.ZBuffer.CaptureBackbuffer(devDept.Graphics.RenderContextBase,devDept.Graphics.IViewport,System.Boolean,System.Boolean,System.Double[],System.Drawing.Rectangle,System.Int32@,System.Int32@,System.Boolean)">
            <summary>
            Captures the Back buffer image
            </summary>
            <param name="renderContext"></param>
            <param name="viewport"></param>
            <param name="keepData"></param>
            <param name="selectableOnly">Tells if the image captured for the selection included only the selectable entities</param>
            <param name="modelViewProjectionMatrix"></param>
            <param name="rect">The rectangle in screen coordinates</param>
            <param name="stride"></param>
            <param name="bpp"></param>
            <returns></returns>
        </member>
        <member name="M:devDept.Graphics.ZBuffer.ResetCapturedView">
            <summary>
            Resets the internal view memorized during the last z-buffer capture.
            </summary>
        </member>
        <member name="M:devDept.Graphics.ZBuffer.ChangedView(System.Double[])">
            <summary>
            Tells if the view has changed since the last z-buffer capture.
            </summary>
            <param name="modelViewProjectionMatrix">The current modelview prjection matrix</param>
            <returns>True if the view has changed.</returns>
            <remarks>This is used to optimize multiple calls to the GetEntityUnderMousecursor methods.</remarks>
        </member>
        <member name="P:devDept.Graphics.ZBuffer.InvalidRange">
            <summary>
            Tells if the scene must be redrawn in order to get a correct ZBuffer
            </summary>
        </member>
        <member name="P:devDept.Graphics.ZBuffer.Dirty">
            <summary>
            Tells if the scene must be redrawn in order to get a correct ZBuffer
            </summary>
        </member>
        <member name="T:devDept.Graphics.ZBuffer.SelectionImageData">
            <summary>
            Image data for selection.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="F:devDept.Graphics.ZBuffer.SelectionImageData.Stride">
            <summary>
            The number of bytes per image row.
            </summary>
        </member>
        <member name="F:devDept.Graphics.ZBuffer.SelectionImageData.Bpp">
            <summary>
            The bits per pixel.
            </summary>
        </member>
        <member name="F:devDept.Graphics.ZBuffer.SelectionImageData.Image">
            <summary>
            The image of the entities
            </summary>
        </member>
        <member name="F:devDept.Graphics.ZBuffer.SelectionImageData.SelectableOnly">
            <summary>
            Tells if the image captured for the selection included only the selectable entities or not.
            </summary>
        </member>
        <member name="P:devDept.Graphics.ZBuffer.SelectionImageData.InnerSelectionImage">
            <summary>
            The image of the inner parts (edges, vertices, faces).
            </summary>
        </member>
        <member name="T:devDept.Graphics.Material">
            <summary>
            Material definition.
            </summary>   
        </member>
        <member name="F:devDept.Graphics.Material.D">
            <summary>
            D material matrix (FEM)
            </summary>
        </member>
        <member name="M:devDept.Graphics.Material.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Color)">
            <summary>
            Name and color constructor.
            </summary>
            <param name="diffuse">Material color</param>
        </member>
        <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Image)">
            <summary>Name and texture index constructor.</summary>
            <param name="texture">Material texture image</param>
        </member>
        <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Color,System.Drawing.Color,System.Single,System.Single,System.Drawing.Image)">
            <summary>
            Standard constructor.
            </summary>
            <param name="ambient">Material ambient intensity</param>
            <param name="specular">Material specular intensity</param>
            <param name="shininess">Material shininess factor (0-1)</param>
            <param name="environment">Material environment intensity</param>
            <param name="texture">Material texture image</param>
            <remarks>Deprecated.</remarks>
        </member>
        <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            Standard constructor.
            </summary>
            <param name="ambient">Material ambient intensity</param>
            <param name="diffuse">Material diffuse intensity</param>
            <param name="specular">Material specular intensity</param>
            <param name="shininess">Material shininess factor (0-1)</param>
            <param name="environment">Material environment intensity</param>
            <param name="texture">Material texture image</param>
            <param name="environmentMapping">Material's environment mapping image</param>
        </member>
        <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Color,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Fem constructor.
            </summary>
            <param name="diffuse">Material diffuse intensity</param>
            <param name="poisson">Material modulus of elasticity</param>
            <param name="young">Material Poisson's ratio</param>
            <param name="yield">Material yield strength</param>
            <param name="density">Material density</param>
            <param name="coeffOfThermExp">Material coefficient of thermal expansion</param>  
        </member>
        <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Color,System.Double,System.Double,System.Double,System.Double,System.Double,devDept.Graphics.elementType,System.Double)">
            <summary>
            2D FEM constructor.
            </summary>
            <param name="diffuse">Material diffuse intensity</param>
            <param name="poisson">Material modulus of elasticity</param>
            <param name="young">Material Poisson's ratio</param>
            <param name="yield">Material yield strength</param>
            <param name="density">Material density</param>
            <param name="coeffOfThermExp">Material coefficient of thermal expansion</param>  
            <param name="elType">2D FEM element type</param>
            <param name="elThickness">2D FEM element thickness</param>  
        </member>
        <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.Image)">
            <summary>
            Appearance constructor.
            </summary>
            <param name="ambient">Material ambient intensity</param>
            <param name="specular">Material specular intensity</param>
            <param name="shininess">Material shininess factor (0-1)</param>
            <param name="texture">Material texture image</param>
        </member>
        <member name="M:devDept.Graphics.Material.Clone">
            <summary>
            Creates a deep copy of this material.
            </summary>
            <returns>The new material object.</returns>
        </member>
        <member name="M:devDept.Graphics.Material.LoadTexture(devDept.Graphics.RenderContextBase)">
            <summary>
            Loads the texture for this material. This is done automatically the first time the material is added to the Materials collection.
            </summary>
            <remarks>If the <see cref="P:devDept.Graphics.Material.TextureImage"/> or <see cref="P:devDept.Graphics.Material.EnvironmentMappingImage"/> are changed, this method needs to be called to update the graphics data.</remarks>
        </member>
        <member name="M:devDept.Graphics.Material.CalcMaterialPropertyMatrix(System.Int32,devDept.Graphics.elementType)">
            <summary>
            Updates the D matrix for this material (FEM).
            </summary>
            <param name="numberOfDimensions">Number of dimensions</param>
            <param name="elType">2D element type</param>
        </member>
        <member name="M:devDept.Graphics.Material.ClearTexture">
            <summary>
            Clears the texture associated to this material.
            </summary>
        </member>
        <member name="M:devDept.Graphics.Material.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data needed to serialize the target object.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Graphics.Material.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserializing objects.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance that defines the serialized data.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> instance that contains the serialized data.</param>
        </member>
        <member name="M:devDept.Graphics.Material.Equals(devDept.Graphics.Material)">
            <summary>
            Compares Young, Poisson, yield strength, density, coefficent of thermal expansion, element type and element thickness properties.
            </summary>
            <param name="other">The other material</param>
            <returns>True if the two material properties are the same, false otherwise.</returns>
        </member>
        <member name="M:devDept.Graphics.Material.WriteObj(System.String,System.IO.TextWriter,System.String)">
            <summary>
            Writes the material definition to OBJ material (*.mtl) file. For internal use only.
            </summary>
        </member>
        <member name="M:devDept.Graphics.Material.FreeResources">
            <summary>
            Frees the material graphics resources.
            </summary>
        </member>
        <member name="M:devDept.Graphics.Material.GetPoissonFromShearModulus(System.Double,System.Double)">
            <summary>
            Computes the Poisson ratio that needs to be set to have the desired shear modulus.
            </summary>
        </member>
        <member name="P:devDept.Graphics.Material.Description">
            <summary>Gets or sets the material description.</summary>
        </member>
        <member name="P:devDept.Graphics.Material.Ambient">
            <summary>Gets or sets the ambient reflectance of the material.</summary>
        </member>
        <member name="P:devDept.Graphics.Material.Diffuse">
            <summary>Gets or sets the diffuse reflectance of the material.</summary>
        </member>
        <member name="P:devDept.Graphics.Material.Specular">
            <summary>Gets or sets the specular reflectance of the material.</summary>
        </member>
        <member name="P:devDept.Graphics.Material.Environment">
            <summary> Gets or sets the environment reflectance of the material (range 0-1).</summary>
        </member>
        <member name="P:devDept.Graphics.Material.Shininess">
            <summary>Gets or sets the specular exponent of the material (range 0-1).</summary>
        </member>
        <member name="P:devDept.Graphics.Material.Young">
            <summary>
            Gets or sets material modulus of elasticity.
            </summary>
        </member>
        <member name="P:devDept.Graphics.Material.Poisson">
            <summary>
            Gets or sets material Poisson's ratio.
            </summary>
        </member>
        <member name="P:devDept.Graphics.Material.YieldStrength">
            <summary>
            Gets or sets material yield strength.
            </summary>
        </member>
        <member name="P:devDept.Graphics.Material.Density">
            <summary>
            Gets or sets material density.
            </summary>
        </member>
        <member name="P:devDept.Graphics.Material.CoeffOfThermalExp">
            <summary>
            Gets or sets material coefficient of thermal expansion.
            </summary>
        </member>
        <member name="P:devDept.Graphics.Material.ElementType">
            <summary>
            Gets or sets the 2D FEM element type (FEM).
            </summary>
        </member>
        <member name="P:devDept.Graphics.Material.Matrix">
            <summary>
            Gets or sets the material Matrix (FEM).
            </summary>
        </member>
        <member name="P:devDept.Graphics.Material.ElementThickness">
            <summary>
            Gets or sets the 2D FEM element thickness.
            </summary>
        </member>
        <member name="P:devDept.Graphics.Material.WireColor">
            <summary>
            Gets the color used for wire entities.
            </summary>
        </member>
        <member name="P:devDept.Graphics.Material.texture">
            <summary>
            Gets the internal texture.
            </summary>
        </member>
        <member name="P:devDept.Graphics.Material.alphaMap">
            <summary>
            Gets the internal alphaMap texture.
            </summary>
        </member>
        <member name="P:devDept.Graphics.Material.TextureImage">
            <summary>Gets or sets the material texture image.</summary>
            <remarks>If the material is already added to the ViewportLayout call <see cref="M:devDept.Graphics.Material.LoadTexture(devDept.Graphics.RenderContextBase)"/> to make it effective.</remarks>
        </member>
        <member name="P:devDept.Graphics.Material.AlphaMap">
            <summary>Gets or sets the material alpha image.</summary>
            <remarks>If the material is already added to the ViewportLayout call <see cref="M:devDept.Graphics.Material.LoadTexture(devDept.Graphics.RenderContextBase)"/> to make it effective.</remarks>
        </member>
        <member name="P:devDept.Graphics.Material.EnvironmentMappingImage">
            <summary>Gets or sets the material environment mapping image.</summary>
            <remarks>If the material is already added to the ViewportLayout call <see cref="M:devDept.Graphics.Material.LoadTexture(devDept.Graphics.RenderContextBase)"/> to make it effective.</remarks>
        </member>
        <member name="P:devDept.Graphics.Material.MinifyingFunction">
            <summary>Gets or sets the texture minifying function. The texture minifying function is used whenever
            the pixel being textured maps to an area greater than one texture element. There are
            six defined minifying functions. Two of them use the nearest one or nearest four texture
            elements to compute the	texture	value. The other four use mipmaps.</summary>
        </member>
        <member name="P:devDept.Graphics.Material.MagnifyingFunction">
            <summary>Gets or sets the texture magnifying function. The texture magnifying function is used whenever
            the pixel being textured maps to an area smaller than one texture element. There are
            six defined minifying functions. Two of them use the nearest one or nearest four texture
            elements to compute the	texture	value. The other four use mipmaps.</summary>
        </member>
        <member name="P:devDept.Graphics.Material.RepeatX">
            <summary>
            Gets or sets the texture repeat mode in the X direction.
            </summary>
            <remarks>If true, values outside [0,1] are mapped to the [0,1] range. If false, values less than 0 are mapped to 0 and values greater than 1 are mapped to 1.</remarks>
        </member>
        <member name="P:devDept.Graphics.Material.RepeatY">
            <summary>
            Gets or sets the texture repeat mode in the Y direction.
            </summary>
            <remarks>If true, values outside [0,1] are mapped to the [0,1] range. If false, values less than 0 are mapped to 0 and values greater than 1 are mapped to 1.</remarks>
        </member>
        <member name="P:devDept.Graphics.Material.ShearModulus">
            <summary>
            Gets the shear modulus using the material Young and Poisson constants.
            </summary>
        </member>
        <member name="T:devDept.Graphics.elementType">
            <summary>
            2D finite element method type.
            </summary>
        </member>
        <member name="F:devDept.Graphics.elementType.PlaneStrain">
            <summary>
            Plane strain
            </summary>
        </member>
        <member name="F:devDept.Graphics.elementType.PlaneStress">
            <summary>
            Plane stress
            </summary>
        </member>
        <member name="F:devDept.Graphics.elementType.Axisymmetric">
            <summary>
            Axisymetric
            </summary>
        </member>
        <member name="T:devDept.Graphics.BackfaceSettings">
            <summary>
            Backface settings.
            </summary>
        </member>
        <member name="M:devDept.Graphics.BackfaceSettings.#ctor">
            <summary>Empty constructor.</summary>
        </member>
        <member name="M:devDept.Graphics.BackfaceSettings.#ctor(devDept.Graphics.backfaceColorMethodType,System.Drawing.Color)">
            <summary>Standard constructor.</summary>
            <param name="colorMode">Color mode</param>
            <param name="color">Color</param>
        </member>
        <member name="P:devDept.Graphics.BackfaceSettings.ColorMethod">
            <summary>Gets or sets the backface color method.</summary>
        </member>
        <member name="P:devDept.Graphics.BackfaceSettings.Color">
            <summary>Backface color, applies only to single color style mode.</summary>
        </member>
        <member name="T:devDept.Graphics.ClippingPlaneBase">
            <summary>
            Clipping plane base definition.
            </summary>
            <remarks>The scene is clipped on the positive side of the plane.</remarks>
        </member>
        <member name="M:devDept.Graphics.ClippingPlaneBase.#ctor">
            <summary>Empty constructor.</summary>
        </member>
        <member name="M:devDept.Graphics.ClippingPlaneBase.#ctor(devDept.Geometry.Vector3D,System.Double,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="normal">Plane normal</param>
            <param name="distance">Distance from the origin</param>
            <param name="active">Status</param>
        </member>
        <member name="M:devDept.Graphics.ClippingPlaneBase.#ctor(devDept.Geometry.Plane,System.Boolean)">
            <summary>Standard constructor.</summary>
            <param name="plane">The plane</param>
            <param name="active">Status</param>
        </member>
        <member name="P:devDept.Graphics.ClippingPlaneBase.Normal">
            <summary>Gets or sets the plane normal.</summary>
        </member>
        <member name="P:devDept.Graphics.ClippingPlaneBase.Distance">
            <summary>Gets or sets the plane distance from the origin.</summary>
        </member>
        <member name="P:devDept.Graphics.ClippingPlaneBase.Plane">
            <summary>
            Gets or sets the plane.
            </summary>
        </member>
        <member name="P:devDept.Graphics.ClippingPlaneBase.Active">
            <summary>Clipping plane status.</summary>
        </member>
        <member name="T:devDept.Graphics.ShaderParametersBase">
            <summary>
            Base class for shader parameters.
            </summary>
        </member>
        <member name="T:devDept.Graphics.shaderPrimitiveType">
            <summary>
            Shader primitive type.
            </summary>
        </member>
        <member name="T:devDept.Graphics.ShaderParameters">
            <summary>
            Base class for shader parameters.
            </summary>
        </member>
        <member name="F:devDept.Graphics.ShaderParameters.AlphaMap">
            <summary>
            If true, the texture alpha is modulated by another texture defining the alpha map.
            </summary>
        </member>
        <member name="M:devDept.Graphics.ShaderParameters.PrepareForWireframe">
            <summary>
            Prepares parameters for wireframe drawing.
            </summary>
        </member>
        <member name="F:devDept.Graphics.ShaderParameters.AlphaClip">
            <summary>
            If true, discards the fragment if alpha &lt; 0.1.
            </summary>
            <remarks>For <see cref="F:devDept.Graphics.shaderType.Texture2DNoLights"/> shader only.</remarks>
        </member>
        <member name="T:devDept.Graphics.ReflectionShaderParameters">
            <summary>
            Class for shader parameters.
            </summary>
        </member>
        <member name="T:devDept.Graphics.colorThemeType">
            <summary>
            Color theme for UI elements.
            </summary>
        </member>
        <member name="F:devDept.Graphics.colorThemeType.Auto">
            <summary>
            Automatic background brightness detection
            </summary>
        </member>
        <member name="F:devDept.Graphics.colorThemeType.Light">
            <summary>
            Light color
            </summary>
        </member>
        <member name="F:devDept.Graphics.colorThemeType.Dark">
            <summary>
            Dark color
            </summary>
        </member>
        <member name="T:devDept.Graphics.BackgroundSettings">
            <summary>
            Viewport background settings.
            </summary>
        </member>
        <member name="M:devDept.Graphics.BackgroundSettings.#ctor">
            <summary>
            Empty constructor.
            </summary>
        </member>
        <member name="M:devDept.Graphics.BackgroundSettings.#ctor(devDept.Graphics.backgroundStyleType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Windows.Media.ImageSource,devDept.Graphics.colorThemeType,System.Double)">
            <summary>Standard constructor.</summary>
            <param name="styleMode">Background style</param>
            <param name="bottomColor">Bottom color, applies only to gradient styles.</param>
            <param name="intermediateColor">Intermediate color, applies only to gradient styles.</param>
            <param name="topColor">Top color, applies only to gradient styles.</param>
            <param name="intermediateColorPosition">Intermediate color position expressed in percent of viewport height from top.</param>
            <param name="image">Image, applies only to gradient style.</param>
            <param name="colorTheme">Color theme</param>
            <param name="colorThemeTransparency">Color theme transparency</param>
        </member>
        <member name="M:devDept.Graphics.BackgroundSettings.#ctor(devDept.Graphics.backgroundStyleType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Windows.Media.ImageSource)">
            <summary>Standard constructor.</summary>
            <param name="styleMode">Background style</param>
            <param name="bottomColor">Bottom color, applies only to gradient styles.</param>
            <param name="intermediateColor">Intermediate color, applies only to gradient styles.</param>
            <param name="topColor">Top color, applies only to gradient styles.</param>
            <param name="intermediateColorPosition">Intermediate color position expressed in percent of viewport height from top.</param>
            <param name="image">Image, applies only to gradient style.</param>
        </member>
        <member name="M:devDept.Graphics.BackgroundSettings.#ctor(devDept.Graphics.BackgroundSettings)">
            <summary>
            Copy constructor.
            </summary>
            <param name="another">The other BackgroundSettings object</param>
        </member>
        <member name="M:devDept.Graphics.BackgroundSettings.FreezeBrightness(System.Boolean)">
            <summary>
            Freezes the brightness evaluation.
            </summary>
            <param name="freeze"></param>
            <remarks>For internal use only.</remarks>
            <seealso cref="P:devDept.Graphics.BackgroundSettings.IsDark"/>
        </member>
        <member name="P:devDept.Graphics.BackgroundSettings.StyleMode">
            <summary>Gets or sets the viewport background style.</summary>
            <remarks>When using CubicGradient style, you need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Graphics.BackgroundSettings.BottomColor">
            <summary>Gets or sets the viewport background bottom color.</summary>
            <remarks>When using CubicGradient style, you need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Graphics.BackgroundSettings.IntermediateColor">
            <summary>Gets or sets the viewport background intermediate color.</summary>
            <remarks>When using CubicGradient style, you need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
        </member>
        <member name="P:devDept.Graphics.BackgroundSettings.TopColor">
            <summary>Gets or sets the viewport background top color.</summary>
            <remarks>When using CubicGradient style, you need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:devDept.Graphics.BackgroundSettings.IntermediateColorPosition" -->
        <member name="P:devDept.Graphics.BackgroundSettings.ColorThemeTransparency">
            <summary>
            Gets or sets button hover status, progress bar, viewcube ring (when the ViewCubeIcon.Lighting property is false), zoom window and selection boxes transparency level.
            </summary>
        </member>
        <member name="P:devDept.Graphics.BackgroundSettings.Image">
            <summary>
            Gets or sets the background image.
            </summary>
            <remarks>
                You need to call the <see cref="!:ViewportLayout.CompileUserInterfaceElements()"/> to
                see the effect of this change at run-time.
            </remarks>
        </member>
        <member name="P:devDept.Graphics.BackgroundSettings.ColorTheme">
            <summary>
            Gets or sets the user interface elements color theme.
            </summary>
        </member>
        <member name="T:devDept.Graphics.HSLColor">
            <summary>
            Hue Saturation Luminosity class.
            </summary>
            <remarks>For internal use only.</remarks>
        </member>
        <member name="T:devDept.Graphics.Converters.MaterialConverter">
            <exclude/>
            <excludetoc/>
        </member>
    </members>
</doc>
