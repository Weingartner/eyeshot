<?xml version="1.0"?>
<doc>
  <assembly>
    <name>devDept.Graphics.Wpf.v12</name>
  </assembly>
  <members>
    <member name="T:devDept.Graphics.CameraBase">
      <summary>
            Base Class for Camera
            </summary>
    </member>
    <member name="P:devDept.Graphics.CameraBase.ModelViewMatrix">
      <summary>
            Gets or sets the camera ModelView matrix.
            </summary>
    </member>
    <member name="P:devDept.Graphics.CameraBase.ProjectionMatrix">
      <summary>
            Gets or sets the camera Projection matrix.
            </summary>
    </member>
    <member name="P:devDept.Graphics.CameraBase.ViewNormal">
      <summary>
            Gets the camera view normal.
            </summary>
    </member>
    <member name="M:devDept.Graphics.CameraBase.CheckScreenPointVisibility(System.Int32,System.Int16[],System.Int32,System.Int32[],System.Single,System.Single,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
      <summary>
            Checks the visibility of the given screen point.
            </summary>
      <param name="bitmapData">
      </param>
      <param name="viewFrame">
      </param>
      <param name="xPos">
      </param>
      <param name="yPos">
      </param>
      <param name="zPos">
      </param>
      <param name="leftBorder">
      </param>
      <param name="rightBorder">
      </param>
      <param name="bottomBorder">
      </param>
      <param name="topBorder">
      </param>
      <param name="hidden">
      </param>
    </member>
    <member name="M:devDept.Graphics.CameraBase.Project2D(System.Double[],System.Int32[],System.Double,System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
            Maps world coordinates to screen coordinates.
            </summary>
      <param name="modelViewProj">The modelview projection matrix</param>
      <param name="viewFrame">The viewport bounds</param>
      <param name="objx">The world X coordinate</param>
      <param name="objy">The world Y coordinate</param>
      <param name="objz">The world Z coordinate</param>
      <param name="winx">The computed window X coordinate</param>
      <param name="winy">The computed window Y coordinate</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Graphics.CameraBase.Project(devDept.Graphics.RenderContextBase,System.Double[],System.Int32[],System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
      <summary>
            Maps world coordinates to screen coordinates.
            </summary>
      <param name="renderContext">The rendering context</param>
      <param name="modelViewProj">The modelview projection matrix</param>
      <param name="viewFrame">The viewport bounds</param>
      <param name="objx">The world X coordinate</param>
      <param name="objy">The world Y coordinate</param>
      <param name="objz">The world Z coordinate</param>
      <param name="winx">The computed window X coordinate</param>
      <param name="winy">The computed window Y coordinate</param>
      <param name="winz">The computed window Z coordinate</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Graphics.CameraBase.GetModelViewProjectionMatrix(System.Boolean)">
      <summary>
            Gets the current modelview projection matrix.
            </summary>
      <param name="withCurrentBlockReferenceTransformation">If true, returns the matrix multiplied by the current BlockReference accumulated transformation/</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Graphics.CameraBase.Project(devDept.Graphics.RenderContextBase,System.Int32[],System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
      <summary>
            Maps world coordinates to screen coordinates.
            </summary>
      <param name="objx">The world X coordinates</param>
      <param name="objy">The world Y coordinates</param>
      <param name="objz">The world Z coordinates</param>
      <param name="winx">The computed window X coordinates</param>
      <param name="winy">The computed window Y coordinates</param>
      <param name="winz">The computed window Z coordinates</param>
      <param name="renderContext">The render context</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Graphics.CameraBase.CheckScreenPointVisibility(devDept.Graphics.RenderContextBase,System.Int32,System.Drawing.Size,System.Int32[],System.Single,System.Single,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
      <summary>
            Checks the visibility of the given screen point.
            </summary>
      <param name="viewport">
      </param>
      <param name="renderContext">
      </param>
      <param name="size">
      </param>
      <param name="viewFrame">
      </param>
      <param name="xPos">
      </param>
      <param name="yPos">
      </param>
      <param name="zPos">
      </param>
      <param name="leftBorder">
      </param>
      <param name="rightBorder">
      </param>
      <param name="bottomBorder">
      </param>
      <param name="topBorder">
      </param>
      <param name="hidden">
      </param>
    </member>
    <member name="M:devDept.Graphics.CameraBase.GetFrame(devDept.Geometry.Point3D@,devDept.Geometry.Vector3D@,devDept.Geometry.Vector3D@,devDept.Geometry.Vector3D@)">
      <summary>
            Returns the current camera frame.
            </summary>
      <param name="origin">The camera origin</param>
      <param name="camX">The camera X axis</param>
      <param name="camY">The camera Y axis</param>
      <param name="camZ">The camera Z axis</param>
    </member>
    <member name="M:devDept.Graphics.CameraBase.InvalidateZRange(System.Boolean)">
      <summary>
            Tells if the z-range of the camera is valid.
            </summary>
      <param name="invalid">
      </param>
      <returns>
      </returns>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="F:devDept.Graphics.CameraBase.PropertyChangedEvent">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:devDept.Graphics.CameraBase.RaiseEventEnabled">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="E:devDept.Graphics.CameraBase.PropertyChanged">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Graphics.CameraBase.RaisePropertyChangedEvent(System.Object,System.Windows.DependencyProperty)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:devDept.Graphics.projectionType">
      <summary>Camera projection type.</summary>
    </member>
    <member name="F:devDept.Graphics.projectionType.Orthographic">
      <summary>Orthographic projection</summary>
    </member>
    <member name="F:devDept.Graphics.projectionType.Perspective">
      <summary>Perspective projection</summary>
    </member>
    <member name="T:devDept.Graphics.Converters.BackgroundConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Graphics.Converters.BackfaceConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Graphics.Converters.LightConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Graphics.Converters.MaterialConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Graphics.D3DRenderContext">
      <summary>
            Direct3D render context class.
            </summary>
    </member>
    <member name="M:devDept.Graphics.D3DRenderContext.DrawTriangles(devDept.Geometry.Point3D[])">
      <summary>
            Draws triangles without normals.
            </summary>
      <param name="vertices">The vertices</param>
    </member>
    <member name="T:devDept.Graphics.D3DRenderContext.RenderTargetStruct">
      <summary>
            The Direct3D render target structure.
            </summary>
    </member>
    <member name="F:devDept.Graphics.D3DRenderContext.RenderTargetStruct.renderView">
      <summary>
            The RenderTargetView object.
            </summary>
    </member>
    <member name="F:devDept.Graphics.D3DRenderContext.RenderTargetStruct.depthStencilView">
      <summary>
            The DepthStencilView object.
            </summary>
    </member>
    <member name="M:devDept.Graphics.D3DRenderContext.ReadColorBuffer(devDept.Graphics.IViewport,System.Drawing.Rectangle,System.Int32@,System.Int32@)">
      <summary>
            Reads the color buffer.
            </summary>
      <param name="rect">Rectangle to read, in screen coordinates.</param>
      <param name="stride">
      </param>
      <param name="bpp">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Graphics.D3DRenderContext.ResolveMultisampleTexture(devDept.Graphics.TextureBase,devDept.Graphics.TextureBase)">
      <summary>
            Resolves a multisample texture on a single sample texture.
            </summary>
      <param name="multiSampleTexture">
      </param>
      <param name="singleSampleTexture">
      </param>
    </member>
    <member name="M:devDept.Graphics.D3DRenderContext.GetPixel(System.Int32,System.Int32)">
      <summary>
            Gets the color of the specified pixel in this viewport
            </summary>
      <param name="x">The x window coordinate of the pixel to retrieve</param>
      <param name="y">The y window coordinate of the pixel to retrieve (0 on bottom)</param>
      <returns>The color of the pixel</returns>
    </member>
    <member name="T:devDept.Graphics.DXUtils">
      <summary>
            Utility Class for <see cref="T:devDept.Graphics.D3DRenderContext" /> class.
            </summary>
    </member>
    <member name="M:devDept.Graphics.DXUtils.ConvertToFloatArray(System.Double[])">
      <summary>
            Converts the given array of doubles to an array of floats.
            </summary>
      <param name="array">The array of doubles</param>
      <returns>The array of floats.</returns>
    </member>
    <member name="M:devDept.Graphics.DXUtils.ConvertToDoubleArray(System.Single[])">
      <summary>
            Converts the given array of floats to an array of doubles.
            </summary>
      <param name="array">The array of doubles</param>
      <returns>The array of doubles.</returns>
    </member>
    <member name="M:devDept.Graphics.DXUtils.PointerSizeToUInt64(SharpDX.PointerSize)">
      <summary>
            Converts a <see cref="T:SharpDX.PointerSize" /> to a 64-bit unsigned integer.
            </summary>
      <param name="ptr">The pointer to convert.</param>
      <returns>An <c>unsigned long</c>.</returns>
    </member>
    <member name="T:devDept.Graphics.vertexBufferData">
      <summary>
            Class that holds the data for a portion of a vertex Buffer.
            </summary>
    </member>
    <member name="F:devDept.Graphics.vertexBufferData.nElementsPerChunk">
      <summary>
            Number of elements of each chunk.
            </summary>
    </member>
    <member name="F:devDept.Graphics.vertexBufferData.startVertex">
      <summary>
            Start vertex of first chunk (the others start necessarily from 0).
            </summary>
    </member>
    <member name="F:devDept.Graphics.vertexBufferData.firstChunk">
      <summary>
            First chunk index.
            </summary>
    </member>
    <member name="F:devDept.Graphics.vertexBufferData.lastChunk">
      <summary>
            Last chunk index.
            </summary>
    </member>
    <member name="T:devDept.Graphics.D3DRenderContextWF">
      <summary>
            Render context class that uses Direct3D in a WindowsForms control.
            </summary>
    </member>
    <member name="T:devDept.Graphics.D3DRenderContextWPF">
      <summary>
            Render context class that uses Direct3D in a WPF native control.
            </summary>
    </member>
    <member name="F:devDept.Graphics.D3DRenderContextWPF.wpfImageSource">
      <summary>
            The WPF Image Source object. For internal use only.
            </summary>
    </member>
    <member name="T:devDept.Graphics.D3DTextureBase">
      <summary>
            Base class for Direct3D textures.
            </summary>
    </member>
    <member name="M:devDept.Graphics.D3DTextureBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="F:devDept.Graphics.D3DTextureBase.sampler">
      <summary>
            The texture sampler. It's the index to the textureSamples list of RenderContext.
            </summary>
    </member>
    <member name="T:devDept.Graphics.D3DTexture">
      <summary>
            Base class for Direct3D textures.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Graphics.D3DTexture.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Graphics.D3DTexture.UpdateRegion(devDept.Graphics.RenderContextBase,System.Drawing.Bitmap,System.Int32,System.Int32)">
      <summary>
            Updates a region of a texture already loaded in memory.
            </summary>
      <param name="renderContext">The render context</param>
      <param name="bitmap">The region of the image to update</param>
      <param name="xOffset">The texel offset in the x direction (0,0 being the bottom-left corner)</param>
      <param name="yOffset">The texel offset in the y direction (0,0 being the bottom-left corner)</param>
    </member>
    <member name="T:devDept.Graphics.D3DTexture2D">
      <summary>
            2D color texture class for Direct3D.
            </summary>
    </member>
    <member name="M:devDept.Graphics.D3DTexture2D.#ctor(devDept.Graphics.RenderContextBase,System.Drawing.Bitmap,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Creates a 2D texture.
            </summary>
      <param name="renderContext">The render context</param>
      <param name="bmp">The image</param>
      <param name="minFunc">Minification function</param>
      <param name="magFunc">Magnification function</param>
      <param name="anisotropicFiltering">If true, enables anisotropic filtering for mipmapping</param>
      <param name="repeatX">If true, the texture is repeated in the X direction</param>
      <param name="repeatY">If true, the texture is repeated in the Y direction</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Graphics.D3DTexture2D.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Graphics.D3DTextureDepth">
      <summary>
            Depth texture class for Direct3D.
            </summary>
    </member>
    <member name="T:devDept.Graphics.EntityGraphicsData">
      <summary>
            Class that holds the compiled graphics data.
            </summary>
    </member>
    <member name="F:devDept.Graphics.EntityGraphicsData.Parent">
      <summary>
            Parent object, used to identify the entity who caused an error if it was not compiled
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Graphics.EntityGraphicsData.SetParent(System.Object)">
      <summary>
            Sets the parent object, used to identify the entity who caused an error if it was not compiled.
            </summary>
      <param name="parent">
      </param>
    </member>
    <member name="M:devDept.Graphics.EntityGraphicsData.Dispose">
      <summary>
            Cleans up the graphics resources.
            </summary>
    </member>
    <member name="M:devDept.Graphics.EntityGraphicsData.DrawD3D(devDept.Graphics.RenderContextBase,System.Int32)">
      <summary>
            Draws the specified part of the entity buffer (Direct3D only).
            </summary>
      <param name="context">The render context</param>
      <param name="part">The part of the buffer to draw</param>
    </member>
    <member name="M:devDept.Graphics.EntityGraphicsData.DrawD3D(devDept.Graphics.RenderContextBase,System.Boolean)">
      <summary>
            Draws the current part of the entity buffer or the next one (Direct3D only).
            </summary>
      <param name="context">The render context</param>
      <param name="nextPart">If true, draws the next part of the buffer, else it draws the current one</param>
    </member>
    <member name="F:devDept.Graphics.EntityGraphicsData.PrimitiveType">
      <summary>
            The type of primitive to draw;
            </summary>
    </member>
    <member name="M:devDept.Graphics.EntityGraphicsData.IsValid">
      <summary>
            Tells if the graphics data has been compiled.
            </summary>
      <returns>True if the graphics data has been compiled.</returns>
    </member>
    <member name="T:devDept.Graphics.VBOParamsBase">
      <summary>
            Base Class that holds the parameters for VBO.
            </summary>
    </member>
    <member name="F:devDept.Graphics.VBOParamsBase.indices">
      <summary>
            Triangles Indices
            </summary>
    </member>
    <member name="F:devDept.Graphics.VBOParamsBase.vertices">
      <summary>
            Triangles vertices
            </summary>
    </member>
    <member name="F:devDept.Graphics.VBOParamsBase.normals">
      <summary>
            Vertices normals
            </summary>
    </member>
    <member name="F:devDept.Graphics.VBOParamsBase.numberOfCoordPerVertex">
      <summary>
            Number of coordinates per vertex
            </summary>
    </member>
    <member name="F:devDept.Graphics.VBOParamsBase.primitiveMode">
      <summary>
            The type of primitive
            </summary>
    </member>
    <member name="T:devDept.Graphics.VBOParams">
      <summary>
            Class that holds the parameters for VBO with normals and colors.
            </summary>
    </member>
    <member name="F:devDept.Graphics.VBOParams.colors">
      <summary>
            Vertices colors (3 bytes per vertex for full color, 1 byte per vertex for color modulation).
            </summary>
    </member>
    <member name="T:devDept.Graphics.VBOParamsTexture">
      <summary>
            Class that holds the parameters for VBO with normals and texture coordinates.
            </summary>
    </member>
    <member name="P:devDept.Graphics.VBOParamsTexture.TextureCoordinates">
      <summary>
            Gets or sets the texture coordinates (1 or 2 float per vertex).
            </summary>
    </member>
    <member name="T:devDept.Graphics.GfxEnvironmentParams">
      <summary>
            Base class with graphics environment data.
            </summary>
    </member>
    <member name="P:devDept.Graphics.GfxEnvironmentParams.direct3D">
      <summary>
            If true, the graphics environment is using Direct3D to render the scene.
            </summary>
    </member>
    <member name="P:devDept.Graphics.GfxEnvironmentParams.MaxPatternRepetitions">
      <summary>
            Gets or sets the maximum number of pattern repetitions allowed between two vertices of a curve.
            </summary>
    </member>
    <member name="M:devDept.Graphics.GfxEnvironmentParams.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Graphics.GfxEnvironmentParams.#ctor(devDept.Graphics.RenderContextBase,System.Int32)">
      <summary>
            Constructor.
            </summary>
      <param name="renderContext">
      </param>
      <param name="maxPatternRepetitions">
      </param>
    </member>
    <member name="P:devDept.Graphics.GfxEnvironmentParams.RenderContext">
      <summary>
            Gets or sets the render context.
            </summary>
    </member>
    <member name="T:devDept.Graphics.GfxSilhoData">
      <summary>
            Base class with the data to draw silhouettes.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="F:devDept.Graphics.GfxSilhoData.Entity">
      <summary>
            The entity this data belongs to.
            </summary>
    </member>
    <member name="F:devDept.Graphics.GfxSilhoData.Parents">
      <summary>
            The chain of nested parents.
            </summary>
    </member>
    <member name="T:devDept.Graphics.SilhoVertexArrayData">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Graphics.GraphicsException">
      <summary>
            An exception thrown by Eyeshot.
            </summary>
    </member>
    <member name="M:devDept.Graphics.GraphicsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:devDept.Graphics.GraphicsException" /> class with serialized data.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" />
            instance that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" />
            instance that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:devDept.Graphics.GraphicsException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified
            error message and a reference to the inners exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception.
            If the innerException parameter is not a null reference, the current exception is raised
            in a catch block that handles the inners exception.</param>
    </member>
    <member name="M:devDept.Graphics.GraphicsException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:devDept.Graphics.GraphicsException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:System.Exception" /> class.
            </summary>
    </member>
    <member name="T:devDept.Graphics.IKeyedCollectionItem`1">
      <inheritdoc />
      <summary>
            Interface for the Eyeshot keyed collection.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:devDept.Graphics.IKeyedCollectionItem`1.GetKey">
      <summary>
            Gets the key for the item of the collection.
            </summary>
      <returns>The item key.</returns>
    </member>
    <member name="M:devDept.Graphics.IKeyedCollectionItem`1.SetKey(System.String)">
      <summary>
            Sets the key for the item of the collection.
            </summary>
      <returns>The item key.</returns>
    </member>
    <member name="T:devDept.Graphics.IKeyedCollectionDisposableItem`1">
      <inheritdoc />
      <summary>
            Interface for the Eyeshot keyed collection with disposable items.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:devDept.Graphics.KeyChangedEventArgs">
      <summary>
            EventArgs to notify the new key for a <see cref="T:devDept.Graphics.IKeyedCollectionItem`1" />.
            </summary>
      <remarks>The new key must be specified before changing it to the item.</remarks>
    </member>
    <member name="P:devDept.Graphics.KeyChangedEventArgs.NewKey">
      <summary>
            The new key for a <see cref="T:devDept.Graphics.IKeyedCollectionItem`1" />.
            </summary>
    </member>
    <member name="M:devDept.Graphics.KeyChangedEventArgs.#ctor(System.String,System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="newKey">The new key for the item.</param>
    </member>
    <member name="T:devDept.Graphics.KeyChangedEventHandler">
      <summary>
            The delegate for the <see cref="E:devDept.Graphics.INotifyKeyChanged.KeyChanged" /> event.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:devDept.Graphics.KeyChangedEventArgs" />.</param>
    </member>
    <member name="T:devDept.Graphics.INotifyKeyChanged">
      <summary>
            Interface for <see cref="T:devDept.Graphics.IKeyedCollectionItem`1" /> to preserve the collection integrity when the key changes.
            </summary>
    </member>
    <member name="E:devDept.Graphics.INotifyKeyChanged.KeyChanged">
      <summary>
            The key changed event.
            </summary>
    </member>
    <member name="T:devDept.Graphics.IShaderTechnique">
      <summary>
            Defines the Vertex, Pixel and Geometry shader that constitute the shader technique.
            </summary>
    </member>
    <member name="P:devDept.Graphics.IShaderTechnique.UpdatedInFrame">
      <summary>
            Gets or sets a value indicating whether the shader has been updated in the current frame.
            </summary>
    </member>
    <member name="T:devDept.Graphics.IShader">
      <summary>
            Shaders common methods.
            </summary>
    </member>
    <member name="T:devDept.Graphics.RenderContextUtility">
      <summary>
            Class that provide utility methods for the render context.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextUtility.ConvertColor(System.Drawing.Color)">
      <summary>
            Method that converts a <see cref="T:System.Drawing.Color" /> to a <see cref="T:System.Windows.Media.Brush" />.
            </summary>
      <param name="color">The color to convert</param>
      <returns>The <see cref="T:System.Windows.Media.Brush" /> object.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextUtility.ConvertColorFromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
            Creates a new <see cref="T:System.Windows.Media.Brush" /> structure by using the specified sRGB alpha channel and color channel values.
            </summary>
      <param name="a">The alpha channel of the new color.</param>
      <param name="r">The red channel of the new color.</param>
      <param name="g">The green channel of the new color.</param>
      <param name="b">The blue channel of the new color.</param>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> structure with the specified values</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextUtility.ConvertColorFromRgb(System.Byte,System.Byte,System.Byte)">
      <summary>
            Creates a new <see cref="T:System.Windows.Media.Brush" /> structure by using the specified RGB color channel values.
            </summary>
      <param name="r">The red channel of the new color.</param>
      <param name="g">The green channel of the new color.</param>
      <param name="b">The blue channel of the new color.</param>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> structure with the specified values</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextUtility.ConvertColor(System.Windows.Media.Brush)">
      <summary>
            Method unified between WinForms and WPF that converts a <see cref="T:System.Drawing.Color" /> or <see cref="T:System.Windows.Media.Brush" /> to a <see cref="T:System.Drawing.Color" />.
            </summary>
      <param name="color">The color (WinForms) or brush (WPF)</param>
      <returns>The converted <see cref="T:System.Drawing.Color" />.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextUtility.ConvertPoint(System.Windows.Point)">
      <summary>
            Method that converts a <see cref="T:System.Windows.Point" /> to a <see cref="T:System.Drawing.Point" />.
            </summary>
      <param name="point">The point to convert</param>
      <returns>The <see cref="T:System.Drawing.Point" /> object.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextUtility.ConvertPoint(System.Drawing.Point)">
      <summary>
            Method that converts a <see cref="T:System.Drawing.Point" /> to a <see cref="T:System.Windows.Point" />.
            </summary>
      <param name="point">The point to convert</param>
      <returns>The <see cref="T:System.Windows.Point" /> object.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextUtility.AreEqual(System.Windows.Media.Brush,System.Drawing.Color)">
      <summary>
            Method unified between WinForms and WPF that checks the equality between a <see cref="T:System.Drawing.Color" /> (WinForms) or <see cref="T:System.Windows.Media.Brush" /> (WPF) object and another <see cref="T:System.Drawing.Color" /> object.
            </summary>
      <param name="color1">The first color (WinForms) or brush (WPF) object</param>
      <param name="color2">The second color</param>
      <returns>True if they are equal, false elsewise.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextUtility.AreEqual(System.Windows.Media.Brush,System.Windows.Media.Brush)">
      <summary>
            Method that checks the equality between two <see cref="T:System.Windows.Media.Brush" /> object.
            </summary>
      <param name="color1">The first brush color.</param>
      <param name="color2">The second brush color.</param>
      <returns>True if they are equal, false elsewise.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextUtility.ConvertColorTable(System.Windows.Media.Brush[])">
      <summary>
            Method unified between WinForms and WPF that converts a <see cref="T:System.Drawing.Color" /> array (WinForms) or <see cref="T:System.Windows.Media.Brush" /> array (WPF) to a <see cref="T:System.Drawing.Color" /> array.
            </summary>
      <param name="colorTable">The color array (WinForms) or brush array (WPF)</param>
      <returns>The converted <see cref="T:System.Drawing.Color" /> array.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextUtility.ConvertImage(System.Windows.Media.ImageSource)">
      <summary>
            Method unified between WinForms and WPF that converts a <see cref="T:System.Drawing.Image" /> or <see cref="T:System.Windows.Media.ImageSource" /> to a <see cref="T:System.Drawing.Image" />.
            </summary>
      <param name="image">The image</param>
      <returns>The converted <see cref="T:System.Drawing.Image" />.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextUtility.ConvertImage(System.Drawing.Bitmap)">
      <summary>
            Method that converts a <see cref="T:System.Drawing.Bitmap" /> to a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.
            </summary>
      <param name="bitmap">The image</param>
      <returns>The converted <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextUtility.ConvertImage(System.Windows.Media.Imaging.BitmapImage)">
      <summary>
            Method unified between WinForms and WPF that converts a <see cref="T:System.Drawing.Bitmap" /> (WinForms) or <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> (WPF) to a <see cref="T:System.Drawing.Bitmap" />.        
            </summary>
      <param name="bitmapImage">The image</param>
      <returns>The converted <see cref="T:System.Drawing.Bitmap" />.</returns>
    </member>
    <member name="T:devDept.Graphics.PlanarShadowBase">
      <summary>
            Base abstract class for planar shadows.
            </summary>
    </member>
    <member name="M:devDept.Graphics.PlanarShadowBase.Dispose">
      <summary>
            Releases unmanaged resources.
            </summary>
    </member>
    <member name="T:devDept.Graphics.FrustumData">
      <summary>
            Frustum data class for shadow map computation.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="T:devDept.Graphics.ShadowMapData">
      <summary>
            Class for shadow map data.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Graphics.ShadowMapData.EnableForShaders(devDept.Graphics.RenderContextBase,System.Int32)">
      <summary>
            Enables ShadowMap.
            </summary>
      <param name="texNumber">number of texture</param>
    </member>
    <member name="T:devDept.Graphics.ShadowMapData.GfxShadowParams">
      <summary>
            Class with the parameters necessary to draw the realistic shadows.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="T:devDept.Graphics.RenderContextBase">
      <summary>
            Render context base class.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.NumberOfSplits">
      <summary>
            Gets the number of splits used in the parallel split shadowmapping algorithm.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.UpdateActiveLights(devDept.Graphics.LightSettings[])">
      <summary>
            Updates the active lights used for the rendering.
            </summary>
      <param name="lights">The lights collection</param>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.ActiveLights">
      <summary>
            Currently active lights.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ProcessLightAttributes(System.Boolean,System.Boolean)">
      <summary>
            Updates light attributes for all light sources. Light attributes are: color and specular color.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ProcessClippingPlanes(devDept.Graphics.ClippingPlaneBase[],System.Boolean)">
      <summary>
            Updates the internal structure with the clipping planes.
            </summary>
      <param name="clippingPlanes">The clipping planes</param>
      <param name="updateGraphics">If true, updates the corresponding data on the graphics system</param>
      <remarks>The Clipping planes are not affected by the CurrentBlockReference.</remarks>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ProcessClippingPlanesVisibility(devDept.Graphics.ClippingPlaneBase[],System.Boolean)">
      <summary>
            Updates only the visibility of the clipping planes internal structure.
            </summary>
      <param name="clippingPlanes">The clipping planes</param>
      <param name="updateGraphics">If true, updates the corresponding data on the graphics system</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.GetNumberOfShadowMapSplits(devDept.Graphics.realisticShadowQualityType,devDept.Graphics.LightSettings[])">
      <summary>
            Gets the number of splits used in the shadowmap computation.
            </summary>
      <param name="shadowQuality">The shadow quality</param>
      <param name="lights">The lights array</param>
      <returns>The number of splits.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ComputeShaderShadowPasses(System.Int32@,System.Int32[]@)">
      <summary>
            Computes the number of passes needed by the shaders (one per light with shadow).
            </summary>
      <param name="nPasses">Number of shader passes</param>
      <param name="lightsWithShadow">Indices of the lights with a shadow</param>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.gl">
      <summary>
            Gets the instance to the OpenGL class.
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.EnvironmentSupported">
      <summary>
            Gets a values indicating whether the Environment is supported.
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.MultitexturingSupported">
      <summary>
            Gets a values indicating whether the multitexturing is supported.
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.CurrentPointSize">
      <summary>
            Gets the current point size (in pixels).
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.CurrentLineWidth">
      <summary>
            Gets the current line width (in pixels).
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.CurrentWireColor">
      <summary>
            Gets or sets the current color for wireframe entities.
            </summary>
      <remarks>use the <see cref="!:SetWireframeColor" /> to properly set it.</remarks>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.CurrentMaterial">
      <summary>
            Gets or sets the current material.
            </summary>
      <remarks>Use the <see cref="M:devDept.Graphics.RenderContextBase.SetMaterial(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)" /> to properly set it.</remarks>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.CurrentBackMaterial">
      <summary>
            Gets or sets the current material for the back faces.
            </summary>
      <remarks>Only the Ambient and Diffuse components are used. The other properties are inherited from the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></remarks>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.IsDirect3D">
      <summary>
            Tells if the graphics system is using the Direct3D renderer.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.HasDeviceContext">
      <summary>
            Tells if the device context has already been created.
            </summary>
      <returns>True if the device context has already been created</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CurrentModelViewMatrix">
      <summary>
            Gets the current modelview matrix.
            </summary>
      <returns>The current modelview matrix.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CurrentProjectionMatrix">
      <summary>
            Gets the current projection matrix.
            </summary>
      <returns>The current projection matrix.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.IsMultisample">
      <summary>
            Tells if the graphics context is using MultiSample rasterization (either set by Viewport or by the Graphics Card settings).
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ComputePickMatrix(System.Drawing.RectangleF,System.Drawing.Size,System.Int32[])">
      <summary>
            Computes the matrix to restrict the rendering to the given rectangle.
            </summary>
      <param name="rectangle">The rectangle to render</param>
      <param name="viewportSize">The size of the viewport</param>
      <param name="viewFrame">The real viewport bounds (for Direct3D)</param>
      <returns>The pick matrix.</returns>
      <remarks>The rectangle is mapped to the lower left corner of the viewport</remarks>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetProjectionMatrix(System.Double[])">
      <summary>
            Sets the projection matrix.
            </summary>
      <param name="proj">The projection matrix.</param>
      <remarks>Use "null" for Identity.</remarks>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetModelViewMatrix(System.Double[])">
      <summary>
            Sets the modelview matrix.
            </summary>
      <param name="matrix">The modelview matrix</param>
      <remarks>Use "null" for Identity.</remarks>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetMatrices(System.Double[],System.Double[])">
      <summary>
            Sets the projection and modelview matrices.
            </summary>
      <param name="proj">projection matrix</param>
      <param name="modelView">modelView matrix</param>
      <remarks>Use "null" for Identity.</remarks>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetColorWireframe(System.Drawing.Color,System.Boolean)">
      <summary>
            Wireframe color changer.
            </summary>
      <param name="color">The color</param>
      <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetColorMaterial(System.Drawing.Color,System.Boolean)">
      <summary>
            Sets the color to the diffuse component of the front and back faces, depending on the <see cref="P:devDept.Graphics.RenderContextBase.ColorMaterialMode" /> status.
            </summary>
      <param name="color">The color to set</param>
      <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetColorDiffuse(System.Drawing.Color,System.Drawing.Color,System.Boolean)">
      <summary>
            Sets the diffuse color of the front and back material.
            </summary>
      <param name="color">The front material color</param>
      <param name="backColor">The back material color</param>
      <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetMaterial(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)">
      <summary>
            Sets the material components.
            </summary>
      <param name="diffuseFront">Diffuse front face material color</param>
      <param name="diffuseBack">Diffuse back face material color</param>
      <param name="ambient">Ambient color for front and back faces</param>
      <param name="specular">Specular color</param>
      <param name="shininess">Shininess color</param>
      <param name="force">If true sets the colors regardless of the current ones, else sets them only if they are different from the current ones.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetMaterialBackDiffuse(System.Drawing.Color,System.Boolean)">
      <summary>
            Sets the material back color diffuse properties.
            </summary>
      <param name="color">The backface color</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetMaterialBackAmbient(System.Drawing.Color,System.Boolean)">
      <summary>
            Sets the material back color ambient property.
            </summary>
      <param name="color">The color</param>
      <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetMaterialFrontAmbientAndDiffuse(System.Drawing.Color,System.Boolean)">
      <summary>
            Sets the material front color ambient and diffuse properties.
            </summary>
      <param name="color">THe color</param>
      <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetMaterialBackAmbientAndDiffuse(System.Drawing.Color,System.Boolean)">
      <summary>
            Sets the material back color ambient and diffuse properties.
            </summary>
      <param name="color">THe color</param>
      <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetMaterialFrontAmbient(System.Drawing.Color,System.Boolean)">
      <summary>
            Sets the material front color ambient property.
            </summary>
      <param name="color">THe color</param>
      <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetMaterial(devDept.Graphics.Material,System.Drawing.Color,System.Boolean)">
      <summary>
            Sets the material properties.
            </summary>
      <param name="material">The material</param>
      <param name="backColor">The backface color</param>
      <param name="selected">
      </param>
      <returns>True if the material has a texture.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ResetColorDiffuse">
      <summary>
            Aligns the colors set in the graphics system with the current material and wire color.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PushEnvironment">
      <summary>
            Pushes the current environment map on the stack.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PopEnvironment">
      <summary>
            Pops the environment map from the stack.
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.CurrentEnvironmentMap">
      <summary>
            Gets the environment texture.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CloseEnvironment">
      <summary>
            Disables the current environment.
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.CurrentRasterizerState">
      <summary>
            Gets the current rasterizer state.
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.CurrentDepthStencilState">
      <summary>
            Gets the current depth stencil state.
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.CurrentBlendState">
      <summary>
            Gets the current blend state.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PushRasterizerState">
      <summary>
            Pushes the current <see cref="T:devDept.Graphics.rasterizerStateType" /> on the stack.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PopRasterizerState">
      <summary>
            Pops the <see cref="T:devDept.Graphics.rasterizerStateType" /> from the stack and sets it as current.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PushDepthStencilState">
      <summary>
            Pushes the current <see cref="T:devDept.Graphics.depthStencilStateType" /> on the stack.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PopDepthStencilState">
      <summary>
            Pops the <see cref="T:devDept.Graphics.depthStencilStateType" /> from the stack and sets it as current.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PushBlendState">
      <summary>
            Pushes the current <see cref="T:devDept.Graphics.blendStateType" /> on the stack.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PopBlendState">
      <summary>
            Pops the <see cref="T:devDept.Graphics.blendStateType" /> from the stack and sets it as current.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetState(devDept.Graphics.rasterizerStateType)">
      <summary>
            Sets the rasterizer state type preserving the current clockwiseness of the front face.
            </summary>
      <param name="state">The new state</param>
      <returns>The previous state.</returns>
      <seealso cref="P:devDept.Graphics.RenderContextBase.FrontFaceCW" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetupPolygonOffset(System.Boolean)">
      <summary>
            Enables or disables the PolygonOffset feature (with Factor 1 , Units 1).
            </summary>
      <param name="enable">If true the polygon offset is enabled, else it's disabled.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetState(devDept.Graphics.depthStencilStateType)">
      <summary>
            Sets the depth stencil state type.
            </summary>
      <param name="state">The new state</param>
      <returns>The previous state.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetState(devDept.Graphics.blendStateType)">
      <summary>
            Sets the blend state type.
            </summary>
      <param name="state">The new state</param>
      <returns>The previous state.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawQuadWithTextures(devDept.Graphics.TextureBase,System.Single[],System.Byte,System.Drawing.RectangleF,System.Single,System.Boolean)">
      <summary>
            Draws a Quad with a texture.
            </summary>
      <param name="texture">The texture</param>
      <param name="texCoords">The texture coordinates</param>
      <param name="zCoord">Z coordinate of the quad</param>
      <param name="alpha">The transparency</param>
      <param name="rect">The rectangle where the Quad is drawn</param>
      <param name="buffered">If true, updates the graphics only after a certain number of calls. This is used to draw many quads with the same texture minimizing the overload of updating the graphics card each time.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetShaders(System.Collections.Generic.Dictionary{devDept.Graphics.shaderType,devDept.Graphics.IShaderTechnique},System.Boolean,devDept.Graphics.ShaderParameters)">
      <summary>
            Sets the shaders dictionary.
            </summary>
      <param name="shaders">The shaders dictionary</param>
      <param name="planarReflections">If true, the shaders are for the planar reflections drawing</param>
      <param name="shaderParams">The shader parameters</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetShader(devDept.Graphics.shaderType,devDept.Graphics.ShaderParameters,System.Boolean)">
      <summary>
            Sets the shader as current.
            </summary>
      <param name="type">The shader type to set</param>
      <param name="shaderParams">The shader parameters (used only in case the shader is compiled for the first time)</param>
      <param name="force">If true sets the shader regardless of the current one, else sets it only if it's different from the current one.</param>
      <returns>True if the operation is successful, false otherwise</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CreateTexture2D">
      <summary>
            Creates a texture 2D with or without multisampling dependiing on the rendering context.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CreateTexture2DNoMultisample(System.Drawing.Size,System.Boolean)">
      <summary>
            Creates a 2D texture without multisampling.
            </summary>
      <param name="Size">
      </param>
      <param name="depthTexture">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CreateTexture2D(System.Drawing.Image,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Creates a 2D texture from an image.
            </summary>
      <param name="image">The image</param>
      <param name="minFunc">Minification function</param>
      <param name="magFunc">Magnification function</param>
      <param name="anisotropicFiltering">If true, enables anisotropic filtering for mipmapping</param>
      <param name="enlargeIfSizeNotSupported">If true, the image is put in a bigger image (with some empty border, keeping the original size of image)         
            when the image is not power of two and the hardware does not support it. Else it is resized to a smaller power of two size.</param>
      <param name="repeatX">If true, the texture is repeated in the X direction</param>
      <param name="repeatY">If true, the texture is repeated in the Y direction</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CreateTexture2D(System.Drawing.Size,System.Boolean,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType)">
      <summary>
            Creates a 2D Texture for rendering.
            </summary>
      <param name="size">The size of the texture</param>
      <param name="depthTexture">If true, it's a depth texture</param>
      <param name="minFilterFunc">The minification filtering function</param>
      <param name="magFilterFunc">The magnification filtering function</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CreateTexture1D(System.Drawing.Color[],devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean,System.Boolean)">
      <summary>
            Creates a 1D texture from the given color table.
            </summary>
      <param name="colorTable">The color table</param>
      <param name="minFunc">The minification function</param>
      <param name="magFunc">The magnification function</param>
      <param name="anisotropicFiltering">If true, enables anisotropic filtering for mipmapping</param>
      <param name="repeatX">If true, the texture is repeated in the X direction</param>
      <returns>The texture</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ReadSurface(System.Drawing.Size,System.Boolean,System.Boolean)">
      <summary>
            Reads the whole control and stores it in internal data.
            </summary>
      <param name="controlSize">The size of the control</param>
      <param name="backBuffer">If true, captures the backbuffer, else the front buffer</param>
      <param name="antialiasing">Tells if the antialiasing is enabled or not</param>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ReadColorBuffer(devDept.Graphics.IViewport,System.Drawing.Rectangle,System.Int32@,System.Int32@)">
      <summary>
            Reads the color buffer.
            </summary>
      <param name="viewport">The viewport to read.</param>
      <param name="rect">The rectangle to read, in viewport coordinates (0 on top)</param>
      <param name="stride">
      </param>
      <param name="bpp">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ReadBuffer(System.Int32)">
      <summary>
            Sets the framebuffer to read from (OpenGL only).
            </summary>
      <param name="buffer">
      </param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PushShader">
      <summary>
            Push the current shader on the stack.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PopShader">
      <summary>
            Pops the current shader from the stack.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PushMatrices">
      <summary>
            Pushes modelview and projection matrices.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PopMatrices">
      <summary>
            Pops the modelview and projection matrices.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PushModelView">
      <summary>
            Pushes the Modelview matrix.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PushProjection">
      <summary>
            Pushes the Projection matrix.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PopModelView">
      <summary>
            Pops the Modelview matrix.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PopProjection">
      <summary>
            Pops the Projection matrix.
            </summary>
    </member>
    <member name="T:devDept.Graphics.RenderContextBase.matrixType">
      <summary>
            Matrix type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.RenderContextBase.matrixType.All">
      <summary>
            Modelview and projection
            </summary>
    </member>
    <member name="F:devDept.Graphics.RenderContextBase.matrixType.Projection">
      <summary>
            Projection
            </summary>
    </member>
    <member name="F:devDept.Graphics.RenderContextBase.matrixType.ModelView">
      <summary>
            Modelview
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.MultMatrixModelView(devDept.Geometry.Transformation)">
      <summary>
            Multiplies the transformation by the current modelview matrix.
            </summary>
      <param name="transform">The transformation</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.MultMatrixModelView(System.Double[])">
      <summary>
            Multiplies the transformation by the current modelview matrix.
            </summary>
      <param name="transform">The transformation</param>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.IdentityMatrix">
      <summary>
            Gets the Identity matrix as a float array.
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.IdentityMatrixDouble">
      <summary>
            Gets the Identity matrix as a double array.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CloseTexture(devDept.Graphics.TextureBase,System.Boolean)">
      <summary>
            Disables the  texture.
            </summary>
      <param name="texture">The texture</param>
      <param name="force">If true disables all textures states regardless if there actually is a current texture active.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CloseTexture(devDept.Graphics.TextureBase.textureUnitType,System.Boolean)">
      <summary>
            Disables the  texture.
            </summary>
      <param name="textureUnit">The texture unit</param>
      <param name="force">If true disables all textures states regardless if there actually is a current texture active.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CloseTexture(System.Boolean)">
      <summary>
            Disables the current texture.
            </summary>
      <param name="force">If true disables all textures states regardless if there actually is a current texture active.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetTexture(devDept.Graphics.TextureBase)">
      <summary>
            Sets the texture on 0 texture unit.
            </summary>
      <param name="texture">The texture</param>
      <returns>True if successful</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetTexture(devDept.Graphics.TextureBase,devDept.Graphics.TextureBase.textureUnitType)">
      <summary>
            Sets the texture on a specific texture unit.
            </summary>
      <param name="texture">The texture</param>
      <param name="textureUnit">The texture unit</param>
      <returns>True if successful</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetAlphaTexture(devDept.Graphics.TextureBase)">
      <summary>
            Sets the texture on a specific texture unit.
            </summary>
      <param name="texture">The texture</param>
      <returns>True if successful</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetTextureOverExposure(System.Boolean)">
      <summary>
            Sets a value that controls whether the scene lighting can make the image diffuse color brighter than the image color.
            </summary>
      <seealso cref="P:devDept.Graphics.Material.TextureImageOverExposure" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ResolveAlphaMapShader(devDept.Graphics.shaderType)">
      <summary>
            Gets the shader with the AlphaMap support.
            </summary>
      <param name="shaderType">The source shader type</param>
      <returns>The corresponding shader type with alpha map support.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetLinesShader(System.Boolean,devDept.Graphics.shaderType,devDept.Graphics.ShaderParameters)">
      <summary>
            Sets the shader for the lines with or without thick lines capabilities, adjusting also the PolygonOffset.
            </summary>
      <param name="thick">
      </param>
      <param name="shader">
      </param>
      <param name="shaderParams">
      </param>
      <returns>True if the operation is successful, false otherwise</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetPointsShader(System.Boolean,devDept.Graphics.shaderType,devDept.Graphics.ShaderParameters)">
      <summary>
            Sets the shader for the points with or without thick points capabilities, adjusting also the PolygonOffset.
            </summary>
      <param name="thick">
      </param>
      <param name="shader">
      </param>
      <param name="shaderParams">
      </param>
      <returns>True if the operation is successful, false otherwise</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.RestorePolygonOffset(System.Int32@)">
      <summary>
            Restores the polygon offset to draw the polygons.
            </summary>
      <param name="prev">
      </param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.RemovePolygonOffset(System.Int32@)">
      <summary>
            Removes the polygon offset when drawing the wires entity with Width grater than 1
            because the wires are not influenced by the polygon offset but in Direct3D 
            they are drawn as polygons with the geometry shader, so the PolygonOffset applies to them also.
            </summary>
      <param name="prev">
      </param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetPolygonDrawingMode(devDept.Graphics.rasterizerPolygonDrawingType)">
      <summary>
            Sets the polygon drawing mode.
            </summary>
      <param name="polygonDrawingMode">The polygon drawing mode</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetMaterialFrontDiffuse(System.Drawing.Color,System.Boolean)">
      <summary>
            Sets the front faces diffuse material color.
            </summary>
      <param name="color">The color</param>
      <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetMaterialFrontAndBackDiffuse(System.Drawing.Color,System.Boolean)">
      <summary>
            Sets the front and back faces diffuse material color.
            </summary>
      <param name="color">The color</param>
      <param name="force">If true sets the color regardless of the current one, else sets it only if it's different from the current one.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.BeginReadDepthValues(System.Drawing.Size,System.Int32@)">
      <summary>
            Initializes a depth read operation.
            </summary>
      <param name="size">The size of the area to read</param>
      <param name="strideInPixels">The number of pixels per row of the read area</param>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.EndReadDepthValues">
      <summary>
            Ends a depth read operation.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ReadDepthValues(System.Int32[],System.Int32@)">
      <summary>
            Reads depth values from the depth buffer.
            </summary>
      <param name="layoutViewport">
      </param>
      <param name="stride">
      </param>
      <returns>The array of read depths.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ReadDepthValues(System.Int32,System.Int32,System.Drawing.Size)">
      <summary>
            Reads depth values from the depth buffer.
            </summary>
      <param name="left">
      </param>
      <param name="bottom">
      </param>
      <param name="size">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:devDept.Graphics.RenderContextBase.CompilingEntity">
      <summary>
            The entity being compiled.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.Compile(devDept.Graphics.EntityGraphicsData,devDept.Graphics.DrawEntityCallBack,System.Object)">
      <summary>
            Compiles the Entity.
            </summary>
      <param name="data">The entity graphics data</param>
      <param name="drawEntityCallBack">The draw function</param>
      <param name="myParams">The parameters</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CompileVBO(devDept.Graphics.EntityGraphicsData,devDept.Graphics.DrawEntityCallBack,System.Object,System.Boolean)">
      <summary>
            Compiles the Entity using Vertex Buffer Objects if possible.
            </summary>
      <param name="data">The entity graphics data</param>
      <param name="drawEntityCallBack">The draw function (used only if VBO are not supported)</param>
      <param name="vboParams">The parameters (of type <see cref="T:devDept.Graphics.VBOParams" />)</param>
      <param name="dynamic">If true the buffer is created dynamic, so it can be updated later on.</param>
      <seealso cref="M:devDept.Graphics.RenderContextBase.UpdateVBO(devDept.Graphics.EntityGraphicsData,devDept.Graphics.DrawEntityCallBack,System.Object)" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.UpdateVBO(devDept.Graphics.EntityGraphicsData,devDept.Graphics.DrawEntityCallBack,System.Object)">
      <summary>
            Updates the vertex buffer object (that must have been created dynamic).
            </summary>
      <param name="data">The entity graphics data</param>
      <param name="drawEntityCallBack">The draw function (used only if VBO are not supported)</param>
      <param name="vboParams">The parameters (of type <see cref="T:devDept.Graphics.VBOParams" />)</param>
      <seealso cref="M:devDept.Graphics.RenderContextBase.CompileVBO(devDept.Graphics.EntityGraphicsData,devDept.Graphics.DrawEntityCallBack,System.Object,System.Boolean)" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLine(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point2D)">
      <summary>
            Draws a line with textured vertices.
            </summary>
      <param name="p0">The start point</param>
      <param name="p1">The end point</param>
      <param name="texCoords">The 1D texture coordinates</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawBufferedLine(devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Draws a line using a buffered approach.
            </summary>
      <param name="v0">The first vertex</param>
      <param name="v1">The second vertex</param>
      <remarks>In Direct3D the vertices are stored in a buffer and drawn only when it is full. In OpenGL they are drawn immediately.</remarks>
      <seealso cref="M:devDept.Graphics.RenderContextBase.EndDrawBufferedLines" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawBufferedPoint(devDept.Geometry.Point3D)">
      <summary>
            Draws a point using a buffered approach.
            </summary>
      <param name="v0">The  vertex</param>
      <remarks>In Direct3D the vertices are stored in a buffer and drawn only when it is full. In OpenGL they are drawn immediately.</remarks>
      <seealso cref="M:devDept.Graphics.RenderContextBase.EndDrawBufferedLines" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLineStrip(devDept.Geometry.Point3D[],System.Single[])">
      <summary>
            Draws a line strip of <see cref="T:devDept.Geometry.Point3D" /> with textured vertices.
            </summary>
      <param name="vertices">Array of vertices to draw</param>
      <param name="texCoords">The 1D texture coordinates of the vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLineStrip(System.Single[],System.Int32,System.Int32)">
      <summary>
            Draws a line strip of vertices.
            </summary>
      <param name="vertices">Array of vertices coordinates (3 float per vertex)</param>
      <param name="first">The index of the first vertex to draw</param>
      <param name="count">The number of the vertices to draw</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLineStripRGBA(System.Single[],System.Int32,System.Int32)">
      <summary>
            Draws a line strip of colored vertices.
            </summary>
      <param name="vertices">Array of vertices coordinates plus color components (7 float per vertex)</param>
      <param name="first">The index of the first vertex to draw</param>
      <param name="count">The number of the vertices to draw</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLineStrip(devDept.Geometry.Point2D[],System.Int32,System.Int32)">
      <summary>
            Draws a line strip of <see cref="T:devDept.Geometry.Point2D" /> .
            </summary>
      <param name="vertices">Array of vertices to draw</param>
      <param name="first">The index of the first vertex to draw</param>
      <param name="count">The number of the vertices to draw</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLineStrip(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
      <summary>
            Draws a line strip of <see cref="T:devDept.Geometry.Point3D" /> .
            </summary>
      <param name="vertices">Array of vertices to draw</param>
      <param name="first">The index of the first vertex to draw</param>
      <param name="count">The number of the vertices to draw</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLineStrip(devDept.Geometry.Point3D[],System.Single[],System.Int32,System.Int32)">
      <summary>
            Draws a line strip of <see cref="T:devDept.Geometry.Point3D" /> with textured vertices.
            </summary>
      <param name="vertices">Array of vertices to draw</param>
      <param name="texCoords">The 1D texture coordinates of the vertices</param>
      <param name="first">The index of the first vertex to draw</param>
      <param name="count">The number of the vertices to draw</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLineStrip(devDept.Geometry.PointRGB[],System.Int32,System.Int32)">
      <summary>
            Draws a line strip of <see cref="T:devDept.Geometry.PointRGB" /> .
            </summary>
      <param name="vertices">Array of vertices to draw</param>
      <param name="first">The index of the first vertex to draw</param>
      <param name="count">The number of the vertices to draw</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetLightPosition(System.Int32,devDept.Graphics.lightType,System.Single[],System.Single[])">
      <summary>
            Sets the light position.
            </summary>
      <param name="lightIndex">Light index</param>
      <param name="lightType">Light type</param>
      <param name="dir">Light direction</param>
      <param name="position">Light position (spot and point light only)</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.UpdateConstantBufferPerFrame(devDept.Graphics.ShaderParameters)">
      <summary>
            Updates the constant buffer per frame with the given data.
            </summary>
      <param name="data">The data to set on the constant buffer per frame. If it's null, the current data is used.</param>
      <remarks>Direct3D only.</remarks>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.UpdateConstantBufferPerObject">
      <summary>
            Updates the constant buffer per frame with the current data.
            </summary>
      <remarks>Direct3D only.</remarks>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.GraphicalIssues">
      <summary>Gets a list of graphical issues on the machine's adapter.</summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.IsGraphicsError">
      <summary>
            Checks if there has been an error in the graphics library.
            </summary>
      <returns>True if there was an error, false otherwise.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CheckOutOfMemory">
      <summary>
            Tells if the graphics system is in out of memory state.
            </summary>
      <returns>True if it's in out of memory state, false elsewise.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.GetErrorString(System.Int32)">
      <summary>
            Gets the graphics system error string.
            </summary>
      <param name="errorCode">The error code</param>
      <returns>The error string.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetPointSize(System.Single,System.Boolean,System.Boolean)">
      <summary>
            Sets the point size and enables (or disables) the thick points rendering.
            </summary>
      <param name="size">The size (thickness) of the point in pixels</param>
      <param name="setShader">If true, calls <see cref="M:devDept.Graphics.RenderContextBase.EnableThickPoints" /> to set the correct shader</param>
      <param name="force">If true sets the size regardless of the current one, else sets it only if it's different from the current one.</param>
      <returns>The previous value.</returns>
      <seealso cref="M:devDept.Graphics.RenderContextBase.EnableThickPoints" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetLineSize(System.Single,System.Boolean,System.Boolean)">
      <summary>
            Sets the line size and enables (or disables) the thick lines rendering.
            </summary>
      <param name="size">The size (thickness) of the line in pixels</param>
      <param name="setShader">If true, calls <see cref="M:devDept.Graphics.RenderContextBase.EnableThickLines" /> to set the correct shader</param>
      <param name="force">If true sets the size regardless of the current one, else sets it only if it's different from the current one.</param>
      <returns>The previous value.</returns>
      <seealso cref="M:devDept.Graphics.RenderContextBase.EnableThickLines" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetLighting(System.Boolean)">
      <summary>
            Enables the lighting.
            </summary>
      <param name="enable">Turns the lighting on or off</param>
      <returns>The previous value</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ProcessMaterial">
      <summary>
            Updates the current material with the default material.
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.CurrentShader">
      <summary>
            Gets the current shader.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawOnTextureOrBitmap(devDept.Graphics.TextureBase,devDept.Graphics.TextureBase,System.Drawing.Imaging.BitmapData,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,devDept.Graphics.RenderContextBase.drawSceneFuncDelegate,System.Object,System.Boolean,System.Int32,System.Boolean)">
      <summary>
            Draws the scene on the specified texture or bitmapData. 
            </summary>
      <param name="texture">The texture to draw on</param>
      <param name="bitmapData">The bitmap data. If null, the draw is done on the texture</param>
      <param name="strideInPixels">
      </param>
      <param name="antialiasingAvailable">
      </param>
      <param name="antiAliasing">
      </param>
      <param name="antialiasingSamples">
      </param>
      <param name="tileWidth">
      </param>
      <param name="tileHeight">
      </param>
      <param name="drawSceneFunc">The draw function delegate</param>
      <param name="drawSceneParams">The draw function parameters</param>
      <param name="hdwAcceleration">
      </param>
      <param name="bpp">Bytes per pixel</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.CompileBackground(devDept.Graphics.BackgroundSettings,System.Int32)">
      <summary>
            Compiles the background, used by the designer.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.GetEntityIndicesFromBmp(System.Drawing.Rectangle,System.Boolean,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Gets the entity indices from a false-colors rgb image.
            </summary>
      <param name="selectionBox">
      </param>
      <param name="firstOnly">
      </param>
      <param name="rgbValues">The false-colors rgb image</param>
      <param name="bpp">
      </param>
      <param name="stride">
      </param>
      <returns>The list indices</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLines(System.Single[])">
      <summary>
            Draws a set of lines.
            </summary>
      <param name="vertices">Collection of line vertices (3 coordinates each).</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLines(System.Single[],System.Int32,System.Int32)">
      <summary>
            Draws a set of lines.
            </summary>
      <param name="vertices">Collection of line vertices (3 coordinates each).</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[])">
      <summary>
            Draws a set of lines.
            </summary>
      <param name="vertices">Collection of line vertices.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
      <summary>
            Draws a set of lines.
            </summary>
      <param name="vertices">Collection of line vertices.</param>
      <param name="first">The index of the first vertex to draw</param>
      <param name="count">The number of the vertices to draw</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPoints(devDept.Geometry.Point3D[])">
      <summary>
            Draws a set of points.
            </summary>
      <param name="points">The collection of points to draw.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithNormalsIndeterminate(System.Single[],System.Single[])">
      <summary>
            Draws a set of points without specifying the kind of display list.
            </summary>
      <param name="points">The collection of points to draw</param>
      <param name="normals">The normals of the points</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsIndeterminate(System.Single[])">
      <summary>
            Draws a set of points without specifying the kind of display list.
            </summary>
      <param name="points">The collection of points to draw.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsIndeterminate(devDept.Geometry.Point3D[])">
      <summary>
            Draws a set of points without specifying the kind of display list.
            </summary>
      <param name="points">The collection of points to draw.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPoints(System.Single[])">
      <summary>
            Draws a set of points.
            </summary>
      <param name="points">The collection of points to draw.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPoints(System.Single[],System.Int32,System.Int32)">
      <summary>
            Draws a set of points.
            </summary>
      <param name="points">Collection of line vertices (3 coordinates each).</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPoints(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
      <summary>
            Draws a set of points.
            </summary>
      <param name="points">Collection of line vertices (3 coordinates each).</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsIndeterminate(System.Single[],System.Int32,System.Int32)">
      <summary>
            Draws a set of points without specifying the kind of geometry.
            </summary>
      <param name="points">Collection of line vertices (3 coordinates each).</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsIndeterminate(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
      <summary>
            Draws a set of points without specifying the kind of geometry.
            </summary>
      <param name="points">Collection of line vertices (3 coordinates each).</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithNormalsIndeterminate(System.Single[],System.Single[],System.Int32,System.Int32)">
      <summary>
            Draws a set of points without specifying the kind of geometry.
            </summary>
      <param name="points">Collection of line vertices (3 coordinates each).</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsRGB(devDept.Geometry.Point3D[])">
      <summary>
            Draws a set of <see cref="T:devDept.Geometry.PointRGB" />.
            </summary>
      <param name="points">The collection of vertices to draw.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithColorsRGBIndeterminate(System.Single[],System.Byte[])">
      <summary>
            Draws a set of points with the specified colors, without specifying the kind of geometry.
            </summary>
      <param name="points">The vertices</param>
      <param name="colors">The colors (in RGB form)</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithColorsRGBIndeterminate(System.Single[],System.Byte[],System.Int32,System.Int32)">
      <summary>
            Draws a set of points with the specified colors, without specifying the kind of geometry.
            </summary>
      <param name="points">The vertices</param>
      <param name="colors">The colors (in RGB form)</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithColorsRGBAIndeterminate(System.Single[],System.Byte[])">
      <summary>
            Draws a set of points with the specified colors, without specifying the kind of geometry.
            </summary>
      <param name="points">The vertices</param>
      <param name="colors">The colors (in RGBA form)</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithColorsRGBAIndeterminate(System.Single[],System.Byte[],System.Int32,System.Int32)">
      <summary>
            Draws a set of points with the specified color intensities, without specifying the kind of geometry.
            </summary>
      <param name="points">The vertices</param>
      <param name="colors">The colors (in RGBA form)</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithColorIntensitiesIndeterminate(System.Single[],System.Byte[])">
      <summary>
            Draws a set of points with the specified color intensity, without specifying the kind of geometry.
            </summary>
      <param name="points">The vertices</param>
      <param name="colors">The color intensities (one byte per pixel)</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithColorIntensitiesIndeterminate(System.Single[],System.Byte[],System.Int32,System.Int32)">
      <summary>
            Draws a set of points with the specified color intensities, without specifying the kind of geometry.
            </summary>
      <param name="points">The vertices</param>
      <param name="colors">The color intensities (one byte per pixel)</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsRGBIndeterminate(devDept.Geometry.Point3D[])">
      <summary>
            Draws a set of <see cref="T:devDept.Geometry.PointRGB" /> without specifying the kind of geometry.
            </summary>
      <param name="vertices">The collection of vertices to draw.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsRGB(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
      <summary>
            Draws a set of <see cref="T:devDept.Geometry.PointRGB" />.
            </summary>
      <param name="points">Collection of line vertices (3 coordinates each).</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsRGBIndeterminate(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
      <summary>
            Draws a set of <see cref="T:devDept.Geometry.PointRGB" /> without specifying the kind of geometry.
            </summary>
      <param name="points">The collection of vertices to draw.</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithNormals(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Int32,System.Int32)">
      <summary>
            Draws a set of <see cref="T:devDept.Geometry.Point3D" /> specifying a normal per vertex.
            </summary>
      <param name="points">The collection of vertices to draw.</param>
      <param name="normals">The collection of normals</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawPointsWithNormalsIndeterminate(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Int32,System.Int32)">
      <summary>
            Draws a set of <see cref="T:devDept.Geometry.Point3D" /> specifying a normal per vertex without specifying the kind of geometry.
            </summary>
      <param name="points">The collection of vertices to draw.</param>
      <param name="normals">The collection of normals</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.Draw(devDept.Graphics.EntityGraphicsData,devDept.Graphics.primitiveType)">
      <summary>
            Draws an entity.
            </summary>
      <param name="data">The compiled graphics data.</param>
      <param name="primitiveType">Type of primitive to draw.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawSelected(devDept.Graphics.EntityGraphicsData,devDept.Graphics.primitiveType)">
      <summary>
            Draws a selected entity.
            </summary>
      <param name="data">The compiled graphics data.</param>
      <param name="primitiveType">Type of primitive to draw.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTriangles(devDept.Geometry.Point3D[])">
      <summary>
            Draws triangles without normals.
            </summary>
      <param name="vertices">The vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTriangles(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D)">
      <summary>
            Draws triangles with one normal.
            </summary>
      <param name="vertices">The vertices</param>
      <param name="normal">The normal</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTriangles(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Drawing.PointF[],System.Boolean)">
      <summary>
            Draws triangles with one normal per vertex and (optional) texture coordinates.
            </summary>
      <param name="vertices">
      </param>
      <param name="normals">
      </param>
      <param name="texCoords">
      </param>
      <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPartial(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Drawing.PointF[])">
      <summary>
            Draws triangles with one normal per vertex, as part of a drawing loop (no Begin-End is done).
            </summary>
      <param name="vertices">
      </param>
      <param name="normals">
      </param>
      <param name="texCoords">
      </param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPartialWithMaterialColor(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Boolean)">
      <summary>
            Draws triangles with one normal per vertex, as part of a drawing loop (no Begin-End is done), using the current material color.
            </summary>
      <param name="vertices">
      </param>
      <param name="normals">
      </param>
      <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPartialWithTexture(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Drawing.PointF[],System.Boolean)">
      <summary>
            Draws triangles with one normal and one texture coordinate per vertex, as part of a drawing loop (no Begin-End is done), using the current texture.
            </summary>
      <param name="vertices">The vertices array</param>
      <param name="normals">The normals array</param>
      <param name="texCoords">The texture coordinates array</param>
      <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTriangles(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Single[],System.Boolean)">
      <summary>
            Draws triangles with one normal per vertex and 1D texture coordinates.
            </summary>
      <param name="vertices">
      </param>
      <param name="normals">
      </param>
      <param name="texCoords">
      </param>
      <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPartial(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Single[])">
      <summary>
            Draws triangles with one normal per vertex and 1D texture coordinates, as part of a drawing loop (no Begin-End is done).
            </summary>
      <param name="vertices">
      </param>
      <param name="normals">
      </param>
      <param name="texCoords">
      </param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTriangles(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Drawing.Color[],System.Boolean)">
      <summary>
            Draws triangles with one normal and color per vertex per vertex and 1D texture coordinates.
            </summary>
      <param name="vertices">
      </param>
      <param name="normals">
      </param>
      <param name="colors">
      </param>
      <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPartial(devDept.Geometry.Point3D[],devDept.Geometry.Vector3D[],System.Drawing.Color[])">
      <summary>
            Draws triangles with one normal and color per vertex, as part of a drawing loop (no Begin-End is done).
            </summary>
      <param name="vertices">
      </param>
      <param name="normals">
      </param>
      <param name="colors">
      </param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPlanar(devDept.Geometry.Point3D[],devDept.Geometry.IndexTriangle[],devDept.Geometry.Vector3D)">
      <summary>
            Draws triangles with a single normal.
            </summary>
      <param name="vertices">The vertices</param>
      <param name="triangles">The triangles</param>
      <param name="normal">The normal</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesPlanar(devDept.Geometry.Point3D[],System.Int32[],devDept.Geometry.Vector3D)">
      <summary>
            Draws triangles with a single normal.
            </summary>
      <param name="vertices">The vertices</param>
      <param name="trianglesIndices">The triangles indices</param>
      <param name="normal">The normal</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLineLoop(devDept.Geometry.Point3D[])">
      <summary>
            Draws a line loop.
            </summary>
      <param name="vertices">Collection of vertices.</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLineLoop(devDept.Geometry.Point3D[],System.Int32,System.Int32)">
      <summary>
            Draws a line loop.
            </summary>
      <param name="vertices">Collection of vertices.</param>
      <param name="first">First vertex index</param>
      <param name="count">Number of points</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawIndexLinesWithDisplacement(System.Collections.Generic.IList{devDept.Geometry.IndexLine},devDept.Geometry.Point3D[],System.Double,System.Boolean)">
      <summary>
            Draws indexed lines with <see cref="T:devDept.Geometry.PointWithDisplacement" /> vertices.
            </summary>
      <param name="lines">
      </param>
      <param name="vertices">
      </param>
      <param name="ampFactor">
      </param>
      <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLinesWithDisplacement(devDept.Geometry.Point3D[],System.Double,System.Boolean)">
      <summary>
            Draws lines with <see cref="T:devDept.Geometry.PointWithDisplacement" /> vertices.
            </summary>
      <param name="vertices">
      </param>
      <param name="ampFactor">
      </param>
      <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.TranslateMatrixModelView(System.Double,System.Double,System.Double)">
      <summary>
            Translates the modelview matrix.
            </summary>
      <param name="x">X offset</param>
      <param name="y">Y offset</param>
      <param name="z">Z offset</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.RotateMatrixModelView(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Rotates the modelview matrix by <param name="angleInDegrees"> by an axis.</param></summary>
      <param name="angleInDegrees">The rotation angle in degrees</param>
      <param name="axisX">The rotation axis X component</param>
      <param name="axisY">The rotation axis Y component</param>
      <param name="axisZ">The rotation axis Z component</param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:devDept.Graphics.RenderContextBase.FreeEntityGraphicsData(devDept.Graphics.EntityGraphicsData)" -->
    <member name="P:devDept.Graphics.RenderContextBase.GraphicsDataWithError">
      <summary>
            Gets or sets the EntityGraphicsData that caused error during the drawing.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawIndeterminateAsPoints(devDept.Graphics.EntityGraphicsData)">
      <summary>
            Draws an <see cref="T:devDept.Graphics.EntityGraphicsData" /> as a Points list.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawIndeterminateAsLineStrip(devDept.Graphics.EntityGraphicsData)">
      <summary>
            Draws an <see cref="T:devDept.Graphics.EntityGraphicsData" /> as a Lines strip.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawIndeterminateAsLineList(devDept.Graphics.EntityGraphicsData)">
      <summary>
            Draws an <see cref="T:devDept.Graphics.EntityGraphicsData" /> as a Line list.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawCurrentBuffer">
      <summary>
            Ends the drawing of buffered entities, sending data to the graphics card.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.EndDrawBufferedLines">
      <summary>
            Draws the lines and points accumulated in the buffer (Direct3D only).
            </summary>
      <seealso cref="M:devDept.Graphics.RenderContextBase.DrawBufferedLine(devDept.Geometry.Point3D,devDept.Geometry.Point3D)" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetBlockRefTransform(System.Single[])">
      <summary>
            Sets the blockreference world transformation matrix.
            </summary>
      <param name="blockRefrenceMatrix">The transformation matrix to set</param>
      <param name="normalMatrix">The matrix for the normals</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.IsCw(devDept.Graphics.rasterizerStateType)">
      <summary>
            Tells if the front face of the given state has clockwise front faces.
            </summary>
      <param name="state">The rasterizer state type</param>
      <returns>True if the state has clockwise front faces.</returns>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.FrontFaceCW">
      <summary>
            Gets or sets a value telling if the current front faces are oriented clockwise.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.PixelZoom(System.Int32,System.Int32)">
      <summary>
            Specify the pixel zoom factors.
            </summary>
      <param name="xFactor">The x factor</param>
      <param name="yFactor">The y factor</param>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.SupportShadows">
      <summary>
            Tells if the rendering context supports the dynamic shadows.
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.CurrentColorMask">
      <summary>
            The current color mask that determines the color components written in the render buffer.
            </summary>
      <seealso cref="M:devDept.Graphics.RenderContextBase.SetColorMask(devDept.Graphics.colorMaskFlags)" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetColorMask(devDept.Graphics.colorMaskFlags)">
      <summary>
            Enable or disable the color components in the render buffer.
            </summary>
      <param name="colorMask">A Bitwise mask with the color components</param>
      <remarks>Affects the <see cref="P:devDept.Graphics.RenderContextBase.CurrentBlendState" /></remarks>
      <returns>The previous color mask</returns>
      <seealso cref="P:devDept.Graphics.RenderContextBase.CurrentColorMask" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.HasStencil">
      <summary>
            Tells if the render context supports stencil.
            </summary>
      <returns>True if the render context supports stencil.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.HasShadow">
      <summary>
            Tells if the render context supports shadow.
            </summary>
      <returns>True if the render context supports shadow.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.HasMultiTexture">
      <summary>
            Tells if the render context supports multitexture.
            </summary>
      <returns>True if the render context supports multitexture.</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesWithDisplacement(devDept.Geometry.PointWithDisplacement[],devDept.Geometry.Vector3D[],System.Drawing.Color,System.Double,System.Boolean)">
      <summary>
            Draws triangles with <see cref="T:devDept.Geometry.PointWithDisplacement" /> vertices.
            </summary>
      <param name="vertices">
      </param>
      <param name="normals">
      </param>
      <param name="singleColor">
      </param>
      <param name="ampFactor">
      </param>
      <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesWithDisplacement(devDept.Geometry.PointWithDisplacement[],devDept.Geometry.Vector3D[],System.Drawing.Color[],System.Double,System.Boolean)">
      <summary>
            Draws triangles <see cref="T:devDept.Geometry.PointWithDisplacement" /> vertices.
            </summary>
      <param name="vertices">
      </param>
      <param name="normals">
      </param>
      <param name="colors">
      </param>
      <param name="ampFactor">
      </param>
      <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesWithDisplacement(devDept.Geometry.PointWithDisplacement[],devDept.Geometry.Vector3D[],System.Double,System.Boolean)">
      <summary>
            Draws triangles <see cref="T:devDept.Geometry.PointWithDisplacement" /> vertices.
            </summary>
      <param name="vertices">
      </param>
      <param name="normals">
      </param>
      <param name="ampFactor">
      </param>
      <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTrianglesWithDisplacement(devDept.Geometry.PointWithDisplacement[],devDept.Geometry.Vector3D[],System.Single[],System.Double,System.Boolean)">
      <summary>
            Draws triangles <see cref="T:devDept.Geometry.PointWithDisplacement" /> vertices.
            </summary>
      <param name="vertices">
      </param>
      <param name="normals">
      </param>
      <param name="tex1DCoords">
      </param>
      <param name="ampFactor">
      </param>
      <param name="addToCurrentBufferPart">If true adds the data to the current buffer part</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.InitializeStates">
      <summary>
            Initializes the current states.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.GLBeginDrawTriangles">
      <summary>
            Begins an OpenGL triangle drawing sequence.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.GLEnd">
      <summary>
            Ends an OpenGL drawing sequence.
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.ColorMaterialMode">
      <summary>
            Gets or sets the color material mode.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.LockShaders(System.Boolean)">
      <summary>
            Locks the shaders so that the following calls to <see cref="M:devDept.Graphics.RenderContextBase.SetShader(devDept.Graphics.shaderType,devDept.Graphics.ShaderParameters,System.Boolean)" /> won't do anything until the shaders are unlocked.
            </summary>
      <param name="lockShader">
      </param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.LockBlendState(System.Boolean)">
      <summary>
            Locks the blend state so that the following calls to <see cref="M:devDept.Graphics.RenderContextBase.SetShader(devDept.Graphics.shaderType,devDept.Graphics.ShaderParameters,System.Boolean)" /> won't do anything until the blend states are unlocked.
            </summary>
      <param name="lockBlendState">
      </param>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.IsDrawingForDepth">
      <summary>
            Tells if the scene is being drawn for depth.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.EnableMultisample(System.Boolean)">
      <summary>
            Enables or disables the multisample (antialiasing)
            </summary>
      <param name="enable">The enable status</param>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.RendererVersion">
      <summary>
            Gets the renderer version.
            </summary>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.RendererName">
      <summary>
            Gets the name of the renderer. This name is typically specific to a particular configuration of a hardware platform. It does not change from release to release. 
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.EnableThickLines">
      <summary>
            Enables thick lines rendering.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.EnableThickLinesInPolygonLineMode">
      <summary>
            Enables thick lines rendering when the <see cref="P:devDept.Graphics.RenderContextBase.CurrentRasterizerState" /> state is polygon line.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.EnableThickPoints">
      <summary>
            Enables thick points rendering.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.EnableThickPointsInPolygonLineMode">
      <summary>
            Enables thick points rendering when the <see cref="P:devDept.Graphics.RenderContextBase.CurrentRasterizerState" /> state is polygon line.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[],System.Drawing.Color[])">
      <summary>
            Draws lines with colored vertices.
            </summary>
      <param name="vertices">The vertices</param>
      <param name="colors">The colors of the vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[],System.Drawing.Color[],System.Int32,System.Int32)">
      <summary>
            Draws lines with colored vertices.
            </summary>
      <param name="vertices">The vertices</param>
      <param name="colors">The color of each vertex</param>
      <param name="first">The index of the first vertex to draw</param>
      <param name="count">The number of the vertices to draw</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[],System.Drawing.Color[],System.Single[])">
      <summary>
            Draws lines with colored vertices specifying a different lineWidth per line.
            </summary>
      <param name="vertices">The vertices</param>
      <param name="colors">The color of each vertex</param>
      <param name="lineWidths">The line width of each line (the size of the array must be half of the <paramref name="vertices" /> array)</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[],System.Drawing.Color[],System.Single[],System.Int32,System.Int32)">
      <summary>
            Draws lines with colored vertices specifying a different lineWidth per line.
            </summary>
      <param name="vertices">The vertices</param>
      <param name="colors">The color of each vertex</param>
      <param name="lineWidths">The line width of each line (the size of the array must be half of the <paramref name="vertices" /> array)</param>
      <param name="first">The index of the first vertex to draw</param>
      <param name="count">The number of the vertices to draw</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[],System.Single[])">
      <summary>
            Draws lines with textured vertices.
            </summary>
      <param name="vertices">The vertices</param>
      <param name="texCoords">The 1D texture coordinates of the vertices</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLines(devDept.Geometry.Point3D[],System.Single[],System.Int32,System.Int32)">
      <summary>
            Draws lines with textured vertices.
            </summary>
      <param name="vertices">The vertices</param>
      <param name="texCoords">The texture coordinates of the vertices</param>
      <param name="first">The index of the first vertex to draw</param>
      <param name="count">The number of the vertices to draw</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetSceneAmbient(System.Single[])">
      <summary>
            Sets the ambient component that is always added to the scene (multiplied by the material's ambient component).
            </summary>
      <param name="color">The color to set</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.NormalizeNormals(System.Boolean)">
      <summary>
            Turns the vertex normals normalization on or off (OpenGL only).
            </summary>
      <param name="enable">If true, turns it on, else turn it off</param>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.ReflectionsSupported">
      <summary>
            Tells if the planar reflections are supported by the graphics system.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawLinesAndPointsOnTheFly(System.Collections.Generic.List{devDept.Geometry.Point3D},System.Collections.Generic.List{devDept.Geometry.Point3D})">
      <summary>
      </summary>
      <param name="lines">
      </param>
      <param name="points">
      </param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetLineStipple(System.Int32,System.UInt16,devDept.Graphics.CameraBase)">
      <summary>
            Sets the line stipple parameters.
            </summary>
      <param name="factor">The multiplier for each bit in the line stipple pattern</param>
      <param name="pattern">Specifies a 16-bit integer whose bit pattern determines which fragments of a line will be drawn when the line is rasterized. Bit zero is used first; the default pattern is all 1's</param>
      <param name="camera">The camera of the viewport being drawn</param>
      <remarks>Call <see cref="M:devDept.Graphics.RenderContextBase.EnableLineStipple(System.Boolean)" /> to make it effective in Direct3D renderer.</remarks>
    </member>
    <member name="F:devDept.Graphics.RenderContextBase.lineStipple">
      <summary>
            Telss if the lineStipple is enabled or not.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.EnableLineStipple(System.Boolean)">
      <summary>
            Enables or disables the line stipple.
            </summary>
      <param name="enable">If true enables, else disables</param>
      <seealso cref="M:devDept.Graphics.RenderContextBase.SetLineStipple(System.Int32,System.UInt16,devDept.Graphics.CameraBase)" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.ClearDynamicBuffers">
      <summary>
            Clears the dynamic buffers allocated to draw the entities (Direct3D only).
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.UpdateAntialiasing">
      <summary>
            Updates the graphics data for the Antialiasing settings.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetRasterizerState(devDept.Graphics.rasterizerPolygonDrawingType,devDept.Graphics.rasterizerCullFaceType)">
      <summary>
            Sets the rasterizer state.
            </summary>
      <param name="rasterizerPolygonDrawingType">the polygon drawing type</param>
      <param name="rasterizerCullFaceType">The cull face type</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.BeginCaptureZBufferOnce">
      <summary>
            Avoids multiple reading of the whole ZBuffer texture in Direct3D when reading different pick box sizes.
            </summary>
      <remarks>For internal use only.</remarks>
      <seealso cref="M:devDept.Graphics.RenderContextBase.EndCaptureZBufferOnce" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.EndCaptureZBufferOnce">
      <summary>
            Stops the optimization activated by <see cref="M:devDept.Graphics.RenderContextBase.BeginCaptureZBufferOnce" /></summary>
      <remarks>For internal use only.</remarks>
      <seealso cref="M:devDept.Graphics.RenderContextBase.BeginCaptureZBufferOnce" />
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.LockDepthState(System.Boolean)">
      <summary>
            Locks the depth stencil state so that the following calls to <see cref="M:devDept.Graphics.RenderContextBase.SetState(devDept.Graphics.depthStencilStateType)" /> won't do anything until the state is unlocked.
            </summary>
      <param name="lockState">The lock status</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DrawTextureOnScreen(System.Drawing.Rectangle,devDept.Graphics.TextureBase,devDept.Graphics.TextureBase)">
      <summary>
            Draws a texture on screen.
            </summary>
      <param name="rect">The screen rectangle where the texture will be drawn</param>
      <param name="textureForRendering">The texture</param>
      <param name="textureResolved">A texture used to resolve multisample textures</param>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.EnableXOR(System.Boolean)">
      <summary>
            Enables or disables the XOR (inverted color) drawing mode.
            </summary>
      <param name="enable">The enable status</param>
      <remarks>If <paramref name="enable" /> is true, it sets a white color and <see cref="F:devDept.Graphics.blendStateType.XOR" /> blend state, else it sets a <see cref="F:devDept.Graphics.blendStateType.NoBlend" /> blend state.</remarks>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.EnableXORForTexture(System.Boolean,devDept.Graphics.ShaderParameters)">
      <summary>
            Enables or disables the XOR (inverted color) drawing mode for the texture.
            </summary>
      <param name="enable">The enable status</param>
      <param name="shaderParams">The shader parameters to update the shader</param>
      <remarks>If <paramref name="enable" /> is true, it sets a white color and <see cref="F:devDept.Graphics.blendStateType.XOR" /> blend state, else it sets a <see cref="F:devDept.Graphics.blendStateType.NoBlend" /> blend state.
            It also calls the <see cref="M:devDept.Graphics.RenderContextBase.EnableAlphaClip(System.Boolean)" /> to discard the transparent texture fragments.
            Requires the <see cref="F:devDept.Graphics.shaderType.Texture2DNoLights" /> shader.</remarks>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.EnableAlphaClip(System.Boolean)">
      <summary>
            Discards fragments with alpha &lt; 0.1
            </summary>
      <param name="enable">
      </param>
      <remarks>Requires <see cref="F:devDept.Graphics.shaderType.Texture2DNoLights" /> shader.</remarks>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.DisableShadowMap">
      <summary>
            Disables the Shadowmap.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.GetPixel(System.Int32,System.Int32)">
      <summary>
            Gets the color of the specified pixel in this viewport
            </summary>
      <param name="x">The x window coordinate of the pixel to retrieve</param>
      <param name="y">The y window coordinate of the pixel to retrieve (0 on bottom)</param>
      <returns>The color of the pixel</returns>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.SetActiveTexture(devDept.Graphics.TextureBase.textureUnitType)">
      <summary>
            Enables the given textureUnit (OpenGL only).
            </summary>
      <param name="textureUnit">TextureUnit to enable</param>
    </member>
    <member name="P:devDept.Graphics.RenderContextBase.TextureNonPowerOfTwo">
      <summary>
            Tells if the render context supports non power of two textures.
            </summary>
    </member>
    <member name="M:devDept.Graphics.RenderContextBase.UpdateShaders(devDept.Graphics.ShaderParameters)">
      <summary>
            Updates the shaders.
            </summary>
      <param name="shaderParams">The parameters</param>
    </member>
    <member name="T:devDept.Graphics.LightSettings">
      <summary>
            Directional light definition.
            </summary>
    </member>
    <member name="M:devDept.Graphics.LightSettings.GetLightDirection(System.Double[],System.Single[]@,System.Single[]@)">
      <summary>
            Gets the light direction.
            </summary>
      <param name="modelViewMatrix">The camera modelview matrix</param>
      <param name="direction">Returns the world direction for directional and spot lights</param>
      <param name="position">Returns the position for the point and spot lights</param>
    </member>
    <member name="P:devDept.Graphics.LightSettings.Direction">
      <summary>Gets or sets the light direction.</summary>
      <remarks>Not meaningful for point lights.</remarks>
    </member>
    <member name="P:devDept.Graphics.LightSettings.Type">
      <summary>
            Gets or sets the light type.
            </summary>
    </member>
    <member name="P:devDept.Graphics.LightSettings.Position">
      <summary>
            Gets or sets the position of the spot or point light.
            </summary>
      <remarks>Not meaningful for directional lights.</remarks>
    </member>
    <member name="P:devDept.Graphics.LightSettings.SpotHalfAngle">
      <summary>
            Gets or sets the half angle of the spot light cone in radians (range [0, PI/2]).
            </summary>
    </member>
    <member name="P:devDept.Graphics.LightSettings.SpotExponent">
      <summary>
            Gets or sets the exponent that determines how the light is focused inside the spot light cone (range [0, 128]).
            </summary>
    </member>
    <member name="P:devDept.Graphics.LightSettings.ConstantAttenuation">
      <summary>
            Gets or sets the constant attenuation (point and spot lights only).
            </summary>
    </member>
    <member name="P:devDept.Graphics.LightSettings.LinearAttenuation">
      <summary>
            Gets or sets the linear attenuation (point and spot lights only).
            </summary>
    </member>
    <member name="P:devDept.Graphics.LightSettings.QuadraticAttenuation">
      <summary>
            Gets or sets the quadratic attenuation (point and spot lights only).
            </summary>
    </member>
    <member name="P:devDept.Graphics.LightSettings.Color">
      <summary>Gets or sets the light color.</summary>
      <example>
            The following code fragment demonstrates how to change the light color at run-time.
            <code lang="CS" title="[New Example]">
            myViewport.Light2.Color = Color.Red;
            myViewport.ProcessLightAttributes();
            </code><code lang="VB" title="[New Example]">
            MyViewport.Light2.Color = Color.Red
            MyViewport.ProcessLightAttributes()
            </code></example>
    </member>
    <member name="P:devDept.Graphics.LightSettings.Specular">
      <summary>Gets or sets the light specular color.</summary>
      <example>
            The following code fragment demonstrates how to change the light specular color at run-time.
            <code lang="CS" title="[New Example]">
            myViewport.Light2.Specular = Color.DimGray;
            myViewport.ProcessLightAttributes();
            </code><code lang="VB" title="[New Example]">
            MyViewport.Light2.Specular = Color.DimGray
            MyViewport.ProcessLightAttributes()
            </code></example>
    </member>
    <member name="P:devDept.Graphics.LightSettings.Stationary">
      <summary>Gets or sets the light behavior. Set false to mimic the Sun.</summary>
      <remarks>If true, the Light is fixed on screen, else it is fixed with the scene.</remarks>
    </member>
    <member name="P:devDept.Graphics.LightSettings.Active">
      <summary>Gets or sets the light status.</summary>
    </member>
    <member name="P:devDept.Graphics.LightSettings.YieldShadow">
      <summary>
            When true the light yields realistic shadows (Only one shadow is supported).
            </summary>
    </member>
    <member name="M:devDept.Graphics.LightSettings.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:devDept.Graphics.LightSettings.#ctor(devDept.Geometry.Vector3D,System.Drawing.Color)">
      <summary>Direction and color constructor.</summary>
      <overloads>Sets specular color to Black and active to false.</overloads>
      <param name="direction">Direction</param>
      <param name="color">Color</param>
    </member>
    <member name="M:devDept.Graphics.LightSettings.#ctor(devDept.Geometry.Vector3D,System.Drawing.Color,System.Drawing.Color)">
      <summary>Direction, color and specular color constructor.</summary>
      <overloads>Sets active to false.</overloads>
      <param name="direction">Direction</param>
      <param name="color">Color</param>
      <param name="specular">Specular color</param>
    </member>
    <member name="M:devDept.Graphics.LightSettings.#ctor(devDept.Geometry.Vector3D,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="direction">Direction</param>
      <param name="color">Color</param>
      <param name="specular">Specular color</param>
      <param name="stationary">Light behaviour, set false to mimic the Sun.</param>
      <param name="active">Light status</param>
      <param name="yieldShadow">When true the light yields shadows</param>
    </member>
    <member name="M:devDept.Graphics.LightSettings.#ctor(devDept.Geometry.Vector3D,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,devDept.Graphics.lightType,devDept.Geometry.Point3D,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Standard constructor.</summary>
      <param name="direction">Direction</param>
      <param name="color">Color</param>
      <param name="specular">Specular color</param>
      <param name="stationary">Light behaviour, set false to mimic the Sun</param>
      <param name="active">Light status</param>
      <param name="yieldShadow">When true the light yields shadows</param>
      <param name="type">Light type</param>
      <param name="position">Position of the light (spot or point lights only)</param>
      <param name="spotHalfAngle">Half angle of the spot light cone in radians (range 0 - PI/2) (spot lights only)</param>
      <param name="spotExponent">Exponent that determines how the light is focused inside the spot light cone (spot lights only)</param>
      <param name="constantAttenuation">Constant attenuation (point and spot lights only)</param>
      <param name="linearAttenuation">Linear attenuation (point and spot lights only)</param>
      <param name="quadraticAttenuation">Quadratic attenuation (point and spot lights only)</param>
    </member>
    <member name="T:devDept.Graphics.primitiveType">
      <summary>
            Drawing primitive type.
            </summary>
    </member>
    <member name="T:devDept.Graphics.shadowType">
      <summary>
            Shadow type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.shadowType.None">
      <summary>
            The shadow will not be drawn.
            </summary>
    </member>
    <member name="F:devDept.Graphics.shadowType.Planar">
      <summary>
            A planar shadow under the model will be drawn.
            </summary>
    </member>
    <member name="F:devDept.Graphics.shadowType.Realistic">
      <summary>
            Dynamic realistic shadows will be drawn. Available only in Rendered display mode.
            </summary>
    </member>
    <member name="T:devDept.Graphics.realisticShadowQualityType">
      <summary>
            Realistic shadow quality.
            </summary>
    </member>
    <member name="F:devDept.Graphics.realisticShadowQualityType.Low">
      <summary>
            Low shadow quality (faster).
            </summary>
    </member>
    <member name="F:devDept.Graphics.realisticShadowQualityType.Medium">
      <summary>
            Medium shadow quality.
            </summary>
    </member>
    <member name="F:devDept.Graphics.realisticShadowQualityType.High">
      <summary>
            High shadow quality (slower).
            </summary>
    </member>
    <member name="T:devDept.Graphics.antialiasingSamplesNumberType">
      <summary>
            Number of antialiasing samples.
            </summary>
    </member>
    <member name="F:devDept.Graphics.antialiasingSamplesNumberType.x2">
      <summary>
            2x sampling.
            </summary>
    </member>
    <member name="F:devDept.Graphics.antialiasingSamplesNumberType.x4">
      <summary>
            4x sampling
            </summary>
    </member>
    <member name="F:devDept.Graphics.antialiasingSamplesNumberType.x8">
      <summary>
            8x sampling
            </summary>
    </member>
    <member name="F:devDept.Graphics.antialiasingSamplesNumberType.x16">
      <summary>
            16x sampling
            </summary>
    </member>
    <member name="T:devDept.Graphics.orientationType">
      <summary>
            Viewport orientation type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.orientationType.UpAxisY">
      <summary>
            The Y axis direction is up
            </summary>
    </member>
    <member name="F:devDept.Graphics.orientationType.UpAxisZ">
      <summary>
            The Z axis direction is up
            </summary>
    </member>
    <member name="T:devDept.Graphics.backfaceColorMethodType">
      <summary>
            Backface color type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.backfaceColorMethodType.Cull">
      <summary>
            Backfaces are invisible
            </summary>
    </member>
    <member name="F:devDept.Graphics.backfaceColorMethodType.EntityColor">
      <summary>
            Backfaces color is defined by the entity color
            </summary>
    </member>
    <member name="F:devDept.Graphics.backfaceColorMethodType.SingleColor">
      <summary>
            Backfaces color is defined by <see cref="P:devDept.Graphics.BackfaceSettings.Color" /></summary>
    </member>
    <member name="T:devDept.Graphics.backgroundStyleType">
      <summary>
            Viewport background style type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.backgroundStyleType.None">
      <summary>
            A solid color defined by Parent background color. In WPF it shows the underlying controls.
            </summary>
    </member>
    <member name="F:devDept.Graphics.backgroundStyleType.Solid">
      <summary>
            A solid color defined by <see cref="P:devDept.Graphics.BackgroundSettings.TopColor" /></summary>
    </member>
    <member name="F:devDept.Graphics.backgroundStyleType.LinearGradient">
      <summary>
            A linear color gradient defined by <see cref="P:devDept.Graphics.BackgroundSettings.TopColor" /> and <see cref="P:devDept.Graphics.BackgroundSettings.BottomColor" /></summary>
    </member>
    <member name="F:devDept.Graphics.backgroundStyleType.CubicGradient">
      <summary>
            A cubic color gradient defined by <see cref="P:devDept.Graphics.BackgroundSettings.TopColor" />, <see cref="P:devDept.Graphics.BackgroundSettings.IntermediateColor" /> and <see cref="P:devDept.Graphics.BackgroundSettings.BottomColor" /></summary>
    </member>
    <member name="F:devDept.Graphics.backgroundStyleType.Image">
      <summary>
            An image
            </summary>
    </member>
    <member name="T:devDept.Graphics.shaderType">
      <summary>
            Shader types definitions.
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.None">
      <summary>
            No shader
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.BlurVert">
      <summary>
            Applies a gaussian blur to a texture in the vertical direction
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.BlurHor">
      <summary>
            Applies a gaussian blur to a texture in the horizontal direction
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.NoLights">
      <summary>
            Draws without lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.NoLightsThickLines">
      <summary>
            Draws thick lines without lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.NoLightsThickPoints">
      <summary>
            Draws thick points without lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.NoLightsThickLinesStipple">
      <summary>
            Draws thick lines with stipple without lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.NoLightsLinesStipple">
      <summary>
            Draws lines with stipple without lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture2DNoLights">
      <summary>
            Draws without lighting using the full color of a 2D texture
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture2DNoLightsWithAlphaMap">
      <summary>
            Draws without lighting using the full color of a 2D texture modulated by an alpha map
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture2DNoLightsModulate">
      <summary>
            Draws without lighting with the full color of a 2D texture, modulated by the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture2DNoLightsModulateWithAlphaMap">
      <summary>
            Draws without lighting with the full color of a 2D texture, modulated by the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor" /> and an Alpha map
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture2DNoLightsDecal">
      <summary>
            Draws without lighting with a 2D texture in decal mode using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor" /> for the transparent areas of the texture
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture2DNoLightsDecalWithAlphaMap">
      <summary>
            Draws without lighting with a 2D texture and an alpha map in decal mode using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor" /> for the transparent areas of the texture
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture1DNoLights">
      <summary>
            Draws without lighting with a 1D texture in decal using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor" /> for the transparent areas of the texture
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.SingleColorModulatedByIntensity">
      <summary>
            Draws without lighting modulating the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor" /> by a factor specified per each vertex 
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.SingleColorModulatedByIntensityThickLines">
      <summary>
            Draws thick lines without lighting modulating the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor" /> by a factor specified per each vertex 
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.SingleColorModulatedByIntensityThickPoints">
      <summary>
            Draws thick points without lighting modulating the <see cref="P:devDept.Graphics.RenderContextBase.CurrentWireColor" /> by a factor specified per each vertex 
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.MultiColorNoLights">
      <summary>
            Draws without lighting specifying a color per vertex
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.MultiColorNoLightsThickLines">
      <summary>
            Draws thick lines without lighting specifying a color per vertex
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.MultiColorNoLightsThickPoints">
      <summary>
            Draws thick points without lighting specifying a color per vertex
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.MultiColorNoLightsWithNormals">
      <summary>
            Draws without lighting specifying a normal and a color per vertex
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.MultiColorNoLightsThickLinesPerVertex">
      <summary>
            Draws thick lines without lighting specifying a color and a line width per vertex
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.MultiColorNoLightsThickPointsPerVertex">
      <summary>
            Draws thick points without lighting specifying a color and point size per vertex
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.StandardThickLines">
      <summary>
            Draws thick lines with Phong lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.StandardThickPoints">
      <summary>
            Draws thick points with Phong lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Standard">
      <summary>
            Draws with Phong lighting using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Environment">
      <summary>
            Draws with Phong lighting and environment mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.EnvironmentTexture2D">
      <summary>
            Draws with Phong lighting, environment mapping and 2D texture using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.EnvironmentTexture2DWithAlphaMap">
      <summary>
            Draws with Phong lighting, environment mapping and 2D texture with alpha map using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture2D">
      <summary>
            Draws with Phong lighting and 2D Texture using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture2DWithAlphaMap">
      <summary>
            Draws with Phong lighting and 2D Texture with Alpha map using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture2DDecal">
      <summary>
            Draws with Phong lighting and 2D texture in Decal mode using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /> for the transparent areas of the texture
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture2DDecalWithAlphaMap">
      <summary>
            Draws with Phong lighting and 2D texture in Decal mode with Alpha map using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /> for the transparent areas of the texture
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.MultiColor">
      <summary>
            Draws with Phong lighting specifying a normal and color per vertex
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.MultiColorFEM">
      <summary>
            Draws with Phong lighting specifying a normal and color per vertex, but clamps the diffuse value between 0 and 1 before applying the color, so it behaves similar to a texture
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.MultiColorSelected">
      <summary>
            Draws with Phong lighting specifying a normal and color (unused) per vertex but using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.EnvironmentMulticolor">
      <summary>
            Draws with Phong lighting and environment mapping specifying a normal and color per vertex
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.EnvironmentMulticolorFEM">
      <summary>
            Draws with Phong lighting and environment mapping specifying a normal and color per vertex, but clamps the diffuse value between 0 and 1 before applying the color, so it behaves similar to a texture
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture1D">
      <summary>
            Draws with Phong lighting ad 1D texture using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.EnvironmentTexture1D">
      <summary>
            Draws with Phong lighting, environment mapping and 1D texture using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.StandardShadow">
      <summary>
            Draws with Phong lighting and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.EnvironmentShadow">
      <summary>
            Draws with Phong lighting, environment mapping and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.EnvironmentTexture2DShadow">
      <summary>
            Draws with Phong lighting, environment mapping, 2D texture and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.EnvironmentTexture2DShadowWithAlphaMap">
      <summary>
            Draws with Phong lighting, environment mapping, 2D texture with Alpha map and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture2DShadow">
      <summary>
            Draws with Phong lighting, 2D texture and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture2DShadowWithAlphaMap">
      <summary>
            Draws with Phong lighting, 2D texture with alpha map and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.MultiColorShadow">
      <summary>
            Draws with Phong lighting and shadow mapping specifying one color per vertex
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.MultiColorShadowFEM">
      <summary>
            Draws with Phong lighting and shadow mapping specifying one color per vertex, but clamps the diffuse value between 0 and 1 before applying the color, so it behaves similar to a texture
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.EnvironmentMulticolorShadow">
      <summary>
            Draws with Phong lighting, environment mapping and shadow mapping specifying one color per vertex
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.EnvironmentMulticolorShadowFEM">
      <summary>
            Draws with Phong lighting, environment mapping and shadow mapping specifying one color per vertex, but clamps the diffuse value between 0 and 1 before applying the color, so it behaves similar to a texture
            </summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.Texture1DShadow">
      <summary>
            Draws with Phong lighting, 1D texture and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.EnvironmentTexture1DShadow">
      <summary>
            Draws with Phong lighting, environment mapping, 1D texture and shadow mapping using the <see cref="P:devDept.Graphics.RenderContextBase.CurrentMaterial" /></summary>
    </member>
    <member name="F:devDept.Graphics.shaderType.WriteDepth">
      <summary>
            Writes the depth in the red component
            </summary>
    </member>
    <member name="T:devDept.Graphics.textureEnvironmentType">
      <summary>
            Texture environment type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.textureEnvironmentType.Modulate">
      <summary>
            The texture color is multiplied by the object color.
            </summary>
    </member>
    <member name="F:devDept.Graphics.textureEnvironmentType.Replace">
      <summary>
            The texture color is used as is.
            </summary>
    </member>
    <member name="F:devDept.Graphics.textureEnvironmentType.Decal">
      <summary>
            The texture color is mixed with the object color, depending on the texture's transparency.
            </summary>
    </member>
    <member name="T:devDept.Graphics.colorMaskFlags">
      <summary>
            Color mask type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.colorMaskFlags.None">
      <summary>
            All components off
            </summary>
    </member>
    <member name="F:devDept.Graphics.colorMaskFlags.Red">
      <summary>
            Red component on
            </summary>
    </member>
    <member name="F:devDept.Graphics.colorMaskFlags.Green">
      <summary>
            Green component on
            </summary>
    </member>
    <member name="F:devDept.Graphics.colorMaskFlags.Blue">
      <summary>
            Blue component on
            </summary>
    </member>
    <member name="F:devDept.Graphics.colorMaskFlags.Alpha">
      <summary>
            Alpha component on
            </summary>
    </member>
    <member name="F:devDept.Graphics.colorMaskFlags.RGB">
      <summary>
            All components on
            </summary>
    </member>
    <member name="T:devDept.Graphics.stateEnableType">
      <summary>
            A generic enable type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.stateEnableType.Off">
      <summary>
            State disabled
            </summary>
    </member>
    <member name="F:devDept.Graphics.stateEnableType.On">
      <summary>
            State enabled
            </summary>
    </member>
    <member name="T:devDept.Graphics.blendStateBlendFactorType">
      <summary>
            The blend factor type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.blendStateBlendFactorType.Zero">
      <summary>
            Zero
            </summary>
    </member>
    <member name="F:devDept.Graphics.blendStateBlendFactorType.One">
      <summary>
            One
            </summary>
    </member>
    <member name="F:devDept.Graphics.blendStateBlendFactorType.SrcAlpha">
      <summary>
            Source Alpha
            </summary>
    </member>
    <member name="F:devDept.Graphics.blendStateBlendFactorType.OneMinusSrcAlpha">
      <summary>
            One minus source alpha
            </summary>
    </member>
    <member name="F:devDept.Graphics.blendStateBlendFactorType.DstColor">
      <summary>
            Destination color
            </summary>
    </member>
    <member name="F:devDept.Graphics.blendStateBlendFactorType.InverseDestinationColor">
      <summary>
            Inverse destination color
            </summary>
    </member>
    <member name="T:devDept.Graphics.blendStateType">
      <summary>
            The blend state type.
            </summary>
      <remarks>The identifiers are self explanatory and determine:
            The Blend status
            The Source and Destination blend factors (see glBlendFunc() documentation)
            The Color channels enabled for writing (Red, Green, Blue, Alpha) (see glColorMask() documentation) 
            </remarks>
    </member>
    <member name="F:devDept.Graphics.blendStateType.XOR">
      <summary>
            XOR blending state. To draw with inverted colors use a white color
            </summary>
    </member>
    <member name="T:devDept.Graphics.rasterizerClockWiseType">
      <summary>
            The rasterizer clockwise type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerClockWiseType.CCW">
      <summary>
            ClockWise
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerClockWiseType.CW">
      <summary>
            Counter clockwise
            </summary>
    </member>
    <member name="T:devDept.Graphics.rasterizerPolygonDrawingType">
      <summary>
            The rasterizer polygon drawing type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerPolygonDrawingType.Line">
      <summary>
            Draws the polygons as lines
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerPolygonDrawingType.Fill">
      <summary>
            Draws the poligons filled
            </summary>
    </member>
    <member name="T:devDept.Graphics.rasterizerCullFaceType">
      <summary>
            The rasterizer cull face type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerCullFaceType.None">
      <summary>
            No face culling
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerCullFaceType.Back">
      <summary>
            Culls the back faces
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerCullFaceType.Front">
      <summary>
            Culls the Front faces
            </summary>
    </member>
    <member name="T:devDept.Graphics.rasterizerPolygonOffsetType">
      <summary>
            The rasterizer polygon offset type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerPolygonOffsetType.Off">
      <summary>
            No offset
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerPolygonOffsetType.F1_U1">
      <summary>
            Factor 1, units 1
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerPolygonOffsetType.F2_U2">
      <summary>
            Factor 2, units 2
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerPolygonOffsetType.FMinus3_UMinus2">
      <summary>
            Factor -3, units -2
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerPolygonOffsetType.F05_U05">
      <summary>
            Factor 0.5, units 0.5
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerPolygonOffsetType.FMinus05_UMinus1">
      <summary>
            Factor -0.5, units -1
            </summary>
    </member>
    <member name="T:devDept.Graphics.rasterizerStateType">
      <summary>
            The rasterizer state type.
            </summary>
      <remarks>The identifiers are self explanatory and determine:
            The vertex orientation for the front faces (CCW for CounterClockWise, CW for ClockWise), 
            The polygon drawing mode (PolygonFill draws the polygons filled, PolygonLine draws the outlines of the polygons),
            The face culling mode (CullFaceBack culls the back faces, CullFaceFront culls the front faces, NoCullFace disables face culling),
            The polygon offset status, units and factor parameters (see glPolygonOffset() documentation).</remarks>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonLine_CullFaceBack">
      <summary>
            Counter Clock Wise orientation of front faces, polygon line mode, back face culling
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonLine_CullFaceFront">
      <summary>
            Counter Clock Wise orientation of front faces, polygon line mode, front face culling
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonLine_NoCullFace">
      <summary>
            Counter Clock Wise orientation of front faces, polygon line mode, no face culling
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonLine_NoCullFace_PolygonOffset_1_1">
      <summary>
            Counter Clock Wise orientation of front faces, polygon line mode, no face culling, polygon offset with factor 1 and units 1
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_CullFaceBack_PolygonOffset_1_1">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, back face culling, polygon offset with factor 1 and units 1
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_CullFaceBack_NoPolygonOffset">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, back face culling, no polygon offset
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_CullFaceBack_PolygonOffset_Plus2Plus2">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, back face culling, polygon offset with factor 2 and units 2
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_CullFaceFront_PolygonOffset_1_1">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, front face culling, polygon offset with factor 1 and units 1
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_CullFaceFront_NoPolygonOffset">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, front face culling, no polygon offset
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_CullFaceFront_PolygonOffset_Plus2Plus2">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, front face culling, polygon offset with factor 2 and units 2
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_NoCullFace_PolygonOffset_1_1">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, no face culling, polygon offset with factor 1 and units 1
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_NoCullFace_NoPolygonOffset">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, no face culling, no polygon offset
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_NoCullFace_PolygonOffset_Plus2Plus2">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, no face culling, polygon offset with factor 2 and units 2
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_NoCullFace_PolygonOffset_Minus3Minus2">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, no face culling, polygon offset with factor -3 and units -2
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_CullFaceBack_PolygonOffset_05_05">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, back face culling, polygon offset with factor 0.5 and units 0.5
            </summary>
      <remarks>Used for the shadows</remarks>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_CullFaceBack_PolygonOffset_Minus_05_Minus1">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, back face culling, polygon offset with factor -0.5 and units -1
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_CullFaceFront_PolygonOffset_05_05">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, front face culling, polygon offset with factor 0.5 and units 0.5
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_CullFaceFront_PolygonOffset_Minus_05_Minus1">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, front face culling, polygon offset with factor -0.5 and units 0.5
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_NoCullFace_PolygonOffset_05_05">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, no face culling, polygon offset with factor 0.5 and units 0.5
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CCW_PolygonFill_NoCullFace_PolygonOffset_Minus_05_Minus1">
      <summary>
            Counter Clock Wise orientation of front faces, polygon fill mode, no face culling, polygon offset with factor -0.5 and units -1
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonLine_CullFaceBack">
      <summary>
            Clock Wise orientation of front faces, polygon line mode, back face culling
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonLine_CullFace_Front">
      <summary>
            Clock Wise orientation of front faces, polygon line mode, front face culling
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonLine_NoCullFace">
      <summary>
            Clock Wise orientation of front faces, polygon line mode, no face culling
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_CullFaceBack_PolygonOffset_1_1">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, back face culling, polygon offset with factor 1 and units 1
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_CullFaceBack_NoPolygonOffset">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, back face culling, no polygon offset
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_CullFaceBack_PolygonOffset_Plus2Plus2">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, back face culling, polygon offset with factor 2 and units 2
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_CullFaceFront_PolygonOffset_1_1">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, front face culling, polygon offset with factor 1 and units 1
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_CullFaceFront_NoPolygonOffset">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, front face culling, no polygon offset
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_CullFaceFront_PolygonOffset_Plus2Plus2">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, front face culling, polygon offset with factor 2 and units 2
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_NoCullFace_PolygonOffset_1_1">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, no face culling, polygon offset with factor 1 and units 1
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_NoCullFace_NoPolygonOffset">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, no face culling, no polygon offset
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_NoCullFace_PolygonOffset_Minus3Minus2">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, no face culling, polygon offset with factor -3 and units -2
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_NoCullFace_PolygonOffset_Plus2Plus2">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, no face culling, polygon offset with factor 2 and units 2
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_CullFaceBack_PolygonOffset_05_05">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, back face culling, polygon offset with factor 0.5 and units 0.5
            </summary>
      <remarks>Used for the shadows</remarks>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_CullFaceBack_PolygonOffset_Minus_05_Minus1">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, back face culling, polygon offset with factor -0.5 and units -1
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_CullFaceFront_PolygonOffset_05_05">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, front face culling, polygon offset with factor 0.5 and units 0.5
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_CullFaceFront_PolygonOffset_Minus_05_Minus1">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, front face culling, polygon offset with factor -0.5 and units -1
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_NoCullFace_PolygonOffset_05_05">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, no face culling, polygon offset with factor 0.5 and units 0.5
            </summary>
    </member>
    <member name="F:devDept.Graphics.rasterizerStateType.CW_PolygonFill_NoCullFace_PolygonOffset_Minus_05_Minus1">
      <summary>
            Clock Wise orientation of front faces, polygon fill mode, no face culling, polygon offset with factor -0.5 and units -1
            </summary>
    </member>
    <member name="T:devDept.Graphics.depthFuncType">
      <summary>
            The depth test function.
            </summary>
    </member>
    <member name="T:devDept.Graphics.stencilFuncType">
      <summary>
            The type of stencil function.
            </summary>
    </member>
    <member name="T:devDept.Graphics.stencilFuncMaskType">
      <summary>
            The mask used in the stencil test.
            </summary>
    </member>
    <member name="T:devDept.Graphics.stencilOpActionType">
      <summary>
            The stencil operation test action.
            </summary>
    </member>
    <member name="F:devDept.Graphics.stencilOpActionType.Replace">
      <summary>
            Replaces the stencil buffer entry with the stencil reference value used in the stencil test
            </summary>
    </member>
    <member name="F:devDept.Graphics.stencilOpActionType.Keep">
      <summary>
            Keeps the value in the stencil buffer
            </summary>
    </member>
    <member name="F:devDept.Graphics.stencilOpActionType.Invert">
      <summary>
            Increments the stencil buffer value
            </summary>
    </member>
    <member name="F:devDept.Graphics.stencilOpActionType.Zero">
      <summary>
            Sets the stencil buffer entry to zero
            </summary>
    </member>
    <member name="F:devDept.Graphics.stencilOpActionType.Increment">
      <summary>
            Increments the current stencil buffer value. Clamps to the maximum representable unsigned value. 
            </summary>
    </member>
    <member name="F:devDept.Graphics.stencilOpActionType.Decrement">
      <summary>
            Decrements the current stencil buffer value. Clamps to 0. 
            </summary>
    </member>
    <member name="T:devDept.Graphics.depthStencilStateType">
      <summary>
            The depth and stencil state type.
            </summary>
      <remarks>The identifiers are self explanatory and determine:
            The depth test status and depth function (see the glDepthFunc() documentation),
            The stencil status, function, reference value and mask (see the glStencilFunc() documentation), 
            The action to take when the stencil test fails, the depth test fails or both test pass (see the glStencilOp() documentation).
            </remarks>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestOff">
      <summary>
            Depth write mask: false, depth test: off, stencil test: off
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestLess">
      <summary>
            Depth write mask: true, depth test: Less, stencil test: off
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestEqual">
      <summary>
            Depth write mask: true, depth test: Equal, stencil test: off
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestLessEqual">
      <summary>
            Depth write mask: true, depth test: LessEqual, stencil test: off
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestAlways">
      <summary>
            Depth write mask: true, depth test: Always, stencil test: off
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthMaskFalse_DepthTestEqual">
      <summary>
            Depth write mask: false, depth test: Equal, stencil test: off
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthMaskFalse_DepthTestLessEqual">
      <summary>
            Depth write mask: false, depth test: LessEqual, stencil test: off
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthMaskFalse_DepthTestLess">
      <summary>
            Depth write mask: false, depth test: Less, stencil test: off
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthMaskFalse_DepthTestGreater">
      <summary>
            Depth write mask: false, depth test: Greater, stencil test: off
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestLess_StencilOn_Func_Always_1_1_Op_Replace_Replace_Replace">
      <summary>
            Depth write mask: true, depth test: Less, stencil test: on, stencil test function: Always, stencil test reference value: 1, stencil test mask: 1,
            stencil test fail operation: Replace, stencil test operation when depth test fails: Replace, stencil test operation when stencil test and depth test pass: Replace
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestOff_StencilOn_Func_Always_1_1_Op_Replace_Replace_Replace">
      <summary>
            Depth write mask: off, depth test: off, stencil test: on, stencil test function: Always, stencil test reference value: 1, stencil test mask: 1,
            stencil test fail operation: Replace, stencil test operation when depth test fails: Replace, stencil test operation when stencil test and depth test pass: Replace
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestOff_StencilOn_Func_Equal_1_1_Op_Keep_Keep_Keep">
      <summary>
            Depth write mask: false, depth test: off, stencil test: on, stencil test function: Equal, stencil test reference value: 1, stencil test mask: 1,
            stencil test fail operation: Keep, stencil test operation when depth test fails: Keep, stencil test operation when stencil test and depth test pass: Keep
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestEqual_StencilOn_Func_Equal_1_1_Op_Keep_Keep_Keep">
      <summary>
            Depth write mask: true, depth test: Equal, stencil test: on, stencil test function: Equal, stencil test reference value: 1, stencil test mask: 1,
            stencil test fail operation: Keep, stencil test operation when depth test fails: Keep, stencil test operation when stencil test and depth test pass: Keep
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestLess_StencilOn_Func_Equal_1_1_Op_Keep_Keep_Keep">
      <summary>
            Depth write mask: true, depth test: Less, stencil test: on, stencil test function: Equal, stencil test reference value: 1, stencil test mask: 1,
            stencil test fail operation: Keep, stencil test operation when depth test fails: Keep, stencil test operation when stencil test and depth test pass: Keep
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestLessEqual_StencilOn_Func_Equal_1_1_Op_Keep_Keep_Keep">
      <summary>
            Depth write mask: true, depth test: LessEqual, stencil test: on, stencil test function: Equal, stencil test reference value: 1, stencil test mask: 1,
            stencil test fail operation: Keep, stencil test operation when depth test fails: Keep, stencil test operation when stencil test and depth test pass: Keep
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestOff_StencilOn_Func_Never_1_FF_Op_Invert_Keep_Keep">
      <summary>
            Depth write mask: false, depth test: off, stencil test: on, stencil test function: Never, stencil test reference value: 1, stencil test mask: FF,
            stencil test fail operation: Invert, stencil test operation when depth test fails: Keep, stencil test operation when stencil test and depth test pass: Keep
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestOff_StencilOn_Func_Never_1_FF_Op_Zero_Keep_Keep">
      <summary>
            Depth write mask: false, depth test: off, stencil test: on, stencil test function: Never, stencil test reference value: 1, stencil test mask: FF,
            stencil test fail operation: Zero, stencil test operation when depth test fails: Keep, stencil test operation when stencil test and depth test pass: Keep
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestLess_StencilOn_Func_Never_1_FF_Op_Invert_Keep_Keep">
      <summary>
            Depth write mask: true, depth test: Less, stencil test: on, stencil test function: Never, stencil test reference value: 1, stencil test mask: FF,
            stencil test fail operation: Invert, stencil test operation when depth test fails: Keep, stencil test operation when stencil test and depth test pass: Keep
            </summary>
    </member>
    <member name="F:devDept.Graphics.depthStencilStateType.DepthTestOff_StencilOn_Func_NotEqual_1_FF_Op_Keep_keep_keep">
      <summary>
            Depth write mask: off, Depth test: off, Stencil test: on, stencil test function: NotEqual,
            stencil test reference value: 1, stencil test mask: FF, 
            stencil test fail operation: Keep, stencil test operation when depth test fails: Keep, stencil test operation when stencil test and depth test pass: Keep
            </summary>
    </member>
    <member name="T:devDept.Graphics.lightType">
      <summary>
            Light type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.lightType.Directional">
      <summary>
            Directional light.
            </summary>
    </member>
    <member name="F:devDept.Graphics.lightType.Point">
      <summary>
            Positional light.
            </summary>
    </member>
    <member name="F:devDept.Graphics.lightType.Spot">
      <summary>
            Spot light.
            </summary>
    </member>
    <member name="T:devDept.Graphics.colorMaterialType">
      <summary>
            The color material type.
            </summary>
      <remarks>Call <see cref="!:RenderContextBase.SetColorMaterial(System.Drawing.Color)" /> to set the color and make it work properly for DirectX renderer.</remarks>
    </member>
    <member name="F:devDept.Graphics.colorMaterialType.Disabled">
      <summary>
            Color material disabled.
            </summary>
    </member>
    <member name="F:devDept.Graphics.colorMaterialType.FrontFaceDiffuse">
      <summary>
            The color applies only to the diffuse component of front faces.
            </summary>
    </member>
    <member name="F:devDept.Graphics.colorMaterialType.FrontAndBackFaceDiffuse">
      <summary>
            The color applies to the diffuse component of both front and back faces.
            </summary>
    </member>
    <member name="F:devDept.Graphics.colorMaterialType.FrontFaceAmbient">
      <summary>
            The color applies only to the ambient component of front faces.
            </summary>
    </member>
    <member name="F:devDept.Graphics.colorMaterialType.FrontAndBackFaceAmbient">
      <summary>
            The color applies to the ambient component of both front and back faces.
            </summary>
    </member>
    <member name="T:devDept.Graphics.OGLEntityBuffer">
      <summary>
            OpenGL VBO buffer class.
            </summary>
    </member>
    <member name="F:devDept.Graphics.OGLEntityBuffer.vertexBuffer">
      <summary>
            OpenGL VBO buffers.
            </summary>
    </member>
    <member name="F:devDept.Graphics.OGLEntityBuffer.colorBuffer">
      <summary>
            OpenGL VBO buffers.
            </summary>
    </member>
    <member name="F:devDept.Graphics.OGLEntityBuffer.indexBuffer">
      <summary>
            OpenGL VBO buffers.
            </summary>
    </member>
    <member name="T:devDept.Graphics.OglRenderContext">
      <summary>
            OpenGL render context class.
            </summary>
    </member>
    <member name="M:devDept.Graphics.OglRenderContext.DrawTriangles(devDept.Geometry.Point3D[])">
      <summary>
            Draws triangles without normals.
            </summary>
      <param name="vertices">The vertices</param>
    </member>
    <member name="M:devDept.Graphics.OglRenderContext.OpenglSetup(devDept.Graphics.ControlData)">
      <summary>
            OpenGL initialization. Lighting, shading, texture names, materials, quadric, are all defined here.
            </summary>
    </member>
    <member name="M:devDept.Graphics.OglRenderContext.ReadBuffer(System.Int32)">
      <summary>
            Sets the framebuffer to read from (OpenGL only).
            </summary>
      <param name="buffer">
      </param>
    </member>
    <member name="M:devDept.Graphics.OglRenderContext.GenListName(System.UInt32@)">
      <summary>
            Generates an OpenGL display list name after deleting it if necessary.
            </summary>
      <param name="listName">
      </param>
    </member>
    <member name="M:devDept.Graphics.OglRenderContext.GenTextureName(System.UInt32@)">
      <summary>
            Generates a texture name after deleting it if necessary.
            </summary>
      <param name="texName">The texture name</param>
    </member>
    <member name="M:devDept.Graphics.OglRenderContext.DelTexture(System.UInt32@)">
      <summary>
            Deletes a texture and reset the name to zero.
            </summary>
      <param name="texName">The texture name</param>
    </member>
    <member name="P:devDept.Graphics.OglRenderContext.OpenglVendor">
      <summary>
            Gets the company responsible for this GL implementation. This name does not change from release to release.
            </summary>
    </member>
    <member name="P:devDept.Graphics.OglRenderContext.RendererVersion">
      <summary>
            Gets Graphics API version.
            </summary>
    </member>
    <member name="P:devDept.Graphics.OglRenderContext.ShadingLanguageVersion">
      <summary>
            Gets OpenGL Shading Language version.
            </summary>
    </member>
    <member name="P:devDept.Graphics.OglRenderContext.OpenglExtensions">
      <summary>
            Gets a space-separated list of supported extensions to OpenGL.
            </summary>
    </member>
    <member name="M:devDept.Graphics.OglRenderContext.EnableAlphaClip(System.Boolean)">
      <summary>
            Discards fragments with alpha &lt; 0.1
            </summary>
      <param name="enable">
      </param>
    </member>
    <member name="M:devDept.Graphics.OglRenderContext.GetPixel(System.Int32,System.Int32)">
      <summary>
            Gets the color of the specified pixel in this viewport
            </summary>
      <param name="x">The x window coordinate of the pixel to retrieve</param>
      <param name="y">The y window coordinate of the pixel to retrieve (0 on bottom)</param>
      <returns>The color of the pixel</returns>
    </member>
    <member name="T:devDept.Graphics.ExtensionMethodsGL">
      <summary>
            Extension methods class for drawing points in OpenGL.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Graphics.ExtensionMethodsGL.DrawGL(devDept.Geometry.Point2D)">
      <summary>
            Calls glVertex2d(X, Y)
            </summary>
    </member>
    <member name="M:devDept.Graphics.ExtensionMethodsGL.DrawGL(devDept.Geometry.Point3D)">
      <summary>
            Calls glVertex3d(X, Y, Z).
            </summary>
    </member>
    <member name="M:devDept.Graphics.ExtensionMethodsGL.DrawGL(devDept.Geometry.PointRGB)">
      <summary>
            Calls gl.Color3ub(R, G, B) and glVertex3d(X, Y, Z).
            </summary>
    </member>
    <member name="M:devDept.Graphics.ExtensionMethodsGL.DrawGL(devDept.Geometry.PointWithDisplacement,System.Double)">
      <summary>
            Calls gl.Vertex3d(X+UX, Y+UY, Z+UZ).
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:devDept.Graphics.ExtensionMethodsGL.DrawGL(devDept.Geometry.Vector3D)">
      <summary>
            Calls gl.Normal3d(X, Y, Z)
            </summary>
    </member>
    <member name="M:devDept.Graphics.ExtensionMethodsGL.DrawGL(devDept.Geometry.PointNormalUv,System.Drawing.Color[])">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Graphics.ExtensionMethodsGL.DrawInvGL(devDept.Geometry.PointNormalUv,System.Drawing.Color[])">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Graphics.ExtensionMethodsGL.DrawGL(devDept.Geometry.PointNormalUv)">
      <summary>
            Calls glNormal3d(Nx, Ny, Nz) and glVertex3d(X, Y, Z) 
            </summary>
    </member>
    <member name="M:devDept.Graphics.ExtensionMethodsGL.DrawInvGL(devDept.Geometry.PointNormalUv)">
      <summary>
            Calls glNormal3d(-Nx, -Ny, -Nz) and glVertex3d(X, Y, Z) 
            </summary>
    </member>
    <member name="T:devDept.Graphics.multiColorType">
      <summary>
            Multicolor enum type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.multiColorType.Off">
      <summary>
            Multicolor disabled
            </summary>
    </member>
    <member name="F:devDept.Graphics.multiColorType.On">
      <summary>
            Color per vertex
            </summary>
    </member>
    <member name="F:devDept.Graphics.multiColorType.FEM">
      <summary>
            Clamps the total diffuse color before multiplying by the color, to simulate the texture color computation (for brighter colors), used by FemMesh 
            </summary>
    </member>
    <member name="T:devDept.Graphics.GLShader">
      <summary>
            Base shader class.
            </summary>
    </member>
    <member name="M:devDept.Graphics.GLShader.#ctor">
      <summary>
            Standard constructor.
            </summary>
      <param name="type">The shader type</param>
    </member>
    <member name="M:devDept.Graphics.GLShader.#ctor(System.String,System.String)">
      <summary>
            Constructor with shader source code.
            </summary>
      <param name="type">The shader type</param>
      <param name="vertexCode">Vertex program source code.</param>
      <param name="fragmentCode">Fragment program source code.</param>
    </member>
    <member name="M:devDept.Graphics.GLShader.ComposeStrings(devDept.Graphics.realisticShadowQualityType,devDept.Graphics.BackgroundSettings,devDept.Graphics.LightSettings[])">
      <summary>
            Method used internally to compose the shader code.
            </summary>
      <param name="shadowQuality">The shadow quality</param>
      <param name="background">The background</param>
      <param name="activeLights">Active activeLights</param>
    </member>
    <member name="M:devDept.Graphics.GLShader.Compile(devDept.Graphics.RenderContextBase)">
      <summary>
            Compiles the shader.
            </summary>
      <returns>True if successful, false otherwise.</returns>
    </member>
    <member name="P:devDept.Graphics.GLShader.Enabled">
      <summary>
            Gets the shader's enabled status.
            </summary>
    </member>
    <member name="M:devDept.Graphics.GLShader.Enable(devDept.Graphics.RenderContextBase)">
      <summary>
            Enables the shader.
            </summary>
      <param name="renderContext">The render context</param>
      <returns>True if the shader has been enabled, false if it was already enabled.</returns>
    </member>
    <member name="M:devDept.Graphics.GLShader.Disable(devDept.Graphics.RenderContextBase)">
      <summary>
            Disables the shader.
            </summary>
    </member>
    <member name="M:devDept.Graphics.GLShader.GetAttribLocation(System.String)">
      <summary>
            Gets the location of an attribute shader variable.
            </summary>
      <param name="name">the attribute variable name</param>
      <returns>The location of the attribute variable.</returns>
    </member>
    <member name="M:devDept.Graphics.GLShader.GetAttribLocation(System.UInt32,System.String)">
      <summary>
            Gets the location of an attribute shader variable.
            </summary>
      <param name="shaderProgram">The shader program ID</param>
      <param name="name">The  variable name</param>
      <returns>True if successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Graphics.GLShader.GetUniformLocation(System.String)">
      <summary>
            Gets the location of a uniform shader variable.
            </summary>
      <param name="uniformName">the uniform variable name</param>
      <returns>The location of the uniform variable.</returns>
    </member>
    <member name="M:devDept.Graphics.GLShader.GetUniformLocation(System.UInt32,System.String)">
      <summary>
            Gets the location of a uniform shader variable.
            </summary>
      <param name="shaderProgram">The shader program ID</param>
      <param name="uniformName">The uniform variable name</param>
      <returns>True if successful, false otherwise.</returns>
    </member>
    <member name="P:devDept.Graphics.GLShader.IsCompiled">
      <summary>
            Returns true if the shader program was successfully compiled.
            </summary>
    </member>
    <member name="M:devDept.Graphics.GLShader.SetParameters(System.Object)">
      <summary>
            Sets the shader parameters.
            </summary>
      <param name="shaderParams">the object containing the shader parameters</param>
    </member>
    <member name="T:devDept.Graphics.OGLTextureBase">
      <summary>
            Base utility class to load textures. 
            </summary>
    </member>
    <member name="M:devDept.Graphics.OGLTextureBase.LockBitmapBits(System.Drawing.Bitmap,System.Int32@,System.Int32@)">
      <summary>
            Locks the bitmap into system memory.
            </summary>
      <param name="bmp">The bitmap</param>
      <param name="internalFormat">The internal format</param>
      <param name="format">The format</param>
      <returns>The bitmap data</returns>
    </member>
    <member name="M:devDept.Graphics.OGLTextureBase.UpdateRegion(devDept.Graphics.RenderContextBase,System.Drawing.Bitmap,System.Int32,System.Int32)">
      <summary>
            Updates a region of a texture already loaded in memory.
            </summary>
      <param name="renderContext">The render context</param>
      <param name="bitmap">The region of the image to update</param>
      <param name="xOffset">The texel offset in the x direction (0,0 being the bottom-left corner)</param>
      <param name="yOffset">The texel offset in the y direction (0,0 being the bottom-left corner)</param>
    </member>
    <member name="T:devDept.Graphics.OGLTexture">
      <summary>
            Base class to load 2D textures. 
            </summary>
    </member>
    <member name="M:devDept.Graphics.OGLTexture.#ctor(devDept.Graphics.RenderContextBase,System.UInt32,System.UInt32,System.Boolean,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType)">
      <summary>
            Create a texture for rendering.
            </summary>
      <param name="context">The rendering context</param>
      <param name="width">The texture width</param>
      <param name="height">The texture height</param>
      <param name="depthTexture">if true creates a depth texture</param>
      <param name="minFilterFunc">The minification filter function</param>
      <param name="magFilterFunc">The magnification filter function</param>
    </member>
    <member name="M:devDept.Graphics.OGLTexture.Load(devDept.Graphics.RenderContextBase,System.Drawing.Bitmap,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Loads a bitmap in the graphics memory.
            </summary>
      <param name="renderContext">
      </param>
      <param name="bitmap">
      </param>
      <param name="minFunc">
      </param>
      <param name="magFunc">
      </param>
      <param name="anisotropicFiltering">
      </param>
      <param name="repeatX">
      </param>
      <param name="repeatY">
      </param>
      <param name="checkPowerOfTwo">if true, checks that the texture is power of two and resizes it if it's not. </param>
      <param name="enlargeIfSizeNotSupported">If true, the image is put in a bigger image (with some empty border, keeping the originla size of image) 
            when the image is not power of two and the hardware does not support it. Else it is resized to a smaller power of two size.</param>
    </member>
    <member name="T:devDept.Graphics.OGLTexture1D">
      <summary>
            Base class to load 1D textures.
            </summary>
    </member>
    <member name="T:devDept.Graphics.D3DWPFImageSource">
      <summary>
            Direct3D image source class.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Graphics.D3DWPFImageSource.InvalidateD3DImage">
      <summary>
            Updates the back buffer.
            </summary>
    </member>
    <member name="T:devDept.Graphics.DrawEntityCallBack">
      <summary>
            Delegate of method that draws the entity.
            </summary>
      <param name="renderContext">The render context</param>
      <param name="myParams">The parameters object</param>
    </member>
    <member name="T:devDept.Graphics.DrawForShadowMapDelegate">
      <summary>
            Delegate of method that draws the entities fro the ShadowMap.
            </summary>
      <param name="frustum">
      </param>
      <param name="drawForShadowParams">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:devDept.Graphics.ControlData">
      <summary>
            Class that holds data of the Eyeshot control needed by the <see cref="T:devDept.Graphics.RenderContextBase" /> class.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="F:devDept.Graphics.ControlData.antialiasingSamples">
      <summary>
            Antialiasing samples requested by the user.
            </summary>
    </member>
    <member name="P:devDept.Graphics.ControlData.RealAntialiasingSamples">
      <summary>
            Antialiasing samples effectively used.
            </summary>
    </member>
    <member name="P:devDept.Graphics.ControlData.InstanceId">
      <summary>
            For internal use only. Gets the instance id for the logging.
            </summary>
    </member>
    <member name="P:devDept.Graphics.ControlData.DefaultMaterialShaded">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Graphics.ControlData.ResetDefaultMaterial">
      <summary>
            Resets the default material.
            </summary>
    </member>
    <member name="T:devDept.Graphics.HqrData">
      <summary>
            Class that holds data for high quality rendering features.
            </summary>
    </member>
    <member name="T:devDept.Graphics.textureFilteringFunctionType">
      <summary>
            The	texture	filtering function is used whenever the pixel being textured maps to an area greater (minifying function) 
            or smaller (magnifying function)
            than one texture element. There are	six defined filtering functions. Two of them use the nearest
            one	or nearest four	texture	elements to compute the	texture	value. The other four use mipmaps.
            </summary>
    </member>
    <member name="F:devDept.Graphics.textureFilteringFunctionType.Nearest">
      <summary>
            Returns the value of the texture element that is nearest (in Manhattan distance) to the center of the pixel being textured.
            </summary>
    </member>
    <member name="F:devDept.Graphics.textureFilteringFunctionType.Linear">
      <summary>
            Returns the weighted average of the four texture elements that are closest to the center of the pixel being textured.
            </summary>
    </member>
    <member name="F:devDept.Graphics.textureFilteringFunctionType.NearestMipmapNearest">
      <summary>
            Chooses the mipmap that most closely matches the size of the pixel being textured and uses the Nearest criterion (the texture element nearest to the center of the pixel) to produce a texture value.
            </summary>
    </member>
    <member name="F:devDept.Graphics.textureFilteringFunctionType.LinearMipmapNearest">
      <summary>
            Chooses the mipmap that most closely matches the size of the pixel being textured and uses the Linear criterion (a weighted average of the four texture elements that are closest to the center of the pixel) to produce a texture value.
            </summary>
    </member>
    <member name="F:devDept.Graphics.textureFilteringFunctionType.NearestMipmapLinear">
      <summary>
            Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the Nearest criterion (the texture element nearest to the center of the pixel) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.
            </summary>
    </member>
    <member name="F:devDept.Graphics.textureFilteringFunctionType.LinearMipmapLinear">
      <summary>
            Chooses the two mipmaps that most closely match the size of the pixel being textured and uses the Linear criterion (a weighted average of the four texture elements that are closest to the center of the pixel) to produce a texture value from each mipmap. The final texture value is a weighted average of those two values.
            </summary>
    </member>
    <member name="T:devDept.Graphics.TextureBase">
      <summary>
            Base utility class to load textures. 
            </summary>
    </member>
    <member name="F:devDept.Graphics.TextureBase.MipMapping">
      <summary>
            Tells if the mipmapping is enabled on the texture.
            </summary>
    </member>
    <member name="T:devDept.Graphics.TextureBase.textureUnitType">
      <summary>
            Texture units definitions
            </summary>
    </member>
    <member name="F:devDept.Graphics.TextureBase.textureUnitType.Base">
      <summary>
            Texture unit for standard textures
            </summary>
    </member>
    <member name="F:devDept.Graphics.TextureBase.textureUnitType.Environment">
      <summary>
            Texture unit for environment
            </summary>
    </member>
    <member name="F:devDept.Graphics.TextureBase.textureUnitType.Background">
      <summary>
            Texture unit for background
            </summary>
    </member>
    <member name="F:devDept.Graphics.TextureBase.textureUnitType.ShadowMap">
      <summary>
            Texture unit for shadow maps.
            </summary>
    </member>
    <member name="F:devDept.Graphics.TextureBase.textureUnitType.AlphaTexture">
      <summary>
            Texture unit for alpha maps.
            </summary>
    </member>
    <member name="F:devDept.Graphics.TextureBase.needsDispose">
      <summary>
            Tells if the bitmap must be disposed when disposing the texture (because was created internally).
            </summary>
    </member>
    <member name="P:devDept.Graphics.TextureBase.FirstPixelColor">
      <summary>
            Gets the color of the first pixel of this texture object bitmap.
            </summary>
    </member>
    <member name="M:devDept.Graphics.TextureBase.Dispose">
      <summary>
            Calls OpenGL's glDeleteTexture.
            </summary>
    </member>
    <member name="M:devDept.Graphics.TextureBase.Load(devDept.Graphics.RenderContextBase,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Loads the texture
            </summary>
      <param name="renderContext">The render context</param>
      <param name="minFunc">Minifying function</param>
      <param name="magFunc">Magnifying function</param>
      <param name="anisotropicFiltering">If true, enables anisotropic filtering for mipmapping</param>
      <param name="repeatX">If true, the texture is repeated in the X direction</param>
      <param name="repeatY">If true, the texture is repeated in the Y direction</param>
    </member>
    <member name="M:devDept.Graphics.TextureBase.Load(devDept.Graphics.RenderContextBase,System.Drawing.Bitmap,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Loads the texture
            </summary>
      <param name="renderContext">The render context</param>
      <param name="bitmap">The image</param>
      <param name="minFunc">Minifying function</param>
      <param name="magFunc">Magnifying function</param>
      <param name="anisotropicFiltering">If true, enables anisotropic filtering for mipmapping</param>
      <param name="repeatX">If true, the texture is repeated in the X direction</param>
      <param name="repeatY">If true, the texture is repeated in the Y direction</param>
      <param name="checkPowerOfTwo">If true, checks that the image size is power of two</param>
      <param name="enlargeIfSizeNotSupported">If true, the image is put in a bigger image (with some empty border, keeping the originla size of image) 
            when the image is not power of two and the hardware does not support it. Else it is resized to a smaller power of two size.</param>
    </member>
    <member name="M:devDept.Graphics.TextureBase.UpdateRegion(devDept.Graphics.RenderContextBase,System.Drawing.Bitmap,System.Int32,System.Int32)">
      <summary>
            Updates a region of a texture already loaded in memory.
            </summary>
      <param name="renderContext">The render context</param>
      <param name="bitmap">The region of the image to update</param>
      <param name="xOffset">The texel offset in the x direction (0,0 being the bottom-left corner)</param>
      <param name="yOffset">The texel offset in the y direction (0,0 being the bottom-left corner)</param>
    </member>
    <member name="P:devDept.Graphics.TextureBase.Size">
      <summary>
            The texture size.
            </summary>
    </member>
    <member name="P:devDept.Graphics.TextureBase.BitmapSize">
      <summary>
            The size of the bitmap from which the texture was created.
            </summary>
      <remarks>It can be different from <see cref="P:devDept.Graphics.TextureBase.Size" /> if the graphics card does not support the texture non power of two.</remarks>
    </member>
    <member name="M:devDept.Graphics.TextureBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Graphics.TextureBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="P:devDept.Graphics.TextureBase.TextureUnitMode">
      <summary>
            Gets the texture unit where the Texture is applied.
            </summary>
    </member>
    <member name="M:devDept.Graphics.TextureBase.AllocateMemory(devDept.Graphics.RenderContextBase,System.Boolean,System.Int32,System.Int32,devDept.Graphics.textureFilteringFunctionType,devDept.Graphics.textureFilteringFunctionType,System.Boolean,System.Boolean,System.IntPtr,System.Boolean)">
      <summary>
            Allocates memory for a texture.
            </summary>
      <param name="context">The render context</param>
      <param name="renderTarget">In true, the texture is used as a render target</param>
      <param name="width">The texture width</param>
      <param name="height">The texture height</param>
      <param name="minFilter">The minification filter</param>
      <param name="magFilter">The magnification filter</param>
      <param name="repeatS">If true the texture is repeated in the S direction, else it is clamped</param>
      <param name="repeatT">If true the texture is repeated in the T direction, else it is clamped</param>
      <param name="pixels">The pixels data pointer. If not null, they are copied to the texture memory.</param>
    </member>
    <member name="T:devDept.Graphics.TextureMosaic">
      <summary>
            Single Texture that holds more images.
            </summary>
    </member>
    <member name="F:devDept.Graphics.TextureMosaic.textureCoordsRect">
      <summary>
            Texture coordinates of each sub-image.
            </summary>
    </member>
    <member name="F:devDept.Graphics.TextureMosaic.imagesSize">
      <summary>
            Size of each sub-image.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:devDept.Graphics.TextureMosaic.#ctor(devDept.Graphics.RenderContextBase,System.Int32,System.Int32,System.Drawing.Bitmap[])" -->
    <member name="M:devDept.Graphics.TextureMosaic.Draw(devDept.Graphics.RenderContextBase,System.Int32[],System.Drawing.PointF@,System.Boolean)">
      <summary>
            Draws the images from left to right.
            </summary>
      <param name="context">Rendering context</param>
      <param name="imagesToDraw">THe array of image indices to draw</param>
      <param name="position">The position where to start drawing</param>
      <param name="drawBuffered">If true, the images are drawn when the dynamic buffer is full, else they are drawn immediately (Direct3D only)</param>
      <remarks>The position is updated to the end of the last image drawn.</remarks>
    </member>
    <member name="T:devDept.Graphics.IViewport">
      <summary>
            Viewport coordinates conversion methods.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="P:devDept.Graphics.IViewport.Location">
      <summary>
            The coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container.
            </summary>
    </member>
    <member name="M:devDept.Graphics.IViewport.ViewportToCameraScreen(System.Drawing.Point)">
      <summary>
            Converts viewport coordinates (0 on top-left, relative to Viewport location) to camera screen coordinates (0 con the control bottom-left corner).
            </summary>
      <param name="pt">The point to convert</param>
      <returns>The point in camera screen coordinates</returns>
    </member>
    <member name="M:devDept.Graphics.IViewport.ViewportToScreen(System.Drawing.Point)">
      <summary>
            Converts viewport coordinates (0 on top-left, relative to Viewport location) to screen coordinates (0 on top left, relative to the control location).
            </summary>
      <param name="pt">The point to convert</param>
      <returns>The point in screen coordinates</returns>
    </member>
    <member name="M:devDept.Graphics.IViewport.ScreenToViewport(System.Drawing.Point)">
      <summary>
            Converts viewport layout screen coordinates to viewport coordinates.
            </summary>
      <param name="screenPoint">The coordinates of the point relative to the viewport layout</param>
      <returns>The coordinates of the point relative to the viewport.</returns>
    </member>
    <member name="T:devDept.Graphics.UIRoutedEventArgs">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:devDept.Graphics.UIRoutedEventHandler">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:devDept.Graphics.ZBuffer">
      <summary>
            Class that holds ZBuffer related data.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="F:devDept.Graphics.ZBuffer.Location">
      <summary>
            Camera location.
            </summary>
    </member>
    <member name="P:devDept.Graphics.ZBuffer.Dirty">
      <summary>
            Tells if the scene must be redrawn in order to get a correct ZBuffer
            </summary>
    </member>
    <member name="M:devDept.Graphics.ZBuffer.ReadPickBoxZRange(devDept.Graphics.RenderContextBase,System.Drawing.Point,System.Int32,System.Double@,System.Double@)">
      <summary>
            Reads the depth values inside a pick box area and returns the minimum and maximum depths.
            </summary>
      <param name="renderContext">The render context</param>
      <param name="cameraScreenPos">The center of the pick box area in camera screen coordinates (0 on bottom left).</param>
      <param name="pickBoxSizeInPixels">The size in pixels of the pick box</param>
      <param name="min">The minimum depth value</param>
      <param name="max">The maximum depth value</param>
      <returns>
      </returns>
    </member>
    <member name="T:devDept.Graphics.ZBuffer.SelectionImageData">
      <summary>
            Image data for selection.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="F:devDept.Graphics.ZBuffer.SelectionImageData.Stride">
      <summary>
            The number of bytes per image row.
            </summary>
    </member>
    <member name="F:devDept.Graphics.ZBuffer.SelectionImageData.Bpp">
      <summary>
            The bits per pixel.
            </summary>
    </member>
    <member name="F:devDept.Graphics.ZBuffer.SelectionImageData.Image">
      <summary>
            The image of the entities
            </summary>
    </member>
    <member name="F:devDept.Graphics.ZBuffer.SelectionImageData.InsideBlockReference">
      <summary>
            If true, the image was captured when the drawing inside a BlockReference so each 
            </summary>
    </member>
    <member name="F:devDept.Graphics.ZBuffer.SelectionImageData.IdItemsMap">
      <summary>
            Dictionary that maps an entity id of the false-color drawing to the corresponding hierarchy of entities to retrieve the corresponding item (for BlockReference leaf selection).
            </summary>
    </member>
    <member name="F:devDept.Graphics.ZBuffer.SelectionImageData.leafSelection">
      <summary>
            If true, the Image was captured with leafSelection (a different color per each entity).
            </summary>
    </member>
    <member name="F:devDept.Graphics.ZBuffer.SelectionImageData.InnerIdItemsMap">
      <summary>
            Dictionary that maps an entity id of the <see cref="P:devDept.Graphics.ZBuffer.SelectionImageData.InnerSelectionImage" /> false-color drawing to the corresponding hierarchy of entities to retrieve the corresponding item (for BlockReference leaf selection).
            </summary>
    </member>
    <member name="P:devDept.Graphics.ZBuffer.SelectionImageData.InnerSelectionImage">
      <summary>
            The image of the inner parts (edges, vertices, faces).
            </summary>
    </member>
    <member name="F:devDept.Graphics.ZBuffer.SelectionImageData.SelectableOnly">
      <summary>
            Tells if the image captured for the selection included only the selectable entities or not.
            </summary>
    </member>
    <member name="M:devDept.Graphics.ZBuffer.CaptureBackbuffer(devDept.Graphics.RenderContextBase,devDept.Graphics.IViewport,System.Int32,System.String,System.Boolean,System.Object,System.Boolean,System.Double[],System.Drawing.Rectangle,System.Boolean,System.Int32@,System.Int32@,System.Boolean)">
      <summary>
            Captures the Back buffer image
            </summary>
      <param name="renderContext">The render context</param>
      <param name="viewport">The viewport</param>
      <param name="viewportId">The viewport id</param>
      <param name="environmentId">The Environment control instance Id</param>
      <param name="keepData">
      </param>
      <param name="idItemsMap">The map from ids to items</param>
      <param name="selectableOnly">Tells if the image captured for the selection included only the selectable entities</param>
      <param name="modelViewProjectionMatrix">
      </param>
      <param name="rect">The rectangle in screen coordinates</param>
      <param name="leafSelection">If true, the image was captured with the leafSelection set to true</param>
      <param name="stride">
      </param>
      <param name="bpp">
      </param>
      <param name="innerImage">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Graphics.ZBuffer.ResetCapturedView">
      <summary>
            Resets the internal view memorized during the last z-buffer capture.
            </summary>
    </member>
    <member name="M:devDept.Graphics.ZBuffer.ChangedView(System.Double[],System.Boolean)">
      <summary>
            Tells if the view has changed since the last z-buffer capture.
            </summary>
      <param name="modelViewProjectionMatrix">The current modelview projection matrix</param>
      <param name="leafSelection">If true, the selection is done on the leaves of the entities tree</param>
      <returns>True if the view has changed.</returns>
      <remarks>This is used to optimize multiple calls to the GetEntityUnderMousecursor methods.</remarks>
    </member>
    <member name="T:devDept.Graphics.Material">
      <summary>
            Material definition.
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.Name">
      <summary>
            Gets or sets material name.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "E:devDept.Graphics.Material.KeyChanged" -->
    <member name="M:devDept.Graphics.Material.OnKeyChanged(System.String,System.String)">
      <summary>
            When the <see cref="P:devDept.Graphics.Material.Name" /> changes I need to notify it to the related keyed collections before changing it.
            </summary>
      <param name="newKey">The new <see cref="P:devDept.Graphics.Material.Name" /></param>
      <param name="propertyName">The property name that represent the key for the related keyed collections.</param>
    </member>
    <member name="M:devDept.Graphics.Material.GetKey">
      <inheritdoc />
    </member>
    <member name="M:devDept.Graphics.Material.SetKey(System.String)">
      <inheritdoc />
    </member>
    <member name="P:devDept.Graphics.Material.Description">
      <summary>Gets or sets the material description.</summary>
    </member>
    <member name="P:devDept.Graphics.Material.Ambient">
      <summary>Gets or sets the ambient reflectance of the material.</summary>
    </member>
    <member name="P:devDept.Graphics.Material.Diffuse">
      <summary>Gets or sets the diffuse reflectance of the material.</summary>
    </member>
    <member name="P:devDept.Graphics.Material.Specular">
      <summary>Gets or sets the specular reflectance of the material.</summary>
    </member>
    <member name="P:devDept.Graphics.Material.Environment">
      <summary> Gets or sets the environment reflectance of the material (range 0-1).</summary>
    </member>
    <member name="P:devDept.Graphics.Material.Shininess">
      <summary>Gets or sets the specular exponent of the material (range 0-1).</summary>
    </member>
    <member name="P:devDept.Graphics.Material.Young">
      <summary>
            Gets or sets material modulus of elasticity.
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.Poisson">
      <summary>
            Gets or sets material Poisson's ratio.
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.YieldStrength">
      <summary>
            Gets or sets material yield strength.
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.Density">
      <summary>
            Gets or sets material density.
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.CoeffOfThermalExp">
      <summary>
            Gets or sets material coefficient of thermal expansion.
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.ElementType">
      <summary>
            Gets or sets the 2D FEM element type (FEM).
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.Matrix">
      <summary>
            Gets or sets the material Matrix (FEM).
            </summary>
    </member>
    <member name="F:devDept.Graphics.Material.D">
      <summary>
            D material matrix (FEM)
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.ElementThickness">
      <summary>
            Gets or sets the 2D FEM element thickness.
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.WireColor">
      <summary>
            Gets the color used for wire entities.
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.Texture">
      <summary>
            Gets the internal texture.
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.AlphaMap">
      <summary>
            Gets the internal alphaMap texture.
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.TextureImage">
      <summary>Gets or sets the material texture image.</summary>
      <remarks>If the material is already added to the Environment control call <see cref="M:devDept.Graphics.Material.LoadTexture(devDept.Graphics.RenderContextBase)" /> to make it effective.</remarks>
    </member>
    <member name="P:devDept.Graphics.Material.TextureImageOverExposure">
      <summary>
            Gets or sets a value that controls whether the scene lighting can make the image diffuse color brighter than the image color.
            </summary>
      <remarks>Requires the use of shaders.</remarks>
    </member>
    <member name="P:devDept.Graphics.Material.AlphaMapImage">
      <summary>Gets or sets the material alpha image.</summary>
      <remarks>If the material is already added to the Environment control call <see cref="M:devDept.Graphics.Material.LoadTexture(devDept.Graphics.RenderContextBase)" /> to make it effective.</remarks>
      <remarks>Black pixels are treated as fully transparent, white pixels are treated as fully opaque.</remarks>
    </member>
    <member name="P:devDept.Graphics.Material.EnvironmentMappingTexture">
      <summary>
            Gets the internal Environment Mapping texture.
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.EnvironmentMappingImage">
      <summary>Gets or sets the material environment mapping image.</summary>
      <remarks>If the material is already added to the Environment control call <see cref="M:devDept.Graphics.Material.LoadTexture(devDept.Graphics.RenderContextBase)" /> to make it effective.</remarks>
    </member>
    <member name="P:devDept.Graphics.Material.MinifyingFunction">
      <summary>Gets or sets the texture minifying function. The texture minifying function is used whenever
            the pixel being textured maps to an area greater than one texture element. There are
            six defined minifying functions. Two of them use the nearest one or nearest four texture
            elements to compute the	texture	value. The other four use mipmaps.</summary>
    </member>
    <member name="P:devDept.Graphics.Material.MagnifyingFunction">
      <summary>Gets or sets the texture magnifying function. The texture magnifying function is used whenever
            the pixel being textured maps to an area smaller than one texture element. There are
            six defined minifying functions. Two of them use the nearest one or nearest four texture
            elements to compute the	texture	value. The other four use mipmaps.</summary>
    </member>
    <member name="P:devDept.Graphics.Material.RepeatX">
      <summary>
            Gets or sets the texture repeat mode in the X direction.
            </summary>
      <remarks>If true, values outside [0,1] are mapped to the [0,1] range. If false, values less than 0 are mapped to 0 and values greater than 1 are mapped to 1.</remarks>
    </member>
    <member name="P:devDept.Graphics.Material.RepeatY">
      <summary>
            Gets or sets the texture repeat mode in the Y direction.
            </summary>
      <remarks>If true, values outside [0,1] are mapped to the [0,1] range. If false, values less than 0 are mapped to 0 and values greater than 1 are mapped to 1.</remarks>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="name">The material name.</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.String,System.Drawing.Color)">
      <summary>
            Name and color constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="diffuse">Material color</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.String,System.Drawing.Image)">
      <summary>Name and texture index constructor.</summary>
      <param name="name">The material name.</param>
      <param name="texture">Material texture image</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single,System.Drawing.Image)">
      <summary>
            Standard constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="ambient">Material ambient intensity</param>
      <param name="specular">Material specular intensity</param>
      <param name="shininess">Material shininess factor (0-1)</param>
      <param name="environment">Material environment intensity</param>
      <param name="texture">Material texture image</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single)">
      <summary>
            Standard constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="ambient">Material ambient intensity</param>
      <param name="diffuse">Material diffuse intensity</param>
      <param name="specular">Material specular intensity</param>
      <param name="shininess">Material shininess factor (0-1)</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single)">
      <summary>
            Standard constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="ambient">Material ambient intensity</param>
      <param name="diffuse">Material diffuse intensity</param>
      <param name="specular">Material specular intensity</param>
      <param name="shininess">Material shininess factor (0-1)</param>
      <param name="environment">Material environment intensity</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single,System.Drawing.Image)">
      <summary>
            Standard constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="ambient">Material ambient intensity</param>
      <param name="diffuse">Material diffuse intensity</param>
      <param name="specular">Material specular intensity</param>
      <param name="shininess">Material shininess factor (0-1)</param>
      <param name="environment">Material environment intensity</param>
      <param name="texture">Material texture image</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single,System.Drawing.Image,System.Drawing.Image)">
      <summary>
            Standard constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="ambient">Material ambient intensity</param>
      <param name="diffuse">Material diffuse intensity</param>
      <param name="specular">Material specular intensity</param>
      <param name="shininess">Material shininess factor (0-1)</param>
      <param name="environment">Material environment intensity</param>
      <param name="texture">Material texture image</param>
      <param name="environmentMapping">Material's environment mapping image</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.String,System.Drawing.Color,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Fem constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="diffuse">Material diffuse intensity</param>
      <param name="poisson">Material modulus of elasticity</param>
      <param name="young">Material Poisson's ratio</param>
      <param name="yield">Material yield strength</param>
      <param name="density">Material density</param>
      <param name="coeffOfThermExp">Material coefficient of thermal expansion</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.String,System.Drawing.Color,System.Double,System.Double,System.Double,System.Double,System.Double,devDept.Graphics.elementType,System.Double)">
      <summary>
            2D FEM constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="diffuse">Material diffuse intensity</param>
      <param name="poisson">Material modulus of elasticity</param>
      <param name="young">Material Poisson's ratio</param>
      <param name="yield">Material yield strength</param>
      <param name="density">Material density</param>
      <param name="coeffOfThermExp">Material coefficient of thermal expansion</param>
      <param name="elType">2D FEM element type</param>
      <param name="elThickness">2D FEM element thickness</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.Image)">
      <summary>
            Appearance constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="ambient">Material ambient intensity</param>
      <param name="specular">Material specular intensity</param>
      <param name="shininess">Material shininess factor (0-1)</param>
      <param name="texture">Material texture image</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor">
      <summary>
            Obsolete Empty constructor.
            </summary>
      <param name="name">The material name.</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Color)">
      <summary>
            Obsolete Name and color constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="diffuse">Material color</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Image)">
      <summary>Obsolete Name and texture index constructor.</summary>
      <param name="name">The material name.</param>
      <param name="texture">Material texture image</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single,System.Single,System.Drawing.Image,System.Drawing.Image)">
      <summary>
            Obsolete constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="ambient">Material ambient intensity</param>
      <param name="diffuse">Material diffuse intensity</param>
      <param name="specular">Material specular intensity</param>
      <param name="shininess">Material shininess factor (0-1)</param>
      <param name="environment">Material environment intensity</param>
      <param name="texture">Material texture image</param>
      <param name="environmentMapping">Material's environment mapping image</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Color,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Obsolete Fem constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="diffuse">Material diffuse intensity</param>
      <param name="poisson">Material modulus of elasticity</param>
      <param name="young">Material Poisson's ratio</param>
      <param name="yield">Material yield strength</param>
      <param name="density">Material density</param>
      <param name="coeffOfThermExp">Material coefficient of thermal expansion</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Color,System.Double,System.Double,System.Double,System.Double,System.Double,devDept.Graphics.elementType,System.Double)">
      <summary>
            Obsolete 2D FEM constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="diffuse">Material diffuse intensity</param>
      <param name="poisson">Material modulus of elasticity</param>
      <param name="young">Material Poisson's ratio</param>
      <param name="yield">Material yield strength</param>
      <param name="density">Material density</param>
      <param name="coeffOfThermExp">Material coefficient of thermal expansion</param>
      <param name="elType">2D FEM element type</param>
      <param name="elThickness">2D FEM element thickness</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.Image)">
      <summary>
            Obsolete Appearance constructor.
            </summary>
      <param name="name">The material name.</param>
      <param name="ambient">Material ambient intensity</param>
      <param name="specular">Material specular intensity</param>
      <param name="shininess">Material shininess factor (0-1)</param>
      <param name="texture">Material texture image</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.Drawing.Color,System.Drawing.Color,System.Single,System.Single,System.Drawing.Image)">
      <summary>
            Obsolete constructor.
            </summary>
      <param name="ambient">Material ambient intensity</param>
      <param name="specular">Material specular intensity</param>
      <param name="shininess">Material shininess factor (0-1)</param>
      <param name="environment">Material environment intensity</param>
      <param name="texture">Material texture image</param>
    </member>
    <member name="M:devDept.Graphics.Material.Clone">
      <summary>
            Creates a deep copy of this material.
            </summary>
      <returns>The new material object.</returns>
    </member>
    <member name="M:devDept.Graphics.Material.LoadTexture(devDept.Graphics.RenderContextBase)">
      <summary>
            Loads the texture for this material. This is done automatically the first time the material is added to the Materials collection.
            </summary>
      <remarks>If the <see cref="P:devDept.Graphics.Material.TextureImage" /> or <see cref="P:devDept.Graphics.Material.EnvironmentMappingImage" /> are changed, this method needs to be called to update the graphics data.</remarks>
    </member>
    <member name="M:devDept.Graphics.Material.CalcMaterialPropertyMatrix(System.Int32,devDept.Graphics.elementType)">
      <summary>
            Updates the D matrix for this material (FEM).
            </summary>
      <param name="numberOfDimensions">Number of dimensions</param>
      <param name="elType">2D element type</param>
    </member>
    <member name="M:devDept.Graphics.Material.ClearTexture">
      <summary>
            Clears the texture associated to this material.
            </summary>
    </member>
    <member name="M:devDept.Graphics.Material.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Graphics.Material.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Graphics.Material.ToString">
      <inehrit />
    </member>
    <member name="M:devDept.Graphics.Material.Equals(devDept.Graphics.Material)">
      <summary>
            Compares material names ignoring cases.
            </summary>
      <param name="other">The other material</param>
      <returns>True if the two material names are the same, false otherwise.</returns>
    </member>
    <member name="M:devDept.Graphics.Material.GetHashCode">
      <inehrit />
    </member>
    <member name="M:devDept.Graphics.Material.WriteObj(System.String,System.IO.TextWriter,System.String)">
      <summary>
            Writes the material definition to OBJ material (*.mtl) file. For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Graphics.Material.FreeResources">
      <summary>
            Frees the material graphics resources.
            </summary>
    </member>
    <member name="P:devDept.Graphics.Material.ShearModulus">
      <summary>
            Gets the shear modulus using the material Young and Poisson constants.
            </summary>
    </member>
    <member name="M:devDept.Graphics.Material.GetPoissonFromShearModulus(System.Double,System.Double)">
      <summary>
            Computes the Poisson ratio that needs to be set to have the desired shear modulus.
            </summary>
    </member>
    <member name="M:devDept.Graphics.Material.IsTransparent">
      <summary>
            Tells if the material has a <see cref="P:devDept.Graphics.Material.AlphaMapImage" /> or if its <see cref="P:devDept.Graphics.Material.Diffuse" /> has alpha &lt; 255.
            </summary>
      <returns>True if the material is transparent, false otherwise.</returns>
    </member>
    <member name="T:devDept.Graphics.elementType">
      <summary>
            2D finite element method type.
            </summary>
    </member>
    <member name="F:devDept.Graphics.elementType.PlaneStrain">
      <summary>
            Plane strain
            </summary>
    </member>
    <member name="F:devDept.Graphics.elementType.PlaneStress">
      <summary>
            Plane stress
            </summary>
    </member>
    <member name="F:devDept.Graphics.elementType.Axisymmetric">
      <summary>
            Axisymetric
            </summary>
    </member>
    <member name="T:devDept.Graphics.IEnvironment">
      <summary>
            Interface for the environment mapping reflections.
            </summary>
    </member>
    <member name="T:devDept.Graphics.OGLEnvironment">
      <summary>Environment mapping data class.</summary>
    </member>
    <member name="M:devDept.Graphics.OGLEnvironment.Disable(devDept.Graphics.RenderContextBase)">
      <summary>
            Disables the Environment mapping.
            </summary>
    </member>
    <member name="T:devDept.Graphics.BackfaceSettings">
      <summary>
            Backface settings.
            </summary>
    </member>
    <member name="P:devDept.Graphics.BackfaceSettings.ColorMethod">
      <summary>Gets or sets the backface color method.</summary>
    </member>
    <member name="P:devDept.Graphics.BackfaceSettings.Color">
      <summary>Backface color, applies only to single color style mode.</summary>
    </member>
    <member name="M:devDept.Graphics.BackfaceSettings.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:devDept.Graphics.BackfaceSettings.#ctor(devDept.Graphics.backfaceColorMethodType,System.Drawing.Color)">
      <summary>Standard constructor.</summary>
      <param name="colorMode">Color mode</param>
      <param name="color">Color</param>
    </member>
    <member name="T:devDept.Graphics.ClippingPlaneBase">
      <summary>
            Clipping plane base definition.
            </summary>
      <remarks>The scene is clipped on the positive side of the plane.</remarks>
    </member>
    <member name="P:devDept.Graphics.ClippingPlaneBase.Normal">
      <summary>Gets or sets the plane normal.</summary>
    </member>
    <member name="P:devDept.Graphics.ClippingPlaneBase.Distance">
      <summary>Gets or sets the plane distance from the origin.</summary>
    </member>
    <member name="P:devDept.Graphics.ClippingPlaneBase.Plane">
      <summary>
            Gets or sets the plane.
            </summary>
    </member>
    <member name="P:devDept.Graphics.ClippingPlaneBase.Active">
      <summary>Clipping plane status.</summary>
    </member>
    <member name="M:devDept.Graphics.ClippingPlaneBase.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:devDept.Graphics.ClippingPlaneBase.#ctor(devDept.Geometry.Vector3D,System.Double,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="normal">Plane normal</param>
      <param name="distance">Distance from the origin</param>
      <param name="active">Status</param>
    </member>
    <member name="M:devDept.Graphics.ClippingPlaneBase.#ctor(devDept.Geometry.Plane,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="plane">The plane</param>
      <param name="active">Status</param>
    </member>
    <member name="T:devDept.Graphics.ShaderParametersBase">
      <summary>
            Base class for shader parameters.
            </summary>
    </member>
    <member name="T:devDept.Graphics.shaderPrimitiveType">
      <summary>
            Shader primitive type.
            </summary>
    </member>
    <member name="T:devDept.Graphics.ShaderParameters">
      <summary>
            Base class for shader parameters.
            </summary>
    </member>
    <member name="F:devDept.Graphics.ShaderParameters.AlphaMap">
      <summary>
            If true, the texture alpha is modulated by another texture defining the alpha map.
            </summary>
    </member>
    <member name="M:devDept.Graphics.ShaderParameters.PrepareForWireframe">
      <summary>
            Prepares parameters for wireframe drawing.
            </summary>
    </member>
    <member name="F:devDept.Graphics.ShaderParameters.AlphaClip">
      <summary>
            If true, discards the fragment if alpha &lt; 0.1.
            </summary>
      <remarks>For <see cref="F:devDept.Graphics.shaderType.Texture2DNoLights" /> shader only.</remarks>
    </member>
    <member name="F:devDept.Graphics.ShaderParameters.TextureOverExposure">
      <summary>
            If true, the scene lighting can make the image diffuse color brighter than the image color.
            </summary>
      <seealso cref="P:devDept.Graphics.Material.TextureImageOverExposure" />
    </member>
    <member name="T:devDept.Graphics.ReflectionShaderParameters">
      <summary>
            Class for shader parameters.
            </summary>
    </member>
    <member name="F:devDept.Graphics.ReflectionShaderParameters.ReflectionMaxHeight">
      <summary>
            Distance from the reflection plane to the highest point in the scene.
            </summary>
    </member>
    <member name="T:devDept.Graphics.colorThemeType">
      <summary>
            Color theme for UI elements.
            </summary>
    </member>
    <member name="F:devDept.Graphics.colorThemeType.Auto">
      <summary>
            Automatic background brightness detection
            </summary>
    </member>
    <member name="F:devDept.Graphics.colorThemeType.Light">
      <summary>
            Light color
            </summary>
    </member>
    <member name="F:devDept.Graphics.colorThemeType.Dark">
      <summary>
            Dark color
            </summary>
    </member>
    <member name="T:devDept.Graphics.BackgroundSettings">
      <summary>
            Viewport background settings.
            </summary>
    </member>
    <member name="P:devDept.Graphics.BackgroundSettings.StyleMode">
      <summary>Gets or sets the viewport background style.</summary>
      <remarks>When using CubicGradient style, you need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Graphics.BackgroundSettings.BottomColor">
      <summary>Gets or sets the viewport background bottom color.</summary>
      <remarks>When using CubicGradient style, you need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Graphics.BackgroundSettings.IntermediateColor">
      <summary>Gets or sets the viewport background intermediate color.</summary>
      <remarks>When using CubicGradient style, you need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Graphics.BackgroundSettings.TopColor">
      <summary>Gets or sets the viewport background top color.</summary>
      <remarks>When using CubicGradient style, you need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
    </member>
    <!-- Badly formed XML comment ignored for member "P:devDept.Graphics.BackgroundSettings.IntermediateColorPosition" -->
    <member name="P:devDept.Graphics.BackgroundSettings.ColorThemeTransparency">
      <summary>
            Gets or sets button hover status, progress bar, viewcube ring (when the ViewCubeIcon.Lighting property is false), zoom window and selection boxes transparency level.
            </summary>
    </member>
    <member name="P:devDept.Graphics.BackgroundSettings.Image">
      <summary>
            Gets or sets the background image.
            </summary>
      <remarks>
                You need to call the <see cref="!:Environment.CompileUserInterfaceElements()" /> to
                see the effect of this change at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Graphics.BackgroundSettings.ColorTheme">
      <summary>
            Gets or sets the user interface elements color theme.
            </summary>
    </member>
    <member name="M:devDept.Graphics.BackgroundSettings.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Graphics.BackgroundSettings.#ctor(devDept.Graphics.backgroundStyleType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Windows.Media.ImageSource,devDept.Graphics.colorThemeType,System.Double)">
      <summary>Standard constructor.</summary>
      <param name="styleMode">Background style</param>
      <param name="bottomColor">Bottom color, applies only to gradient styles.</param>
      <param name="intermediateColor">Intermediate color, applies only to gradient styles.</param>
      <param name="topColor">Top color, applies only to gradient styles.</param>
      <param name="intermediateColorPosition">Intermediate color position expressed in percent of viewport height from top.</param>
      <param name="image">Image, applies only to gradient style.</param>
      <param name="colorTheme">Color theme</param>
      <param name="colorThemeTransparency">Color theme transparency</param>
    </member>
    <member name="M:devDept.Graphics.BackgroundSettings.#ctor(devDept.Graphics.backgroundStyleType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Windows.Media.ImageSource)">
      <summary>Standard constructor.</summary>
      <param name="styleMode">Background style</param>
      <param name="bottomColor">Bottom color, applies only to gradient styles.</param>
      <param name="intermediateColor">Intermediate color, applies only to gradient styles.</param>
      <param name="topColor">Top color, applies only to gradient styles.</param>
      <param name="intermediateColorPosition">Intermediate color position expressed in percent of viewport height from top.</param>
      <param name="image">Image, applies only to gradient style.</param>
    </member>
    <member name="M:devDept.Graphics.BackgroundSettings.#ctor(devDept.Graphics.BackgroundSettings)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other BackgroundSettings object</param>
    </member>
    <member name="F:devDept.Graphics.BackgroundSettings.PropertyChangedEvent">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:devDept.Graphics.BackgroundSettings.RaiseEventEnabled">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="E:devDept.Graphics.BackgroundSettings.PropertyChanged">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Graphics.BackgroundSettings.RaisePropertyChangedEvent(System.Object,System.Windows.DependencyProperty)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Graphics.BackgroundSettings.FreezeBrightness(System.Boolean)">
      <summary>
            Freezes the brightness evaluation.
            </summary>
      <param name="freeze">
      </param>
      <remarks>For internal use only.</remarks>
      <seealso cref="P:devDept.Graphics.BackgroundSettings.IsDark" />
    </member>
    <member name="T:devDept.Serialization.MaterialSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Graphics.Material" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.MaterialSurrogate.#ctor(devDept.Graphics.Material)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.Name">
      <summary>
            See <see cref="P:devDept.Graphics.Material.Name" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.Description">
      <summary>
            See <see cref="P:devDept.Graphics.Material.Description" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.AlphaMapImage">
      <summary>
            See <see cref="P:devDept.Graphics.Material.AlphaMapImage" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.Ambient">
      <summary>
            See <see cref="P:devDept.Graphics.Material.Ambient" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.Diffuse">
      <summary>
            See <see cref="P:devDept.Graphics.Material.Diffuse" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.Specular">
      <summary>
            See <see cref="P:devDept.Graphics.Material.Specular" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.Shininess">
      <summary>
            See <see cref="P:devDept.Graphics.Material.Shininess" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.Environment">
      <summary>
            See <see cref="P:devDept.Graphics.Material.Environment" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.TextureImage">
      <summary>
            See <see cref="P:devDept.Graphics.Material.TextureImage" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.EnvironmentMappingImage">
      <summary>
            See <see cref="P:devDept.Graphics.Material.EnvironmentMappingImage" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.CoeffOfThermalExp">
      <summary>
            See <see cref="P:devDept.Graphics.Material.CoeffOfThermalExp" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.Density">
      <summary>
            See <see cref="P:devDept.Graphics.Material.Density" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.ElementThickness">
      <summary>
            See <see cref="P:devDept.Graphics.Material.ElementThickness" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.ElementType">
      <summary>
            See <see cref="P:devDept.Graphics.Material.ElementType" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.MagnifyingFunction">
      <summary>
            See <see cref="P:devDept.Graphics.Material.MagnifyingFunction" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.MinifyingFunction">
      <summary>
            See <see cref="P:devDept.Graphics.Material.MinifyingFunction" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.Poisson">
      <summary>
            See <see cref="P:devDept.Graphics.Material.Poisson" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.RepeatX">
      <summary>
            See <see cref="P:devDept.Graphics.Material.RepeatX" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.RepeatY">
      <summary>
            See <see cref="P:devDept.Graphics.Material.RepeatY" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.YieldStrength">
      <summary>
            See <see cref="P:devDept.Graphics.Material.YieldStrength" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.MaterialSurrogate.Young">
      <summary>
            See <see cref="P:devDept.Graphics.Material.Young" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.MaterialSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Graphics.Material.#ctor(System.String)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.MaterialSurrogate.op_Implicit(devDept.Serialization.MaterialSurrogate)~devDept.Graphics.Material">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.MaterialSurrogate.op_Implicit(devDept.Graphics.Material)~devDept.Serialization.MaterialSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="T:devDept.Serialization.GraphicsSerializer">
      <summary>
            For internal use only. Defines the protobuf model for <see cref="N:devDept.Graphics" /> namespace.
            </summary>
    </member>
    <member name="M:devDept.Serialization.GraphicsSerializer.#ctor">
      <summary>
            For deserialization purpose.
            </summary>
    </member>
    <member name="M:devDept.Serialization.GraphicsSerializer.FillModel">
      <inheritdoc />
    </member>
    <member name="M:devDept.Serialization.GraphicsSerializer.GetTypeForObject(System.String)">
      <inheritdoc />
    </member>
    <member name="T:OpenGL.gl">
      <summary>
            Wrapper class  with all OpenGL methods and definitions.
            </summary>
    </member>
  </members>
</doc>