<?xml version="1.0"?>
<doc>
  <assembly>
    <name>devDept.Eyeshot.Control.Wpf.v2022</name>
  </assembly>
  <members>
    <member name="T:devDept.Eyeshot.BlockKeyedCollection">
      <summary>
            Blocks collection.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection.#ctor">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection.#ctor(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Block})">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection.Clear">
      <summary>
            Clears this collection.
            </summary>
      <remarks>        
            When the collection is linked to an Workspace the "Default" root block is added.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection.Clear(System.Boolean)">
      <summary>
            Clears this collection.
            </summary>
      <param name="addRootBlock">When true the collection is initialized with the "Default" root block.</param>
      <remarks>        
            When the collection is linked to a Workspace the root block is always added.
            </remarks>
    </member>
    <member name="T:devDept.Eyeshot.BlockKeyedCollection`1">
      <summary>
            Blocks generic collection.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.BlockKeyedCollection`1.RootBlockName">
      <summary>
            Gets the name of the root block.
            </summary>
      <remarks>If the string is null or empty, the collection doesn't have a root block specified.</remarks>
      <seealso cref="!:BlockKeyedCollection.SetRootBlock" />
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection`1.SetRootBlock(System.String)">
      <summary>
            Set the root block.
            </summary>
      <param name="key">The block name.</param>
      <remarks>The root block must be set to assign the collection to an Workspace.
            If the collection is linked to an workspace, it's not possible to set a different root block.</remarks>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown if the collection is linked to an workspace.</exception>
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection`1.TakeOffline">
      <summary>
            Temporarily suspends automatic regeneration and integrity checks on <see cref="P:devDept.Eyeshot.Workspace.Blocks" />.
            </summary>
      <remarks>
        <para>This method is useful for take the collection in an "offline"
            state and speed up the editing/reorganization. To resume the standard behaviour
            call <see cref="M:devDept.Eyeshot.BlockKeyedCollection`1.BringOnline" />.</para>
        <para>Beware when the collection is "offline", it can lead to an
            inconsistent state and crash with methods like <see cref="M:devDept.Eyeshot.Workspace.ZoomFit" />, <see cref="M:devDept.Eyeshot.Workspace.Invalidate" />, etc.</para>
      </remarks>
      <seealso cref="M:devDept.Eyeshot.BlockKeyedCollection`1.BringOnline" />
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection`1.BringOnline">
      <summary>
            Resume automatic regeneration and integrity checks on <see cref="P:devDept.Eyeshot.Workspace.Blocks" /> collection.
            It also processes all items that need it.
            </summary>
      <seealso cref="M:devDept.Eyeshot.BlockKeyedCollection`1.TakeOffline" />
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection`1.GetKeyForItem(`0)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection`1.#ctor">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection`1.#ctor(System.StringComparer)">
      <summary>Initializes a new instance of the <see cref="T:devDept.Eyeshot.BlockKeyedCollection" /> class that uses the specified equality comparer.</summary>
      <param name="comparer">The implementation of the IEqualityComparer generic interface to use when comparing keys, or null to use the default equality comparer.</param>
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:devDept.Eyeshot.BlockKeyedCollection" /> class from another <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</summary>
      <param name="collection">The base collection.</param>
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection`1.InsertItem(System.Int32,`0)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection`1.Add(System.String,`0)">
      <summary>
            Assigns the name to the block then adds it to the collection.
            </summary>
      <param name="name">The name that will override the block name</param>
      <param name="block">The block</param>
      <seealso cref="T:devDept.Eyeshot.Block" />
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection`1.AreEntitiesWith(System.String,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection`1.ChangeEntitiesRegenMode(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.Entity},System.String)">
      <ineheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.BlockKeyedCollection`1.RemoveItem(System.Int32)">
      <summary>
            Removes the first occurrence of a specific block from this collection.
            </summary>
      <param name="name">The object name to remove from this collection</param>
      <returns>True if block is successfully removed; otherwise, false. This method also
            returns false if block was not found in this collection.</returns>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when a related blockreference is set as current or a related block is open.</exception>
    </member>
    <member name="P:devDept.Eyeshot.TurboSettings.MaxComplexity">
      <summary>
            Gets or sets the number of objects beyond which fast Turbo kicks-in.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.TurboSettings.OperatingMode">
      <summary>
            Gets or sets the secondary representation build mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.TurboSettings.Enabled">
      <summary>
            Returns true when Turbo is active: scene complexity &gt; <see cref="P:devDept.Eyeshot.TurboSettings.MaxComplexity" /></summary>
    </member>
    <member name="P:devDept.Eyeshot.TurboSettings.DetailedDrawingDelay">
      <summary>
            Gets or sets the time, in milliseconds, before to start the last frame detailed drawing after a mouse action (e.g. Zoom, Pan, Rotate, Resize) during Turbo mode.
            </summary>
      <remarks> Set 0 to disable(Default is 1000ms).</remarks>
    </member>
    <member name="P:devDept.Eyeshot.TurboSettings.Lag">
      <summary>
            Gets the (last) regeneration time in milliseconds.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.operatingType">
      <summary>
            Secondary representation operating type definition.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.operatingType.Geometry">
      <summary>
            Wireframe and polygons
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.operatingType.GeometryAndEdges">
      <summary>
            Wireframe, polygons and edges (default).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.operatingType.Edges">
      <summary>
            Wireframe and edges
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.operatingType.Boxes">
      <summary>
            Super-fast, mostly for debugging purpose.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.EntityList">
      <summary>
            Entity collection.
            </summary>
      <remarks>When overriding a method of this class, never forget to call its base class implementation.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.#ctor">
      <summary>
            Special constructor, can be used when annotation entities (<see cref="T:devDept.Eyeshot.Entities.Text" />, <see cref="T:devDept.Eyeshot.Entities.Dimension" />, etc.) are not involved.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Remove(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Removes the first occurrence of a specific entity from this collection.
            </summary>
      <param name="entity">The object to remove from this collection</param>
      <returns>True if entity is successfully removed; otherwise, false. This method also
            returns false if entity was not found in this collection.</returns>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.RemoveAt(System.Int32)">
      <summary>
            Removes the entity at the specified index of this collection.
            </summary>
      <param name="index">The zero-based index of the entity to remove</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> from this collection.
            </summary>
      <param name="index">The zero-based starting index of the range of <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> to remove</param>
      <param name="count">The number of <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> to remove</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.RemoveAll(System.Predicate{devDept.Eyeshot.Entities.Entity})">
      <summary>Removes all the entities that match the conditions defined by the specified predicate.</summary>
      <param name="match">The predicate delegate that defines the conditions of the entities to remove.</param>
      <returns>The number of entities removed from this collection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Insert(System.Double,System.Double,System.Double,System.String,System.Double)">
      <summary>
            Insert a block into current 3D scene.
            </summary>
      <param name="x">Insertion point's X coordinates</param>
      <param name="y">Insertion point's Y coordinates</param>
      <param name="z">Insertion point's Z coordinates</param>
      <param name="blockName">The name of the block to be inserted</param>
      <param name="angleInRadians">Angle of insertion for the block</param>
      <returns>See <see cref="T:devDept.Eyeshot.Entities.BlockReference" /> constructors for more options.</returns>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Clear">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)">
      <summary>
            Regens and compiles <b>only</b> entities that need it. 
            Each entity is automatically regenerated and compiled when added to the <see cref="P:devDept.Eyeshot.Workspace.Blocks" /> or <see cref="P:devDept.Eyeshot.Block.Entities" /> collection.
            You need to call this function only when you change/transform an entity <b>already</b> in these collections. 
            </summary>
      <param name="ro">Asynchronous regeneration options</param>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.RegenMode" />
    </member>
    <member name="M:devDept.Eyeshot.EntityList.RegenAllCurved(devDept.Eyeshot.RegenOptions)">
      <summary>
            Regens all curved entities (<see cref="T:devDept.Eyeshot.Entities.Circle" />, <see cref="T:devDept.Eyeshot.Entities.Arc" />, <see cref="T:devDept.Eyeshot.Entities.Ellipse" />, <see cref="T:devDept.Eyeshot.Entities.EllipticalArc" />, <see cref="T:devDept.Eyeshot.Entities.Curve" />, <see cref="T:devDept.Eyeshot.Entities.Surface" />) to uniformize the visual refinement.
            </summary>
      <param name="ro">Asynchronous regen options</param>
      <remarks>Block definitions are affected by this command.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.RegenAllCurved(System.Double,System.Double,devDept.Eyeshot.RegenOptions)">
      <summary>
            Regens all curved entities (<see cref="T:devDept.Eyeshot.Entities.Circle" />, <see cref="T:devDept.Eyeshot.Entities.Arc" />, <see cref="T:devDept.Eyeshot.Entities.Ellipse" />, <see cref="T:devDept.Eyeshot.Entities.EllipticalArc" />, <see cref="T:devDept.Eyeshot.Entities.Curve" />, <see cref="T:devDept.Eyeshot.Entities.Surface" />) to uniformize the visual refinement.
            </summary>
      <param name="deviation">The maximum deviation</param>
      <param name="angle">The maximum angular deflection, ignored when zero.</param>
      <param name="ro">Asynchronous regen options</param>
      <remarks>Block definitions are affected by this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.EntityList.BoxMin">
      <summary>
            Gets the minimum 3D extent of the block.
            </summary>
      <seealso cref="M:devDept.Eyeshot.EntityList.UpdateBoundingBox" />
      <seealso cref="P:devDept.Eyeshot.EntityList.BoxMax" />
    </member>
    <member name="P:devDept.Eyeshot.EntityList.BoxMax">
      <summary>
            Gets the maximum 3D extent of the block.
            </summary>
      <seealso cref="M:devDept.Eyeshot.EntityList.UpdateBoundingBox" />
      <seealso cref="P:devDept.Eyeshot.EntityList.BoxMin" />
    </member>
    <member name="P:devDept.Eyeshot.EntityList.BoxSize">
      <summary>
            Gets the 3D extent of the block.
            </summary>
      <seealso cref="M:devDept.Eyeshot.EntityList.UpdateBoundingBox" />
      <seealso cref="P:devDept.Eyeshot.EntityList.BoxMin" />
      <seealso cref="P:devDept.Eyeshot.EntityList.BoxMax" />
    </member>
    <member name="P:devDept.Eyeshot.EntityList.MaxCandidates">
      <summary>
            Accurate transparency. This parameter affects transparency pre-processing and redrawing speed. 
            Valid values are between 1 and the total number of semi-transparent triangles.
            The lower is this value the lower will be the time need for pre-processing, penalizing redrawing speed.
            Higher values normally improve the FPS rate.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.EntityList.FrontFacingOnly">
      <summary>
            Accurate transparency. If true, skips back facing semi-tranparent triangles drawing, increasing the FPS rate. 
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.UpdateBoundingBox">
      <summary>
            Computes the entities bounding box.
            </summary>
      <remarks>
            To update the scene bounding box use <see cref="M:devDept.Eyeshot.Workspace.UpdateBoundingBox">Workspace.UpdateBoundingBox</see>.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.EntityList.BoxMin" />
      <seealso cref="P:devDept.Eyeshot.EntityList.BoxMax" />
      <seealso cref="P:devDept.Eyeshot.EntityList.BoxSize" />
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Add(devDept.Eyeshot.Entities.Entity,System.Int32)">
      <summary>
            Adds one <see cref="T:devDept.Eyeshot.Entities.Entity" /> at the end of this collection using the specified layer.
            </summary>
      <param name="entity">The entity to be added</param>
      <param name="layerIndex">The destination layer index</param>
      <remarks>This method can be used only if the collection belong to a <see cref="T:devDept.Eyeshot.Workspace" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Add(devDept.Eyeshot.Entities.Entity,System.String)">
      <summary>
            Adds one <see cref="T:devDept.Eyeshot.Entities.Entity" /> at the end of this collection using the specified the layer.
            </summary>
      <param name="entity">The entity to be added</param>
      <param name="layerName">The destination layer name</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Add(devDept.Eyeshot.Entities.Entity,System.Int32,System.Drawing.Color)">
      <summary>
            Adds one <see cref="T:devDept.Eyeshot.Entities.Entity" /> at the end of this collection using the specified layer and color.
            </summary>
      <param name="entity">The entity to be added.</param>
      <param name="layerIndex">The destination layer index</param>
      <param name="color">The entity color</param>
      <remarks>This method can be used only if the collection belong to a <see cref="T:devDept.Eyeshot.Workspace" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Add(devDept.Eyeshot.Entities.Entity,System.String,System.Drawing.Color)">
      <summary>
            Adds one <see cref="T:devDept.Eyeshot.Entities.Entity" /> at the end of this collection using the specified layer and color.
            </summary>
      <param name="entity">The entity to be added.</param>
      <param name="layerName">The destination layer name</param>
      <param name="color">The entity color</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Add(devDept.Eyeshot.Entities.Entity,System.Drawing.Color)">
      <summary>
            Adds one <see cref="T:devDept.Eyeshot.Entities.Entity" /> at the end of this collection using the specified color.
            </summary>
      <param name="entity">The entity to be added.</param>
      <param name="color">The entity color</param>
      <remarks>The entity will be added to the "Default" layer or to the first one if missing.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Add(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Adds one <see cref="T:devDept.Eyeshot.Entities.Entity" /> at the end of this collection.
            </summary>
      <param name="entity">The entity to be added.</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.AddRange``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Adds the <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> of the specified collection to the end of this collection using the specified layer.
            </summary>
      <param name="collection">The collection whose entities should be added to the end of this collection.</param>
      <param name="layerIndex">The destination layer index</param>
      <remarks>This method can be used only if the collection belong to a <see cref="T:devDept.Eyeshot.Workspace" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.AddRange``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Drawing.Color)">
      <summary>
            Adds the <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> of the specified collection to the end of this collection using the specified layer and color.
            </summary>
      <param name="collection">The collection whose entities should be added to the end of this collection.</param>
      <param name="layerIndex">The destination layer index</param>
      <param name="color">The color assigned to the entities of the collection</param>
      <remarks>This method can be used only if the collection belong to a <see cref="T:devDept.Eyeshot.Workspace" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.AddRange``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary>
            Adds the <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> of the specified collection to the end of this collection using the specified layer.
            </summary>
      <param name="collection">The collection whose entities should be added to the end of this collection.</param>
      <param name="layerName">The destination layer name</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.AddRange``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Drawing.Color)">
      <summary>
            Adds the <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> of the specified collection to the end of this collection using the specified layer.
            </summary>
      <param name="collection">The collection whose entities should be added to the end of this collection.</param>
      <param name="layerName">The destination layer name</param>
      <param name="color">The color assigned to the entities of the collection</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.AddRange``1(System.Collections.Generic.IEnumerable{``0},System.Drawing.Color)">
      <summary>
            Adds the <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> of the specified collection to the end of this collection using the specified layer.
            </summary>
      <param name="collection">The collection whose entities should be added to the end of this collection.</param>
      <param name="color">The color assigned to the entities of the collection</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.CopySelection">
      <summary>
            Copies selected entities into the clipboard.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.CutSelection">
      <summary>
            Cut selected entities into the clipboard.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Paste">
      <summary>
            Pastes copied entities from the clipboard.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Translate(devDept.Geometry.Vector3D)">
      <summary>
            Translates all the entities in the collection.
            </summary>
      <remarks>
            You need to call <see cref="!:Regen()" /> to see the effect of this command.
            </remarks>
      <param name="dv">Amount</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Translate(System.Double,System.Double,System.Double)">
      <summary>
            Translates all the entities in this collection.
            </summary>
      <remarks>
            You need to call <see cref="!:Regen()" /> to see the effect of this command.
            </remarks>
      <param name="dx">Amount in X</param>
      <param name="dy">Amount in Y</param>
      <param name="dz">Amount in Z</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Rotate(System.Double,devDept.Geometry.Vector3D)">
      <summary>
            Rotates all the entities in this collection around an arbitray axis by the specified angle.
            </summary>
      <remarks>
            You need to call <see cref="!:Regen()" /> to see the effect of this command.
            </remarks>
      <param name="angleInRadians">The angle in radians</param>
      <param name="axis">The rotation axis</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Rotate(System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
            Rotates all the entities in this collection around an arbitrary axis by the specified angle.
            </summary>
      <remarks>
            You need to call <see cref="!:Regen()" /> to see the effect of this command.
            </remarks>
      <param name="angleInRadians">The angle in radians</param>
      <param name="axis">The rotation axis' direction</param>
      <param name="center">The rotation axis' origin</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Rotate(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Rotates all the entities in this collection around an arbitrary axis by the specified angle.
            </summary>
      <remarks>
            You need to call <see cref="!:Regen()" /> to see the effect of this command.
            </remarks>
      <param name="angleInRadians">The angle in radians</param>
      <param name="axisStart">The rotation axis' start point</param>
      <param name="axisEnd">The rotation axis' end point</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Scale(devDept.Geometry.Point3D,System.Double)">
      <summary>
            Scales all the entities in this collection of the specified scale factor.
            </summary>
      <remarks>
            You need to call <see cref="!:Regen()" /> to see the effect of this command.
            </remarks>
      <param name="fixedPoint">Base point</param>
      <param name="factor">Scale factor</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Scale(devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
      <summary>
            Scales all the entities in this collection of the specified scale factor.
            </summary>
      <remarks>
            You need to call <see cref="!:Regen()" /> to see the effect of this command.
            </remarks>
      <param name="fixedPoint">Base point</param>
      <param name="sx">Scale factor along X-axis</param>
      <param name="sy">Scale factor along Y-axis</param>
      <param name="sz">Scale factor along Z-axis</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Scale(System.Double,System.Double,System.Double)">
      <summary>
            Scales all the entities in this collection of the specified scale factor.
            </summary>
      <remarks>
            You need to call <see cref="!:Regen()" /> to see the effect of this command.
            </remarks>
      <param name="sx">Scale factor along X-axis</param>
      <param name="sy">Scale factor along Y-axis</param>
      <param name="sz">Scale factor along Z-axis</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Scale(System.Double)">
      <summary>
            Scales all the entities in this collection of the specified scale factor.
            </summary>
      <remarks>
            You need to call <see cref="!:Regen()" /> to see the effect of this command.
            </remarks>
      <param name="factor">Scale factor</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Scale(devDept.Geometry.Vector3D)">
      <summary>
            Scales all the entities in this collection of the specified scale factor.
            </summary>
      <remarks>
            You need to call <see cref="!:Regen()" /> to see the effect of this command.
            </remarks>
      <param name="sv">Scale vector</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.ClearSelection">
      <summary>
            Clears selection.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.SelectAll">
      <summary>
            Selects all selectable and visible entities.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.Selectable" />
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.Visible" />
      <seealso cref="P:devDept.Eyeshot.Layer.Visible" />
    </member>
    <member name="M:devDept.Eyeshot.EntityList.InvertSelection">
      <summary>
            Inverts selection.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.Selectable" />
    </member>
    <member name="M:devDept.Eyeshot.EntityList.DeleteSelected">
      <summary>
            Delete selected Entities.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.GetStats">
      <summary>
            Get the statistics.
            </summary>
      <returns>The dictionary with the count of each entity's type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.GetStats(devDept.Eyeshot.BlockKeyedCollection,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
            Get the statistics.
            </summary>
      <param name="blocks">The blocks to process.</param>
      <param name="entitiesCount">The count of all the entities.</param>
      <param name="verticesCount">The count of all the vertices.</param>
      <param name="trianglesCount">The count of all the triangles.</param>
      <returns>The dictionary with the count of each entity's type.</returns>
      <remarks>The entities inside the blocks are processed only for the counting of vertices and triangles.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.GetStats(devDept.Eyeshot.BlockKeyedCollection,System.Boolean,System.Boolean)">
      <summary>
            Get the statistics.
            </summary>
      <param name="blocks">The blocks to process. It can be null if showTotals is false.&gt;</param>
      <param name="showTotals">When true it shows also the total's count, otherwise no.</param>
      <param name="showBlocksDetails">When true it shows also the detail of the entities contained into each block.</param>
      <returns>The string with the count of each entity's type.</returns>
      <remarks>The entities inside the blocks are processed only for the counting of vertices and triangles.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.GetStats(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Get the statistics.
            </summary>
      <param name="showTotals">When true it shows also the total's count, otherwise no.</param>
      <param name="showBlocksDetails">When true it shows also the detail of the entities contained into each block.</param>
      <param name="showCollectionsItems">When true it shows also the list of the master collections items.</param>
      <returns>The string with the count of each entity's type.</returns>
      <remarks>The entities inside the blocks are processed only for the counting of vertices and triangles.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Explode(devDept.Eyeshot.Entities.BlockReference,System.Boolean,System.Boolean)">
      <summary>
            Returns the block reference individual entity list.
            </summary>
      <param name="br">The block reference</param>
      <param name="resolveByParent">If true, the <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /><see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod" /> and <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeightMethod" /> are resolved propagating the BlockReference properties</param>
      <param name="keepTessellation">When true, the tessellation of the original entity is preserved.</param>
      <returns>An array of entities.</returns>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.Explode(System.Boolean)">
      <summary>
            Recursively explodes all BlockReference objects and clears the collection.
            </summary>
      <remarks>
        <see cref="P:devDept.Eyeshot.Workspace.Blocks" /> dictionary is not automatically cleared.</remarks>
      <returns>The list of individual entities.</returns>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.ConvertToLinearPaths(devDept.Eyeshot.Entities.Text,System.Double)">
      <summary>
            Converts the text outlines to LinearPath.
            </summary>
      <param name="text">The text object to convert</param>
      <param name="deviation">The font contour chordal error</param>
      <returns>The array of LinearPaths</returns>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.ConvertToLinearPaths(devDept.Eyeshot.Entities.Text,System.Double,devDept.Eyeshot.Entities.LinearPath[]@,devDept.Eyeshot.Entities.LinearPath[][]@)">
      <summary>
            Converts the text outlines to LinearPath, separating outer and inner loops.
            </summary>
      <param name="text">The text object to convert</param>
      <param name="deviation">The font chordal error</param>
      <param name="outers">The outer loops</param>
      <param name="inners">The inner loops belonging to each outer loops</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.ReplaceBlockNames(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.BlockKeyedCollection@)">
      <summary>
            Replaces the block names in the BlockReference and Block objects found in the given entities and blocks with the ones specified by the mapping.
            </summary>
      <param name="blockNamesMapping">The dictionary that maps the old block name to the new one</param>
      <param name="entities">The entities to process</param>
      <param name="blocks">The blocks to process</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.ReplaceBlockNames``1(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.BlockKeyedCollection@)">
      <summary>
            Replaces the block names in the BlockReference and Block objects found in the given entities and blocks with the ones specified by the mapping.
            </summary>
      <param name="blockNamesMapping">The dictionary that maps the old block name to the new one</param>
      <param name="entities">The entities to process</param>
      <param name="blocks">The blocks to process</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.AdjustBlockReferenceBlockNames(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
      <summary>
            Updates the BlockReferences block names according to the specified mapping.
            </summary>
      <param name="blockNamesMapping">The mapping of the old and new block names</param>
      <param name="entities">The collection of entities to update</param>
    </member>
    <member name="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)">
      <summary>
            Synchronizes <see cref="T:devDept.Eyeshot.AttributeReference" /> entities of the <see cref="T:devDept.Eyeshot.Entities.BlockReference" /> referring to the <paramref name="blockName" /> block with the data of its <see cref="T:devDept.Eyeshot.Entities.Attribute" /> entities.
            </summary>
      <param name="blockName">The name of the block containing the Attributes to synchronize</param>
      <seealso cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.Collections.Generic.IList{devDept.Eyeshot.Entities.BlockReference})" />
    </member>
    <member name="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.Collections.Generic.IList{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Synchronizes <see cref="T:devDept.Eyeshot.AttributeReference" /> entities of the given <see cref="T:devDept.Eyeshot.Entities.BlockReference" /> entities with the data of the <see cref="T:devDept.Eyeshot.Entities.Attribute" /> entities contained in their referenced blocks.
            </summary>
      <param name="blockReferences">The collection of <see cref="T:devDept.Eyeshot.Entities.BlockReference" /> entities to synchronize</param>
      <seealso cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)" />
    </member>
    <member name="M:devDept.Eyeshot.EntityList.WriteCSharp(System.String)">
      <summary>
            Experimental feature to write curves in C# programming language to a text file.
            </summary>
      <param name="fileName">The file name</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Entity">
      <summary>
            Base class for all Eyeshot entities.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.SelectedInternal">
      <summary>
            Tells if the entity has internal parts selected
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.IsAnyInstanceSelected">
      <summary>
            Tells if there is at least an instance selected.
            </summary>
      <returns>True if there is at least an instance selected.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.SetSelection(System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Sets the entity selection status.
            </summary>
      <param name="status">The selection status</param>
      <param name="parents">The parents stack that define a nested instance</param>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.Selected" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.GetSelection(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Gets the entity selection status.
            </summary>
      <param name="parents">The parents stack that define a nested instance</param>
      <returns>True if the entity is selected</returns>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.Selected" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.ClearSelectionForAllInstances">
      <summary>
            Clears the selection status for all instances.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.IsSelected(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Tells if the instance referred by the stack of parents is selected.
            </summary>
      <param name="parents">The parents stack that identifies the component instance</param>
      <returns>True if the instance is selected, false otherwise</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.Selected">
      <summary>
            Gets or sets the entity selection status.
            </summary>
      <remarks>It's equivalent to call <see cref="M:devDept.Eyeshot.Entities.Entity.GetSelection(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})" /> or <see cref="M:devDept.Eyeshot.Entities.Entity.SetSelection(System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})" /> with no parents.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.GetSelection(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})" />
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.SetSelection(System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.IsAnyInstanceVisible">
      <summary>
            Tells if there is at least an instance visible.
            </summary>
      <returns>True if there is at least an instance visible.</returns>
    </member>
    <member name="E:devDept.Eyeshot.Entities.Entity.VisibleChanged">
      <summary>
            Occurs when the <see cref="P:devDept.Eyeshot.Entities.Entity.Visible" /> changes.
            </summary>
      <seealso cref="E:devDept.Eyeshot.INotifyVisibleChanged.VisibleChanged" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.SetVisibility(System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Sets the entity visibility status.
            </summary>
      <remarks>
        <para>To change the status of a single instance use a full stack of parents starting from the root level.
            To change the status of all specified instances of the entity inside a given block use a partial stack of parents starting from the block level.</para>
        <para>The parents stack is not cloned, it's stored in the entity and used to check the visibility.</para>
      </remarks>
      <param name="status">The visibility status</param>
      <param name="parents">The parents stack, stored in the entity, that define a nested instance</param>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.Visible" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.GetVisibility(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Gets the entity visibility status.
            </summary>
      <remarks>If the visibility for the given parents stack has not been set, returns the <see cref="P:devDept.Eyeshot.Entities.Entity.Visible" /> value.</remarks>
      <param name="parents">The parents stack that define a nested instance</param>
      <returns>True if the entity is visible</returns>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.Visible" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.IsVisibleAndInFrustum(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.attributeReferenceVisibilityType)">
      <summary>
            Check if the entity is visible.
            </summary>
      <param name="parents">The parents stack</param>
      <param name="layers">The layers collection</param>
      <param name="attributeReferenceMode">The AttributeReference visibility mode</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.IsVisible(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.attributeReferenceVisibilityType)">
      <summary>
            Check if the entity is visible.
            </summary>
      <param name="parents">The parents visibility stack</param>
      <param name="layers">The layer collection</param>
      <param name="attributeReferenceMode">The AttributeReference mode</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.ClearVisibility(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Clear the entity visibility status for the defined nested instance.
            </summary>
      <param name="parents">The parents stack that define a nested instance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.ClearVisibilityForAllInstances">
      <summary>
            Clears the visibility status for all instances.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.Visible">
      <summary>
            Gets or sets the entity visibility status for the top-level.
            </summary>
      <remarks>
        <para>When the visibility of an entity changes, it's important to call <see cref="M:devDept.Eyeshot.Workspace.UpdateBoundingBox" /> to properly update the visualization.</para>
        <para>To gets or sets the visibility status of the instances inside nested BlockReferences use <see cref="M:devDept.Eyeshot.Entities.Entity.GetVisibility(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})" /> and <see cref="M:devDept.Eyeshot.Entities.Entity.SetVisibility(System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})" />.</para>
      </remarks>
      <seealso cref="M:devDept.Eyeshot.EntityList.UpdateBoundingBox" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.IsAnyInstanceSelectable">
      <summary>
            Tells if there is at least an instance selectable.
            </summary>
      <returns>True if there is at least an instance selectable.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.SetSelectability(System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Sets the entity selectability status.
            </summary>
      <param name="status">The selectability status</param>
      <param name="parents">The parents stack, stored in the entity, that define a nested instance</param>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.Selectable" />
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateVisibleSelection" />
      <remarks>To change the status of a single instance use a full stack of parents starting from the root level.</remarks>
      <remarks>To change the status of all specified instances of the entity inside a given block use a partial stack of parents starting from the block level.</remarks>
      <remarks>The parents stack is not cloned, it's stored in the entity and used to check the selectability.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.GetSelectability(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Gets the entity selectability status.
            </summary>
      <param name="parents">The parents stack that define a nested instance</param>
      <returns>True if the entity is selectable</returns>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.Selectable" />
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateVisibleSelection" />
      <remarks>If the selectability for the given parents stack has not been set, returns the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> value.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.ClearSelectability(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Clear the entity selectability status for the defined nested instance.
            </summary>
      <param name="parents">The parents stack that define a nested instance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.ClearSelectabilityForAllInstances">
      <summary>
            Clears the selectability status for all instances.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.Selectable">
      <summary>
            Gets or sets the value that tells if the top-level item can be selected.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateVisibleSelection" />
      <remarks>To gets or sets the selectable status of the instances inside nested BlockReferences use <see cref="M:devDept.Eyeshot.Entities.Entity.GetSelectability(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})" /> and <see cref="M:devDept.Eyeshot.Entities.Entity.SetSelectability(System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.CreateEntitiesFromPrimitives``1(System.Collections.Generic.IEnumerable{devDept.Geometry.Entities.GEntity})">
      <summary>
            Creates a new array of <see cref="T:devDept.Eyeshot.Entities.Entity" /> instances starting from the related primitives.
            </summary>
      <param name="primitives">The primitives collection.</param>
      <returns>The new array created.</returns>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.CreateEntityFromPrimitive(devDept.Geometry.Entities.GEntity)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.CreateEntitiesFromPrimitives(System.Collections.Generic.IEnumerable{devDept.Geometry.Entities.IGCurve})">
      <summary>
            Creates a new array of <see cref="T:devDept.Eyeshot.Entities.ICurve" /> instances starting from the related primitives.
            </summary>
      <param name="primitives">The primitives collection.</param>
      <returns>The new array created.</returns>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.CreateEntityFromPrimitive(devDept.Geometry.Entities.GEntity)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.GetPrimitivesFromEntities``1(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.Entity})">
      <summary>
            Gets the primitives related to an entity's collection.
            </summary>
      <param name="entities">The entities for which you need the related primitives.</param>
      <returns>The primitives related to the entities.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.GetPrimitivesFromEntities(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.ICurve})">
      <summary>
            Gets the primitives related to an ICurve's collection.
            </summary>
      <param name="iCurves">The <see cref="T:devDept.Eyeshot.Entities.ICurve" />s for which you need the related primitives.</param>
      <returns>The primitives related to the ICurves.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.GetPrimitiveFromEntity(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Gets the primitive related to an Entity.
            </summary>
      <param name="ent">The <see cref="T:devDept.Eyeshot.Entities.Entity" /> for which you need the related primitive.</param>
      <returns>The primitive related to the Entity object. Null/Nothing if the <paramref name="ent" /> does not support a primitive object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.GetPrimitiveFromEntity(devDept.Eyeshot.Entities.ICurve)">
      <summary>
            Gets the primitive related to an ICurve object.
            </summary>
      <param name="iCurve">The <see cref="T:devDept.Eyeshot.Entities.ICurve" /> for which you need the related primitive.</param>
      <returns>The primitive related to the ICurve object. Null/Nothing if the <paramref name="iCurve" /> does not support a primitive object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.CreateEntityFromPrimitive(devDept.Geometry.Entities.GEntity)">
      <summary>
            Creates a new entity instance starting from the related primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
      <returns>The entity created. Null/Nothing if the <paramref name="primitive" /> type is not related to any entity object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.entityNature">
      <summary>
            Gets or sets the nature of the entity.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.LayerName">
      <summary>
            Gets or sets the name of the referenced <see cref="T:devDept.Eyeshot.Layer" />.
            </summary>
      <remarks>
            When the layer of an <see cref="T:devDept.Eyeshot.Entities.ICurve" /> already added to the <see cref="T:devDept.Eyeshot.Workspace" /> is changed, the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called
            if the <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod" /> is <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byLayer" />.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.AutodeskProperties">
      <summary>
            Gets or sets the Autodesk common properties. 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.GroupIndex">
      <summary>
            Gets or sets the entity group index.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.PrintOrder">
      <summary>
            Gets or sets the entity printing order. Entities with a lower value are printed first. Default value is zero.
            </summary>
      <remarks>
        <para>Useful in case of overlapping objects to set which ones to print in front of the others.</para>
        <para>Only meaningful for leaf entities, this property is ignored on BlockReference.</para>
      </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.LineTypeName">
      <summary>
            Gets or sets the line type name of the <see cref="P:devDept.Eyeshot.Workspace.LineTypes" /> collection. In use only if the <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod" /> is byEntity.
            </summary>
      <remarks>When the line type of an entity already added to the <see cref="T:devDept.Eyeshot.Workspace" /> is changed the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Workspace.LineTypes" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.LineTypeScale">
      <summary>
            Gets or sets the line type scale.
            </summary>
      <remarks>When the line type of an entity already added to the <see cref="T:devDept.Eyeshot.Workspace" /> is changed the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Workspace.LineTypes" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod">
      <summary>
            Gets or sets the entity line type source.
            </summary>
      <remarks>You may need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see your changes.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.Color">
      <summary>
            Gets or sets the entity color.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" />
      <seealso cref="!:Workspace.DisplayMode" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.ColorMethod">
      <summary>
            Gets or sets the entity color source.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" />
      <seealso cref="!:Workspace.DisplayMode" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.MaterialName">
      <summary>
            Gets or sets the entity material name.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" />
      <seealso cref="!:Workspace.DisplayMode" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.LineWeightMethod">
      <summary>
            Gets or sets the entity line weight source.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.LineWeight">
      <summary>
            Gets or sets the entity line weight.
            </summary>
      <remarks>This value corresponds to pixels when drawing on screen and to mm when exporting to vectorial formats.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.EntityData">
      <summary>
            Gets or sets the entity custom data.
            </summary>
      <remarks>
        <para>If the type implements ICloneable it will be cloned when the Entity is cloned.</para>
        <para>If the entity has got the Primitive property, this property is shared with the <see cref="P:devDept.Geometry.Entities.GEntity.EntityData" /> one.</para>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.InitGraphicsData">
      <summary>
            Initialize the graphics data.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Entity.drawData">
      <summary>
            Default graphics data.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Entity.drawPattern">
      <summary>
            Graphics data for line pattern.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.RegenMode">
      <summary>
            Gets or sets the entity regeneration mode.
            </summary>
      <seealso cref="!:EntityList.Regen()" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.#ctor(System.Drawing.Color,devDept.Eyeshot.Entities.entityNatureType)">
      <summary>
            Color and nature constructor.
            </summary>
      <param name="color">A <see cref="P:devDept.Eyeshot.Entities.Entity.Color" /> structure that indicates the color of this entity.</param>
      <param name="nature">The entity nature</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.#ctor(devDept.Eyeshot.Entities.entityNatureType)">
      <summary>
            Nature only constructor.
            </summary>
      <param name="nature">The entity nature</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Dispose">
      <summary>
            Cleans up graphics resources, like display lists, textures, etc.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.CopyAttributes(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Copies the following attributes to this entity: <see cref="P:devDept.Eyeshot.Entities.Entity.Color" />, <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" />, <see cref="P:devDept.Eyeshot.Entities.Entity.GroupIndex" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeName" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeScale" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeight" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeightMethod" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LayerName" /> and <see cref="P:devDept.Eyeshot.Entities.Entity.MaterialName" />.
            </summary>
      <param name="source">The source entity</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.CopyAttributesFast(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Copies the following attributes to this entity: <see cref="P:devDept.Eyeshot.Entities.Entity.Visible" />, <see cref="P:devDept.Eyeshot.Entities.Entity.Color" />, <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LayerName" /> and <see cref="P:devDept.Eyeshot.Entities.Entity.MaterialName" /> attributes.
            </summary>
      <param name="source">The source entity</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.IsSmall(devDept.Eyeshot.IsSmallParams)">
      <summary>
            Checks if an entity is small and can be skipped during the drawing.
            </summary>
      <param name="data">The data</param>
      <returns>True, if the entity is small classified as small.</returns>
      <seealso cref="P:devDept.Eyeshot.Viewport.SmallSizeRatioMoving" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.IsInFrustum(devDept.Eyeshot.FrustumParams)">
      <summary>
            Tells if the entity is inside the frustum planes.
            </summary>
      <param name="data">The parameters data</param>
      <returns>True if the entity is inside the frustum</returns>
      <remarks>The frustum planes can be obtained with <see cref="M:devDept.Eyeshot.Viewport.GetCameraFrustum" /></remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.IsInFrustum(devDept.Eyeshot.FrustumParams,devDept.Geometry.Point3D,System.Double)">
      <summary>
            Tells if the sphere surrounding the entity is inside the frustum planes.
            </summary>
      <param name="data">The frustum data</param>
      <param name="center">Center of the sphere (transformed by the scene transformation)</param>
      <param name="radius">Radius of the sphere (scaled by the maximum scale applied by the scene transformation)</param>
      <returns>True if the sphere is inside the frustum planes.</returns>
      <remarks>It's important when applying an on-the-fly transformation in the <see cref="M:devDept.Eyeshot.Entities.BlockReference.MoveTo(devDept.Eyeshot.DrawParams)" /> to override this method and 
            call the base method with the <paramref name="center" /> transformed in the same way, in order to avoid undesired clipping.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.BlockReference.MoveTo(devDept.Eyeshot.DrawParams)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.IsCrossingScreenPolygon(devDept.Eyeshot.ScreenPolygonParams)">
      <summary>
            Tells if an entity is fully or partially contained inside a polygon defined in screen coordinates. 
            </summary>
      <param name="data">Screen polygon data</param>
      <returns>True if at least one of the vertices of the entity is contained in the screen polygon.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.EvaluateIntersectTriangles(devDept.Eyeshot.FrustumParams)">
      <summary>
            Tells if must evaluate the intersection of the triangles with the frustum.
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.EvaluateIntersectEdges(devDept.Eyeshot.FrustumParams)">
      <summary>
            Tells if must evaluate the intersection of the edges with the frustum.
            </summary>
      <param name="data">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.AllVerticesInScreenPolygon(devDept.Eyeshot.ScreenPolygonParams)">
      <summary>
            Tells if an entity is fully contained inside a polygon defined in screen coordinates. 
            </summary>
      <param name="data">Screen polygon data</param>
      <returns>True if all the vertices of the entity are contained in the screen polygon.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.Vertices">
      <summary>
            Gets or sets entity's 3D vertices.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.BoxMin">
      <summary>
            Gets the minimum 3D extent of the entity.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.UpdateBoundingBox(devDept.Eyeshot.TraversalParams)" />
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMax" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.BoxMax">
      <summary>
            Gets the maximum 3D extent of the entity.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.UpdateBoundingBox(devDept.Eyeshot.TraversalParams)" />
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMin" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.BoxSize">
      <summary>
            Gets the 3D extent of the entity.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.UpdateBoundingBox(devDept.Eyeshot.TraversalParams)" />
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMin" />
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMax" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.OrientedBounding">
      <summary>
            A bounding volume that can fit the entity in a different orientation than AABB. 
            It can be an OrientedBoundingBox or an OrientedBoundingRect(for planar entities).
            <see cref="M:devDept.Eyeshot.Entities.Entity.UpdateOrientedBoundingBox(devDept.Eyeshot.TraversalParams)" /></summary>
      <remarks>If the owner entity is transformed, its OrientedBounding (when already built) will follow its transformation.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.IsValid">
      <summary>
            Returns true if all the entity fields contain reasonable information.
            </summary>
      <returns>True if the entity is valid, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">
      <summary>
            Gives a chance to derived classes to change the entity position/rotation at each timer tick.
            </summary>
      <remarks>This method is executed in a background thread because the timer used to run animation is a <see cref="T:System.Threading.Timer">System.Threading.Timer</see></remarks>
      <seealso cref="M:devDept.Eyeshot.Design.StartAnimation(System.Int32)">StartAnimation Method (devDept.Eyeshot.Design)</seealso>
      <seealso cref="M:devDept.Eyeshot.Design.StopAnimation">StopAnimation Method (devDept.Eyeshot.Design)</seealso>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.UpdateBoundingBox(devDept.Eyeshot.TraversalParams)">
      <summary>
            Updates the entity's bounding box.
            </summary>
      <param name="data">Traversal data</param>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMin" />
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMax" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.UpdateOrientedBoundingBox(devDept.Eyeshot.TraversalParams)">
      <summary>
            Updates the entity's oriented bounding box or build it if not present.
            </summary>
      <remarks> It needs to call Regen() method first(except for Mesh, Solid, FastPointCloud, Joint, Bar and LinearPath). 
            If a transformation is applied to the entity after regen (except for non uniform scale transformation) the OBB is already update (if it's not null).</remarks>
      <param name="data">Traversal data</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.UpdateOrientedBoundingBox(devDept.Eyeshot.TraversalParams,System.Boolean)">
      <summary>
            Updates the entity's oriented bounding box or build it if not present.
            </summary>
      <remarks> It needs to call Regen() method first(except for Mesh, Solid, FastPointCloud, Joint, Bar and LinearPath). 
            If a transformation is applied to the entity after regen (except for non uniform scale transformation) the OBB is already update (if it's not null).</remarks>
      <param name="data">Traversal data</param>
      <param name="keepCurrent">When true, it avoid to overrides the current OBB if not needed</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.CombineBoundingBox(devDept.Geometry.Transformation,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Combines the entity's bounding box with the given bounding box.
            </summary>
      <param name="transform">The transformation applied to the entity</param>
      <param name="boxMin">The minimum point of the bounding box</param>
      <param name="boxMax">The maximum point of the bounding box.</param>
      <returns>True if successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.GetAllVertices(devDept.Eyeshot.TraversalParams,System.Collections.Generic.IList{System.Single}@)">
      <summary>
            Gets tessellation vertices as float coordinates of the entity.
            </summary>
      <param name="data">
      </param>
      <param name="verticesCoords">
      </param>
      <remarks>
            The output vertices coords are used to build ConvexHulls, when <see cref="P:devDept.Eyeshot.Design.ZoomFitMode" /> != <see cref="F:devDept.Eyeshot.zoomFitType.Standard" /></remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.ComputeBoundingBox(devDept.Eyeshot.TraversalParams,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Computes the entity's bounding box.
            </summary>
      <param name="data">Bounding box data</param>
      <param name="boxMin">The bounding box minimum point</param>
      <param name="boxMax">The bounding box maximum point</param>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMin" />
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMax" />
      <returns>True if the bounding box is valid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.ComputeBoundingBox(devDept.Eyeshot.TraversalParams,System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Computes the entity's bounding box.
            </summary>
      <param name="data">Bounding box data</param>
      <param name="entityVertices">The vertices to consider in the computation.</param>
      <param name="boxMin">The bounding box minmum point</param>
      <param name="boxMax">The bounding box maximum point</param>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMin" />
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.BoxMax" />
      <returns>True if the bounding box is valid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.EstimateBoundingBox(devDept.Eyeshot.BlockKeyedCollection,devDept.Eyeshot.LayerKeyedCollection)">
      <summary>
            Returns a small set of points that gives an idea of the entity bounding box.
            </summary>
      <param name="blocks">Blocks collection</param>
      <param name="layers">Layers collection</param>
      <returns>An array of 3D points.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.ComputeOffsetOnCameraAxes(devDept.Eyeshot.OffsetOnCameraAxesParams)">
      <summary>
            Computes the intersection of the lines passing from the vertices and oriented like the frustum planes with the X and Y axes of the camera.
            </summary>
      <param name="data">Camera offset data</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.ConvertToSurrogate">
      <summary>
            Converts the entity to its surrogate, for serialization purpose.
            </summary>
      <returns>The surrogate.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.IgnoreSubSelectionRegenData">
      <summary>
            When true, it doesn't force regeneration even if subselection metadata are missing.
            </summary>
      <remarks>
        <see cref="P:devDept.Eyeshot.Design.SelectionFilterMode" /> may not properly work on entities read from a proprietary file until an explicit <see cref="M:devDept.Eyeshot.Entities.Entity.Regen(devDept.Eyeshot.RegenParams)" /> has been performed.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Regen(devDept.Eyeshot.RegenParams)">
      <summary>
            This method is used for several purposes. For example in <see cref="T:devDept.Eyeshot.Entities.Arc">arcs</see> and <see cref="T:devDept.Eyeshot.Entities.Circle">circles</see>
            is used to generate the curve's linear approximation, in <see cref="T:devDept.Eyeshot.Entities.Mesh">meshes</see> to compute normals
            and edges and in <see cref="T:devDept.Eyeshot.Entities.Surface">Nurbs surfaces</see> to generate the triangulation.
            </summary>
      <param name="data">
      </param>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.Compile(devDept.Eyeshot.CompileParams)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Regen(System.Double)">
      <summary>
            Computes the curve or surface tessellation.
            </summary>
      <overloads>
            This overload can be used with entities that don't display texts and textures.
            </overloads>
      <param name="deviation">The maximum deviation</param>
      <remarks>Can't be called on BlockReference entities. Call one of the other overloads for BlockReference entities.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Compile(devDept.Eyeshot.CompileParams)">
      <summary>
            Compiles the graphic representation of this entity.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.Regen(System.Double)">Regen Method</seealso>
      <param name="data">The data needed for compilation</param>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.DrawEntity(devDept.Graphics.RenderContextBase,System.Object)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Clone">
      <summary>
            Creates a deep copy of this entity.
            </summary>
      <returns>The new entity object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.TransformBy(devDept.Geometry.Transformation)">
      <summary>
            Transforms all the entity's vertices by the specified transformation.
            </summary>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see the effect of this command.
            </remarks>
      <param name="transform">The transformation to be applied</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.ThroughTriangleQuad(devDept.Eyeshot.FrustumParams,System.Collections.Generic.IList{devDept.Geometry.Point3D})">
      <summary>
            Tells if the quad defined by the vertices is inside the selection area defined by the edge list.
            </summary>
      <param name="data">The frustum parameters</param>
      <param name="vertices">The vertices of the quad</param>
      <returns>True if the quad intersects the selection area</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.ThroughTriangleScreenPolygonQuad(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Eyeshot.ScreenPolygonParams)">
      <summary>
            Tells if the quad defined by the vertices is inside the selection area defined by the screen polygon.
            </summary>
      <param name="vertices">The vertices of the quad</param>
      <param name="data">The screen polygon parameters</param>
      <returns>True if the quad intersects the screen polygon</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.ThroughTriangleScreenPolygon(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Eyeshot.ScreenPolygonParams)">
      <summary>
            Checks whether a triangle intersects or is inside a 2D screen polygon.
            </summary>
      <param name="v1">The first triangle point</param>
      <param name="v2">The second triangle point</param>
      <param name="v3">The third triangle point</param>
      <param name="screenPolygon">The 2D screen polygon</param>
      <param name="modelViewProj">The modelview projection matrix</param>
      <param name="viewFrame">The viewport bounds</param>
      <param name="blocks">The blocks dictionary</param>
      <returns>True if the triangle intersects or is inside the polygon</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Translate(System.Double,System.Double,System.Double)">
      <summary>
            Translates the entity.
            </summary>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see the effect of this command.
            </remarks>
      <param name="dx">Amount in X</param>
      <param name="dy">Amount in Y</param>
      <param name="dz">Amount in Z</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Translate(devDept.Geometry.Vector3D)">
      <summary>
            Translates the entity.
            </summary>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see the effect of this command.
            </remarks>
      <param name="v">Displacement vector</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Rotate(System.Double,devDept.Geometry.Vector3D)">
      <summary>
            Rotates the entity around an arbitray axis by the specified angle.
            </summary>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see the effect of this command.
            </remarks>
      <param name="angleInRadians">The angle in radians</param>
      <param name="axis">The rotation axis</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Rotate(System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
            Rotates the entity around an arbitrary axis by the specified angle.
            </summary>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see the effect of this command.
            </remarks>
      <param name="angleInRadians">The angle in radians</param>
      <param name="axis">The rotation axis' direction</param>
      <param name="center">The rotation axis' origin</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Rotate(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Rotates the entity around an arbitray axis by the specified angle.
            </summary>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see the effect of this command.
            </remarks>
      <param name="angleInRadians">The angle in radians</param>
      <param name="axisStart">The rotation axis' start point</param>
      <param name="axisEnd">The rotation axis' end point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Scale(System.Double)">
      <summary>
            Scales the entity of the specified scale factor.
            </summary>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see the effect of this command.
            </remarks>
      <param name="factor">Scale factor</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Scale(devDept.Geometry.Point3D,System.Double)">
      <summary>
            Scales the entity of the specified scale factor.
            </summary>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see the effect of this command.
            </remarks>
      <param name="fixedPoint">Base point</param>
      <param name="factor">Scale factor</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Scale(devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
      <summary>
            Scales the entity of the specified scale factor.
            </summary>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see the effect of this command.
            </remarks>
      <param name="fixedPoint">Base point</param>
      <param name="sx">Scale factor along X-axis</param>
      <param name="sy">Scale factor along Y-axis</param>
      <param name="sz">Scale factor along Z-axis</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Scale(System.Double,System.Double,System.Double)">
      <summary>
            Scales the entity of the specified scale factor.
            </summary>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see the effect of this command.
            </remarks>
      <param name="sx">Scale factor along X-axis</param>
      <param name="sy">Scale factor along Y-axis</param>
      <param name="sz">Scale factor along Z-axis</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Scale(devDept.Geometry.Vector3D)">
      <summary>
            Scales the entity of the specified scale factor.
            </summary>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see the effect of this command.
            </remarks>
      <param name="sv">Scale vector</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawDirection(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws a small arrow to show the entity direction if <see cref="P:devDept.Eyeshot.Workspace.ShowCurveDirection" /> is true.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Dump(devDept.Geometry.linearUnitsType,devDept.Geometry.massUnitsType,devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.MaterialKeyedCollection,devDept.Eyeshot.BlockKeyedCollection)">
      <summary>
            Returns a description of this entity.
            </summary>
      <param name="linearUnits">The length units.</param>
      <param name="massUnits">The mass units.</param>
      <param name="layers">The layers collection.</param>
      <param name="materials">The materials collection.</param>
      <param name="blocks">The blocks collection.</param>
      <returns>A multiline string.</returns>
      <remarks>All of the results about the mass properties are displayed using the units of measurement provided as input.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.WriteObjAsLines(System.Int32@,System.IO.TextWriter,System.Int32@,System.Int32@,System.Int32@,System.IO.TextWriter,devDept.Eyeshot.LayerKeyedCollection,System.String,devDept.Eyeshot.MaterialKeyedCollection,System.Double,System.Double,devDept.Eyeshot.BlockKeyedCollection)">
      <summary>
            Write in Obj file format as set of lines connecting vertices.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.SetShader(devDept.Eyeshot.DrawParams)">
      <summary>
            Sets a Shader before drawing the entity.
            </summary>
      <param name="data">data for entity drawing</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.GetOffsetDistance(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Double)">
      <summary>
            Computes the offset distance for the extrude with draft angle methods.
            </summary>
      <param name="extDir">The extrusion direction (normalized)</param>
      <param name="amount">Extrude direction</param>
      <param name="draftAngleInRadians">Draft angle</param>
      <returns>The signed offset distance.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.IsCrossing(devDept.Eyeshot.FrustumParams)">
      <summary>
            Tells if the entity is inside or crossing the given planes and edges.
            </summary>
      <returns>True if the entity is selected</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.PropagateAttributes(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity,System.Boolean)">
      <summary>
            Propagates the attributes to the entity passed as parameter.
            </summary>
      <param name="srcEntity">Source entity</param>
      <param name="destEntity">Destination entity</param>
      <param name="force">If false, propagates the attributes only if the attributes are ByParent</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.DynamicSelectionHaloMode">
      <summary>
            Gets or sets the entity halo drawing mode for dynamic selection.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Workspace.Selection" />
      <seealso cref="P:devDept.Eyeshot.SelectionSettings.ColorDynamic" />
      <seealso cref="P:devDept.Eyeshot.Workspace.ActionMode" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.SetSelectionColorForSelection(devDept.Eyeshot.DrawParams)">
      <summary>
            Sets the selection color or material depending on the color mode.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.SetEntityColorForSelection(devDept.Eyeshot.DrawParams)">
      <summary>
            Sets the entity color or material depending on the color mode.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.SetEntityColorForFace(devDept.Eyeshot.DrawParams,System.Drawing.Color)">
      <summary>
            Sets the entity color or material depending on the color mode.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.GetXAttributes(System.Boolean)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.SetLineWeight(devDept.Graphics.RenderContextBase,System.Single)">
      <summary>
            Line weight changer.
            </summary>
      <param name="renderContext">The render context</param>
      <param name="lineWeight">The line weight resolved from attributes propagation</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawOnScreenWireframe(devDept.Eyeshot.DrawOnScreenWireframeParams)">
      <summary>
            Draws extra things on screen, like the vertex Numbers (if <see cref="P:devDept.Eyeshot.Viewport.ShowVertexIndices" /> is true) in wireframe display mode.
            </summary>
      <param name="myParams">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawOnScreenWireframe(devDept.Eyeshot.DrawOnScreenWireframeParams,System.Int32)">
      <summary>
            Draws extra things on screen, like the vertex Numbers (if <see cref="P:devDept.Eyeshot.Viewport.ShowVertexIndices" /> is true) in wireframe dispaly mode.
            </summary>
      <param name="myParams">
      </param>
      <param name="vertexCount">The number of vertices</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawOnScreen(devDept.Eyeshot.DrawOnScreenParams)">
      <summary>
            Draws extra things on screen, like the vertex indices (if <see cref="P:devDept.Eyeshot.Viewport.ShowVertexIndices" /> is true).
            </summary>
      <param name="drawOnScreenParams">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawOnScreen(devDept.Eyeshot.DrawOnScreenParams,System.Int32)">
      <summary>
            Draws extra things on screen, like the vertex indices (if <see cref="P:devDept.Eyeshot.Viewport.ShowVertexIndices" /> is true).
            </summary>
      <param name="camera">The viewport camera</param>
      <param name="values">The depth values</param>
      <param name="stride">The stride for each row of values</param>
      <param name="viewFrame">The viewport borders</param>
      <param name="digitTextures">The textures of the 0..9 digits</param>
      <param name="leftBorder">The viewport left border minus the vertex size</param>
      <param name="rightBorder">The viewport right border minus the vertex size</param>
      <param name="bottomBorder">The viewport bottom border minus the vertex size</param>
      <param name="topBorder">The viewport top border minus the vertex size</param>
      <param name="vertexCount">The number of vertices</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Draw(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws the entity.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.CompileWire(devDept.Eyeshot.CompileParams)">
      <summary>
            Compiles the graphics representation of wireframe entities.
            </summary>
      <param name="data">
      </param>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.DrawWireEntity(devDept.Graphics.RenderContextBase,System.Object)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.CompilePattern(devDept.Eyeshot.CompileParams)">
      <summary>
            Compiles the graphics representation of the pattern of wireframe entities.
            </summary>
      <param name="data">The parameters</param>
      <seealso cref="P:devDept.Eyeshot.Workspace.LineTypes" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawEntity(devDept.Graphics.RenderContextBase,System.Object)">
      <summary>
            Internal method that draws the entity.
            </summary>
      <param name="context">The render context</param>
      <param name="myParams">The parameters</param>
      <remarks>This method may be used both for compiling the Entity (OpenGL and Direct3D) and to draw the Entity (in Direct3D only, for some complex entities like <see cref="T:devDept.Eyeshot.Entities.Dimension" />) </remarks>
      <remarks>Override it to customize the entity compilation.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.Compile(devDept.Eyeshot.CompileParams)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawWireEntity(devDept.Graphics.RenderContextBase,System.Object)">
      <summary>
            Draws the Wireframe entity.
            </summary>
      <param name="context">
      </param>
      <param name="myParams">
      </param>
      <remarks>Used to compile the wireframe entities. Override this to customize the wireframe entities drawing.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.CompileWire(devDept.Eyeshot.CompileParams)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawWire(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws a wireframe entity, resolving the <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeName" /> for <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod" /><see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" />.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawFast(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws the entity in fast inaccurate transparency mode.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawFlatFast(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws the entity in flat and fast inaccurate transparency mode.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawSelected(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws entity selected.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawFlatSelected(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws entity selected in <see cref="F:devDept.Eyeshot.displayType.Flat" /><see cref="P:devDept.Eyeshot.Viewport.DisplayMode" />.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawWireframeSelected(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws entity as selected wires.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.Render(devDept.Eyeshot.RenderParams)">
      <summary>
            Renders the entity.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.RenderFast(devDept.Eyeshot.RenderParams)">
      <summary>
            Renders the entity in fast inaccurate transparency mode.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawForShadow(devDept.Eyeshot.RenderParams)">
      <summary>
            Draws the entity planar shadow.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawFlat(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws entity in <see cref="F:devDept.Eyeshot.displayType.Flat" /><see cref="P:devDept.Eyeshot.Viewport.DisplayMode" />.
            </summary>
      <param name="data">Draw parameters</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawWireframe(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws entity as wires.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawIsocurves(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws the entity iso curves. For Mesh entities this method draws internal wires.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawIsocurvesForFlat(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws the isocurves in Flat display mode.
            </summary>
      <param name="data">The draw parameters</param>
      <remarks>Only the <see cref="T:devDept.Eyeshot.Entities.Surface" /> entities draws them.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawForSelectionFaces(devDept.Eyeshot.GfxDrawForSelectionParams)">
      <summary>
            Draws the entity faces in false-colors (for some kinds of entities only).
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawForSelectionEdges(devDept.Eyeshot.GfxDrawForSelectionParams)">
      <summary>
            Draws the entity edges in false-colors (for some kinds of entities only).
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawForSelectionVertices(devDept.Eyeshot.GfxDrawForSelectionParams)">
      <summary>
            Draws the entity vertices in false-colors (for some kinds of entities only).
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawForSelectionSubCurves(devDept.Eyeshot.GfxDrawForSelectionParams)">
      <summary>
            Draws the entity subCurves in false-colors (for some kinds of entities only).
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawForSelectionSubContours(devDept.Eyeshot.GfxDrawForSelectionParams)">
      <summary>
            Draws the entity contours in false-colors (for some kinds of entities only).
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawForSelectionSketchPoints(devDept.Eyeshot.GfxDrawForSelectionParams)">
      <summary>
            Draws the entity points in false-colors (for some kinds of entities only).
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawForSelectionSketchCurves(devDept.Eyeshot.GfxDrawForSelectionParams)">
      <summary>
            Draws the entity curves in false-colors (for some kinds of entities only).
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawForSelection(devDept.Eyeshot.GfxDrawForSelectionParams)">
      <summary>
            Draws the entity without specifing any color.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawForSelectionWireframe(devDept.Eyeshot.GfxDrawForSelectionParams)">
      <summary>
            Draws entity as wires without specifing any color.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawEdges(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws the entity's edges.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.GetNormalLength">
      <summary>
            Gets the entity normal length.
            </summary>
      <returns>The normal length</returns>
      <seealso cref="P:devDept.Eyeshot.Workspace.ShowNormals" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawNormals(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws entity's normal vectors.
            </summary>
      <param name="data">The draw data</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawVertices(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws entity's vertices.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawSelectedVertices(devDept.Eyeshot.DrawParams)">
      <summary>
            Draws the entity selected vertices.
            </summary>
      <remarks>For <see cref="T:devDept.Eyeshot.Entities.Brep" /> only</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawHiddenLines(devDept.Eyeshot.DrawParams)">
      <summary>
            Draw the entity in the <see cref="F:devDept.Eyeshot.displayType.HiddenLines" /> display mode.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawHiddenLinesFast(devDept.Eyeshot.DrawParams)">
      <summary>
            Draw the entity in the <see cref="F:devDept.Eyeshot.displayType.HiddenLines" /> display mode in fast inaccurate transparency mode.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Entity.DrawSilhouettes(devDept.Eyeshot.DrawSilhouettesParams)">
      <summary>
            Draws Silhouettes.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Entity.Compiling">
      <summary>
            Tells if the entity is being compiled.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Balloon">
      <summary>
            Balloon entity (a leader with a text and a polygon that surrounds it). 
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Balloon.balloonStyleType">
      <summary>
            Balloon shape type
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Balloon.balloonStyleType.None">
      <summary>
            Empty balloon
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Balloon.balloonStyleType.Circular">
      <summary>
            Circular balloon
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Balloon.balloonStyleType.Triangle">
      <summary>
            Triangular balloon
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Balloon.balloonStyleType.Box">
      <summary>
            Box balloon
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.String,System.Double)">
      <summary>
            Plane XY constructor. 
            </summary>
      <param name="insertionPoint">The insertion point</param>
      <param name="anchorPoint">The anchor point</param>
      <param name="textString">The text string</param>
      <param name="textHeight">The text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.String,System.Double,System.Int32)">
      <summary>
            Plane XY constructor.
            </summary>
      <param name="insertionPoint">The insertion point</param>
      <param name="anchorPoint">The anchor point</param>
      <param name="textString">The text string</param>
      <param name="textHeight">The text height</param>
      <param name="size">The balloon size</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.String,System.Double,System.Int32,devDept.Eyeshot.Entities.arrowheadType)">
      <summary>
            Plane XY constructor.
            </summary>
      <param name="insertionPoint">The insertion point</param>
      <param name="anchorPoint">The anchor point</param>
      <param name="textString">The text string</param>
      <param name="textHeight">The text height</param>
      <param name="size">The balloon size</param>
      <param name="arrowhead">The arrowhead type</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="plane">The balloon plane</param>
      <param name="insertionPoint">The insertion point</param>
      <param name="anchorPoint">The anchor point</param>
      <param name="textString">The text string</param>
      <param name="textHeight">The text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String,System.Double,System.Int32)">
      <summary>
            Standard constructor.
            </summary>
      <param name="plane">The balloon plane</param>
      <param name="insertionPoint">The insertion point</param>
      <param name="anchorPoint">The anchor point</param>
      <param name="textString">The text string</param>
      <param name="textHeight">The text height</param>
      <param name="size">The balloon size</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String,System.Double,System.Int32,devDept.Eyeshot.Entities.arrowheadType)">
      <summary>
            Standard constructor.
            </summary>
      <param name="plane">The balloon plane</param>
      <param name="insertionPoint">The insertion point</param>
      <param name="anchorPoint">The anchor point</param>
      <param name="textString">The text string</param>
      <param name="textHeight">The text height</param>
      <param name="size">The balloon size</param>
      <param name="arrowhead">The arrowhead type</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.String,System.Double)">
      <summary>
            Sketch plane constructor.
            </summary>
      <param name="sketchPlane">The sketch plane</param>
      <param name="insertionPoint">The insertion point</param>
      <param name="anchorPoint">The anchor point</param>
      <param name="textString">The text string</param>
      <param name="textHeight">The text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.String,System.Double,System.Int32)">
      <summary>
            Sketch plane constructor.
            </summary>
      <param name="sketchPlane">The sketch plane</param>
      <param name="insertionPoint">The insertion point</param>
      <param name="anchorPoint">The anchor point</param>
      <param name="textString">The text string</param>
      <param name="textHeight">The text height</param>
      <param name="size">The balloon size</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.String,System.Double,System.Int32,devDept.Eyeshot.Entities.arrowheadType)">
      <summary>
            Sketch plane constructor.
            </summary>
      <param name="sketchPlane">The sketch plane</param>
      <param name="insertionPoint">The insertion point</param>
      <param name="anchorPoint">The anchor point</param>
      <param name="textString">The text string</param>
      <param name="textHeight">The text height</param>
      <param name="size">The balloon size</param>
      <param name="arrowhead">The arrowhead type</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.Clone">
      <summary>
            Creates a deep copy of this balloon.
            </summary>
      <returns>The new balloon object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Balloon.AnchorPoint">
      <summary>
            Gets or sets the balloon anchor point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Balloon.Style">
      <summary>
            Gets or sets the arrow balloon style.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Balloon.ShowArrowHead">
      <summary>
            When true shows the arrow head.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Balloon.Size">
      <summary>
            Gets or sets the size of the balloon.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Balloon.ArrowHead">
      <summary>
            Gets or sets the arrow head type.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Balloon.ArrowHeadSize">
      <summary>
            Gets or sets the size of the arrow head.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Balloon.Scale">
      <summary>
            Gets or sets the scale factor for the arrow head.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.GetArrowHeadTransformation(devDept.Eyeshot.Entities.arrowheadType,System.Double)">
      <summary>
            Gets the transformation to apply to the arrowhead.
            </summary>
      <param name="arrowhead">
      </param>
      <param name="myDistance">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Balloon.Explode">
      <summary>
            Explodes the balloon into a Text, a Leader and a LinearPath (or Circle if the Style is set to Circular).
            </summary>
      <returns>The array of individual entities.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.FastMesh">
      <summary>
        <para>FastMesh entity definition. A mesh entity based on Vertex Buffer Object.
            </para>
        <para>Two modes are supported:</para>
        <list type="bullet">
          <item>
            <description>vertices, triangles, normals</description>
          </item>
          <item>
            <description>3 vertices, 3 normals per triangle (TrianglesArray =
            null)</description>
          </item>
        </list>
      </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastMesh.#ctor">
      <summary>
            Empty constructor.
            </summary>
      <seealso cref="!:PointsArray" />
      <seealso cref="!:TrianglesArray" />
      <seealso cref="!:NormalsArray" />
      <seealso cref="!:ColorsArray" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastMesh.#ctor(System.Single[],System.Int32[],System.Single[])">
      <summary>
            Points, triangles and normals arrays constructor.
            </summary>
      <param name="points">The list of unrolled XYZ coordinates</param>
      <param name="triangles">The list of unrolled triangle vertex indices, can be null/Nothing.</param>
      <param name="normals">The list of unrolled triangles normals</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastMesh.#ctor(System.Single[],System.Int32[],System.Single[],System.Byte[])">
      <summary>
            Points, triangles normals and colors arrays constructor.
            </summary>
      <param name="points">The list of unrolled XYZ coordinates</param>
      <param name="triangles">The list of unrolled triangle vertex indices, can be null/Nothing.</param>
      <param name="normals">The list of unrolled triangles normals</param>
      <param name="colors">The list of unrolled RGB colors, can be null/Nothing.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.FastMesh.PointArray">
      <summary>
            Gets or sets point array.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.FastMesh.NormalArray">
      <summary>
            Gets or sets normal array.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.FastMesh.TriangleArray">
      <summary>
            Gets or sets triangle indices array, can be null/Nothing.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.FastMesh.ColorArray">
      <summary>
            Gets or sets the color array, can be null/Nothing.
            </summary>
      <remarks>
        <para>The size of the array determines how the colors are applied to the entity:
            </para>
        <list type="bullet">
          <item>
            <description>1 byte per vertex is applied as a modulation factor (0-255) to
            the <see cref="T:System.Drawing.Color" /> of the entity. This requires the use of shaders so the
            graphics acceleration must be turned on, <see cref="P:devDept.Eyeshot.Workspace.UseShaders" />
            must be true (WinForms control only) and the <see cref="P:devDept.Eyeshot.Viewport.DisplayMode" /> must be <see cref="F:devDept.Eyeshot.displayType.Rendered" /></description>
          </item>
          <item>
            <description>3 bytes per vertex are applied as RGB colors </description>
          </item>
          <item>
            <description>4 bytes per vertex are applied as RGBA colors (in order for the
            alpha transparency to work, the entity must also have a <see cref="T:System.Drawing.Color" /> with
            alpha &lt; 255 and <see cref="P:devDept.Eyeshot.Workspace.AccurateTransparency" /> must be set to
            false).</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Hatch">
      <summary>
            Hatch entity definition.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Hatch.SolidPatternName">
      <summary>
            Solid hatch pattern name.
            </summary>
      <remarks>
            Pattern to fill the hatch with a solid color. It's not needed in the <see cref="P:devDept.Eyeshot.Workspace.HatchPatterns" /> collection.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Hatch.#ctor(devDept.Eyeshot.Entities.Hatch)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other hatch</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Hatch.#ctor(System.String,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Plane)">
      <summary>
            Single contour constructor.
            </summary>
      <param name="patternName">The hatch pattern name</param>
      <param name="outer">The outer contour</param>
      <param name="pln">The contour plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Hatch.#ctor(System.String,devDept.Geometry.Entities.IGCurve,devDept.Geometry.Plane)">
      <summary>
            Single contour constructor.
            </summary>
      <param name="patternName">The hatch pattern name</param>
      <param name="outer">The outer contour</param>
      <param name="pln">The contour plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Hatch.#ctor(System.String,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Plane)">
      <summary>
            List of contours constructor.
            </summary>
      <param name="patternName">The hatch pattern name</param>
      <param name="contours">The list of planar contours</param>
      <param name="pln">The contours plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Hatch.#ctor(System.String,System.Collections.Generic.IList{devDept.Geometry.Entities.IGCurve},devDept.Geometry.Plane)">
      <summary>
            List of contours constructor.
            </summary>
      <param name="patternName">The hatch pattern name</param>
      <param name="contours">The list of planar contours</param>
      <param name="pln">The contours plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Hatch.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Hatch.Triangles">
      <summary>
            Gets or sets the hatch triangles. Meaningful only for Solid hatch.
            </summary>
      <remarks>Hatch triangles are generated automatically by <see cref="M:devDept.Eyeshot.Entities.Entity.Regen(System.Double)" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Hatch.ContourList">
      <summary>
            Gets or sets the list of contours.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Hatch.PatternName">
      <summary>
            Gets or sets the hatch pattern name of the <see cref="P:devDept.Eyeshot.Workspace.HatchPatterns" /> collection.
            </summary>
      <remarks>When the pattern of an hatch already added to the <see cref="T:devDept.Eyeshot.Workspace" /> is changed the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called. </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Hatch.PatternScale">
      <summary>
            Gets or sets the scale of the hatch pattern (1.0 by default).
            </summary>
      <remarks>
        <para>When the scale of an hatch already added to the <see cref="T:devDept.Eyeshot.Workspace" />
            is changed the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.</para>
        <para>Applied only to not user-defined pattern.</para>
      </remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Hatch.IsUserDefinedPattern" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Hatch.PatternAngle">
      <summary>
            Gets or sets the angle in radians of the hatch pattern (0.0 by default).
            </summary>
      <remarks>When the angle of an hatch already added to the <see cref="T:devDept.Eyeshot.Workspace" /> is changed the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called. </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Hatch.PatternOrigin">
      <summary>
            Gets or sets the origin point of the hatch pattern (0.0 by default).
            </summary>
      <remarks>When the origin of an hatch already added to the <see cref="T:devDept.Eyeshot.Workspace" /> is changed the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called. </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Hatch.PatternSpacing">
      <summary>
            Gets or sets the spacing between lines for user-defined pattern.
            </summary>
      <remarks>
            When the spacing of an hatch already added to the <see cref="T:devDept.Eyeshot.Workspace" /> is
            changed the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Hatch.IsUserDefinedPattern" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Hatch.PatternDouble">
      <summary>
            Gets or sets the pattern doubling for user-defined pattern. If true draws a
            second set of lines at 90 degrees to the original lines.
            </summary>
      <remarks>
            When changed on an hatch already added to the <see cref="T:devDept.Eyeshot.Workspace" /> the
            <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Hatch.IsUserDefinedPattern" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Hatch.IsUserDefinedPattern">
      <summary>
            When true the Pattern is defined by <see cref="P:devDept.Eyeshot.Entities.Hatch.PatternAngle" />, <see cref="P:devDept.Eyeshot.Entities.Hatch.PatternSpacing" /> and <see cref="P:devDept.Eyeshot.Entities.Hatch.PatternDouble" /> properties.
            </summary>
      <remarks>
            When is changed on an hatch already added to the <see cref="T:devDept.Eyeshot.Workspace" /> the
            <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Hatch.ExtrudeAsMesh(System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Can't extrude a Hatch entity.
            </summary>
      <exception cref="T:System.NotImplementedException">Thrown if you use this method.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Hatch.ExtrudeAsSurface(System.Double)">
      <summary>
            Can't extrude a Hatch entity.
            </summary>
      <exception cref="T:System.NotImplementedException">Thrown if you use this method.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Hatch.Clone">
      <summary>
            Creates a deep copy of this region.
            </summary>
      <returns>The new region object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Hatch.Explode">
      <summary>
            Explodes the Hatch into <see cref="T:devDept.Eyeshot.Entities.Line" /> and <see cref="T:devDept.Eyeshot.Entities.Point" /> entities.
            </summary>
      <returns>The array of individual entities, null if the hatch is Solid</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.SketchEntity">
      <summary>
            Sketch entity definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.SketchEntity.CurveList">
      <summary>
            Gets the sketch curve list.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.SketchEntity.PointList">
      <summary>
            Gets the sketch point list.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.#ctor(devDept.Geometry.ConstraintSolver.Sketch)">
      <summary>
            Standard constructor.
            </summary>
      <param name="gSketch">The geometrical sketch.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.SketchEntity.Plane">
      <summary>Gets or sets the planar entity supporting plane.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.SketchEntity.Parent">
      <summary>
            Gets the entity on which this SketchEntity was created. 
            </summary>
      <remarks>
            This property is set internally by the SketchManager when the sketch is created.
            Used to calculate the zoom window when SketchManager.ZoomFitMode is set to zoomFitType.Body or zoomFitType.Face.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.SketchEntity.Constraints">
      <summary>
            Gets the sketch constraints.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RemoveConstraint(devDept.Geometry.ConstraintSolver.Constraint)">
      <summary>
            Removes the specific constraint from the sketch.
            </summary>
      <param name="constraint">The constraint</param>
      <returns>True if the constraint is successfully removed; false otherwise.</returns>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see the effect of this command.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.Explode(System.Boolean)">
      <summary>
            Returns the list of curves as array of entities.
            </summary>
      <param name="propagateAttributes">If true, propagates the attributes of the composite curve (<see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" />, <see cref="P:devDept.Eyeshot.Entities.Entity.Color" />, <see cref="P:devDept.Eyeshot.Entities.Entity.MaterialName" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeName" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeightMethod" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeight" />) to the exploded curves</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ConvertToRegion">
      <summary>
            Convert the Sketch into a Region entity. 
            </summary>
      <param name="sketcher">The sketch. </param>
      <returns>The region.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ConvertToCurves(System.Boolean)">
      <summary>
            Convert the Sketch into a list of ICurve. 
            </summary>
      <param name="sketcher">The Sketch</param>
      <param name="keepConstructionCurves">Indicates whether the construction curves must be keep or not.</param>
      <returns>The list of ICurve</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.GetVisualRep(System.Nullable{System.Drawing.Color},System.Nullable{System.Drawing.Color},System.Single)">
      <summary>
            Convert the Sketch into a list of ICurve. 
            </summary>
      <param name="sketcher">The Sketch</param>
      <returns>The list of ICurve</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.Read(System.String)">
      <summary>
            Reads the sketch from the specified file.
            </summary>
      <param name="fileName">Name of the file to read</param>
      <seealso cref="M:devDept.Eyeshot.Entities.SketchEntity.Write(System.String,System.Xml.Formatting)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.Write(System.String,System.Xml.Formatting)">
      <summary>
            Writes the sketch to the specified file.
            </summary>
      <param name="fileName">Name of the file to write</param>
      <param name="formatting">The output format</param>
      <seealso cref="M:devDept.Eyeshot.Entities.SketchEntity.Read(System.String)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsMesh(System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> along plane's Z-axis.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsMesh``1(System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> along plane's Z-axis.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsMesh(devDept.Geometry.Vector3D,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Mesh" />.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsMesh``1(devDept.Geometry.Vector3D,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Mesh" />.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsSurface(devDept.Geometry.Vector3D)">
      <summary>
            Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Surface" />.
            </summary>
      <param name="amount">Extrusion amount</param>
      <returns>&gt;The resulting Surface array.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsSurface(System.Double)">
      <summary>
            Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Surface" />.
            </summary>
      <param name="amount">Extrusion amount</param>
      <returns>&gt;The resulting Surface array.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsBrep(System.Double,System.Double,System.Double)">
      <summary>
            Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Brep" />.
            </summary>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>&gt;The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsBrep(devDept.Geometry.Interval,System.Double,System.Double)">
      <summary>
            Extrudes the region to create a new Brep.
            </summary>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>&gt;The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsBrep(devDept.Geometry.Vector3D,System.Double,System.Double)">
      <summary>
            Extrudes the region to create a new Brep.
            </summary>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>&gt;The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsSolid(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Extrudes this region.
            </summary>
      <param name="x">Extrusion amount along the axis X</param>
      <param name="y">Extrusion amount along the axis Y</param>
      <param name="z">Extrusion amount along the axis Z</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsSolid``1(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Extrudes this region.
            </summary>
      <param name="x">Extrusion amount along the axis X</param>
      <param name="y">Extrusion amount along the axis Y</param>
      <param name="z">Extrusion amount along the axis Z</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsSolid(System.Double,System.Double)">
      <summary>
            Extrudes this region.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsSolid``1(System.Double,System.Double)">
      <summary>
            Extrudes this region.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsSolid(devDept.Geometry.Vector3D,System.Double)">
      <summary>
            Extrudes this region.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ExtrudeAsSolid``1(devDept.Geometry.Vector3D,System.Double)">
      <summary>
            Extrudes this region.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.SweepAsSolid(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Sweeps this region along the provided trajectory.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.SweepAsSolid``1(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Sweeps this region along the provided trajectory.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.SweepAsSolid(devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Sweeps this region along the provided trajectory.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="merge">
      </param>
      <param name="sweepMethod">
      </param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.SweepAsSolid``1(devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Sweeps this region along the provided trajectory.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="merge">
      </param>
      <param name="sweepMethod">
      </param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RevolveAsMesh(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RevolveAsMesh``1(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RevolveAsMesh(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RevolveAsMesh``1(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RevolveAsSurface(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
            Revolves this region around an axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <returns>The resulting Surface array object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RevolveAsSurface(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Revolves this region around an axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <returns>The resulting Surface array object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RevolveAsBrep(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double)">
      <summary>
            Revolves this region around an axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="tolerance">the regeneration tolerance</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RevolveAsBrep(System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double)">
      <summary>
            Revolves this region around an axis.
            </summary>
      <param name="deltaAngle">Revolution angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="tolerance">the regeneration tolerance</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RevolveAsBrep(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)">
      <summary>
            Revolves this region around an axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="tolerance">the regeneration tolerance</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RevolveAsSolid(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RevolveAsSolid``1(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RevolveAsSolid(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.RevolveAsSolid``1(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.IsAnySketchPointSelected">
      <summary>
            Tells if there is a selected SketchPoint.
            </summary>
      <returns>True if there is a selected SketchPoint</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.IsAnySketchCurveSelected">
      <summary>
            Tells if there is a selected SketchCurve.
            </summary>
      <returns>True if there is a selected SketchCurve</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ClearSketchPointsSelectionForAllInstances">
      <summary>
            Clears the sketch point selection status for all instances.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SketchEntity.ClearSketchCurvesSelectionForAllInstances">
      <summary>
            Clears the sketch curve selection status for all instances.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.CompositeCurve">
      <summary>
            Composite curve definition.
            </summary>
      <remarks>
            When passing the curve list into constructors, curves are analyzed, sorted and reversed if necessary. This is not true when using the <see cref="P:devDept.Eyeshot.Entities.CompositeCurve.CurveList" /> property, in this case a call to the <see cref="M:devDept.Eyeshot.Entities.CompositeCurve.SortAndOrient(System.Double)" /> method is needed. The first curve in the list determines the contour orientation.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateRectangle(System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rectangular composite curve.
            </summary>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateRectangle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rectangular composite curve by position.
            </summary>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateRectangle(devDept.Geometry.Plane,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rectangular composite curve by plane.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateRectangle(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rectangular composite curve by plane and position.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateRoundedRectangle(System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rounded rectangular composite curve.
            </summary>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="radius">Corner radius</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateRoundedRectangle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rounded rectangular composite curve by position.
            </summary>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="radius">Corner radius</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateRoundedRectangle(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rounded rectangular composite curve by plane.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="radius">Corner radius</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateRoundedRectangle(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rounded rectangular composite curve by plane and position.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="radius">Corner radius</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateSlot(System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a composite curve with the shape of a slot.
            </summary>
      <param name="length">Center to center length</param>
      <param name="radius">Radius</param>
      <param name="centered">When true, the slot is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateSlot(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a composite curve with the shape of a slot by position.
            </summary>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="length">Center to center length</param>
      <param name="radius">Radius</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="centered">When true, the slot is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateSlot(devDept.Geometry.Plane,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a composite curve with the shape of a slot by plane.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="length">Center to center length</param>
      <param name="radius">Radius</param>
      <param name="centered">When true, the slot is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateSlot(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a composite curve with the shape of a slot by plane and position.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="length">Center to center length</param>
      <param name="radius">Radius</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="centered">When true, the slot is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateCircularSlot(System.Double,System.Double,System.Double)">
      <summary>
            Creates a composite curve with the shape of a circular slot.
            </summary>
      <param name="angle">Angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateCircularSlot(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a composite curve with the shape of a circular slot by position constructor.
            </summary>
      <param name="angle">Angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateCircularSlot(devDept.Geometry.Plane,System.Double,System.Double,System.Double)">
      <summary>
            Creates a composite curve with the shape of a circular slot by plane.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="angle">Angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateCircularSlot(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a composite curve with the shape of a circular slot by plane and position constructor.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="angle">Angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateCircularSlot(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a composite curve with the shape of a circular slot by plane, position and start angle.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="startAngle">Start angle in radians</param>
      <param name="deltaAngle">Delta angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateCircularSlot(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a composite curve with the shape of a circular slot by start angle.
            </summary>
      <param name="startAngle">Start angle in radians</param>
      <param name="deltaAngle">Delta angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateCircularSlot(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a composite curve with the shape of a circular slot by position and start angle.
            </summary>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="startAngle">Start angle in radians</param>
      <param name="deltaAngle">Delta angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateCircularSlot(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a composite curve with the shape of a circular slot by plane, position and start angle.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="startAngle">Start angle in radians</param>
      <param name="deltaAngle">Delta angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateHexagon(System.Double,System.Boolean)">
      <summary>
            Creates an hexagonal composite curve.
            </summary>
      <param name="radius">Radius</param>
      <param name="inscribed">When true, the radius is considered of the inscribed circle</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateHexagon(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates an hexagonal composite curve by position.
            </summary>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="radius">Radius</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="inscribed">When true, the radius is considered of the inscribed circle</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.CreateHexagon(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates an hexagonal composite curve by plane and position.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="radius">Radius</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="inscribed">When true, the radius is considered of the inscribed circle</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.CompositeCurve.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(devDept.Geometry.Entities.GCompositeCurve)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.CompositeCurve.SelectionMode">
      <summary>
            Gets or sets the selection mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.CompositeCurve.CurveList">
      <summary>
            Gets or sets the primitive curve list.
            </summary>
      <remarks>After altering the curve list, you should call the <see cref="M:devDept.Eyeshot.Entities.CompositeCurve.SortAndOrient(System.Double)" /> method to fix curve sorting and orientation.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.ICurve})">
      <summary>
            Curve list constructor. The first curve in the list determines the contour orientation.
            </summary>
      <param name="curveList">The curve list</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Collections.Generic.IEnumerable{devDept.Geometry.Entities.IGCurve})">
      <summary>
            IGCurve list constructor. The first IGCurve in the list determines the contour orientation.
            </summary>
      <param name="gCurveList">The list of IGCurve.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.ICurve},System.Boolean)">
      <summary>
            Curve list and sorting flag constructor. The first curve in the list determines the contour orientation.
            </summary>
      <param name="curveList">The curve list</param>
      <param name="sortAndOrient">When true, the curves are properly sorted and oriented.</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Collections.Generic.IEnumerable{devDept.Geometry.Entities.IGCurve},System.Boolean)">
      <summary>
            IGCurve list and sorting flag constructor. The first IGCurve in the list determines the contour orientation.
            </summary>
      <param name="gCurveList">The IGCurve list</param>
      <param name="sortAndOrient">When true, the IGCurves are properly sorted and oriented.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.ICurve},System.Double)">
      <summary>
            Curve list constructor. The first curve in the list determines the contour orientation.
            </summary>
      <param name="curveList">The curve list</param>
      <param name="closureTol">The max distance between the contour start and end points to assume the curve as closed.</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Collections.Generic.IEnumerable{devDept.Geometry.Entities.IGCurve},System.Double)">
      <summary>
            IGCurve list constructor. The first IGCurve in the list determines the contour orientation.
            </summary>
      <param name="gCurveList">The IGCurve list</param>
      <param name="closureTol">The max distance between the contour start and end points to assume the IGCurve as closed.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.ICurve},System.Double,System.Boolean)">
      <summary>
            Curve list constructor. The first curve in the list determines the contour orientation.
            </summary>
      <param name="curveList">The curve list</param>
      <param name="closureTol">The max distance between the contour start and end points to assume the curve as closed.</param>
      <param name="sortAndOrient">When true, the curves are properly sorted and oriented.</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Collections.Generic.IEnumerable{devDept.Geometry.Entities.IGCurve},System.Double,System.Boolean)">
      <summary>
            IGCurve list constructor. The first IGCurve in the list determines the contour orientation.
            </summary>
      <param name="gCurveList">The IGCurve list</param>
      <param name="closureTol">The max distance between the contour start and end points to assume the IGCurve as closed.</param>
      <param name="sortAndOrient">When true, the IGCurves are properly sorted and oriented.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(devDept.Geometry.Entities.IGCurve[])">
      <summary>
            IGCurve list constructor. The first IGCurve in the list determines the contour orientation.
            </summary>
      <param name="gCurveList">The IGCurve list</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(devDept.Eyeshot.Entities.ICurve)">
      <summary>
            One curve only constructor.
            </summary>
      <param name="curve">The curve</param>
      <remarks>Primitives of input curve is cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(devDept.Geometry.Entities.IGCurve)">
      <summary>
            One curve only constructor.
            </summary>
      <param name="curve">The curve</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.Clone">
      <summary>
            Creates a deep copy of this composite curve.
            </summary>
      <returns>The new composite curve object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.IsAnySubCurveSelected">
      <summary>
            Tells if there is a selected subCurve.
            </summary>
      <returns>True if there is a selected subCurve</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.ClearSubCurvesSelectionForAllInstances">
      <summary>
            Clears the subCurve selection status for all instances.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.Explode">
      <summary>
            Returns the list of curves as array of entities.
            </summary>
      <param name="propagateAttributes">If true, propagates the attributes of the composite curve (<see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" />, <see cref="P:devDept.Eyeshot.Entities.Entity.Color" />, <see cref="P:devDept.Eyeshot.Entities.Entity.MaterialName" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeName" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeightMethod" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeight" />) to the exploded curves</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.GetPointsByLength(System.Double)">
      <summary>
            Subdivides the curve by the distance provided.
            </summary>
      <param name="length">The distance between points</param>
      <returns>An array of 3D points.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.GetPointsByLengthPerSegment(System.Double)">
      <summary>
            Subdivides each segment of the curve by the distance provided.
            </summary>
      <param name="length">The distance between points</param>
      <returns>An array of 3D points.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.SplitAtDiscontinuities(System.Boolean)">
      <summary>
            Splits the composite curve at derivative discontinuities (e.g. cusps, kinks) of each segment, returns an array of smooth segments.
            </summary>
      <param name="speedChange">If true, when the tangents have the same direction but different lengths, the curve will be split. If false, it won't be split.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.IsPlanar(System.Double,devDept.Geometry.Plane@)">
      <summary>
            Checks if the curve is planar.
            </summary>
      <param name="tol">The tolerance</param>
      <param name="plane">The plane where the curve lies</param>
      <returns>True if the curve is planar within tolerance, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.SortAndOrient">
      <summary>
            Sorts and orients internal curves. Closure tolerance is estimated automatically using composite curve extents.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.SortAndOrient(System.Double)">
      <summary>
            Sorts and orients internal curves.
            </summary>
      <param name="closureTol">The max distance between the contour start and end points to assume the curve as closed.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.IsOrientedClockwise(devDept.Geometry.Plane)">
      <summary>
            Checks if the closed composite curve orientation is clockwise.
            </summary>
      <param name="plane">The curve plane, can be obtained using the <see cref="M:devDept.Eyeshot.Entities.CompositeCurve.IsPlanar(System.Double,devDept.Geometry.Plane@)" /> method.</param>
      <returns>True if the composite curve is oriented clockwise, false otherwise.</returns>
      <remarks>If the curve is not planar, the points are projected on the plane.</remarks>
      <remarks>The curve must not have null Vertices.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.IsOrientedClockwise(devDept.Geometry.Transformation)">
      <summary>
            Checks if the closed composite curve orientation is clockwise.
            </summary>
      <param name="t">The transformation needed to project all points on the curve plane.</param>
      <returns>True if the composite curve is oriented clockwise, false otherwise.</returns>
      <remarks>The curve must not have null Vertices.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(devDept.Serialization.CompositeCurveSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.CompositeCurveSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.CompositeCurveSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CompositeCurve.MoreOfTwoSegmentsIncidentOnTheSameEndpoint(System.Double)">
      <summary>
            Check if the curve have more of two segments incident on the same endpoint.
            </summary>
      <param name="equalTol">3D points comparison tolerance</param>
      <returns>True when more of two curve segments are incident on the same endpoint, false otherwise.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Mesh">
      <summary>
        <para>A triangle mesh is a type of polygon mesh in computer graphics. It
            comprises a set of triangles (typically in three dimensions) that are connected
            by their common edges or corners. </para>
        <para>Depending on the types of vertices and triangles, it can assume different
            configurations, see table below.</para>
        <list type="table">
          <item>
            <term>Triangles type / Vertices type</term>
            <description>
              <see cref="T:devDept.Geometry.Point3D" />
            </description>
            <description>
              <see cref="T:devDept.Geometry.PointRGB" />
            </description>
          </item>
          <item>
            <term>
              <see cref="T:devDept.Geometry.IndexTriangle" />
            </term>
            <description>Plain<sup>1</sup></description>
            <description>MulticolorPlain</description>
          </item>
          <item>
            <term>
              <see cref="T:devDept.Geometry.SmoothTriangle" />
            </term>
            <description>Smooth<sup>1</sup></description>
            <description>MulticolorSmooth</description>
          </item>
          <item>
            <term>
              <see cref="T:devDept.Geometry.ColorTriangle" />
            </term>
            <description>ColorPlain</description>
            <description>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:devDept.Geometry.ColorSmoothTriangle" />
            </term>
            <description>ColorSmooth</description>
            <description>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:devDept.Geometry.RichTriangle" />
            </term>
            <description>RichPlain</description>
            <description>
            </description>
          </item>
          <item>
            <term>
              <see cref="T:devDept.Geometry.RichSmoothTriangle" />
            </term>
            <description>RichSmooth</description>
            <description>
            </description>
          </item>
        </list>
        <para>
          <sup>1</sup> Allows transparency to be used</para>
      </summary>
      <example>
            The following code samples demonstrate how to use the different mesh natures. 
            <code lang="C#"><![CDATA[
             using System;
             using System.Collections.Generic;
             using System.Drawing;
             using devDept.Eyeshot;
             using devDept.Eyeshot.Entities;
             using devDept.Geometry;
             
             namespace MeshSamples
             {
                 internal class MeshFactory
                 {
                     private static int rows = 8;
                     private static int cols = 8;
                     private static double scale = 4;
             
                     public static void Plain(Design design)
                     {
                         List<Point3D> vertices = new List<Point3D>(rows * cols);
                         Mesh surface = new Mesh();
                         surface.NormalAveragingMode = GMesh.normalAveragingType.Averaged;
                         for (int j = 0; j < rows; j++)
                         for (int i = 0; i < cols; i++)
                         {
                             double x = -i / 5.0 - 2;
                             double y = -j / 5.0 - 2;
                             double f = 0;
                             double den = Math.Sqrt(x * x + y * y);
                             if (den != 0)
                                 f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                             vertices.Add(new Point3D(x, y, f));
                         }
             
                         List<IndexTriangle> triangles = new List<IndexTriangle>((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j < (rows - 1); j++)
                         for (int i = 0; i < (cols - 1); i++)
                         {
                             triangles.Add(new IndexTriangle(i + j * cols,
                                 i + j * cols + 1,
                                 i + (j + 1) * cols + 1));
                             triangles.Add(new IndexTriangle(i + j * cols,
                                 i + (j + 1) * cols + 1,
                                 i + (j + 1) * cols));
                         }
             
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         design.Entities.Add(surface, System.Drawing.Color.Green);
                     }
             
                     public static void ColoredPlain(Design design)
                     {
                         List<Point3D> vertices = new List<Point3D>(rows * cols);
                         Mesh surface = new Mesh();
                         for (int j = 0; j < rows; j++)
                         for (int i = 0; i < cols; i++)
                         {
                             double x = -i / 5.0 - 2;
                             double y = -j / 5.0 - 2;
                             double f = 0;
                             double den = Math.Sqrt(x * x + y * y);
                             if (den != 0)
                                 f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                             vertices.Add(new Point3D(x, y, f));
                         }
             
                         List<ColorTriangle> triangles = new List<ColorTriangle>((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j < (rows - 1); j++)
                         for (int i = 0; i < (cols - 1); i++)
                         {
                             // generates a random color
                             int red = (int) (255 - i * 100);
                             int green = (int) (255 - j * 50);
                             int blue = 127;
                             // clamps color values lat 0-255
                             Utility.LimitRange<int>(0, ref red, 255);
                             Utility.LimitRange<int>(0, ref green, 255);
                             Utility.LimitRange<int>(0, ref blue, 255);
                             triangles.Add(new ColorTriangle(i + j * cols,
                                 i + j * cols + 1,
                                 i + (j + 1) * cols + 1, (byte) red, (byte) green, (byte) blue));
                             triangles.Add(new ColorTriangle(i + j * cols,
                                 i + (j + 1) * cols + 1,
                                 i + (j + 1) * cols, (byte) red, (byte) green, (byte) blue));
                         }
             
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         design.Entities.Add(surface);
                     }
             
                     public static void MulticolorPlain(Design design)
                     {
                         List<PointRGB> vertices = new List<PointRGB>(rows * cols);
                         Mesh surface = new Mesh();
                         for (int j = 0; j < rows; j++)
                         for (int i = 0; i < cols; i++)
                         {
                             double x = -i / 5.0 - 2;
                             double y = -j / 5.0 - 2;
                             double f = 0;
                             double den = Math.Sqrt(x * x + y * y);
                             if (den != 0)
                                 f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                             // generates a random color
                             int red = (int) (y * y * 30);
                             int green = (int) (x * x * 30);
                             int blue = (int) (255 - f * f * 1000);
                             // clamps color values lat 0-255
                             Utility.LimitRange<int>(0, ref red, 255);
                             Utility.LimitRange<int>(0, ref green, 255);
                             Utility.LimitRange<int>(0, ref blue, 255);
                             vertices.Add(new PointRGB(x, y, f, (byte) red, (byte) green, (byte) blue));
                         }
             
                         List<IndexTriangle> triangles = new List<IndexTriangle>((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j < (rows - 1); j++)
                         for (int i = 0; i < (cols - 1); i++)
                         {
                             triangles.Add(new IndexTriangle(i + j * cols,
                                 i + j * cols + 1,
                                 i + (j + 1) * cols + 1));
                             triangles.Add(new IndexTriangle(i + j * cols,
                                 i + (j + 1) * cols + 1,
                                 i + (j + 1) * cols));
                         }
             
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         design.Entities.Add(surface);
                     }
             
                     public static void TexturedPlain(Design design)
                     {
                         List<Point3D> vertices = new List<Point3D>(rows * cols);
                         List<PointF> texCoords = new List<PointF>(rows * cols);
                         Mesh surface = new Mesh();
                         for (int j = 0; j < rows; j++)
                         for (int i = 0; i < cols; i++)
                         {
                             double x = -i / 5.0 - 2;
                             double y = -j / 5.0 - 2;
                             double f = 0;
                             double den = Math.Sqrt(x * x + y * y);
                             if (den != 0)
                                 f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                             vertices.Add(new Point3D(x, y, f));
                             texCoords.Add(new PointF((float)(-x * 5) / (rows - 1), (float)(-y * 5) / (cols - 1)));
                         }
             
                         Bitmap bmp = new Bitmap(Properties.Resources.Smiley);
                         Material mat = new Material("test", bmp);
                         design.Materials.Add(mat);
                         List<RichTriangle> triangles = new List<RichTriangle>((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j < (rows - 1); j++)
                         for (int i = 0; i < (cols - 1); i++)
                         {
                             RichTriangle tri = new RichTriangle(i + j * cols,
                                 i + j * cols + 1,
                                 i + (j + 1) * cols + 1);
                             tri.T1 = tri.V1;
                             tri.T2 = tri.V2;
                             tri.T3 = tri.V3;
                             triangles.Add(tri);
                             tri = new RichTriangle(i + j * cols,
                                 i + (j + 1) * cols + 1,
                                 i + (j + 1) * cols);
                             tri.T1 = tri.V1;
                             tri.T2 = tri.V2;
                             tri.T3 = tri.V3;
                             triangles.Add(tri);
                         }
             
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         surface.TextureCoords = texCoords.ToArray();
             
                         surface.ColorMethod = colorMethodType.byEntity;
                         surface.MaterialName = mat.Name;
             
                         design.Entities.Add(surface);
                     }
             
                     public static void Smooth(Design design)
                     {
                         List<Point3D> vertices = new List<Point3D>(rows * cols);
                         Mesh surface = new Mesh();
                         surface.NormalAveragingMode = GMesh.normalAveragingType.Averaged;
                         for (int j = 0; j < rows; j++)
                         for (int i = 0; i < cols; i++)
                         {
                             double x = -i / 5.0 - 2;
                             double y = -j / 5.0 - 2;
                             double f = 0;
                             double den = Math.Sqrt(x * x + y * y);
                             if (den != 0)
                                 f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                             vertices.Add(new Point3D(x, y, f));
                         }
             
                         List<SmoothTriangle> triangles = new List<SmoothTriangle>((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j < (rows - 1); j++)
                         for (int i = 0; i < (cols - 1); i++)
                         {
                             triangles.Add(new SmoothTriangle(i + j * cols,
                                 i + j * cols + 1,
                                 i + (j + 1) * cols + 1));
                             triangles.Add(new SmoothTriangle(i + j * cols,
                                 i + (j + 1) * cols + 1,
                                 i + (j + 1) * cols));
                         }
             
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         design.Entities.Add(surface, System.Drawing.Color.Green);
                     }
             
                     public static void ColoredSmooth(Design design)
                     {
                         List<Point3D> vertices = new List<Point3D>(rows * cols);
                         Mesh surface = new Mesh();
                         for (int j = 0; j < rows; j++)
                         for (int i = 0; i < cols; i++)
                         {
                             double x = -i / 5.0 - 2;
                             double y = -j / 5.0 - 2;
                             double f = 0;
                             double den = Math.Sqrt(x * x + y * y);
                             if (den != 0)
                                 f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                             vertices.Add(new Point3D(x, y, f));
                         }
             
                         List<ColorSmoothTriangle> triangles = new List<ColorSmoothTriangle>((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j < (rows - 1); j++)
                         for (int i = 0; i < (cols - 1); i++)
                         {
                             // generates a random color
                             int red = (255 - i * 100);
                             int green = (255 - j * 50);
                             int blue = 127;
                             // clamps color values lat 0-255
                             Utility.LimitRange<int>(0, ref red, 255);
                             Utility.LimitRange<int>(0, ref green, 255);
                             Utility.LimitRange<int>(0, ref blue, 255);
                             triangles.Add(new ColorSmoothTriangle(i + j * cols,
                                 i + j * cols + 1,
                                 i + (j + 1) * cols + 1, (byte) red, (byte) green, (byte) blue));
                             triangles.Add(new ColorSmoothTriangle(i + j * cols,
                                 i + (j + 1) * cols + 1,
                                 i + (j + 1) * cols, (byte) red, (byte) green, (byte) blue));
                         }
             
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         design.Entities.Add(surface);
                     }
             
                     public static void MulticolorSmooth(Design design)
                     {
                         List<PointRGB> vertices = new List<PointRGB>(rows * cols);
                         Mesh surface = new Mesh();
                         surface.NormalAveragingMode = GMesh.normalAveragingType.Averaged;
                         for (int j = 0; j < rows; j++)
                         for (int i = 0; i < cols; i++)
                         {
                             double x = -i / 5.0 - 2;
                             double y = -j / 5.0 - 2;
                             double f = 0;
                             double den = Math.Sqrt(x * x + y * y);
                             if (den != 0)
                                 f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                             // generates a random color
                             int red = (int) (y * y * 30);
                             int green = (int) (x * x * 30);
                             int blue = (int) (255 - f * f * 1000);
                             // clamps color values lat 0-255
                             Utility.LimitRange<int>(0, ref red, 255);
                             Utility.LimitRange<int>(0, ref green, 255);
                             Utility.LimitRange<int>(0, ref blue, 255);
                             vertices.Add(new PointRGB(x, y, f, (byte) red, (byte) green, (byte) blue));
                         }
             
                         List<SmoothTriangle> triangles = new List<SmoothTriangle>((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j < (rows - 1); j++)
                         for (int i = 0; i < (cols - 1); i++)
                         {
                             triangles.Add(new SmoothTriangle(i + j * cols,
                                 i + j * cols + 1,
                                 i + (j + 1) * cols + 1));
                             triangles.Add(new SmoothTriangle(i + j * cols,
                                 i + (j + 1) * cols + 1,
                                 i + (j + 1) * cols));
                         }
             
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         design.Entities.Add(surface);
                     }
             
                     public static void TexturedSmooth(Design design)
                     {
                         List<Point3D> vertices = new List<Point3D>(rows * cols);
                         List<PointF> texCoords = new List<PointF>(rows * cols);
                         Mesh surface = new Mesh();
                         for (int j = 0; j < rows; j++)
                         for (int i = 0; i < cols; i++)
                         {
                             double x = -i / 5.0 - 2;
                             double y = -j / 5.0 - 2;
                             double f = 0;
                             double den = Math.Sqrt(x * x + y * y);
                             if (den != 0)
                                 f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den;
                             vertices.Add(new Point3D(x, y, f));
                             texCoords.Add(new PointF((float)(-x * 5) / (rows - 1), (float)(-y * 5) / (cols - 1)));
                         }
             
                         Bitmap bmp = new Bitmap(Properties.Resources.Smiley);
                         Material mat = new Material("test", bmp);
                         design.Materials.Add(mat);
                         List<RichSmoothTriangle> triangles = new List<RichSmoothTriangle>((rows - 1) * (cols - 1) * 2);
                         for (int j = 0; j < (rows - 1); j++)
                         for (int i = 0; i < (cols - 1); i++)
                         {
                             RichSmoothTriangle tri = new RichSmoothTriangle(i + j * cols,
                                 i + j * cols + 1,
                                 i + (j + 1) * cols + 1);
                             tri.T1 = tri.V1;
                             tri.T2 = tri.V2;
                             tri.T3 = tri.V3;
                             triangles.Add(tri);
                             tri = new RichSmoothTriangle(i + j * cols,
                                 i + (j + 1) * cols + 1,
                                 i + (j + 1) * cols);
                             tri.T1 = tri.V1;
                             tri.T2 = tri.V2;
                             tri.T3 = tri.V3;
                             triangles.Add(tri);
                         }
             
                         surface.Vertices = vertices.ToArray();
                         surface.Triangles = triangles.ToArray();
                         surface.TextureCoords = texCoords.ToArray();
             
                         surface.MaterialName = mat.Name;
                         surface.ColorMethod = colorMethodType.byEntity;
             
                         design.Entities.Add(surface);
                     }
             
                 }
             }
            ]]></code><code lang="VB"><![CDATA[
             Imports System
             Imports System.Collections.Generic
             Imports System.Drawing
             Imports devDept.Eyeshot
             Imports devDept.Eyeshot.Entities
             Imports devDept.Geometry
             Imports devDept.Geometry.Entities
             Namespace MeshSamples
               Friend Class MeshFactory
                   Private Shared rows As Integer = 8
                   Private Shared cols As Integer = 8
                   Private Shared scale As Double = 4
            
                   Public Shared Sub Plain(design As Design)
                       Dim vertices As New List(Of Point3D)(rows * cols)
                       Dim surface As New Mesh()
                       surface.NormalAveragingMode = GMesh.normalAveragingType.Averaged
                       For j As Integer = 0 To rows - 1
                           For i As Integer = 0 To cols - 1
                               Dim x As Double = -i / 5.0 - 2
                               Dim y As Double = -j / 5.0 - 2
                               Dim f As Double = 0
                               Dim den As Double = Math.Sqrt(x * x + y * y)
                               If den <> 0 Then
                                   f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                               End If
                               vertices.Add(New Point3D(x, y, f))
                           Next
                       Next
                       Dim triangles As New List(Of IndexTriangle)((rows - 1) * (cols - 1) * 2)
                       For j As Integer = 0 To (rows - 1) - 1
                           For i As Integer = 0 To (cols - 1) - 1
                               triangles.Add(New IndexTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1))
                               triangles.Add(New IndexTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols))
                           Next
                       Next
                       surface.Vertices = vertices.ToArray()
                       surface.Triangles = triangles.ToArray()
                       design.Entities.Add(surface, System.Drawing.Color.Green)
                   End Sub
            
                   Public Shared Sub ColoredPlain(design As Design)
                       Dim vertices As New List(Of Point3D)(rows * cols)
                       Dim surface As New Mesh()
                       For j As Integer = 0 To rows - 1
                           For i As Integer = 0 To cols - 1
                               Dim x As Double = -i / 5.0 - 2
                               Dim y As Double = -j / 5.0 - 2
                               Dim f As Double = 0
                               Dim den As Double = Math.Sqrt(x * x + y * y)
                               If den <> 0 Then
                                   f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                               End If
                               vertices.Add(New Point3D(x, y, f))
                           Next
                       Next
                       Dim triangles As New List(Of ColorTriangle)((rows - 1) * (cols - 1) * 2)
                       For j As Integer = 0 To (rows - 1) - 1
                           For i As Integer = 0 To (cols - 1) - 1
                               ' generates a random color
                               Dim red As Integer = CInt(255 - i * 100)
                               Dim green As Integer = CInt(255 - j * 50)
                               Dim blue As Integer = 127
                               ' clamps color values lat 0-255
                               Utility.LimitRange(Of Integer)(0, red, 255)
                               Utility.LimitRange(Of Integer)(0, green, 255)
                               Utility.LimitRange(Of Integer)(0, blue, 255)
                               triangles.Add(New ColorTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1, CByte(red), CByte(green), CByte(blue)))
                               triangles.Add(New ColorTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols, CByte(red), CByte(green), CByte(blue)))
                           Next
                       Next
                       surface.Vertices = vertices.ToArray()
                       surface.Triangles = triangles.ToArray()
                       design.Entities.Add(surface)
                   End Sub
            
                   Public Shared Sub MulticolorPlain(design As Design)
                       Dim vertices As New List(Of PointRGB)(rows * cols)
                       Dim surface As New Mesh()
                       For j As Integer = 0 To rows - 1
                           For i As Integer = 0 To cols - 1
                               Dim x As Double = -i / 5.0 - 2
                               Dim y As Double = -j / 5.0 - 2
                               Dim f As Double = 0
                               Dim den As Double = Math.Sqrt(x * x + y * y)
                               If den <> 0 Then
                                   f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                               End If
                               ' generates a random color
                               Dim red As Integer = CInt(y * y * 30)
                               Dim green As Integer = CInt(x * x * 30)
                               Dim blue As Integer = CInt(255 - f * f * 1000)
                               ' clamps color values lat 0-255
                               Utility.LimitRange(Of Integer)(0, red, 255)
                               Utility.LimitRange(Of Integer)(0, green, 255)
                               Utility.LimitRange(Of Integer)(0, blue, 255)
                               vertices.Add(New PointRGB(x, y, f, CByte(red), CByte(green), CByte(blue)))
                           Next
                       Next
                       Dim triangles As New List(Of IndexTriangle)((rows - 1) * (cols - 1) * 2)
                       For j As Integer = 0 To (rows - 1) - 1
                           For i As Integer = 0 To (cols - 1) - 1
                               triangles.Add(New IndexTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1))
                               triangles.Add(New IndexTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols))
                           Next
                       Next
                       surface.Vertices = vertices.ToArray()
                       surface.Triangles = triangles.ToArray()
                       design.Entities.Add(surface)
                   End Sub
            
                   Public Shared Sub TexturedPlain(design As Design)
                       Dim vertices As New List(Of Point3D)(rows * cols)
                       Dim texCoords As New List(Of devDept.Geometry.PointF)(rows * cols)
                       Dim surface As New Mesh()
                       For j As Integer = 0 To rows - 1
                           For i As Integer = 0 To cols - 1
                               Dim x As Double = -i / 5.0 - 2
                               Dim y As Double = -j / 5.0 - 2
                               Dim f As Double = 0
                               Dim den As Double = Math.Sqrt(x * x + y * y)
                               If den <> 0 Then
                                   f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                               End If
                               vertices.Add(New Point3D(x, y, f))
                               texCoords.Add(New devDept.Geometry.PointF((-x * 5) / (rows - 1), (-y * 5) / (cols - 1)))
                           Next
                       Next
                       Dim bmp As New Bitmap(Properties.Resources.Smiley)
                       Dim mat As New Material("test", bmp)
                       design.Materials.Add(mat)
                       Dim triangles As New List(Of RichTriangle)((rows - 1) * (cols - 1) * 2)
                       For j As Integer = 0 To (rows - 1) - 1
                           For i As Integer = 0 To (cols - 1) - 1
                               Dim tri As New RichTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1)
                               tri.T1 = tri.V1
                               tri.T2 = tri.V2
                               tri.T3 = tri.V3
                               triangles.Add(tri)
                               tri = New RichTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols)
                               tri.T1 = tri.V1
                               tri.T2 = tri.V2
                               tri.T3 = tri.V3
                               triangles.Add(tri)
                           Next
                       Next
                       surface.Vertices = vertices.ToArray()
                       surface.Triangles = triangles.ToArray()
                       surface.TextureCoords = texCoords.ToArray()
            
                       surface.ColorMethod = colorMethodType.byEntity
                       surface.MaterialName = mat.Name
            
                       design.Entities.Add(surface)
                   End Sub
            
                   Public Shared Sub Smooth(design As Design)
                       Dim vertices As New List(Of Point3D)(rows * cols)
                       Dim surface As New Mesh()
                       surface.NormalAveragingMode = GMesh.normalAveragingType.Averaged
                       For j As Integer = 0 To rows - 1
                           For i As Integer = 0 To cols - 1
                               Dim x As Double = -i / 5.0 - 2
                               Dim y As Double = -j / 5.0 - 2
                               Dim f As Double = 0
                               Dim den As Double = Math.Sqrt(x * x + y * y)
                               If den <> 0 Then
                                   f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                               End If
                               vertices.Add(New Point3D(x, y, f))
                           Next
                       Next
                       Dim triangles As New List(Of SmoothTriangle)((rows - 1) * (cols - 1) * 2)
                       For j As Integer = 0 To (rows - 1) - 1
                           For i As Integer = 0 To (cols - 1) - 1
                               triangles.Add(New SmoothTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1))
                               triangles.Add(New SmoothTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols))
                           Next
                       Next
                       surface.Vertices = vertices.ToArray()
                       surface.Triangles = triangles.ToArray()
                       design.Entities.Add(surface, System.Drawing.Color.Green)
                   End Sub
            
                   Public Shared Sub ColoredSmooth(design As Design)
                       Dim vertices As New List(Of Point3D)(rows * cols)
                       Dim surface As New Mesh()
                       For j As Integer = 0 To rows - 1
                           For i As Integer = 0 To cols - 1
                               Dim x As Double = -i / 5.0 - 2
                               Dim y As Double = -j / 5.0 - 2
                               Dim f As Double = 0
                               Dim den As Double = Math.Sqrt(x * x + y * y)
                               If den <> 0 Then
                                   f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                               End If
                               vertices.Add(New Point3D(x, y, f))
                           Next
                       Next
                       Dim triangles As New List(Of ColorSmoothTriangle)((rows - 1) * (cols - 1) * 2)
                       For j As Integer = 0 To (rows - 1) - 1
                           For i As Integer = 0 To (cols - 1) - 1
                               ' generates a random color
                               Dim red As Integer = (255 - i * 100)
                               Dim green As Integer = (255 - j * 50)
                               Dim blue As Integer = 127
                               ' clamps color values lat 0-255
                               Utility.LimitRange(Of Integer)(0, red, 255)
                               Utility.LimitRange(Of Integer)(0, green, 255)
                               Utility.LimitRange(Of Integer)(0, blue, 255)
                               triangles.Add(New ColorSmoothTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1, CByte(red), CByte(green), CByte(blue)))
                               triangles.Add(New ColorSmoothTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols, CByte(red), CByte(green), CByte(blue)))
                           Next
                       Next
                       surface.Vertices = vertices.ToArray()
                       surface.Triangles = triangles.ToArray()
                       design.Entities.Add(surface)
                   End Sub
            
                   Public Shared Sub MulticolorSmooth(design As Design)
                       Dim vertices As New List(Of PointRGB)(rows * cols)
                       Dim surface As New Mesh()
                       surface.NormalAveragingMode = GMesh.normalAveragingType.Averaged
                       For j As Integer = 0 To rows - 1
                           For i As Integer = 0 To cols - 1
                               Dim x As Double = -i / 5.0 - 2
                               Dim y As Double = -j / 5.0 - 2
                               Dim f As Double = 0
                               Dim den As Double = Math.Sqrt(x * x + y * y)
                               If den <> 0 Then
                                   f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                               End If
                               ' generates a random color
                               Dim red As Integer = CInt(y * y * 30)
                               Dim green As Integer = CInt(x * x * 30)
                               Dim blue As Integer = CInt(255 - f * f * 1000)
                               ' clamps color values lat 0-255
                               Utility.LimitRange(Of Integer)(0, red, 255)
                               Utility.LimitRange(Of Integer)(0, green, 255)
                               Utility.LimitRange(Of Integer)(0, blue, 255)
                               vertices.Add(New PointRGB(x, y, f, CByte(red), CByte(green), CByte(blue)))
                           Next
                       Next
                       Dim triangles As New List(Of SmoothTriangle)((rows - 1) * (cols - 1) * 2)
                       For j As Integer = 0 To (rows - 1) - 1
                           For i As Integer = 0 To (cols - 1) - 1
                               triangles.Add(New SmoothTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1))
                               triangles.Add(New SmoothTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols))
                           Next
                       Next
                       surface.Vertices = vertices.ToArray()
                       surface.Triangles = triangles.ToArray()
                       design.Entities.Add(surface)
                   End Sub
            
                   Public Shared Sub TexturedSmooth(design As Design)
                       Dim vertices As New List(Of Point3D)(rows * cols)
                       Dim texCoords As New List(Of devDept.Geometry.PointF)(rows * cols)
                       Dim surface As New Mesh()
                       For j As Integer = 0 To rows - 1
                           For i As Integer = 0 To cols - 1
                               Dim x As Double = -i / 5.0 - 2
                               Dim y As Double = -j / 5.0 - 2
                               Dim f As Double = 0
                               Dim den As Double = Math.Sqrt(x * x + y * y)
                               If den <> 0 Then
                                   f = scale * Math.Sin(Math.Sqrt(x * x + y * y)) / den
                               End If
                               vertices.Add(New Point3D(x, y, f))
                               texCoords.Add(New devDept.Geometry.PointF((-x * 5) / (rows - 1), (-y * 5) / (cols - 1)))
                           Next
                       Next
                       Dim bmp As New Bitmap(Properties.Resources.Smiley)
                       Dim mat As New Material("test", bmp)
                       design.Materials.Add(mat)
                       Dim triangles As New List(Of RichSmoothTriangle)((rows - 1) * (cols - 1) * 2)
                       For j As Integer = 0 To (rows - 1) - 1
                           For i As Integer = 0 To (cols - 1) - 1
                               Dim tri As New RichSmoothTriangle(i + j * cols, i + j * cols + 1, i + (j + 1) * cols + 1)
                               tri.T1 = tri.V1
                               tri.T2 = tri.V2
                               tri.T3 = tri.V3
                               triangles.Add(tri)
                               tri = New RichSmoothTriangle(i + j * cols, i + (j + 1) * cols + 1, i + (j + 1) * cols)
                               tri.T1 = tri.V1
                               tri.T2 = tri.V2
                               tri.T3 = tri.V3
                               triangles.Add(tri)
                           Next
                       Next
                       surface.Vertices = vertices.ToArray()
                       surface.Triangles = triangles.ToArray()
                       surface.TextureCoords = texCoords.ToArray()
            
                       surface.MaterialName = mat.Name
                       surface.ColorMethod = colorMethodType.byEntity
            
                       design.Entities.Add(surface)
                   End Sub
            
               End Class
             End Namespace]]></code></example>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ExtrudePlanar(devDept.Geometry.Vector3D)">
      <summary>
            Extrudes a quasi-planar mesh.
            </summary>
      <param name="amount">Extrusion amount</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ExtrudePlanar(System.Double,System.Double,System.Double)">
      <summary>
            Extrudes a quasi-planar mesh.
            </summary>
      <param name="dx">Extrusion amount along the X axis</param>
      <param name="dy">Extrusion amount along the Y axis</param>
      <param name="dz">Extrusion amount along the Z axis</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.RevolvePlanar(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Revolves a quasi-planar mesh. 
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="natureType">The nature of the mesh</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateBox(System.Double,System.Double,System.Double)">
      <summary>Creates a Box primitive.</summary>
      <param name="width">Box's width</param>
      <param name="depth">Box's depth</param>
      <param name="height">Box's height</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateBox``1(System.Double,System.Double,System.Double)">
      <summary>Creates a Box primitive.</summary>
      <param name="width">Box's width</param>
      <param name="depth">Box's depth</param>
      <param name="height">Box's height</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateBox(System.Double,System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Creates a Box primitive.</summary>v
            <param name="width">Box's width</param><param name="depth">Box's depth</param><param name="height">Box's height</param><param name="meshNature">Nature of the mesh</param><returns>The created mesh.</returns></member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateBox``1(System.Double,System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Creates a Box primitive.</summary>v
            <param name="width">Box's width</param><param name="depth">Box's depth</param><param name="height">Box's height</param><param name="meshNature">Nature of the mesh</param><returns>The created mesh.</returns></member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateBox(System.Double,System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>Creates a Box primitive.</summary>
      <param name="width">Box's width</param>
      <param name="depth">Box's depth</param>
      <param name="height">Box's height</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <exception cref="T:System.Exception">
      </exception>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateBox``1(System.Double,System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>Creates a Box primitive.</summary>
      <param name="width">Box's width</param>
      <param name="depth">Box's depth</param>
      <param name="height">Box's height</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <exception cref="T:System.Exception">
      </exception>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone(System.Double,System.Double,System.Double,System.Int32)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="height">The cone's height</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
             /// <returns>The created mesh.</returns></member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone``1(System.Double,System.Double,System.Double,System.Int32)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="height">The cone's height</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
             /// <returns>The created mesh.</returns></member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone(System.Double,System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="height">The cone's height</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone``1(System.Double,System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="height">The cone's height</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone(System.Double,System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="height">The cone's height</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <exception cref="T:System.Exception">
      </exception>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone``1(System.Double,System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="height">The cone's height</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <exception cref="T:System.Exception">
      </exception>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="point1">Cone''s first point</param>
      <param name="point2">Cone''s second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone``1(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="point1">Cone''s first point</param>
      <param name="point2">Cone''s second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="point1">Cone''s first point</param>
      <param name="point2">Cone''s second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone``1(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="point1">Cone''s first point</param>
      <param name="point2">Cone''s second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="point1">Cone''s first point</param>
      <param name="point2">Cone''s second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCone``1(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="point1">Cone''s first point</param>
      <param name="point2">Cone''s second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Triangulates the specified 2D region.</summary>
      <param name="sketchPlane">Plane on which the points lay</param>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="meshNature">Nature of the Mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar``1(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Triangulates the specified 2D region.</summary>
      <param name="sketchPlane">Plane on which the points lay</param>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="meshNature">Nature of the Mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point2D}},devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Triangulates the specified 2D region.</summary>
      <param name="sketchPlane">Plane on which the points lay</param>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="inners">The inner contour list oriented clockwise</param>
      <param name="meshNature">Nature of the Mesh</param>
      <returns>The created mesh.</returns>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Countours must be closed</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar``1(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point2D}},devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Triangulates the specified 2D region.</summary>
      <param name="sketchPlane">Plane on which the points lay</param>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="inners">The inner contour list oriented clockwise</param>
      <param name="meshNature">Nature of the Mesh</param>
      <returns>The created mesh.</returns>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Countours must be closed</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Triangulates the specified 3D region.</summary>
      <example>
            The following example demonstrate how to draw a face on the ZX plane.
            <code lang="CS" title="C#">
            List&lt;Point3D&gt; outer = new List&lt;Point3D&gt;();
            
            outer.Add(new Point3D(0, 0, 0));
            outer.Add(new Point3D(10, 0, 0));
            outer.Add(new Point3D(20, 0, -5));
            outer.Add(new Point3D(10, 0, 20));
            outer.Add(new Point3D(0, 0, 20));
            outer.Add(new Point3D(-10, 0, -5));
            outer.Add(new Point3D(0, 0, 0));
            Mesh m = Mesh.CreatePlanar(outer, GMesh.natureType.Plain);
            m.Color = Color.Firebrick;
            m.ColorMethod = colorMethodType.byEntity;
            
            viewportProfessional1.Entities.Add(m);
            </code><code lang="VB" title="Visual Basic">
            Dim outer As List(of Point3D) = New List(of Point3D);
            
            outer.Add(New Point3D(0, 0, 0))
            outer.Add(New Point3D(10, 0, 0))
            outer.Add(New Point3D(20, 0, -5))
            outer.Add(New Point3D(10, 0, 20))
            outer.Add(New Point3D(0, 0, 20))
            outer.Add(New Point3D(-10, 0, -5))
            outer.Add(New Point3D(0, 0, 0))
            
            Dim m As Mesh = Mesh.CreatePlanar(outer, GMesh.natureType.Plain)
            m.Color = Color.Firebrick
            m.ColorMethod = colorMethodType.byEntity
            
            viewportProfessional1.Entities.Add(m)
            </code></example>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="meshNature">Nature of the Mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar``1(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Triangulates the specified 3D region.</summary>
      <example>
            The following example demonstrate how to draw a face on the ZX plane.
            <code lang="CS" title="C#">
            List&lt;Point3D&gt; outer = new List&lt;Point3D&gt;();
            
            outer.Add(new Point3D(0, 0, 0));
            outer.Add(new Point3D(10, 0, 0));
            outer.Add(new Point3D(20, 0, -5));
            outer.Add(new Point3D(10, 0, 20));
            outer.Add(new Point3D(0, 0, 20));
            outer.Add(new Point3D(-10, 0, -5));
            outer.Add(new Point3D(0, 0, 0));
            Mesh m = Mesh.CreatePlanar(outer, GMesh.natureType.Plain);
            m.Color = Color.Firebrick;
            m.ColorMethod = colorMethodType.byEntity;
            
            viewportProfessional1.Entities.Add(m);
            </code><code lang="VB" title="Visual Basic">
            Dim outer As List(of Point3D) = New List(of Point3D);
            
            outer.Add(New Point3D(0, 0, 0))
            outer.Add(New Point3D(10, 0, 0))
            outer.Add(New Point3D(20, 0, -5))
            outer.Add(New Point3D(10, 0, 20))
            outer.Add(New Point3D(0, 0, 20))
            outer.Add(New Point3D(-10, 0, -5))
            outer.Add(New Point3D(0, 0, 0))
            
            Dim m As Mesh = Mesh.CreatePlanar(outer, GMesh.natureType.Plain)
            m.Color = Color.Firebrick
            m.ColorMethod = colorMethodType.byEntity
            
            viewportProfessional1.Entities.Add(m)
            </code></example>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="meshNature">Nature of the Mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}},devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Triangulates the specified 3D region.</summary>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="inners">The inner contour list oriented clockwise</param>
      <param name="meshNature">Nature of the Mesh</param>
      <returns>The created mesh.</returns>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Countours must be closed</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar``1(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}},devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Triangulates the specified 3D region.</summary>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="inners">The inner contour list oriented clockwise</param>
      <param name="meshNature">Nature of the Mesh</param>
      <returns>The created mesh.</returns>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Countours must be closed</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Triangulates the specified 3D region.</summary>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="tolerance">The chordal error</param>
      <param name="meshNature">Nature of the Mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar``1(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Triangulates the specified 3D region.</summary>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="tolerance">The chordal error</param>
      <param name="meshNature">Nature of the Mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Triangulates the specified 3D region.</summary>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="inners">The inner contour list oriented clockwise</param>
      <param name="tolerance">The chordal error</param>
      <param name="meshNature">Nature of the Mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreatePlanar``1(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Triangulates the specified 3D region.</summary>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="inners">The inner contour list oriented clockwise</param>
      <param name="tolerance">The chordal error</param>
      <param name="meshNature">Nature of the Mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder(System.Double,System.Double,System.Int32)">
      <summary>
            Creates a Cylinder primitive.
            </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="height">Cylinder's height</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder``1(System.Double,System.Double,System.Int32)">
      <summary>
            Creates a Cylinder primitive.
            </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="height">Cylinder's height</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder(System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Creates a Cylinder primitive.
             </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="height">Cylinder's height</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder``1(System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Creates a Cylinder primitive.
             </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="height">Cylinder's height</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder(System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>
             Creates a Cylinder primitive.
             </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="height">Cylinder's height</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <exception cref="T:System.Exception">
      </exception>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder``1(System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>
             Creates a Cylinder primitive.
             </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="height">Cylinder's height</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <exception cref="T:System.Exception">
      </exception>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32)">
      <summary>Creates a Cylinder primitive.
            </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="point1">Cylinder's first point</param>
      <param name="point2">Cylinder's second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder``1(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32)">
      <summary>Creates a Cylinder primitive.
            </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="point1">Cylinder's first point</param>
      <param name="point2">Cylinder's second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Creates a Cylinder primitive.
            </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="point1">Cylinder's first point</param>
      <param name="point2">Cylinder's second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder``1(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Creates a Cylinder primitive.
            </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="point1">Cylinder's first point</param>
      <param name="point2">Cylinder's second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>Creates a Cylinder primitive.
            </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="point1">Cylinder's first point</param>
      <param name="point2">Cylinder's second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateCylinder``1(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>Creates a Cylinder primitive.
            </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="point1">Cylinder's first point</param>
      <param name="point2">Cylinder's second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSphere(System.Double,System.Int32,System.Int32)">
      <summary>
            Creates a Sphere primitive.
            </summary>
      <param name="radius">Sphere's radius</param>
      <param name="slices">Number of slices</param>
      <param name="stacks">Numer of stacks</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSphere(System.Double,System.Int32,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Creates a Sphere primitive.
             </summary>
      <param name="radius">Sphere's radius</param>
      <param name="slices">Number of slices</param>
      <param name="stacks">Numer of stacks</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSphere``1(System.Double,System.Int32,System.Int32)">
      <summary>
            Creates a Sphere primitive.
            </summary>
      <param name="radius">Sphere's radius</param>
      <param name="slices">Number of slices</param>
      <param name="stacks">Numer of stacks</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSphere``1(System.Double,System.Int32,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Creates a Sphere primitive.
             </summary>
      <param name="radius">Sphere's radius</param>
      <param name="slices">Number of slices</param>
      <param name="stacks">Numer of stacks</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateTorus(System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
             Creates a Torus primitive.
             </summary>
      <param name="majorRadius">Torus radius</param>
      <param name="minorRadius">Torus section radius</param>
      <param name="sides">Number of sides</param>
      <param name="rings">Number of rings</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateTorus``1(System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
             Creates a Torus primitive.
             </summary>
      <param name="majorRadius">Torus radius</param>
      <param name="minorRadius">Torus section radius</param>
      <param name="sides">Number of sides</param>
      <param name="rings">Number of rings</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateTorus(System.Double,System.Double,System.Int32,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Creates a Torus primitive.
             </summary>
      <param name="majorRadius">Torus radius</param>
      <param name="minorRadius">Torus section radius</param>
      <param name="sides">Number of sides</param>
      <param name="rings">Number of rings</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateTorus``1(System.Double,System.Double,System.Int32,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Creates a Torus primitive.
             </summary>
      <param name="majorRadius">Torus radius</param>
      <param name="minorRadius">Torus section radius</param>
      <param name="sides">Number of sides</param>
      <param name="rings">Number of rings</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateArrow(System.Double,System.Double,System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Creates a 3D arrow primitive.
             </summary>
      <param name="cylRadius">Arrow's cylinder radius</param>
      <param name="cylLength">Arrow's cylinder length</param>
      <param name="coneRadius">Arrow's cone radius</param>
      <param name="coneLength">Arrow's cone length</param>
      <param name="slices">Number of slices</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateArrow``1(System.Double,System.Double,System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Creates a 3D arrow primitive.
             </summary>
      <param name="cylRadius">Arrow's cylinder radius</param>
      <param name="cylLength">Arrow's cylinder length</param>
      <param name="coneRadius">Arrow's cone radius</param>
      <param name="coneLength">Arrow's cone length</param>
      <param name="slices">Number of slices</param>
      <param name="meshNature">Nature of the mesh</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateArrow(System.Double,System.Double,System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>
             Creates a 3D arrow primitive.
             </summary>
      <param name="cylRadius">Arrow's cylinder radius</param>
      <param name="cylLength">Arrow's cylinder length</param>
      <param name="coneRadius">Arrow's cone radius</param>
      <param name="coneLength">Arrow's cone length</param>
      <param name="slices">Number of slices</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateArrow``1(System.Double,System.Double,System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>
             Creates a 3D arrow primitive.
             </summary>
      <param name="cylRadius">Arrow's cylinder radius</param>
      <param name="cylLength">Arrow's cylinder length</param>
      <param name="coneRadius">Arrow's cone radius</param>
      <param name="coneLength">Arrow's cone length</param>
      <param name="slices">Number of slices</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateArrow(devDept.Geometry.Point3D,devDept.Geometry.Vector3D,System.Double,System.Double,System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>
             Creates a 3D arrow primitive.
             </summary>
      <param name="startPoint">Arrow's start point</param>
      <param name="direction">Arrow's direction</param>
      <param name="cylRadius">Arrow's cylinder radius</param>
      <param name="cylLength">Arrow's cylinder length</param>
      <param name="coneRadius">Arrow's cone radius</param>
      <param name="coneLength">Arrow's cone length</param>
      <param name="slices">Number of slices</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateArrow``1(devDept.Geometry.Point3D,devDept.Geometry.Vector3D,System.Double,System.Double,System.Double,System.Double,System.Int32,devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>
             Creates a 3D arrow primitive.
             </summary>
      <param name="startPoint">Arrow's start point</param>
      <param name="direction">Arrow's direction</param>
      <param name="cylRadius">Arrow's cylinder radius</param>
      <param name="cylLength">Arrow's cylinder length</param>
      <param name="coneRadius">Arrow's cone radius</param>
      <param name="coneLength">Arrow's cone length</param>
      <param name="slices">Number of slices</param>
      <param name="meshNature">Nature of the mesh</param>
      <param name="edgeStyle">Style of the edges</param>
      <returns>The created mesh.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSpring(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
      <summary>Creates a Spring primitive.</summary>
      <param name="radius">Spring radius</param>
      <param name="wireRadius">Wire radius</param>
      <param name="sides">Number of subdivision sides</param>
      <param name="rings">Number of subdivision rings per turn</param>
      <param name="pitch">Height of each complete turn</param>
      <param name="turns">Number of turns</param>
      <param name="reverseTwist">Reverse direction</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSpring``1(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
      <summary>Creates a Spring primitive.</summary>
      <param name="radius">Spring radius</param>
      <param name="wireRadius">Wire radius</param>
      <param name="sides">Number of subdivision sides</param>
      <param name="rings">Number of subdivision rings per turn</param>
      <param name="pitch">Height of each complete turn</param>
      <param name="turns">Number of turns</param>
      <param name="reverseTwist">Reverse direction</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSpring(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Boolean,System.Boolean,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Creates a Spring primitive.</summary>
      <param name="radius">Spring radius</param>
      <param name="wireRadius">Wire radius</param>
      <param name="sides">Number of subdivision sides</param>
      <param name="rings">Number of subdivision rings per turn</param>
      <param name="pitch">Height of each complete turn</param>
      <param name="turns">Number of turns</param>
      <param name="reverseTwist">Reverse direction</param>
      <param name="closed">Closing caps on both ends</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CreateSpring``1(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Boolean,System.Boolean,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>Creates a Spring primitive.</summary>
      <param name="radius">Spring radius</param>
      <param name="wireRadius">Wire radius</param>
      <param name="sides">Number of subdivision sides</param>
      <param name="rings">Number of subdivision rings per turn</param>
      <param name="pitch">Height of each complete turn</param>
      <param name="turns">Number of turns</param>
      <param name="reverseTwist">Reverse direction</param>
      <param name="closed">Closing caps on both ends</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.Section(devDept.Geometry.Plane,System.Double)">
      <summary>
             Computes the contours resulting from the intersection of the face and the given plane.
            </summary>
      <param name="plane">The plane</param>
      <param name="tol">The tolerance</param>
      <returns>An array of curves representing each section contour.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.Section(devDept.Geometry.Plane,System.Double,System.Collections.Generic.LinkedList{devDept.Geometry.SharedEdge}[])">
      <summary>
            Computes the contours resulting from the intersection of the face and the given plane.
            </summary>
      <param name="plane">The plane</param>
      <param name="tol">The tolerance</param>
      <param name="edgesPerVertex">Pre-computed Mesh unique edges per vertices, not used if the mesh has octree's data</param>
      <returns>An array of curves representing each section contour.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.Section(devDept.Geometry.PlaneEquation,System.Collections.Generic.LinkedList{devDept.Geometry.SharedEdge}[])">
      <summary>
            Computes the contours resulting from the intersection of the Mesh and the given plane.
            </summary>
      <param name="planeEquation">The cutting plane equation</param>
      <param name="edgesPerVertex">Pre-computed Mesh unique edges per vertices, not used if the mesh has octree's data</param>
      <returns>An array of curves representing each section contour.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.Section(devDept.Geometry.Plane,System.Double,devDept.Geometry.SharedEdge[][]@)">
      <summary>
            Computes the contours resulting from the intersection of the face and the given plane.
            </summary>
      <param name="plane">The plane</param>
      <param name="tol">The tolerance</param>
      <param name="edges">The shared edges to which the vertices of the returned <see cref="T:devDept.Eyeshot.Entities.ICurve" /> (that are all <see cref="T:devDept.Eyeshot.Entities.LinearPath" />) belong to. Null if the mesh has octree's data.</param>
      <returns>An array of curves representing each section contour.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.Section(devDept.Geometry.PlaneEquation,devDept.Geometry.SharedEdge[][]@)">
      <summary>Computes the contours resulting from the intersection of the Mesh and the given plane.
            </summary>
      <param name="planeEquation">The cutting plane equation</param>
      <param name="edges">The shared edges to which the vertices of the returned <see cref="T:devDept.Eyeshot.Entities.ICurve" /> (that are all <see cref="T:devDept.Eyeshot.Entities.LinearPath" />) belong to. Null if the mesh has octree's data.</param>
      <returns>An array of curves representing each section contour.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.SplitDisjoint">
      <summary>
            Divides into separate objects meshes that do not connect, but are still one object.
            </summary>
      <returns>The resulting Mesh objects.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.FixNormals">
      <summary>
            Makes triangles winding order uniform.
            </summary>
      <returns>Number of flipped triangles.</returns>
      <seealso cref="M:devDept.Eyeshot.Entities.Mesh.FlipNormal" />
      <seealso cref="M:devDept.Eyeshot.Entities.Mesh.FlipOutward" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.SplitBy(devDept.Geometry.Plane,devDept.Eyeshot.Entities.Mesh[]@)">
      <summary>
            Splits this Mesh object by plane.
            </summary>
      <param name="plane">The splitting plane</param>
      <param name="splits">Array of new Meshes created by splitting</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> returns an array of the split objects, otherwise it exits at the first failure.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Mesh.SplitDisjoint" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.SplitBy(devDept.Geometry.Plane,System.Boolean,devDept.Eyeshot.Entities.Mesh[]@)">
      <summary>
            Splits this Mesh object by plane.
            </summary>
      <param name="plane">The splitting plane</param>
      <param name="splitDisjoint">When true, disjoint objects are separated into individual meshes</param>
      <param name="splits">Array of new Meshes created by splitting</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> returns an array of the split objects, otherwise it exits at the first failure.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.SubdivideBy(devDept.Geometry.Plane)">
      <summary>
            Subdivides the mesh by a plane.
            </summary>
      <param name="plane">The subdivision plane</param>
      <returns>A <see cref="T:devDept.Geometry.booleanFailureType" /> telling if the operation was successful.</returns>
      <remarks>If the number of triangles doesn't change, the plane is passing through the mesh but is not cutting any triangle edge because some vertices are exactly on the plane.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CompileEdges(System.Double,devDept.Eyeshot.CompileParams)">
      <summary>
            Compiles the graphics data for the edges.
            </summary>
      <param name="ampFactor">The amplification factor (for <seealso cref="!:FemMesh" /> only)</param>
      <param name="data">The compile parameters</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CompileSelected(devDept.Eyeshot.CompileParams)">
      <summary>
            Compiles the graphics data for the selection.
            </summary>
      <param name="data">The compile parameters</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ApplyMaterial(System.String,devDept.Geometry.textureMappingType,System.Double,System.Double)">
      <summary>
            Maps the specified material to this mesh. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.Design.Materials" /> collection.
            </summary>
      <remarks>
        <para>The mesh nature is set to RichPlain or RichSmooth from this command.</para>
        <para>You may need to call viewport.Entities.Regen() to see the effect of this command.</para>
      </remarks>
      <example>
                The following code fragment demonstrates how to apply Cubic mapping to a Mesh
                object.
                <code lang="CS" title="[New Example]"><![CDATA[
            Mesh m = new Mesh(GMesh.natureType.RichSmooth);
             
            m.MakeBox(10, 40, 20);
             
            m.Translate(-10, 2, 20);
             
            mainViewport.Materials.Add(new Material("Wood", Properties.Resources.Wood));
             
            m.ApplyMaterial("Wood", textureMappingType.Cubic, 1, 1);
             
            mainEnvironment._entities.Add(m, 0, Color.Green);]]></code><code lang="VB" title="[New Example]"><![CDATA[
            Dim m As Mesh = New Mesh(GMesh.natureType.RichSmooth) 
            m.MakeBox(10, 40, 20)
             
            m.Translate(-10, 2, 20)
             
            mainViewport.Materials.Add(New Material("Wood", Properties.Resources.Wood))
             
            m.ApplyMaterial("Wood", textureMappingType.Cubic, 1, 1)
             
            mainEnvironment._entities.Add(m, 0, Color.Green)]]></code></example>
      <param name="matName">Material name</param>
      <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
      <param name="scaleX">Material texture scale along the X axis</param>
      <param name="scaleY">Material texture scale along the Y axis</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ApplyMaterial(System.String,devDept.Geometry.textureMappingType,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Maps the specified material to this mesh. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.Design.Materials" /> collection.
            </summary>
      <remarks>
        <para>The mesh nature is set to RichPlain or RichSmooth from this command.</para>
        <para>You may need to call viewport.Entities.Regen() to see the effect of this command.</para>
      </remarks>
      <param name="matName">Material name</param>
      <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
      <param name="scaleX">Material texture scale along the X axis</param>
      <param name="scaleY">Material texture scale along the Y axis</param>
      <param name="boxMin">Bounding box min point</param>
      <param name="boxMax">Bounding box max point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ApplyTextureMapping(devDept.Geometry.textureMappingType,System.Double,System.Double)">
      <summary>
            Maps the specified material to this mesh. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.Design.Materials" /> collection.
            </summary>
      <remarks>
        <para>The mesh nature is set to RichPlain or RichSmooth from this command.</para>
        <para>You may need to call viewport.Entities.Regen() to see the effect of this command.</para>
      </remarks>
      <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
      <param name="scaleX">Material texture scale along the X axis</param>
      <param name="scaleY">Material texture scale along the Y axis</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ApplyTextureMapping(devDept.Geometry.textureMappingType,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Maps the specified material to this mesh using a custom bounding box. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.Design.Materials" /> collection.
            </summary>
      <remarks>
        <para>The mesh nature is set to RichPlain or RichSmooth from this command.</para>
        <para>You may need to call viewport.Entities.Regen() to see the effect of this command.</para>
      </remarks>
      <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
      <param name="scaleX">Material texture scale along the X axis</param>
      <param name="scaleY">Material texture scale along the Y axis</param>
      <param name="boxMin">Bounding box min point</param>
      <param name="boxMax">Bounding box max point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ApplyTextureMapping(devDept.Eyeshot.TextureMappingData)">
      <summary>
            Maps the specified material to this mesh using a custom bounding box. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.Design.Materials" /> collection.
            </summary>
      <remarks>
        <para>The mesh nature is set to RichPlain or RichSmooth from this command.</para>
        <para>You may need to call viewport.Entities.Regen() to see the effect of this command.</para>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ApplyTextureMapping(devDept.Geometry.textureMappingType,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Transformation)">
      <summary>
            Maps the specified material to this mesh using a custom bounding box. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.Design.Materials" /> collection.
            </summary>
      <remarks>
        <para>The mesh nature is set to RichPlain or RichSmooth from this command.</para>
        <para>You may need to call viewport.Entities.Regen() to see the effect of this command.</para>
      </remarks>
      <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
      <param name="scaleX">Material texture scale along the X axis</param>
      <param name="scaleY">Material texture scale along the Y axis</param>
      <param name="boxMin">Bounding box min point</param>
      <param name="boxMax">Bounding box max point</param>
      <param name="transformation">Transformation to apply to the mapping</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.RemoveTextureMapping">
      <summary>
            Remove the texture mapping.
            </summary>
      <remarks>You may need to call viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.RemoveMaterial">
      <summary>
            Remove the material and the texture mapping.
            </summary>
      <remarks>You may need to call viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.Vertices">
      <summary>
            Gets or sets mesh' 3D vertices.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.Triangles">
      <summary>
            Gets or sets the mesh triangles.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.Edges">
      <summary>
            Direct access to <see cref="T:devDept.Eyeshot.Entities.Mesh" /> edges.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.NormalAveragingMode">
      <summary>
            Gets or sets the normal averaging prevMode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.SmoothingAngle">
      <summary>
            Gets or sets the angular value (in radians) used by normal averaging and sharp edges calculation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.EdgeStyle">
      <summary>
            Gets or sets the edge style. This setting comes into play during Mesh regeneration only.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.Normals">
      <summary>
            Gets or sets the mesh normals.
            </summary>
      <remarks>The number of normals depends on the <see cref="P:devDept.Eyeshot.Entities.Mesh.MeshNature" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.MeshNature">
      <summary>
            Gets mesh nature.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.TextureCoords">
      <summary>
            Gets or sets mesh texture coordinates.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.#ctor(devDept.Geometry.Entities.GMesh)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Mesh.FaceElement">
      <summary>
            The face element.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.FaceElement.#ctor(System.Collections.Generic.List{System.Int32})">
      <summary>
            Standard constructor.
            </summary>
      <param name="triangles">The triangles list</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.FaceElement.Triangles">
      <summary>
            The list of triangles belonging to the face.
            </summary>
      <remarks>For the <see cref="T:devDept.Eyeshot.Entities.Solid" /> entity, they refer to the <see cref="P:devDept.Eyeshot.Entities.Solid.MeshForFaceSelection" /> mesh.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Mesh.FaceCollection">
      <summary>
            Class that represents a collection of <see cref="T:devDept.Eyeshot.Entities.Mesh.FaceElement" /> objects.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.FaceCollection.ClearIfNotSelected(System.Collections.Generic.List{devDept.Eyeshot.Workspace.SelectionInfoSubItems})">
      <summary>
            Clears the collection if no element is selected.
            </summary>
      <param name="selectedFaces">The list of elements with the selection data for each face for the various component instances</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.BuildOctree(System.Int32)">
      <summary>
            Builds octree's data.
            </summary>
      <param name="maxNumTriangles">Maximum number of triangles per octant, zero for auto-estimation.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ClearOctree">
      <summary>
            Clears octree's data.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.GetFaceSelection(System.Int32,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Gets a face selection status.
            </summary>
      <param name="faceIndex">The face index</param>
      <param name="parents">The parents stack that define a nested instance</param>
      <returns>True if the face is selected</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.SetFaceSelection(System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Sets the selection status of a face.
            </summary>
      <param name="faceIndex">The face index</param>
      <param name="status">The selection status</param>
      <param name="parents">The parents stack that define a nested instance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ClearFacesSelection(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Clears the faces selection status for a specific instance.
            </summary>
      <param name="parents">The parents stack that define a nested instance (use null for top-level)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ClearFacesSelectionForAllInstances">
      <summary>
            Clears the faces selection status for all instances.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.Faces">
      <summary>
            The collection of the (sorted) faces for selection. 
            </summary>
      <remarks>The list is constructed from the adjacent triangles as the selection is performed on the entity faces.</remarks>
      <seealso cref="P:devDept.Eyeshot.Design.FaceSelectionAngle" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.IsAnyFaceSelected">
      <summary>
            Tells if there is a selected face.
            </summary>
      <returns>True if there is a selected face</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ResetSelectionMode">
      <summary>
            Resets the <see cref="P:devDept.Eyeshot.Entities.Mesh.SelectionMode" /> to <see cref="F:devDept.Eyeshot.selectionFilterType.Entity" /> if there are no other selected inner elements.
            </summary>
      <remarks>Internal use only.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.#ctor">
      <summary>
            Empty constructor. For internal use only. <see cref="T:devDept.Eyeshot.Entities.entityNatureType">Mesh nature</see> is set to Plain.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.#ctor(System.Int32,System.Int32,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Vertices and triangles sizes constructor.
            </summary>
      <param name="numVertices">Number of vertices the mesh will hold</param>
      <param name="numTriangles">Number of triangles the mesh will hold</param>
      <param name="meshNature">The mesh nature</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.#ctor(devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Mesh nature constructor.
            </summary>
      <param name="meshNature">The mesh nature</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.#ctor(devDept.Geometry.Entities.GMesh.natureType,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>
            Mesh nature and edge style constructor.
            </summary>
      <param name="meshNature">The mesh nature</param>
      <param name="edgeStyle">The edge style</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.IndexTriangle})">
      <summary>
            Vertices and triangles constructor.
            </summary>
      <param name="vertices">The vertices list</param>
      <param name="triangles">The triangles list</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.Clone">
      <summary>
            Creates a deep copy of this mesh entity.
            </summary>
      <returns>The new mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.IsPointInside(devDept.Geometry.Point3D)">
      <summary>
            Checks if the specified point is inside the 3D mesh.
            </summary>
      <param name="point">The 3D point</param>
      <returns>True if the 3D point is inside the mesh, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CutBy(devDept.Geometry.Plane)">
      <summary>Cuts the part of the mesh on the positive side of a plane.
             </summary>
      <param name="plane">The plane</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> the object is modified, otherwise the original object is unmutated.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.CutBy(devDept.Geometry.Plane,System.Boolean)">
      <summary>Cuts the part of the mesh on the positive side of a plane.
             </summary>
      <param name="plane">The plane</param>
      <param name="close">If false, the resulting mesh will not be closed</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> the object is modified, otherwise the original object is unmutated.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.UpdateNormals">
      <summary>
            Refreshes triangles normals.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ComputeEdges">
      <summary>
            Forces mesh edges computation according to the <see cref="P:devDept.Eyeshot.Entities.Mesh.EdgeStyle" /> settings.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.FlipOutward">
      <summary>
            Flips the mesh normals outward.
            </summary>
      <remarks>The mesh must be closed and the triangles winding order uniform</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Mesh.FixNormals" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.TransformBy(devDept.Geometry.Transformation)">
      <summary>
            Transforms all the entity's vertices by the specified transformation. 
            </summary>
      <remarks>In case of Mirror transformation you may need to flip triangles and call <see cref="M:devDept.Eyeshot.Entities.Mesh.UpdateNormals" />.</remarks>
      <param name="transform">The transformation to be applied</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ConvertToFastMesh(System.Boolean)">
      <summary>
            Converts this mesh into a <see cref="T:devDept.Eyeshot.Entities.FastMesh" /> object.
            </summary>
      <param name="indexed">When true, one normal per vertex is used.</param>
      <returns>The resulting FastMesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ConvertToSolid">
      <summary>
             Converts this mesh to a <see cref="T:devDept.Eyeshot.Entities.Solid" /> object.
            </summary>
      <returns>The resulting solid if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.ConvertToSolid``1">
      <summary>
             Converts this mesh to a <see cref="T:devDept.Eyeshot.Entities.Solid" /> object.
            </summary>
      <returns>The resulting solid if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.Weld">
      <summary>
            Removes duplicated vertices and degenerated triangles in the Mesh.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.Weld(System.Double)">
      <summary>
            Removes duplicated vertices and degenerated triangles in the Mesh with a given tolerance.
            </summary>
      <param name="maxGap">The maximum distance for considering two vertices equal.</param>
      <seealso cref="M:devDept.Eyeshot.Entities.Mesh.WeldFreeEdges(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.WeldFreeEdges(System.Double)">
      <summary>
            Removes duplicated vertices and degenerated triangles in the Mesh skipping internal vertices.
            </summary>
      <remarks>The <see cref="P:devDept.Eyeshot.Entities.Mesh.Edges" /> array must contain the list of free edges.</remarks>
      <param name="maxGap">The maximum distance for considering two vertices equal.</param>
      <seealso cref="M:devDept.Eyeshot.Entities.Mesh.Weld(System.Double)" />
      <seealso cref="M:devDept.Eyeshot.Entities.Mesh.ComputeEdges" />
      <seealso cref="P:devDept.Geometry.Entities.GMesh.EdgeStyle" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.FindClosestTriangle(devDept.Geometry.Transformation,devDept.Geometry.Segment3D)">
      <summary>
            Returns a list of triangles hit by the provided segment.
            </summary>
      <param name="transf">The transformation applied to the entity (necessary if the entity is inside a Block to propagate the BlockReference transformation)</param>
      <param name="seg">The 3D segment representing the viewing direction</param>
      <returns>The sorted list of triangles intersecting the provided segment.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.FromTriangles(devDept.Geometry.Point3D[])">
      <summary>
             Generates a smooth Mesh from a list of triangles.
            </summary>
      <param name="v">A list of triangle vertices</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.#ctor(devDept.Serialization.MeshSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.MeshSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.MeshSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.GetPolygonMeshes">
      <summary>
            Gets a number of meshes representing this object.
            </summary>
      <returns>The mesh itself, not cloned.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.IsClosed">
      <summary>Tells if a mesh is closed.
            </summary>
      <returns>True if the mesh is closed.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.LightWeight">
      <remarks> If true, no geometry is generated by the hidden lines computation (see <see cref="M:devDept.Eyeshot.Design.Print(System.Boolean)" /> and all the classes derived from <see cref="T:devDept.Eyeshot.HiddenLinesView" />).</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.GetFaceTriangles(System.Int32,System.Double)">
      <summary>
            Gets the triangles adjacent to the given triangle.
            </summary>
      <param name="triangleIndex">The triangle index</param>
      <param name="adjacentNormalAngle">The angle (in radians) used to compare two adjacent triangles normals. If the angle between them is below this value, the triangles are considered belonging to the same face.</param>
      <returns>The list of adjacent triangles.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Mesh.SelectionMode">
      <summary>
            Gets or sets the selection mode.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.SelectFace(System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Selects the face of the instance identified by the parents stack.
            </summary>
      <param name="faceIndex">The face index</param>
      <param name="selectionState">The selection state</param>
      <param name="parents">The parents stack</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Mesh,System.Boolean,System.Boolean)">
      <summary>
            Merges two compatible Mesh objects.
            </summary>
      <param name="mesh">The other Mesh object</param>
      <param name="weldNow">If true, the two meshes are welded immediately.</param>
      <param name="recomputeEdges">If true, recomputes the edges else it preserves the edges of both meshes</param>
      <remarks>If you need to merge several meshes it's far more efficient to weld them only at the last MergeWith call.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Quad,System.Boolean)">
      <summary>
            Merges the mesh with a <see cref="T:devDept.Eyeshot.Entities.Quad" /> entity that shares an edge with the mesh.
            </summary>
      <param name="quad">The <see cref="T:devDept.Eyeshot.Entities.Quad" /> entity</param>
      <param name="weldNow">If true, the two meshes are welded immediately.</param>
      <remarks>If you need to merge several entities it is far more efficient to weld them only at the last MergeWith.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Quad)">
      <summary>
            Merges the mesh with a <see cref="T:devDept.Eyeshot.Entities.Quad" /> entity that shares an edge with the mesh.
            </summary>
      <param name="quad">The <see cref="T:devDept.Eyeshot.Entities.Quad" /> entity to merge</param>
      <remarks>If you need to merge several entities it is far more efficient to weld them only at the last MergeWith.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Quad,System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Triangle,System.Boolean)">
      <summary>
            Merges the mesh with a <see cref="T:devDept.Eyeshot.Entities.Quad" /> entity that shares an edge with the mesh.
            </summary>
      <param name="triangle">The <see cref="T:devDept.Eyeshot.Entities.Triangle" /> entity to merge</param>
      <param name="weldNow">If true, the two meshes are welded immediately.</param>
      <remarks>If you need to merge several entities it is far more efficient to weld them only at the last MergeWith.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Triangle)">
      <summary>
            Merges the mesh with a <see cref="T:devDept.Eyeshot.Entities.Quad" /> entity that shares an edge with the mesh.
            </summary>
      <param name="triangle">The <see cref="T:devDept.Eyeshot.Entities.Triangle" /> entity</param>
      <remarks>If you need to merge several entities it is far more efficient to weld them only at the last MergeWith.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Mesh.MergeWith(devDept.Eyeshot.Entities.Triangle,System.Boolean)" />
    </member>
    <member name="T:devDept.Eyeshot.Entities.Solid">
      <summary>
            This class represents the base class for 3D primitives.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.Portions">
      <summary>
            Gets the solid's boundary representation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.TextureMapping">
      <summary>
            Gets the texture mapping data associated with this solid.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Difference``1(``0,``0,System.Double)">
      <summary>Boolean Difference between two solids.</summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <param name="tol">Optional tolerance, start with domain size * 1e-6</param>
      <returns>An array of solids if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Difference``1(``0,``0,System.Boolean,System.Double)">
      <summary>Boolean Difference between two solids.</summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <param name="keepOriginalColors">If true, the portions of the solids resulting from the boolean operation will keep the colors and materials of the original solids</param>
      <param name="tol">Optional tolerance, start with domain size * 1e-6</param>
      <returns>An array of solids if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CutBy(devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean)">
      <summary>Cuts the part of the solid on the positive side of a surface.</summary>
      <param name="surf">The surface</param>
      <param name="tolerance">The surface tessellation tolerance</param>
      <param name="flipSide">The flip side flag</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> the object is modified, otherwise the original object is unmutated.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CutBy(devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean,devDept.Eyeshot.Entities.Solid[]@)">
      <summary>Cuts the part of the solid on the positive side of a surface.</summary>
      <param name="surf">The surface</param>
      <param name="tolerance">The surface tessellation tolerance</param>
      <param name="flipSide">The flip side flag</param>
      <param name="leftOvers">The other solids that may result from the operation</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> the object is modified, otherwise the original object is unmutated.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CutBy(devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean,System.Boolean)">
      <summary>Cuts the part of the solid on the positive side of a surface.</summary>
      <param name="surf">The surface</param>
      <param name="tolerance">The surface tessellation tolerance</param>
      <param name="flipSide">The flip side flag</param>
      <param name="keepOriginalColors">If true, the portions of the solids resulting from the boolean operation will keep the colors and materials of the original solids</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> the object is modified, otherwise the original object is unmutated.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CutBy(devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Solid[]@)">
      <summary>Cuts the part of the solid on the positive side of a surface.</summary>
      <param name="surf">The surface</param>
      <param name="tolerance">The surface tessellation tolerance</param>
      <param name="flipSide">The flip side flag</param>
      <param name="keepOriginalColors">If true, the portions of the solids resulting from the boolean operation will keep the colors and materials of the original solids</param>
      <param name="leftOvers">The other solids that may result from the operation</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> the object is modified, otherwise the original object is unmutated.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.SplitBy(devDept.Eyeshot.Entities.Surface,System.Double,devDept.Eyeshot.Entities.Solid[]@,devDept.Eyeshot.Entities.Solid[]@)">
      <summary>Splits the solid with a surface.</summary>
      <param name="surf">The surface</param>
      <param name="tolerance">The surface tessellation tolerance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Union``1(``0,``0,System.Double)">
      <summary>Boolean Union between two solids.</summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <param name="tol">Optional tolerance, start with domain size * 1e-6</param>
      <returns>An array of solids if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Union``1(``0,``0,System.Boolean,System.Double)">
      <summary>Boolean Union between two solids.</summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <param name="keepOriginalColors">If true, the portions of the solids resulting from the boolean operation will keep the colors and materials of the original solids</param>
      <param name="tol">Optional tolerance, start with domain size * 1e-6</param>
      <returns>An array of solids if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Intersection``1(``0,``0,System.Double)">
      <summary>
        <para>Boolean Intersection between two solids. The method will compute the
            intersection between the two specified solids (gray and blue in the image below)
            and return an array with the result (green). The returned array may have more
            than one element if multiple disjoint intersections are found.</para>
        <para>
          <img src="intersection.png" />
        </para>
      </summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <param name="tol">Optional tolerance, start with domain size * 1e-6</param>
      <returns>
            An array of solids if the operation is successful. If the operation is
            successful but no intersections are found, an empty array is returned.
            Otherwise, if due to an error the algorithm fails to compute the
            intersections, null/Nothing is returned.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Intersection``1(``0,``0,System.Boolean,System.Double)">
      <summary>Boolean Intersection between two solids.</summary>
      <returns>An array of solids if the operation is successful, null/Nothing otherwise.</returns>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <param name="keepOriginalColors">If true, the portions of the solids resulting from the boolean operation will keep the colors and materials of the original solids</param>
      <param name="tol">Optional tolerance, start with domain size * 1e-6</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Section(devDept.Geometry.Plane,System.Double)">
      <summary>
            Computes the contours resulting from the intersection of the Solid and the given plane.
            </summary>
      <param name="pln">The cutting plane</param>
      <param name="tol">The tolerance</param>
      <returns>
            An array if curves representing the section contour.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Section(devDept.Geometry.PlaneEquation)">
      <summary>
            Computes the contours resulting from the intersection of the Solid and the given plane.
            </summary>
      <param name="planeEquation">The cutting plane equation</param>
      <returns>
            An array if curves representing the section contour.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.IntersectionLoops(devDept.Eyeshot.Entities.Solid,devDept.Eyeshot.Entities.Solid,System.Double)">
      <summary>
            Computes the intersection loops between two Solid objects.
            </summary>
      <param name="a">First solid</param>
      <param name="b">Second solid</param>
      <param name="tol">Optional tolerance, start with domain size * 1e-6</param>
      <returns>A list of Segment3D representing the intersection loops.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CutBy(devDept.Geometry.Plane)">
      <summary>
            Cuts the part of the solid on the positive side of a plane.
            </summary>
      <param name="plane">The plane</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> the object is modified, otherwise the original object is unmutated.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CutBy(devDept.Geometry.Plane,devDept.Eyeshot.Entities.Solid[]@)">
      <summary>Cuts the part of the solid on the positive side of a plane.
            </summary>
      <param name="plane">The plane</param>
      <param name="leftOvers">The other solids that may result from the operation</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> the object is modified, otherwise the original object is unmutated.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CutBy(devDept.Geometry.Plane,System.Boolean)">
      <summary>Cuts the part of the solid on the positive side of a plane.
            </summary>
      <param name="plane">The plane</param>
      <param name="keepOriginalColors">If true, the portions of the solids resulting from the boolean operation will keep the colors and materials of the original solids</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> the object is modified, otherwise the original object is unmutated.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CutBy(devDept.Geometry.Plane,System.Boolean,devDept.Eyeshot.Entities.Solid[]@)">
      <summary>Cuts the part of the solid on the positive side of a plane.
            </summary>
      <param name="plane">The plane</param>
      <param name="keepOriginalColors">If true, the portions of the solids resulting from the boolean operation will keep the colors and materials of the original solids</param>
      <param name="leftOvers">The other solids that may result from the operation</param>
      <returns>The intersection failure type.</returns>
      <remarks> If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> the object is modified, otherwise the original object is unmutated.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.SplitBy(devDept.Geometry.Plane,devDept.Eyeshot.Entities.Solid[]@,devDept.Eyeshot.Entities.Solid[]@)">
      <summary>
            Splits the solid with a plane.
            </summary>
      <param name="plane">The plane</param>
      <param name="splitF">The F solid split list</param>
      <param name="splitG">The G solid split list</param>
      <returns>True if the plane intersects the solid, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateBox(System.Double,System.Double,System.Double)">
      <summary>
             Creates a Box primitive.
            </summary>
      <param name="width">Size in X direction</param>
      <param name="depth">Size in Y direction</param>
      <param name="height">Size in Z direction</param>
      <returns>The created solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateBox``1(System.Double,System.Double,System.Double)">
      <summary>
             Creates a Box primitive.
            </summary>
      <param name="width">Size in X direction</param>
      <param name="depth">Size in Y direction</param>
      <param name="height">Size in Z direction</param>
      <returns>The created solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateCone(System.Double,System.Double,System.Double,System.Int32)">
      <summary>
             Creates a Cone primitive.
            </summary>
      <param name="bottomRadius">Cone bottom radius</param>
      <param name="topRadius">Cone top radius</param>
      <param name="height">Cone height</param>
      <param name="slices">Number of subdivisions</param>
      <returns>The created solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateCone``1(System.Double,System.Double,System.Double,System.Int32)">
      <summary>
             Creates a Cone primitive.
            </summary>
      <param name="bottomRadius">Cone bottom radius</param>
      <param name="topRadius">Cone top radius</param>
      <param name="height">Cone height</param>
      <param name="slices">Number of subdivisions</param>
      <returns>The created solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateCone(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32)">
      <summary>
             Creates a Cone primitive.
            </summary>
      <param name="bottomRadius">Cone bottom radius</param>
      <param name="topRadius">Cone top radius</param>
      <param name="height">Cone height</param>
      <param name="slices">Number of subdivisions</param>
      <returns>The created solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateCone``1(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32)">
      <summary>
             Creates a Cone primitive.
            </summary>
      <param name="bottomRadius">Cone bottom radius</param>
      <param name="topRadius">Cone top radius</param>
      <param name="height">Cone height</param>
      <param name="slices">Number of subdivisions</param>
      <returns>The created solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreatePlanar(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D})">
      <summary>Triangulates the specified 2D region.</summary>
      <param name="sketchPlane">Plane on which the points lay</param>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <returns>The created Solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreatePlanar``1(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D})">
      <summary>Triangulates the specified 2D region.</summary>
      <param name="sketchPlane">Plane on which the points lay</param>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <returns>The created Solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreatePlanar(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point2D}})">
      <summary>Triangulates the specified 2D region.</summary>
      <param name="sketchPlane">Plane on which the points lay</param>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="inners">The inner contour list oriented clockwise</param>
      <returns>The created Solid.</returns>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Countours must be closed</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreatePlanar``1(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point2D}})">
      <summary>Triangulates the specified 2D region.</summary>
      <param name="sketchPlane">Plane on which the points lay</param>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="inners">The inner contour list oriented clockwise</param>
      <returns>The created Solid.</returns>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Countours must be closed</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreatePlanar(System.Collections.Generic.IList{devDept.Geometry.Point3D})">
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <returns>The created Solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreatePlanar``1(System.Collections.Generic.IList{devDept.Geometry.Point3D})">
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <returns>The created Solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreatePlanar(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}})">
      <summary>Triangulates the specified 3D region.</summary>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="inners">The inner contour list oriented clockwise</param>
      <returns>The created Solid.</returns>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Countours must be closed</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreatePlanar``1(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}})">
      <summary>Triangulates the specified 3D region.</summary>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="inners">The inner contour list oriented clockwise</param>
      <returns>The created Solid.</returns>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Countours must be closed</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreatePlanar(devDept.Eyeshot.Entities.ICurve,System.Double)">
      <summary>Triangulates the specified 3D region.</summary>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="deviation">The maximum deviation</param>
      <returns>The created Solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreatePlanar``1(devDept.Eyeshot.Entities.ICurve,System.Double)">
      <summary>Triangulates the specified 3D region.</summary>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="deviation">The maximum deviation</param>
      <returns>The created Solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreatePlanar(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double)">
      <summary>Triangulates the specified 3D region.</summary>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="inners">The inner contour list oriented clockwise</param>
      <param name="deviation">The maximum deviation</param>
      <returns>The created Solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreatePlanar``1(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double)">
      <summary>Triangulates the specified 3D region.</summary>
      <param name="outer">Outer contour of the region oriented counter-clockwise</param>
      <param name="inners">The inner contour list oriented clockwise</param>
      <param name="deviation">The maximum deviation</param>
      <returns>The created Solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateCylinder(System.Double,System.Double,System.Int32)">
      <summary>
             Creates a Cylinder primitive.
            </summary>
      <param name="radius">Radius of cylinder</param>
      <param name="height">Height of cylinder</param>
      <param name="slices">Number of subdivisions</param>
      <returns>The created solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateCylinder``1(System.Double,System.Double,System.Int32)">
      <summary>
             Creates a Cylinder primitive.
            </summary>
      <param name="radius">Radius of cylinder</param>
      <param name="height">Height of cylinder</param>
      <param name="slices">Number of subdivisions</param>
      <returns>The created solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateCylinder(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32)">
      <summary>Creates a Cylinder primitive.
            </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="point1">Cylinder's first point</param>
      <param name="point2">Cylinder's second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <returns>The created solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateCylinder``1(System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32)">
      <summary>Creates a Cylinder primitive.
            </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="point1">Cylinder's first point</param>
      <param name="point2">Cylinder's second point</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
      <returns>The created solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ExtrudeAdd(devDept.Eyeshot.Entities.Region,System.Double,System.Double)">
      <summary>
            Modifies current solid extruding a contour by a given amount and adding.
            </summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">Entity region needs to be converted to solid, this is the conversion tolerance</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ExtrudeAdd(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Eyeshot.Entities.Solid[]@)">
      <summary>
            Modifies current solid extruding a contour by a given amount and adding.
            </summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">Entity region needs to be converted to solid, this is the conversion tolerance</param>
      <param name="leftOvers">The other solids that may result from the add operation</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ExtrudeAdd(devDept.Eyeshot.Entities.Region,devDept.Geometry.Vector3D,System.Double,devDept.Eyeshot.Entities.Solid[]@)">
      <summary>
            Modifies current solid extruding a contour by a given vector and adding.
            </summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">Entity region needs to be converted to solid, this is the conversion tolerance</param>
      <param name="leftOvers">The other solids that may result from the add operation</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ExtrudeAdd(devDept.Eyeshot.Entities.Region,devDept.Geometry.Vector3D,System.Double)">
      <summary>
            Modifies current solid extruding a contour by a given vector and adding.
            </summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">Entity region needs to be converted to solid, this is the conversion tolerance</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ExtrudeAdd(devDept.Eyeshot.Entities.Region,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Modifies current solid extruding a contour by a given vector and adding.
            </summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to extrude</param>
      <param name="x">Extrusion amount along the axis X</param>
      <param name="y">Extrusion amount along the axis Y</param>
      <param name="z">Extrusion amount along the axis Z</param>
      <param name="tolerance">Entity region needs to be converted to solid, this is the conversion tolerance</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ExtrudeAdd(devDept.Eyeshot.Entities.Region,System.Double,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Solid[]@)">
      <summary>
            Modifies current solid extruding a contour by a given vector and adding.
            </summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to extrude</param>
      <param name="x">Extrusion amount along the axis X</param>
      <param name="y">Extrusion amount along the axis Y</param>
      <param name="z">Extrusion amount along the axis Z</param>
      <param name="tolerance">Entity region needs to be converted to solid, this is the conversion tolerance</param>
      <param name="leftOvers">The other solids that may result from the add operation</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ExtrudeRemove(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Eyeshot.Entities.Solid[]@,System.Boolean)">
      <summary>
             Modifies current solid extruding a contour by a given amount and removing.
             </summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">Entity region needs to be converted to solid, this is the conversion tolerance</param>
      <param name="leftOvers">The other solids that may result from the remove operation</param>
      <param name="keepOriginalColors">When true, the portions of the solids resulting from the boolean operation will keep the colors and materials of the original solids</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ExtrudeRemove(devDept.Eyeshot.Entities.Region,System.Double,System.Double,System.Boolean)">
      <summary>
             Modifies current solid extruding a contour by a given amount and removing.
             </summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">Entity region needs to be converted to solid, this is the conversion tolerance</param>
      <param name="keepOriginalColors">When true, the portions of the solids resulting from the boolean operation will keep the colors and materials of the original solids</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ExtrudeRemove(devDept.Eyeshot.Entities.Region,devDept.Geometry.Vector3D,System.Double,System.Boolean)">
      <summary>
             Modifies current solid extruding a contour by a given vector and removing.
             </summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">Entity region needs to be converted to solid, this is the conversion tolerance</param>
      <param name="keepOriginalColors">When true, the portions of the solids resulting from the boolean operation will keep the colors and materials of the original solids</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ExtrudeRemove(devDept.Eyeshot.Entities.Region,devDept.Geometry.Vector3D,System.Double,devDept.Eyeshot.Entities.Solid[]@,System.Boolean)">
      <summary>
             Modifies current solid extruding a contour by a given vector and removing.
             </summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">Entity region needs to be converted to solid, this is the conversion tolerance</param>
      <param name="leftOvers">The other solids that may result from the remove operation</param>
      <param name="keepOriginalColors">When true, the portions of the solids resulting from the boolean operation will keep the colors and materials of the original solids</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ExtrudeRemove(devDept.Eyeshot.Entities.Region,System.Double,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Solid[]@,System.Boolean)">
      <summary>
             Modifies current solid extruding a contour by a given vector and removing.
             </summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to extrude</param>
      <param name="x">Extrusion amount along the axis X</param>
      <param name="y">Extrusion amount along the axis Y</param>
      <param name="z">Extrusion amount along the axis Z</param>
      <param name="tolerance">Entity region needs to be converted to solid, this is the conversion tolerance</param>
      <param name="leftOvers">The other solids that may result from the remove operation</param>
      <param name="keepOriginalColors">When true, the portions of the solids resulting from the boolean operation will keep the colors and materials of the original solids</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ExtrudeRemove(devDept.Eyeshot.Entities.Region,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
             Modifies current solid extruding a contour by a given vector and removing.
             </summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to extrude</param>
      <param name="x">Extrusion amount along the axis X</param>
      <param name="y">Extrusion amount along the axis Y</param>
      <param name="z">Extrusion amount along the axis Z</param>
      <param name="tolerance">Entity region needs to be converted to solid, this is the conversion tolerance</param>
      <param name="keepOriginalColors">When true, the portions of the solids resulting from the boolean operation will keep the colors and materials of the original solids</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.RevolveAdd(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>Modifies current solid revolving a <see cref="T:devDept.Eyeshot.Entities.Region" /> around an axis and adding.</summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to revolve</param>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Solid" />, this is the conversion tolerance</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.RevolveAdd(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Eyeshot.Entities.Solid[]@)">
      <summary>Modifies current solid revolving a <see cref="T:devDept.Eyeshot.Entities.Region" /> around an axis and adding.</summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to revolve</param>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Solid" />, this is the conversion tolerance</param>
      <param name="leftOvers">The other solids that may result from the add operation</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.RevolveAdd(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>Modifies current solid revolving a <see cref="T:devDept.Eyeshot.Entities.Region" /> around an axis and adding.</summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to revolve</param>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Solid" />, this is the conversion tolerance</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.RevolveAdd(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Eyeshot.Entities.Solid[]@)">
      <summary>Modifies current solid revolving a <see cref="T:devDept.Eyeshot.Entities.Region" /> around an axis and adding.</summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to revolve</param>
      <param name="tolerance">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Solid" />, this is the conversion tolerance</param>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="leftOvers">The other solids that may result from the add operation</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.RevolveRemove(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>Modifies current solid revolving a <see cref="T:devDept.Eyeshot.Entities.Region" /> around an axis and removing.</summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to revolve</param>
      <param name="tolerance">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Solid" />, this is the conversion tolerance</param>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.RevolveRemove(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Eyeshot.Entities.Solid[]@)">
      <summary>Modifies current solid revolving a <see cref="T:devDept.Eyeshot.Entities.Region" /> around an axis and removing.</summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to revolve</param>
      <param name="tolerance">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Solid" />, this is the conversion tolerance</param>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="leftOvers">The other solids that may result from the remove operation</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.RevolveRemove(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>Modifies current solid revolving a <see cref="T:devDept.Eyeshot.Entities.Region" /> around an axis and removing.</summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to revolve</param>
      <param name="tolerance">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Solid" />, this is the conversion tolerance</param>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.RevolveRemove(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Eyeshot.Entities.Solid[]@)">
      <summary>Modifies current solid revolving a <see cref="T:devDept.Eyeshot.Entities.Region" /> around an axis and removing.</summary>
      <param name="region">The <see cref="T:devDept.Eyeshot.Entities.Region" /> to revolve</param>
      <param name="tolerance">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Solid" />, this is the conversion tolerance</param>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="leftOvers">The other solids that may result from the remove operation</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateSphere(System.Double,System.Int32,System.Int32)">
      <summary>
             Creates a Sphere primitive.
            </summary>
      <param name="radius">Sphere radius</param>
      <param name="slices">Number of meridian subdivisions</param>
      <param name="stacks">Number of parallel subdivisions</param>
      <returns>The created solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateSphere``1(System.Double,System.Int32,System.Int32)">
      <summary>
             Creates a Sphere primitive.
            </summary>
      <param name="radius">Sphere radius</param>
      <param name="slices">Number of meridian subdivisions</param>
      <param name="stacks">Number of parallel subdivisions</param>
      <returns>The created solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Sweep(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.Region,System.Double,devDept.Geometry.Entities.sweepMethodType,System.Boolean)">
      <summary>Sweeps the Region along the provided trajectory.</summary>
      <param name="rail">The rail curve</param>
      <param name="region">The cross section</param>
      <param name="sweepMethod">The sweep method</param>
      <param name="tol">The regeneration tolerance</param>
      <returns>The resulting Solid if the operation succeeded, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Sweep``1(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.Region,System.Double,devDept.Geometry.Entities.sweepMethodType,System.Boolean)">
      <summary>Sweeps the Region along the provided trajectory.</summary>
      <param name="rail">The rail curve</param>
      <param name="region">The cross section</param>
      <param name="tol">The regeneration tolerance</param>
      <param name="sweepMethod">The sweep method</param>
      <returns>The resulting Solid if the operation succeeded, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Union(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Solid})">
      <summary>
            Union between a list of Solid entities.
            </summary>
      <param name="solids">The entity list</param>
      <returns>The union operation result if the operation succeeded, null/Nothing otherwise.</returns>
      <exception cref="T:System.ArithmeticException">
      </exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateSpring(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
      <summary>Creates a Spring primitive.</summary>
      <param name="radius">Spring radius</param>
      <param name="wireRadius">Wire radius</param>
      <param name="sides">Number of subdivision sides</param>
      <param name="rings">Number of subdivision rings per turn</param>
      <param name="pitch">Height of each complete turn</param>
      <param name="turns">Number of turns</param>
      <param name="reverseTwist">Reverse direction</param>
      <returns>The resulting solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateSpring``1(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
      <summary>Creates a Spring primitive.</summary>
      <param name="radius">Spring radius</param>
      <param name="wireRadius">Wire radius</param>
      <param name="sides">Number of subdivision sides</param>
      <param name="rings">Number of subdivision rings per turn</param>
      <param name="pitch">Height of each complete turn</param>
      <param name="turns">Number of turns</param>
      <param name="reverseTwist">Reverse direction</param>
      <returns>The resulting solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateSpring(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Boolean,System.Boolean)">
      <summary>Creates a Spring primitive.</summary>
      <param name="radius">Spring radius</param>
      <param name="wireRadius">Wire radius</param>
      <param name="sides">Number of subdivision sides</param>
      <param name="rings">Number of subdivision rings per turn</param>
      <param name="pitch">Height of each complete turn</param>
      <param name="turns">Number of turns</param>
      <param name="reverseTwist">Reverse direction</param>
      <param name="closed">Closing caps on both ends</param>
      <returns>The resulting solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateSpring``1(System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double,System.Boolean,System.Boolean)">
      <summary>Creates a Spring primitive.</summary>
      <param name="radius">Spring radius</param>
      <param name="wireRadius">Wire radius</param>
      <param name="sides">Number of subdivision sides</param>
      <param name="rings">Number of subdivision rings per turn</param>
      <param name="pitch">Height of each complete turn</param>
      <param name="turns">Number of turns</param>
      <param name="reverseTwist">Reverse direction</param>
      <param name="closed">Closing caps on both ends</param>
      <returns>The resulting solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateTorus(System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
             Creates a Torus primitive.
            </summary>
      <param name="majorRadius">Torus radius</param>
      <param name="minorRadius">Torus section radius</param>
      <param name="rings">Number of subdivisions</param>
      <param name="sides">Number of section subdivisions</param>
      <returns>The created solid.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.CreateTorus``1(System.Double,System.Double,System.Int32,System.Int32)">
      <summary>
             Creates a Torus primitive.
            </summary>
      <param name="majorRadius">Torus radius</param>
      <param name="minorRadius">Torus section radius</param>
      <param name="rings">Number of subdivisions</param>
      <param name="sides">Number of section subdivisions</param>
      <returns>The created solid.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Solid.Portion">
      <summary>
            This class represents a portion of the solid object. To keep booleans operation reasonably fast, the solid is split in more portions.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.Portion.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Portion.#ctor(devDept.Geometry.Entities.GSolid.Portion)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.Portion.Id">
      <summary>
            Portion identifier.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.Portion.VertexCount">
      <summary>
            Gets the number of portion vertices.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.Portion.FaceCount">
      <summary>
            Gets the number of portion faces.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.Portion.EdgeDatas">
      <summary>
            Gets the list of edge attributes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.Portion.Faces">
      <summary>
            Gets the list of faces attributes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.Portion.Cycles">
      <summary>
            Gets the list of cycles attributes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.Portion.Vertices">
      <summary>
            Gets the solid portion's 3D vertices.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when try to set the property.</exception>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.Portion.IsoCurves">
      <summary>
            Gets or sets the portion iso curves.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Portion.#ctor(devDept.Eyeshot.Entities.Solid.Portion)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Portion.#ctor(devDept.Geometry.Entities.GSolid.EdgeData[],devDept.Geometry.Entities.GSolid.Face[],devDept.Geometry.Entities.GSolid.Cycle[],devDept.Geometry.Point3D[],System.Int32)">
      <summary>
            Standard constructor.
            </summary>
      <param name="edgeDatas">Edges attributes</param>
      <param name="faces">Faces attributes </param>
      <param name="cycles">Cycles attributes</param>
      <param name="vertices">Solid portion's 3D vertices</param>
      <param name="id">Portion identifier</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Portion.Clone">
      <summary>
            Creates a deep copy of this solid portion.
            </summary>
      <returns>The new solid portion object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Portion.GetFace(System.Int32,devDept.Eyeshot.Entities.LinearPath@,devDept.Eyeshot.Entities.LinearPath[]@,System.Double)">
      <summary>
             Gets the specified Solid face as a number of <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> loops.
            </summary>
      <param name="faceNum">The number of the face</param>
      <param name="outer">Outer contour</param>
      <param name="inners">Inner countours</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Portion.GetFace(System.Int32,devDept.Geometry.PlaneEquation@,devDept.Geometry.Point2D[]@,devDept.Geometry.Point2D[][]@,System.Double)">
      <summary>Gets the face.</summary>
      <param name="faceNum">The number of the face</param>
      <param name="plane">The plane quation of the face</param>
      <param name="outer">Outer contour</param>
      <param name="inners">Inner countours</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Portion.GetFacePlane(System.Int32)">
      <summary>Gets the plane equation of the face.
            </summary>
      <param name="faceNum">The number of the face</param>
      <returns>The plane quation of the face.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.Portion.Edges">
      <summary>
            Get the sharp edges of this solid portion.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Portion.#ctor(devDept.Serialization.PortionSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.PortionSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.PortionSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.SmoothingAngle">
      <summary>
            Gets or sets the angle in radians that determines solid sharp edges. 
            </summary>
      <remarks>You may need to call Viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.DrawFace(devDept.Graphics.RenderContextBase,System.Object)">
      <summary>
            Draws the face.
            </summary>
      <param name="renderContext">The render context</param>
      <param name="data">The list of triangles</param>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ApplyMaterial(System.String,devDept.Geometry.textureMappingType,System.Double,System.Double)">
      <summary>
            Maps the specified material to this solid. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.Design.Materials" /> collection.
            </summary>
      <remarks>You may need to call viewport.Entities.Regen() to see the effect of this command.</remarks>
      <param name="matName">Material name</param>
      <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
      <param name="scaleX">Material texture scale along the X axis</param>
      <param name="scaleY">Material texture scale along the Y axis</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ApplyMaterial(System.String,devDept.Geometry.textureMappingType,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Maps the specified material to this solid. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.Design.Materials" /> collection.
            </summary>
      <remarks>You may need to call viewport.Entities.Regen() to see the effect of this command.</remarks>
      <param name="matName">Material name</param>
      <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
      <param name="scaleX">Material texture scale along the X axis</param>
      <param name="scaleY">Material texture scale along the Y axis</param>
      <param name="boxMin">Bounding box min point</param>
      <param name="boxMax">Bounding box max point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ApplyTextureMapping(devDept.Geometry.textureMappingType,System.Double,System.Double)">
      <summary>
            Maps the specified material to this solid. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.Design.Materials" /> collection.
            </summary>
      <remarks>You may need to call viewport.Entities.Regen() to see the effect of this command.</remarks>
      <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
      <param name="scaleX">Material texture scale along the X axis</param>
      <param name="scaleY">Material texture scale along the Y axis</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ApplyTextureMapping(devDept.Geometry.textureMappingType,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Transformation)">
      <summary>
            Maps the specified material to this solid. Before using this method you need to define a material and add it to the <see cref="P:devDept.Eyeshot.Design.Materials" /> collection.
            </summary>
      <remarks>You may need to call viewport.Entities.Regen() to see the effect of this command.</remarks>
      <param name="mappingMode">Indicates the way Material texture is wrapped on the object</param>
      <param name="scaleX">Material texture scale along the X axis</param>
      <param name="scaleY">Material texture scale along the Y axis</param>
      <param name="boxMin">Bounding box min point</param>
      <param name="boxMax">Bounding box max point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.RemoveTextureMapping">
      <summary>
            Remove the texture mapping.
            </summary>
      <remarks>You may need to call viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.RemoveMaterial">
      <summary>
            Remove the material and the texture mapping.
            </summary>
      <remarks>You may need to call viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.#ctor(devDept.Geometry.Entities.GSolid)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.#ctor">
      <summary>
            Empty constructor. For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.#ctor(System.Boolean,devDept.Eyeshot.TextureMappingData,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Solid.Portion})">
      <summary>
            Boundary representation constructor.
            </summary>
      <param name="brepMode">Boundary representation mode</param>
      <param name="textureMapping">Texture mapping data</param>
      <param name="portions">Portions list</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.Clone">
      <summary>
            Creates a deep copy of this solid.
            </summary>
      <returns>The new solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.IsPointInside(devDept.Geometry.Point3D)">
      <summary>
            Checks if the specified point is inside the solid.
            </summary>
      <param name="point">The 3D point</param>
      <returns>True if the 3D point is inside the mesh, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ConvertToMesh(System.Boolean)">
      <summary>
            Converts this solid into a mesh object.
            </summary>
      <param name="weldNow">If true, the resulting meshes are welded immediately.</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.TransformBy(devDept.Geometry.Transformation)">
      <summary>
            Applies transformation matrix on 3D object
            </summary>
      <param name="transform">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.FromTriangles(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.IndexTriangle})">
      <summary>
            Creates a solid from a list of vertices and triangles.
            </summary>
      <param name="vList">List of vertices</param>
      <param name="tList">List of index triangles</param>
      <returns>True if the operation is successfull, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.FromTriangles``1(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.IndexTriangle})">
      <summary>
            Creates a solid from a list of vertices and triangles.
            </summary>
      <param name="vList">List of vertices</param>
      <param name="tList">List of index triangles</param>
      <returns>True if the operation is successfull, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.FromTriangles(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.IndexTriangle},System.Double,System.Boolean,System.Double)">
      <summary>
            Creates a solid from a list of vertices and triangles.
            </summary>
      <param name="vList">List of vertices</param>
      <param name="tList">List of index triangles</param>
      <param name="smoothingAngle">Smoothing angle in radians</param>
      <param name="check">If true, tries to fix triangles that don't match (slower).</param>
      <param name="tol">Optional tolerance, start with domain size * 1e-6</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.FromTriangles``1(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.IndexTriangle},System.Double,System.Boolean,System.Double)">
      <summary>
            Creates a solid from a list of vertices and triangles.
            </summary>
      <param name="vList">List of vertices</param>
      <param name="tList">List of index triangles</param>
      <param name="smoothingAngle">Smoothing angle in radians</param>
      <param name="check">If true, tries to fix triangles that don't match (slower).</param>
      <param name="tol">Optional tolerance, start with domain size * 1e-6</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.FindClosestTriangle(devDept.Geometry.Transformation,devDept.Geometry.Segment3D)">
      <summary>
            Returns a list of triangles hit by the provided segment.
            </summary>
      <param name="transf">The transformation applied to the entity (necessary if the entity is inside a Block to propagate the BlockReference transformation)</param>
      <param name="seg">The 3D segment representing the viewing direction</param>
      <returns>The sorted list of triangles intersecting the provided segment.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.#ctor(devDept.Serialization.SolidSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.SolidSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.SolidSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.IsClosed">
      <summary>
             If true, the solid is closed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.Faces">
      <summary>
            The collection of the (sorted) faces for selection. 
            </summary>
      <remarks>The list is constructed from the adjacent triangles as the selection is performed on the entity.</remarks>
      <remarks>The triangle indices refer to the <see cref="P:devDept.Eyeshot.Entities.Solid.MeshForFaceSelection" /> that is built from the solid when a face is selected.</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Solid.MeshForFaceSelection" />
      <seealso cref="P:devDept.Eyeshot.Design.FaceSelectionAngle" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.MeshForFaceSelection">
      <summary>
            Gets the internal mesh build when doing the selection of the <see cref="P:devDept.Eyeshot.Entities.Solid.Faces" /></summary>
      <seealso cref="P:devDept.Eyeshot.Entities.Solid.Faces" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.IsAnyFaceSelected">
      <summary>
            Tells if there is a selected face.
            </summary>
      <returns>True if there is a selected face</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.GetFaceSelection(System.Int32,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Tells if the face is selected.
            </summary>
      <param name="faceIndex">The face index</param>
      <param name="parents">The parents stack that define a nested instance</param>
      <returns>True if the face is selected</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.SetFaceSelection(System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Sets the selection status of a face.
            </summary>
      <param name="faceIndex">The face index</param>
      <param name="status">The selection status</param>
      <param name="parents">The parents stack that define a nested instance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ClearFacesSelection(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Clears the faces selection status for a specific instance.
            </summary>
      <param name="parents">The parents stack that define a nested instance (use null for top-level)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ClearFacesSelectionForAllInstances">
      <summary>
            Clears the selection status for all faces in all instances.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.ResetSelectionMode">
      <summary>
            Resets the <see cref="P:devDept.Eyeshot.Entities.Solid.SelectionMode" /> to <see cref="F:devDept.Eyeshot.selectionFilterType.Entity" /> if there are no other selected inner elements.
            </summary>
      <remarks>Internal use only.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.SelectFace(System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Selects the face of the instance identified by the parents stack.
            </summary>
      <param name="faceIndex">The face index</param>
      <param name="selectionState">The selection state</param>
      <param name="parents">The parents stack</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Solid.GetFaceTriangles(System.Int32,System.Double)">
      <summary>
            Gets the triangles adjacent to the given triangle.
            </summary>
      <param name="triangleIndex">The triangle index</param>
      <param name="adjacentNormalAngle">The angle (in radians) used to compare two adjacent triangles normals. If the angle between them is below this value, the triangles are considered belonging to the same face.</param>
      <returns>The list of adjacent triangles.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Solid.SelectionMode">
      <summary>
            Gets or sets the selection mode.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.motionType">
      <summary>
            Motion type definition.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.motionType.Undefined">
      <summary>
            Undefined
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.motionType.G00">
      <summary>
            Rapid positioning
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.motionType.G01">
      <summary>
            Linear interpolation
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.motionType.G02">
      <summary>
            Circular interpolation, clockwise.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.motionType.G03">
      <summary>
            Circular interpolation, counterclockwise.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.motionType.G81">
      <summary>
            Simple drilling cycle
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.motionType.G82">
      <summary>
            Drilling cycle with dwell
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.motionType.G83">
      <summary>
            Peck drilling cycle (full retraction from pecks)
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.motionType.G84">
      <summary>
            Tapping cycle, right hand thread, M03 spindle direction.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.approachType">
      <summary>
            Motion approach type definition.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.approachType.None">
      <summary>
            Neither lead nor ramp motion
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.approachType.Lead">
      <summary>
            Lead motion
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.approachType.Ramp">
      <summary>
            Ramp motion
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Toolpath">
      <summary>
            Toolpath entity definition.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Toolpath.Motion">
      <summary>
            Base class for all GCode motions.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.Motion.#ctor(devDept.Eyeshot.Entities.motionType,System.Double,System.Double,System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="code">GCode</param>
      <param name="speed">Spindle speed</param>
      <param name="feed">Feed rate</param>
      <param name="codeLine">Full code line</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.Motion.Clone">
      <summary>
            Creates a deep copy of this motion.
            </summary>
      <returns>The new motion object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.Motion.Speed">
      <summary>
            Gets or sets spindle speed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.Motion.Feed">
      <summary>
            Get or sets feed rate.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.Motion.Code">
      <summary>
            Gets or sets G code.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.Motion.CodeLine">
      <summary>
            Gets or sets code line.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.Motion.StartPoint">
      <summary>
            Gets the motion start point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.Motion.EndPoint">
      <summary>
            Gets the motion end point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.Motion.Approach">
      <summary>
            Gets or sets the approach type.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.Motion.Length">
      <summary>
            Gets the motion length.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.Tool">
      <summary>
            Gets or sets tool number.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Toolpath.LinearMotion">
      <summary>
            Linear motion definition.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.LinearMotion.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Eyeshot.Entities.motionType,System.Double,System.Double,System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="from">Current position</param>
      <param name="to">Next position</param>
      <param name="code">GCode</param>
      <param name="speed">Spindle speed</param>
      <param name="feed">Feed rate</param>
      <param name="codeLine">Full code line</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.LinearMotion.Clone">
      <summary>
            Creates a deep copy of this linear motion.
            </summary>
      <returns>The new linear motion object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.LinearMotion.From">
      <summary>
            Gets or sets current 3D point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.LinearMotion.To">
      <summary>
            Gets or sets next 3D point.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.LinearMotion.Length">
      <summary>
            Gets linear motion length.
            </summary>
      <returns>A value representing the linear motion length.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Toolpath.CircularMotion">
      <summary>
            Circular motion definition.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.CircularMotion.#ctor(devDept.Geometry.Plane,System.Double,devDept.Geometry.Interval,devDept.Eyeshot.Entities.motionType,System.Double,System.Double,System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="plane">Arc plane</param>
      <param name="radius">Arc radius</param>
      <param name="angle">Arc angle</param>
      <param name="code">GCode</param>
      <param name="tool">Tool number</param>
      <param name="speed">Spindle speed</param>
      <param name="feed">Feed rate</param>
      <param name="codeLine">Full code line</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.CircularMotion.#ctor(devDept.Geometry.Plane,System.Double,devDept.Eyeshot.Entities.motionType,System.Double,System.Double,System.String)">
      <summary>
            Full circle constructor.
            </summary>
      <param name="plane">Arc plane</param>
      <param name="radius">Arc radius</param>
      <param name="code">GCode</param>
      <param name="tool">Tool number</param>
      <param name="speed">Spindle speed</param>
      <param name="feed">Feed rate</param>
      <param name="codeLine">Full code line</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.CircularMotion.Clone">
      <summary>
            Creates a deep copy of this linear motion.
            </summary>
      <returns>The new linear motion object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.CircularMotion.Plane">
      <summary>
            Gets or sets arc plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.CircularMotion.Radius">
      <summary>
            Gets or sets arc radius.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.CircularMotion.Angle">
      <summary>
            Gets or sets arc angle.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.CircularMotion.Length">
      <summary>
            Gets the circular motion length
            </summary>
      <returns>A value representing the circular motion length</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.MotionList">
      <summary>
            The list of tool path motions.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.ShowPoints">
      <summary>
            Gets or sets the points visibility status.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.#ctor(System.Collections.Generic.ICollection{devDept.Eyeshot.Entities.Toolpath.Motion},System.Int32)">
      <summary>
            Standard constructor
            </summary>
      <param name="motions">A collection of <see cref="T:devDept.Eyeshot.Entities.Toolpath.Motion" /> items</param>
      <param name="tool">The tool number</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.Clone">
      <summary>
            Creates a deep copy of this tool path.
            </summary>
      <returns>The new tool path object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.RapidColor">
      <summary>
            Gets or sets the color used to draw the rapid movements.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.LeadColor">
      <summary>
            Gets or sets the color used to draw the lead movements.
            </summary>
      <seealso cref="T:devDept.Eyeshot.Milling.Lead" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.RampColor">
      <summary>
            Gets or sets the color used to draw the ramp movements.
            </summary>
      <seealso cref="T:devDept.Eyeshot.Milling.Ramp" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.StartPoint">
      <summary>
            Gets the start point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.EndPoint">
      <summary>
            Gets the end point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.RapidPattern">
      <summary>
            Gets or sets the pattern used to draw the rapid movements. 0xFFFF for solid, 0x0F0F for dashed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Toolpath.Transformation">
      <summary>
            Gets or sets machining setup transformation.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.Length">
      <summary>
            Gets the the toolpath length.
            </summary>
      <returns>A value representing the toolpath length.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Toolpath.ConvertToLinearPath(System.Double)">
      <summary>
            Convert the toolpath to a <see cref="T:devDept.Geometry.Entities.GLinearPath" />.
            </summary>
      <param name="deviation">The maximum deviation (used to convert curvilinear
            motions such as <see cref="T:devDept.Eyeshot.Entities.Toolpath.CircularMotion" /> into segments).</param>
      <returns>
            The newly created linear path.
            </returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.PointCL">
      <summary>
            Cutter location point definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.PointCL.MotionIndex">
      <summary>
            Gets the index of the parent motion.
            </summary>
      <remarks>The last point of the <see cref="T:devDept.Eyeshot.Entities.Toolpath" /> will contain an invalid index.</remarks>
      <seealso cref="T:devDept.Eyeshot.Entities.Toolpath.Motion" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.PointCL.Tool">
      <summary>
            Gets or sets the tool number.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.PointCL.Speed">
      <summary>
            Gets or sets the spindle speed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.PointCL.Feed">
      <summary>
            Gets or set the feed rate.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.PointCL.Code">
      <summary>
            Gets or sets the G code.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCL.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            XYZ constructor.
            </summary>
      <param name="x">The X coordinate value</param>
      <param name="y">The Y coordinate value</param>
      <param name="z">The Z coordinate value</param>
      <param name="length">The toolpath length up to this point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCL.#ctor(System.Double,System.Double,System.Double,System.Int32,devDept.Eyeshot.Entities.Toolpath.Motion)">
      <summary>
            XYZ, tool and motion constructor.
            </summary>
      <param name="x">The X coordinate value</param>
      <param name="y">The Y coordinate value</param>
      <param name="z">The Z coordinate value</param>
      <param name="tool">The tool number</param>
      <param name="lm">The related motion</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCL.Clone">
      <summary>
            Creates a deep copy of this CL point.
            </summary>
      <returns>The new CL point.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.RasterView">
      <summary>
            Raster view class definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.RasterView.Dpi">
      <summary>
            Gets or sets the dpi resolution.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.RasterView.Shadow">
      <summary>
            Gets or sets a value indicating whether the shadows must be shown or not.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.RasterView.DisplayMode">
      <summary>
            Gets or sets the <see cref="T:devDept.Eyeshot.displayType" />.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when trying to set a displayType equal to <see cref="F:devDept.Eyeshot.displayType.Wireframe" /> or <see cref="F:devDept.Eyeshot.displayType.HiddenLines" />. Please use <see cref="T:devDept.Eyeshot.Entities.VectorView" /> in these cases.</exception>
    </member>
    <member name="P:devDept.Eyeshot.Entities.RasterView.Scale">
      <summary>
            Gets or sets the scale factor between the design and the drawing workspaces.
            </summary>
      <remarks>
            It must be set according to the <see cref="P:devDept.Eyeshot.Design.Units" /> and the <see cref="P:devDept.Eyeshot.Sheet.Units" />.
            You need to rebuild the view to see changes.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Sheet.Units" />
      <seealso cref="M:devDept.Eyeshot.Sheet.Rebuild(devDept.Eyeshot.Design,devDept.Eyeshot.Drawing,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.RasterView.#ctor(System.Double,System.Double,devDept.Eyeshot.viewType,System.Double,System.String,System.Double,System.Double)">
      <summary>
            Standard view constructor.
            </summary>
      <param name="x">Position along X axis </param>
      <param name="y">Position along Y axis</param>
      <param name="standardView">ViewRaster type</param>
      <param name="scale">ViewRaster scale</param>
      <param name="name">ViewRaster name</param>
      <param name="width">Width of the view frame, if 0 the whole design is captured</param>
      <param name="height">Height of the view frame, if 0 the whole design is captured</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.RasterView.#ctor(System.Double,System.Double,devDept.Eyeshot.Camera,System.Double,System.String,System.Double,System.Double)">
      <summary>
            Custom view constructor.
            </summary>
      <param name="x">Position along X axis </param>
      <param name="y">Position along Y axis</param>
      <param name="camera">Camera object</param>
      <param name="scale">ViewRaster scale</param>
      <param name="name">ViewRaster name</param>
      <param name="width">Width of the view frame, if 0 the whole design is captured</param>
      <param name="height">Height of the view frame, if 0 the whole design is captured</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.RasterView.#ctor(System.Double,System.Double,devDept.Eyeshot.Camera,System.Double,System.String,System.Drawing.RectangleF)">
      <summary>
            Custom view constructor with window.
            </summary>
      <param name="x">Position along X axis </param>
      <param name="y">Position along Y axis</param>
      <param name="camera">Camera object</param>
      <param name="scale">ViewRaster scale</param>
      <param name="name">ViewRaster name</param>
      <param name="window">The portion of the viewport to capture in screen coordinates (0 on top)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.RasterView.Clone">
      <summary>
            Creates a deep copy of this view.
            </summary>
      <returns>The new view object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.RasterView.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.RasterView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.VectorView">
      <summary>
            Vector view class definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.VectorView.CenterlinesExtensionAmount">
      <summary>
            Gets or sets the center lines extension amount.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.VectorView.Scale">
      <summary>
            Gets or sets the scale factor between the design and the drawing.
            </summary>
      <remarks>It must be set according to the <see cref="P:devDept.Eyeshot.Design.Units" /> and the <see cref="P:devDept.Eyeshot.Sheet.Units" />.</remarks>
      <seealso cref="P:devDept.Eyeshot.Sheet.Units" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.VectorView.HiddenSegments">
      <summary>
            Gets or sets the hidden segments (silhouettes, edges, wires) visibility status.
            </summary>
      <remarks> The view needs to be rebuilt at least one time in order to hide/show the hidden segments. </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.VectorView.IgnoreTransparency">
      <summary>
            If true, treats the transparent entities as if they are opaque, so they will hide the geometry behind.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.VectorView.FillTexts">
      <summary>
            When true, the texts and dimensions arrow heads are computed as meshes.
            </summary>
      <remarks>The font accuracy is determined by the <see cref="P:devDept.Eyeshot.Entities.VectorView.FontAccuracy" /></remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.VectorView.FontAccuracy" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.VectorView.FontAccuracy">
      <summary>
            Gets or sets the font accuracy tolerance.
            </summary>
      <remarks>If 0 and <see cref="P:devDept.Eyeshot.Entities.VectorView.FillTexts" /> is true, the triangles of the texts in the scene are used.</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.VectorView.FillTexts" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.VectorView.FillRegions">
      <summary>
            When true, the regions are computed as meshes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.VectorView.KeepEntityColor">
      <summary>
            When true, keeps the entity color.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.VectorView.TreatWhiteAsBlack">
      <summary>
            When true and <see cref="P:devDept.Eyeshot.Entities.VectorView.KeepEntityColor" /> is also true, treats white entities as if they were black.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.VectorView.#ctor(System.Double,System.Double,devDept.Eyeshot.viewType,System.Double,System.String,System.Double,System.Double)">
      <summary>
            Standard view constructor.
            </summary>
      <param name="x">Position along X axis </param>
      <param name="y">Position along Y axis</param>
      <param name="standardView">View type</param>
      <param name="scale">View scale</param>
      <param name="name">View name</param>
      <param name="width">Width of the view frame, if 0 the whole design is captured</param>
      <param name="height">Height of the view frame, if 0 the whole design is captured</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.VectorView.#ctor(System.Double,System.Double,devDept.Eyeshot.Camera,System.Double,System.String,System.Double,System.Double)">
      <summary>
            Custom view constructor.
            </summary>
      <param name="x">Position along X axis </param>
      <param name="y">Position along Y axis</param>
      <param name="camera">Camera object</param>
      <param name="scale">View scale</param>
      <param name="name">View name</param>
      <param name="width">Width of the view frame, if 0 the whole design is captured</param>
      <param name="height">Height of the view frame, if 0 the whole design is captured</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.VectorView.#ctor(System.Double,System.Double,devDept.Eyeshot.Camera,System.Double,System.String,System.Drawing.RectangleF)">
      <summary>
            Custom view constructor with window.
            </summary>
      <param name="x">Position along X axis </param>
      <param name="y">Position along Y axis</param>
      <param name="camera">Camera object</param>
      <param name="scale">View scale</param>
      <param name="name">View name</param>
      <param name="window">The portion of the viewport to capture in screen coordinates (0 on top)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.VectorView.Clone">
      <summary>
            Creates a deep copy of this view.
            </summary>
      <returns>The new view object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.VectorView.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.VectorView.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.VectorView.UpdateViewBlock(System.Boolean,devDept.Eyeshot.Design,devDept.Eyeshot.Drawing)">
      <summary>
            Adds or removes the hidden segments from the block of the view. 
            </summary>
      <param name="add">If true, add the segments; otherwise it removes them.</param>
      <param name="design">The Design workspace</param>
      <param name="drawing">the Drawing workspace</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.View">
      <summary>
            View class definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.View.HasChanged">
      <summary>
            True when the view has been invalidated after a property change and therefore needs to be updated, otherwise false.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.View.EntitiesToHide">
      <summary>
            Gets or sets the list of entities (with the correspondent stack of parents) to
            hide in the view.
            </summary>
      <remarks>
            If the entity to hide is at root level, an empty stack of parents need to be
            passed as input.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.View.Camera">
      <summary>
            Gets the view camera.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.View.Width">
      <summary>
            Gets the width of the view frame.
            </summary>
      <remarks>If 0, the whole design is captured.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.View.Height">
      <summary>
            Gets the height of the view frame.
            </summary>
      <remarks>If 0, the whole design is captured.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.View.Window">
      <summary>
            Gets the portion of the viewport to capture in screen coordinates (0 on top)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.View.WindowCenter">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.View.X">
      <summary>
            Gets or sets position along the X axis.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.View.Y">
      <summary>
            Gets or sets position along the Y axis.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.View.Scale">
      <summary>
            Gets or sets the scale factor between the design and the drawing workspaces.
            </summary>
      <remarks>It must be set according to the <see cref="P:devDept.Eyeshot.Design.Units" /> and the <see cref="P:devDept.Eyeshot.Sheet.Units" />.</remarks>
      <seealso cref="P:devDept.Eyeshot.Sheet.Units" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.View.#ctor(System.Double,System.Double,devDept.Eyeshot.viewType,System.Double,System.String,System.Double,System.Double)">
      <summary>
            Standard view constructor.
            </summary>
      <param name="x">Position along X axis </param>
      <param name="y">Position along Y axis</param>
      <param name="standardView">View type</param>
      <param name="scale">View scale</param>
      <param name="name">View name</param>
      <param name="width">Width of the view frame, if 0 the whole design is captured</param>
      <param name="height">Height of the view frame, if 0 the whole design is captured</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.View.#ctor(System.Double,System.Double,devDept.Eyeshot.Camera,System.Double,System.String,System.Double,System.Double)">
      <summary>
            Custom view constructor.
            </summary>
      <param name="x">Position along X axis </param>
      <param name="y">Position along Y axis</param>
      <param name="camera">Camera object</param>
      <param name="scale">View scale</param>
      <param name="name">View name</param>
      <param name="width">Width of the view frame, if 0 the whole design is captured</param>
      <param name="height">Height of the view frame, if 0 the whole design is captured</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.View.#ctor(System.Double,System.Double,devDept.Eyeshot.Camera,System.Double,System.String,System.Drawing.RectangleF)">
      <summary>
            Custom view constructor with window.
            </summary>
      <param name="x">Position along X axis </param>
      <param name="y">Position along Y axis</param>
      <param name="camera">Camera object</param>
      <param name="scale">View scale</param>
      <param name="name">View name</param>
      <param name="window">The portion of the viewport to capture in screen coordinates (0 on top)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.View.Rebuild(devDept.Eyeshot.Design,devDept.Eyeshot.Sheet,devDept.Eyeshot.Drawing,System.Boolean)">
      <summary>
            Rebuilds blocks related to all the changed views.
            </summary>
      <param name="design">The design control.</param>
      <param name="sheet">The parent sheet of the view.</param>
      <param name="drawing">The parent drawing control.</param>
      <param name="async">When true the related block is built asynchronously and must be added at the <see cref="E:devDept.Eyeshot.Workspace.WorkCompleted" /> event, otherwise it's built synchronously.</param>
      <returns>The rebuilt block.</returns>
      <seealso cref="M:devDept.Eyeshot.ViewBuilder.AddToDrawing(devDept.Eyeshot.Drawing)" />
      <seealso cref="P:devDept.Eyeshot.Entities.View.HasChanged" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.View.DrawMarkerForDirty(devDept.Eyeshot.DrawParams)">
      <summary>
            Gives a chance to the derived classes to have a custom mark when the view has changed.
            </summary>
      <param name="drawParams">The draw params</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.View.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.View.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.angleFormatType">
      <summary>
            Format for the angle of the angular dimension. 
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.AngularDim">
      <summary>
            Angular dimension entity.
            </summary>
      <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.StyleName" /> property and calling the Workspace.Entities.Regen() method.</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Text.StyleName" />
      <seealso cref="T:devDept.Eyeshot.Entities.RadialDim" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.AngleFormat">
      <summary>
            Gets or Sets the dimension Angle Format
            <remarks>AutoCAD property: DIMAUNIT</remarks></summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.ExtLineExt">
      <summary>
            Specifies the amount to extend the extension line beyond the dimension line.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.ExtLineOffset">
      <summary>
            Specifies the offset of extension lines from the origin points.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.ShowExtLine1">
      <summary>
            When true shows the first extension line.
            </summary>
      <remarks>You need to call the Design.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.ShowExtLine2">
      <summary>
            When true shows the second extension line.
            </summary>
      <remarks>You need to call the Design.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.LeftArrowhead">
      <summary>
            Gets or sets the left arrow head type.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.RightArrowhead">
      <summary>
            Gets or sets the right arrow head type.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AngularDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)">
      <summary>
            Three 3D points constructor.
            </summary>
      <param name="origin">Origin point</param>
      <param name="extLine1">First extension line point</param>
      <param name="extLine2">Second extension line point</param>
      <param name="dimLinePos">Dimension line position. Affects text position when the text cannot fit between extension lines.</param>
      <param name="textHeight">Text height</param>
      <param name="dimPlane">The dimension plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AngularDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)">
      <summary>
            Three 3D points constructor.
            </summary>
      <param name="dimPlane">The dimension plane</param>
      <param name="extLine1">First extension line point</param>
      <param name="extLine2">Second extension line point</param>
      <param name="dimLinePos">Dimension line position. Affects text position when the text cannot fit between extension lines.</param>
      <param name="textHeight">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AngularDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double)">
      <summary>
            Sketch plane constructor.
            </summary>
      <param name="origin">Origin point</param>
      <param name="extLine1">First extension line point</param>
      <param name="extLine2">Second extension line point</param>
      <param name="dimLinePos">Dimension line position. Affects text position when the text cannot fit between extension lines.</param>
      <param name="textHeight">Text height</param>
      <param name="sketchPlane">The sketch plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AngularDim.#ctor(devDept.Geometry.Plane,devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Line,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)">
      <summary>
            Two lines constructor.
            </summary>
      <param name="dimPlane">The dimension plane</param>
      <param name="line1">First line</param>
      <param name="line2">Second line</param>
      <param name="quadrantPoint">The two lines subdivide the round angle in four quadrants,  this point help to select the desired one.</param>
      <param name="dimLinePos">Dimension line position. Affects text position when the text cannot fit between extension lines and affects the Arc drawing position</param>
      <param name="textHeight">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AngularDim.Clone">
      <summary>
            Creates a deep copy of this linear dimension.
            </summary>
      <returns>The new linear dimension object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.Origin">
      <summary>
            Gets or sets the origin point.
            </summary>
      <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.ExtLine1">
      <summary>
            Gets or sets the first extension line point.
            </summary>
      <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.ExtLine2">
      <summary>
            Gets or sets the second extension line point.
            </summary>
      <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.UnderlyingArc">
      <summary>
            Gets the dimension's arc curve.
            </summary>
      <returns>The <see cref="T:devDept.Eyeshot.Entities.Arc" /> object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.StartAngle">
      <summary>
            Gets the dimension arc start angle.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.EndAngle">
      <summary>
            Gets the dimension arc end angle.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AngularDim.Radius">
      <summary>
            Gets the dimension arc radius.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AngularDim.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AngularDim.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.FastPointCloud">
      <summary>
            Fast point cloud entity. Suitable for huge number of points.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.FastPointCloud.DrawingStyle">
      <summary>
            Gets or sets point cloud drawing style.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.FastPointCloud.Nature">
      <summary>
            Gets point cloud nature.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.FastPointCloud.drawSelectedData">
      <summary>
            The entity graphics data for selection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.FastPointCloud.PointArray">
      <summary>
            Gets or sets point array.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.FastPointCloud.ColorArray">
      <summary>
            Gets or sets the color array.
            </summary>
      <remarks>The size of the array determines how the colors are applied to the entity: 
            1 byte per vertex is applied as a modulation factor (0-255) to the <see cref="T:System.Drawing.Color" /> of the entity. This requires the use of shaders so the 
            graphics acceleration must be turned on, <see cref="P:devDept.Eyeshot.Workspace.UseShaders" /> must be true (Winforms Eyeshot control only) and the <see cref="P:devDept.Eyeshot.Viewport.DisplayMode" /> must be <see cref="F:devDept.Eyeshot.displayType.Rendered" />
            3 bytes per vertex are applied as RGB colors
            4 bytes per vertex are applied as RGBA colors (in order for the alpha transparency to work, the entity must also have a 
            <see cref="T:System.Drawing.Color" /> with alpha &lt; 255 and <see cref="P:devDept.Eyeshot.Workspace.AccurateTransparency" /> must be set to false).</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.FastPointCloud.ZoomFitSpeed">
      <summary>
            Gets or sets the number of points skipped during zoom fit and bounding box computation.
            </summary>
      <remarks>
        <para>This value indicates how often a point is chosen. In practice, we take one, discard 'n' and then take another, and so on. </para>
        <para>Set to 0 for accurate ZoomFit and bounding box, increase for better performance.</para>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastPointCloud.#ctor(System.Single[])">
      <summary>
            Point array only constructor.
            </summary>
      <param name="pointArray">The point array defined as XYZ tuples</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastPointCloud.#ctor(System.Single[],System.Single)">
      <summary>
            Point array and point size constructor.
            </summary>
      <param name="pointArray">The point array defined as XYZ tuples</param>
      <param name="pointSize">Point size (which is assigned to the <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeight" /> property)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastPointCloud.#ctor(System.Single[],System.Byte[])">
      <summary>
            Point array and color array constructor.
            </summary>
      <param name="pointArray">The point array defined as XYZ tuples</param>
      <param name="rgbArray">The color array defined as RGB tuples, RGBA tuples or as modulation factors (see <see cref="P:devDept.Eyeshot.Entities.FastPointCloud.ColorArray" /> documentation for details)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastPointCloud.#ctor(System.Single[],System.Byte[],System.Single)">
      <summary>
            Point array and color array constructor.
            </summary>
      <param name="pointArray">The point array defined as XYZ tuples</param>
      <param name="rgbArray">The color array defined as RGB tuples, RGBA tuples or as modulation factors (see <see cref="P:devDept.Eyeshot.Entities.FastPointCloud.ColorArray" /> documentation for details)</param>
      <param name="pointSize">Point size (which is assigned to the <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeight" /> property)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastPointCloud.CentroidDownsampling(System.Double)">
      <summary>
            Performs a centroid downsampling to this fastpointcloud.
            </summary>
      <param name="voxelSize">The size of the single voxel for the grid filter.</param>
      <remarks>
            You need to call Workspace.Entities.Regen() to see the effect of this command.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastPointCloud.CenterDownsampling(System.Double)">
      <summary>
            Performs a center downsampling to this fastpointcloud.
            </summary>
      <param name="voxelSize">The size of the single voxel for the grid filter.</param>
      <remarks>
            You need to call Workspace.Entities.Regen() to see the effect of this command.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastPointCloud.FitCircle(devDept.Geometry.Plane@,System.Double@)">
      <summary>
            Fits a circle to the point cloud vertices.
            </summary>
      <param name="pln">The plane of the circle, whose origin is the center of the circle</param>
      <param name="radius">The radius of the circle</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastPointCloud.FitLine(devDept.Geometry.Point3D@,devDept.Geometry.Vector3D@)">
      <summary>
            Fits a line to the point cloud vertices.
            </summary>
      <param name="p">The line start point</param>
      <param name="v">The line direction</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastPointCloud.FitPlane">
      <summary>
            Fits a plane to the point cloud vertices.
            </summary>
      <returns>The plane.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastPointCloud.DrawWithoutVBO(devDept.Graphics.RenderContextBase,System.Object)">
      <summary>
            Draws the FastPointCloud without using the vertex buffer objects when they are not supported.
            </summary>
      <param name="context">The rendering context</param>
      <param name="myParams">The parameters</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastPointCloud.DrawSelected(devDept.Graphics.RenderContextBase,System.Object)">
      <summary>
            Draws the fast point cloud selected.
            </summary>
      <param name="context">The render context</param>
      <param name="myParams">The parameters</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastPointCloud.ConvertToPointCloud">
      <summary>
            Converts this fast point cloud into a PointCloud.
            </summary>
      <returns>The resulting PointCloud.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.FastPointCloud.Subdivide(System.Int32)">
      <summary>
            Subdivides the FastPointCloud into a set of smaller ones given a maximum number of points per voxel. 
            </summary>
      <param name="maxNumPoints">The maximum number of points per voxel.</param>
      <returns>The list of the smaller FastPointClouds</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Region">
      <summary>
            Region entity definition. By convention the first contour in the list is the outer and has counterclockwise orientation. Inners are oriented clockwise.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Region.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Geometry.Entities.GRegion)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Region.ContourList">
      <summary>
            Gets o sets the list of contours inside the region.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor">
      <summary>
            Empty Constructor. For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Eyeshot.Entities.ICurve)">
      <summary>
            Single contour constructor.
            </summary>
      <param name="outer">The outer contour</param>
      <remarks>Primitives of input curve is cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Geometry.Entities.IGCurve)">
      <summary>
            Single contour constructor.
            </summary>
      <param name="outer">The outer contour</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Eyeshot.Entities.Region)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other region</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Plane,System.Boolean)">
      <summary>
            Single contour, plane and sorting flag constructor.
            </summary>
      <param name="outer">The outer contour</param>
      <param name="pln">The contour plane</param>
      <param name="sortAndOrient">When true, the contour is properly oriented.</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Geometry.Entities.IGCurve,devDept.Geometry.Plane,System.Boolean)">
      <summary>
            Single contour, plane and sorting flag constructor.
            </summary>
      <param name="outer">The outer contour</param>
      <param name="pln">The contour plane</param>
      <param name="sortAndOrient">When true, the contour is properly oriented.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Eyeshot.Entities.ICurve[])">
      <summary>
            List of contours constructor.
            </summary>
      <param name="contours">The list of contours</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Geometry.Entities.IGCurve[])">
      <summary>
            List of contours constructor.
            </summary>
      <param name="contours">The list of contours</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
      <summary>
            List of contours constructor.
            </summary>
      <param name="contours">The list of contours</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(System.Collections.Generic.IList{devDept.Geometry.Entities.IGCurve})">
      <summary>
            List of contours constructor.
            </summary>
      <param name="contours">The list of contours</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Plane,System.Boolean)">
      <summary>
            List of contours and plane constructor.
            </summary>
      <param name="contours">The list of planar contours</param>
      <param name="pln">The contours plane</param>
      <param name="sortAndOrient">When true, the contours are properly sorted and oriented.</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(System.Collections.Generic.IList{devDept.Geometry.Entities.IGCurve},devDept.Geometry.Plane,System.Boolean)">
      <summary>
            List of contours and plane constructor.
            </summary>
      <param name="contours">The list of planar contours</param>
      <param name="pln">The contours plane</param>
      <param name="sortAndOrient">When true, the contours are properly sorted and oriented.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.SortAndOrient">
      <summary>
            Sorts and orients internal contours.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.Offset(System.Double,System.Double)">
      <summary>
            Offsets the region of the specified amount.
            </summary>
      <param name="amount">Signed offset amount</param>
      <param name="tolerance">Tolerance</param>
      <returns>The offset curves of the region contours.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.Offset(System.Double,System.Double,System.Boolean)">
      <summary>
            Offsets the region of the specified amount.
            </summary>
      <param name="amount">Signed offset amount</param>
      <param name="tolerance">Tolerance</param>
      <param name="sharp">If false, offset curves are connected with an arc.</param>
      <returns>The offset curves of the region contours.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.Clone">
      <summary>
            Creates a deep copy of this region.
            </summary>
      <returns>The new region object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ConvertToMesh(System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Converts this region to a <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object.
            </summary>
      <param name="deviation">The maximum deviation, zero for current tessellation.</param>
      <param name="meshNature">The desired Mesh nature.</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ConvertToMesh``1(System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Converts this region to a <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object.
            </summary>
      <param name="deviation">The maximum deviation, zero for current tessellation.</param>
      <param name="meshNature">The desired Mesh nature.</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ConvertToSolid(System.Double)">
      <summary>
            Converts this region to a <see cref="T:devDept.Eyeshot.Entities.Solid" /> object.
            </summary>
      <param name="tolerance">Tessellation tolerance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ConvertToSolid``1(System.Double)">
      <summary>
            Converts this region to a <see cref="T:devDept.Eyeshot.Entities.Solid" /> object.
            </summary>
      <param name="tolerance">Tessellation tolerance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ConvertToSurface">
      <summary>
            Converts this region to a <see cref="T:devDept.Eyeshot.Entities.Surface" /> object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.SweepAsSurface(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Creates a surface by sweeping the region along a rail.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tol">The trim tolerance</param>
      <param name="methodType">The Sweep method</param>
      <returns>The resulting surface array.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.SweepAsBrep(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Creates a Brep by sweeping the region along a rail.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tol">The trim tolerance</param>
      <param name="methodType">The Sweep method</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.SweepAsBrep(devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Creates a Brep by sweeping the region along a rail.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tol">The trim tolerance</param>
      <param name="methodType">The Sweep method</param>
      <param name="merge">When true, it merges al the trimmed pieces. It Keeps them as separated objects otherwise.</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.SweepAsMesh(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.sweepMethodType,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Creates a mesh by sweeping the region along a rail.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tol">The trim tolerance</param>
      <param name="methodType">The Sweep method</param>
      <param name="natureType">The desired mesh nature</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.SweepAsMesh``1(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.sweepMethodType,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Creates a mesh by sweeping the region along a rail.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tol">The trim tolerance</param>
      <param name="methodType">The Sweep method</param>
      <param name="natureType">The desired mesh nature</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.SweepAsMesh(devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,devDept.Geometry.Entities.sweepMethodType,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Creates a mesh by sweeping the region along a rail.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tol">The trim tolerance</param>
      <param name="merge">When true, it merges al the trimmed pieces. It Keeps them as separated objects otherwise.</param>
      <param name="methodType">The Sweep method</param>
      <param name="natureType">The desired mesh nature</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.SweepAsMesh``1(devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,devDept.Geometry.Entities.sweepMethodType,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Creates a mesh by sweeping the region along a rail.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tol">The trim tolerance</param>
      <param name="merge">When true, it merges al the trimmed pieces. It Keeps them as separated objects otherwise.</param>
      <param name="methodType">The Sweep method</param>
      <param name="natureType">The desired mesh nature</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Region.Edges">
      <summary>
            Gets or sets the region edges.
            </summary>
      <remarks>Region edges are generated automatically by <see cref="M:devDept.Eyeshot.Entities.Entity.Regen(System.Double)" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Region.Triangles">
      <summary>
            Gets or sets the region triangles.
            </summary>
      <remarks>Region triangles are generated automatically by <see cref="M:devDept.Eyeshot.Entities.Entity.Regen(System.Double)" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Region.HasHoles">
      <summary>
            Returns true when the number of contours is bigger than zero.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.Triangulate(System.Double,System.Int32,System.Collections.Generic.IList{devDept.Geometry.Entities.GLinearPath})">
      <summary>
            Triangulates this Region.
            </summary>
      <param name="elementSize">The desired element size</param>
      <param name="smoothingPasses">The number of smoothing passes</param>
      <param name="hardEdges">The internal constraint segments as a list of linear paths, can be null/Nothing.</param>
      <returns>The resulting Mesh object, null/Nothing in case of failure.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.IsPointOnContour(devDept.Geometry.Point3D,System.Double)">
      <summary>
            Tests if a 3D point is on one of the region's contours.
            </summary>
      <param name="testPoint">The test 3D point</param>
      <param name="tol">Maximum distance under which the point is considered on a contour.</param>
      <returns>True if the 3D point is on a contour, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.IsPointInside(devDept.Geometry.Point2D)">
      <summary>
            Tests if a 2D point is inside the region.
            </summary>
      <param name="testPoint">The test 2D point, given in the plane's coordinate system</param>
      <returns>True if the 2D point is inside, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.IsPointInside(devDept.Geometry.Point3D)">
      <summary>
            Tests if a 3D point is inside the region.
            </summary>
      <param name="testPoint">The test 3D point</param>
      <returns>True if the 3D point is inside, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.QuickOffset(System.Double,System.Double)">
      <summary>
            Quick offset function for NC toolpaths.
            </summary>
      <param name="amount">Signed offset amount</param>
      <param name="tol">Regeneration tolerance</param>
      <returns>An array of curves, offset of the region contour list.</returns>
      <remarks>Despite the type of the ICurves creating the contours of the region, it will return only Arc and Lines, occasionally organized into CompositeCurves. Sharp corners are not preserved. It doesn't work if the contours of the region intersect.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.QuickOffset(System.Double,devDept.Geometry.Entities.cornerType,System.Double)">
      <summary>
            Quick offset function for NC toolpaths.
            </summary>
      <param name="amount">Signed offset amount</param>
      <param name="ct">Corner type</param>
      <param name="tol">Regeneration tolerance</param>
      <returns>An array of curves.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.QuickOffset(System.Double,devDept.Geometry.Entities.cornerType,System.Double,System.Double)">
      <summary>
            Quick offset function for NC toolpaths.
            </summary>
      <param name="amount">Signed offset amount</param>
      <param name="ct">Corner type</param>
      <param name="miterLimit">The higher the miter limit setting, the sharper the corner can be while retaining its miter.</param>
      <param name="tol">Regeneration tolerance</param>
      <returns>An array of curves.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.Pocket(System.Double,System.Double)">
      <summary>
            Pocket function for NC toolpaths.
            </summary>
      <param name="amount">Signed offset amount</param>
      <param name="tol">Regeneration tolerance</param>
      <returns>An array of curves, pocket of the region.</returns>
      <remarks>Despite the type of the ICurves creating the contours of the region, it will return only Arc and Lines for every path, occasionally organized into CompositeCurves. Sharp corners are not preserved. It doesn't work if the contours of the region intersects.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.Pocket(System.Double,devDept.Geometry.Entities.cornerType,System.Double)">
      <summary>
            Pocket function for NC toolpaths.
            </summary>
      <param name="amount">Signed offset amount</param>
      <param name="ct">Corner type</param>
      <param name="tol">Regeneration tolerance</param>
      <returns>An array of curves.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.Pocket(System.Double,devDept.Geometry.Entities.cornerType,System.Double,System.Double)">
      <summary>
            Pocket function for NC toolpaths.
            </summary>
      <param name="amount">Signed offset amount</param>
      <param name="ct">Corner type</param>
      <param name="miterLimit">The higher the miter limit setting, the sharper the corner can be while retaining its miter.</param>
      <param name="tol">Regeneration tolerance</param>
      <returns>An array of curves.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.Union``1(``0,``0)">
      <summary>Boolean union between two regions.</summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <returns>An array of regions if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.Difference``1(``0,``0)">
      <summary>Boolean difference between two regions.</summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <returns>An array of regions if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.Difference``1(``0,``0[])">
      <summary>Boolean difference between one region and a list of regions.</summary>
      <param name="a">First operand</param>
      <param name="b">An array of second operands</param>
      <returns>The resulting region if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.Intersection``1(``0,``0)">
      <summary>Boolean intersection between two regions.</summary>
      <param name="a">First operand</param>
      <param name="b">Second operand</param>
      <returns>An array of regions if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.GetPerimeter">
      <summary>
            Computes the perimeter of the region.
            </summary>
      <returns>The perimeter amount.</returns>
      <remarks>The perimeter amount includes also the inner loops length.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.Trim(devDept.Eyeshot.Entities.Region,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Eyeshot.Entities.Region[]@)">
      <summary>
            Trims the region using the given - open - curves.
            </summary>
      <param name="original">The region to be trim</param>
      <param name="curves">The curves intersecting the region profiles</param>
      <param name="result">The resulting list of regions</param>
      <returns>True if the operation was successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Serialization.RegionSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.RegionSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.RegionSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.FindClosestTriangle(devDept.Geometry.Transformation,devDept.Geometry.Segment3D)">
      <summary>
            Returns a list of triangles hit by the provided segment.
            </summary>
      <param name="transf">The transformation applied to the entity (necessary if the entity is inside a Block to propagate the BlockReference transformation)</param>
      <param name="seg">The 3D segment representing the viewing direction</param>
      <returns>The sorted list of triangles intersecting the provided segment.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsMesh(System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> along plane's Z-axis.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsMesh``1(System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> along plane's Z-axis.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsMesh(devDept.Geometry.Vector3D,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Mesh" />.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsMesh``1(devDept.Geometry.Vector3D,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Mesh" />.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsSurface(devDept.Geometry.Vector3D)">
      <summary>
            Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Surface" />.
            </summary>
      <param name="amount">Extrusion amount</param>
      <returns>&gt;The resulting Surface array.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsSurface(System.Double)">
      <summary>
            Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Surface" />.
            </summary>
      <param name="amount">Extrusion amount</param>
      <returns>&gt;The resulting Surface array.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsBrep(System.Double,System.Double,System.Double)">
      <summary>
            Extrudes a region creating a new <see cref="T:devDept.Eyeshot.Entities.Brep" />.
            </summary>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>&gt;The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsBrep(devDept.Geometry.Interval,System.Double,System.Double)">
      <summary>
            Extrudes the region to create a new Brep.
            </summary>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>&gt;The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsBrep(devDept.Geometry.Vector3D,System.Double,System.Double)">
      <summary>
            Extrudes the region to create a new Brep.
            </summary>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>&gt;The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsSolid(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Extrudes this region.
            </summary>
      <param name="x">Extrusion amount along the axis X</param>
      <param name="y">Extrusion amount along the axis Y</param>
      <param name="z">Extrusion amount along the axis Z</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsSolid``1(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Extrudes this region.
            </summary>
      <param name="x">Extrusion amount along the axis X</param>
      <param name="y">Extrusion amount along the axis Y</param>
      <param name="z">Extrusion amount along the axis Z</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsSolid(System.Double,System.Double)">
      <summary>
            Extrudes this region.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsSolid``1(System.Double,System.Double)">
      <summary>
            Extrudes this region.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsSolid(devDept.Geometry.Vector3D,System.Double)">
      <summary>
            Extrudes this region.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ExtrudeAsSolid``1(devDept.Geometry.Vector3D,System.Double)">
      <summary>
            Extrudes this region.
            </summary>
      <param name="amount">Extrusion amount</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.SweepAsSolid(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Sweeps this region along the provided trajectory.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.SweepAsSolid``1(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Sweeps this region along the provided trajectory.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.SweepAsSolid(devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Sweeps this region along the provided trajectory.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="merge">
      </param>
      <param name="sweepMethod">
      </param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.SweepAsSolid``1(devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Sweeps this region along the provided trajectory.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="merge">
      </param>
      <param name="sweepMethod">
      </param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.RevolveAsMesh(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.RevolveAsMesh``1(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.RevolveAsMesh(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.RevolveAsMesh``1(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <param name="meshNature">Entity region needs to be converted to <see cref="T:devDept.Eyeshot.Entities.Mesh" />, this is the <see cref="T:devDept.Geometry.Entities.GMesh.natureType" /> of the new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.RevolveAsSurface(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
            Revolves this region around an axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <returns>The resulting Surface array object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.RevolveAsSurface(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Revolves this region around an axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <returns>The resulting Surface array object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.RevolveAsBrep(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double)">
      <summary>
            Revolves this region around an axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="tolerance">the regeneration tolerance</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.RevolveAsBrep(System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double)">
      <summary>
            Revolves this region around an axis.
            </summary>
      <param name="deltaAngle">Revolution angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="tolerance">the regeneration tolerance</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.RevolveAsBrep(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)">
      <summary>
            Revolves this region around an axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="tolerance">the regeneration tolerance</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.RevolveAsSolid(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.RevolveAsSolid``1(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.RevolveAsSolid(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.RevolveAsSolid``1(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>
             Revolves this region around an axis.
             </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">The regeneration tolerance</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.IsAnySubContourSelected">
      <summary>
            Tells if there is a selected contour.
            </summary>
      <returns>True if there is a selected contours</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.ClearSubContoursSelectionForAllInstances">
      <summary>
            Clears the contours selection status for all instances.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateRectangle(System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rectangular region.
            </summary>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateRectangle(devDept.Geometry.Plane,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rectangular region by plane.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateRectangle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rectangular region by position.
            </summary>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateRectangle(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rectangular region by plane and position.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateRoundedRectangle(System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rounded rectangular region.
            </summary>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="radius">Corner radius</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateRoundedRectangle(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rounded rectangular region by plane.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="radius">Corner radius</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateRoundedRectangle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rounded rectangular region by position.
            </summary>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="radius">Corner radius</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateRoundedRectangle(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a rounded rectangular region by plane and position.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="width">Width</param>
      <param name="height">Height</param>
      <param name="radius">Corner radius</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="centered">When true, the rectangle is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateCircle(System.Double)">
      <summary>
            Creates a circular region.
            </summary>
      <param name="radius">Radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateCircle(System.Double,System.Double,System.Double)">
      <summary>
            Creates a circular region by position.
            </summary>
      <param name="x">Center's X coordinate</param>
      <param name="y">Center's Y coordinate</param>
      <param name="radius">Radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateCircle(devDept.Geometry.Plane,System.Double)">
      <summary>
            Creates a circular region by plane.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="radius">Radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateCircle(devDept.Geometry.Plane,System.Double,System.Double,System.Double)">
      <summary>
            Creates a circular region by plane and position.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Center's X coordinate</param>
      <param name="y">Center's Y coordinate</param>
      <param name="radius">Radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateCircle(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double)">
      <summary>
            Creates a circular region by plane and position.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="center">2D center point</param>
      <param name="radius">Radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateEllipse(System.Double,System.Double)">
      <summary>
            Creates an elliptical region.
            </summary>
      <param name="x">Center's X coordinate</param>
      <param name="y">Center's Y coordinate</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateEllipse(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates an elliptical region by position.
            </summary>
      <param name="x">Center's X coordinate</param>
      <param name="y">Center's Y coordinate</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateEllipse(devDept.Geometry.Plane,System.Double,System.Double)">
      <summary>
            Creates an elliptical region by plane.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateEllipse(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates an elliptical region by plane and position.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Center's X coordinate</param>
      <param name="y">Center's Y coordinate</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateEllipse(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double,System.Double)">
      <summary>
            Creates an elliptical region by plane and position.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="center">2D center point</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreatePolygon(devDept.Geometry.Point2D[])">
      <summary>
            Creates a polygonal region. 
            </summary>
      <param name="points">A list of 2D points</param>
      <remarks>The first and the last given points must be different.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreatePolygon(devDept.Geometry.Point3D[])">
      <summary>
            Creates a polygonal region.
            </summary>
      <param name="points">A list of 3D points laying on an arbitrary plane</param>
      <remarks>The first and the last given points must be different.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreatePolygon(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Geometry.Point2D})">
      <summary>
            Creates a polygonal region by plane.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="points">A list of 2D points laying on the plane</param>
      <remarks>The first and the last given points must be different.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateSlot(System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a region with the shape of a slot.
            </summary>
      <param name="length">Center to center length</param>
      <param name="radius">Radius</param>
      <param name="centered">When true, the slot is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateSlot(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a region with the shape of a slot by position.
            </summary>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="length">Center to center length</param>
      <param name="radius">Radius</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="centered">When true, the slot is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateSlot(devDept.Geometry.Plane,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a region with the shape of a slot by plane.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="length">Center to center length</param>
      <param name="radius">Radius</param>
      <param name="centered">When true, the slot is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateSlot(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a region with the shape of a slot by plane and position.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="length">Center to center length</param>
      <param name="radius">Radius</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="centered">When true, the slot is built centered on the origin.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateCircularSlot(System.Double,System.Double,System.Double)">
      <summary>
            Creates a region with the shape of a circular slot.
            </summary>
      <param name="angle">Angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateCircularSlot(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a region with the shape of a circular slot by position.
            </summary>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="angle">Angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateCircularSlot(devDept.Geometry.Plane,System.Double,System.Double,System.Double)">
      <summary>
            Creates a region with the shape of a circular slot by plane.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="angle">Angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateCircularSlot(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a region with the shape of a circular slot by plane and position.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="angle">Angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateCircularSlot(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a region with the shape of a circular slot by start angle.
            </summary>
      <param name="startAngle">Start angle in radians</param>
      <param name="deltaAngle">Delta angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateCircularSlot(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a region with the shape of a circular slot by position and start angle.
            </summary>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="startAngle">Start angle in radians</param>
      <param name="deltaAngle">Delta angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateCircularSlot(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a region with the shape of a circular slot by plane and start angle.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="startAngle">Start angle in radians</param>
      <param name="deltaAngle">Delta angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateCircularSlot(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a region with the shape of a circular slot by plane, position and start angle.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="startAngle">Start angle in radians</param>
      <param name="deltaAngle">Delta angle in radians</param>
      <param name="radius">Circle radius</param>
      <param name="slotRadius">Slot radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateHexagon(System.Double,System.Boolean)">
      <summary>
            Creates an hexagonal region.
            </summary>
      <param name="radius">The hexagon radius</param>
      <param name="inscribed">When true, the radius is considered of the inscribed circle</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateHexagon(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates an hexagonal region by position.
            </summary>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="radius">The hexagon radius</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="inscribed">When true, the radius is considered of the inscribed circle</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateHexagon(devDept.Geometry.Plane,System.Double,System.Boolean)">
      <summary>
            Creates an hexagonal region by plane.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="radius">The hexagon radius</param>
      <param name="inscribed">When true, the radius is considered of the inscribed circle</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Region.CreateHexagon(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates an hexagonal region by plane and position.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Position along the plane X axis</param>
      <param name="y">Position along the plane Y axis</param>
      <param name="radius">The hexagon radius</param>
      <param name="angle">Rotation angle in radians</param>
      <param name="inscribed">When true, the radius is considered of the inscribed circle</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Ghost">
      <summary>
            Ghost entity.
            </summary>
      <remarks>Used as placeholder for skipped entities during the reading of the Eyeshot file format or during CollisionDetection for checkMethod different from <see cref="F:devDept.Eyeshot.CollisionDetection2D.collisionCheckType.Accurate"></see>.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ghost.#ctor(System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="description">Optional description.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Ghost.Vertices">
      <summary>
            Vertices is always an empty array.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Ghost.Description">
      <summary>
            Optional description.
            </summary>
      <remarks>May contain a description useful to understand how or why this instance has been created.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ghost.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ghost.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Brep">
      <summary>
        <para>BRep solid entity definition. A manifold solid B-rep is a finite, arcwise
            connected volume bounded by one or more surfaces, each of which is a connected,
            oriented, finite, closed 2-manifold. There is no restriction on the genus of the
            volume, nor on the number of voids within the volume.</para>
        <para>The Boundary Representation (B-rep) of a manifold solid utilizes a graph
            of edges and vertices embedded in a connected, oriented, finite, closed two
            manifold surface. The embedded graph divides the surface into arcwise connected
            areas known as faces. The edges and vertices, therefore, form the boundaries of
            the face and the domain of a face does not include its boundaries. The embedded
            graph may be disconnected and may be a pseudo graph. The graph is labeled; that
            is, each entity in the graph has a unique identity. The geometric surface
            definition used to specify the geometry of a face shall be 2-manifold embeddable
            in the plane within the domain of the face. In other words, it shall be
            connected, oriented, finite, non-self-intersecting, and of surface genus
            0.</para>
        <para>Faces do not intersect except along their boundaries. Each edge along the
            boundary of a face is shared by at most one other face in the assemblage. The
            assemblage of edges in the B-rep do not intersect except at their boundaries
            (i.e., vertices). The geometry curve definition used to specify the geometry of
            an edge shall be arcwise connected and shall not self intersect or overlap
            within the domain of the edge. The geometry of an edge shall be consistent with
            the geometry of the faces of which it forms a partial bound. The geometry used
            to define a vertex shall be consistent with the geometry of the faces and edges
            of which it forms a partial bound.</para>
        <para>A B-rep is represented by one or more closed shells which shall be
            disjoint. One shell, the outer, shall completely enclose all the other shells
            and no other shell may enclose a shell. </para>
      </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemove(devDept.Eyeshot.Entities.Region,System.Double)">
      <summary>
            Extrudes the specified region and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="reg">The region</param>
      <param name="amount">The extrusion amount</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemove(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval)">
      <summary>
            Extrudes the specified region and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="reg">The region</param>
      <param name="amount">The extrusion amount</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemove(devDept.Eyeshot.Entities.Region,System.Double,System.Double)">
      <summary>
            Extrudes the specified region with a draft angle and removes it from the original Brep object.
            </summary>
      <param name="reg">The region</param>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,System.Double,devDept.Geometry.Plane,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="patternPln">The plane used to create the rectangular pattern</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,devDept.Geometry.Plane,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="patternPln">The plane used to create the rectangular pattern</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Plane,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <param name="patternPln">The plane used to create the rectangular pattern</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,System.Double,devDept.Geometry.Plane,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <param name="patternPln">The plane used to create the rectangular pattern</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,System.Double,devDept.Geometry.Plane,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="patternPln">The plane used to create the rectangular pattern</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,devDept.Geometry.Plane,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="patternPln">The plane used to create the rectangular pattern</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="draftAngleInRadians">The draft angle in radians</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="draftAngleInRadians">The draft angle in radians</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Plane,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="draftAngleInRadians">The draft angle in radians</param>
      <param name="patternPln">The plane used to create the rectangular pattern</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,System.Double,devDept.Geometry.Plane,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
            Creates a rectangular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="draftAngleInRadians">The draft angle in radians</param>
      <param name="patternPln">The plane used to create the rectangular pattern</param>
      <param name="spacingX">The spacing between pattern instances for plane X direction</param>
      <param name="numberX">The number of pattern instances for plane X direction</param>
      <param name="spacingY">The spacing between pattern instances for plane Y direction</param>
      <param name="numberY">The number of pattern instances for plane Y direction</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,System.Double,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="center">The circular pattern center</param>
      <param name="angleInRadians">The angle between each instance</param>
      <param name="number">The number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="center">The circular pattern center</param>
      <param name="angleInRadians">The angle between each instance</param>
      <param name="number">The number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="axis">The circular pattern axis</param>
      <param name="center">The circular pattern center</param>
      <param name="angleInRadians">The angle between each instance</param>
      <param name="number">The number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="axis">The circular pattern axis</param>
      <param name="center">The circular pattern center</param>
      <param name="angleInRadians">The angle between each instance</param>
      <param name="number">The number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="draftAngleInRadians">The draft angle in radians</param>
      <param name="center">The circular pattern center</param>
      <param name="angleInRadians">The angle between each instance</param>
      <param name="number">The number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,System.Double,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="draftAngleInRadians">The draft angle in radians</param>
      <param name="center">The circular pattern center</param>
      <param name="angleInRadians">The angle between each instance</param>
      <param name="number">The number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="draftAngleInRadians">The draft angle in radians</param>
      <param name="axis">The circular pattern axis</param>
      <param name="center">The circular pattern center</param>
      <param name="angleInRadians">The angle between each instance</param>
      <param name="number">The number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeRemovePattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and removes it from the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">The extrusion amount</param>
      <param name="draftAngleInRadians">The draft angle in radians</param>
      <param name="axis">The circular pattern axis</param>
      <param name="center">The circular pattern center</param>
      <param name="angleInRadians">The angle between each instance</param>
      <param name="number">The number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,System.Double,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="center">Circular pattern center</param>
      <param name="angleInRadians">Angle between each instance</param>
      <param name="number">Number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="center">Circular pattern center</param>
      <param name="angleInRadians">Angle between each instance</param>
      <param name="number">Number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="axis">Circular pattern axis</param>
      <param name="center">Circular pattern center</param>
      <param name="angleInRadians">Angle between each instance</param>
      <param name="number">Number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="axis">Circular pattern axis</param>
      <param name="center">Circular pattern center</param>
      <param name="angleInRadians">Angle between each instance</param>
      <param name="number">Number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="draftAngleInRadians">The draft angle in radians</param>
      <param name="center">Circular pattern center</param>
      <param name="angleInRadians">Angle between each instance</param>
      <param name="number">Number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,System.Double,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="draftAngleInRadians">The draft angle in radians</param>
      <param name="center">Circular pattern center</param>
      <param name="angleInRadians">Angle between each instance</param>
      <param name="number">Number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="draftAngleInRadians">The draft angle in radians</param>
      <param name="axis">Circular pattern axis</param>
      <param name="center">Circular pattern center</param>
      <param name="angleInRadians">Angle between each instance</param>
      <param name="number">Number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAddPattern(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Creates a circular pattern by extruding the specified region multiples times and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="region">The region to extrude</param>
      <param name="amount">Extrusion amount</param>
      <param name="draftAngleInRadians">The draft angle in radians</param>
      <param name="axis">Circular pattern axis</param>
      <param name="center">Circular pattern center</param>
      <param name="angleInRadians">Angle between each instance</param>
      <param name="number">Number of instances</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAdd(devDept.Eyeshot.Entities.Region,System.Double)">
      <summary>
            Extrudes the specified region, overriding the original Brep with the result of the cut and adds it to the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="reg">The region</param>
      <param name="amount">The extrusion amount</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAdd(devDept.Eyeshot.Entities.Region,System.Double,System.Double)">
      <summary>
            Extrudes the specified region and adds it to the original Brep object.
            </summary>
      <param name="reg">The region</param>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeAdd(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval)">
      <summary>
            Extrudes the specified region and adds it to the original Brep object.
            </summary>
      <param name="reg">The region</param>
      <param name="amount">The extrusion amount interval</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeIntersect(devDept.Eyeshot.Entities.Region,System.Double)">
      <summary>
             Extrudes the specified region and intersects it with the original Brep object.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="reg">The region</param>
      <param name="amount">The extrusion amount</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeIntersect(devDept.Eyeshot.Entities.Region,System.Double,System.Double)">
      <summary>
            Extrudes the specified region and intersects it with the original Brep object.
            </summary>
      <param name="reg">The region</param>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeIntersect(devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval)">
      <summary>
            Extrudes the specified region and intersects it with the original Brep object.
            </summary>
      <param name="reg">The region</param>
      <param name="amount">The extrusion amount interval</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeFace(System.Int32,System.Double)">
      <summary>
             Extrudes the specified Face, overriding the original Brep.
             </summary>
      <param name="faceIndex">the face index</param>
      <param name="amount">The extrusion amount</param>
      <remarks>For this operation in particular, the specified face index will be kept along all the ExtrudeFace()(/RevolveFace() subsequent operations to make easier sheet metal part modeling.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeFace(System.Int32,devDept.Geometry.Vector3D,System.Double)">
      <summary>
             Extrudes the specified Face, overriding the original Brep.
             </summary>
      <param name="faceIndex">the face index</param>
      <param name="amount">The extrusion amount</param>
      <param name="angleInRadians">The draft angle in radians</param>
      <remarks>For this operation in particular, the specified face index will be kept along all the ExtrudeFace()(/RevolveFace() subsequent operations to make easier sheet metal part modeling.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.RevolveFace(System.Int32,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
             Revolves the specified Face, overriding the original Brep.
             </summary>
      <param name="faceIndex">the face index</param>
      <param name="deltaAngle">Revolution angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <remarks>For this operation in particular, the specified face index will be kept along all the ExtrudeFace()(/RevolveFace() subsequent operations to make easier sheet metal part modeling.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.AddFlange(System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Adds a sheet metal flange to the specified edge.
            </summary>
      <param name="edgeIndex">The edge index</param>
      <param name="radius">The bend radius</param>
      <param name="amount">The bend length</param>
      <param name="angle">The bend angle</param>
      <returns>True if the operation succeeded. False otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.RevolveRemove(devDept.Eyeshot.Entities.Region,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
            Revolves the specified region and removes it from the Brep object.
            </summary>
      <param name="reg">The region</param>
      <param name="angle">Revolution angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.RevolveRemove(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
            Revolves the specified region and removes it from the Brep object.
            </summary>
      <param name="reg">The region</param>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.RevolveAdd(devDept.Eyeshot.Entities.Region,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
            Revolves the specified region and adds it to the Brep object.
            </summary>
      <param name="reg">The region</param>
      <param name="angle">Revolution angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.RevolveAdd(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
            Revolves the specified region and adds it to the Brep object.
            </summary>
      <param name="reg">The region</param>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.RevolveIntersect(devDept.Eyeshot.Entities.Region,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
            Revolves the specified region and intersects it with the Brep.
            </summary>
      <param name="reg">The region</param>
      <param name="angle">Revolution angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.RevolveIntersect(devDept.Eyeshot.Entities.Region,System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
            Revolves the specified region and intersects it to the Brep object.
            </summary>
      <param name="reg">The region</param>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Axis direction</param>
      <param name="center">Axis start point</param>
      <returns>True if the operation is successful, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Remove(devDept.Eyeshot.Entities.Brep[])">
      <summary>
            Removes a list of non-intersecting solids from the original Brep object.
            </summary>
      <param name="solids">The list of disjoint breps to remove</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Remove(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Brep},devDept.Eyeshot.Entities.Brep[]@)">
      <summary>
            Removes a list of non-intersecting solids from the original Brep object.
            </summary>
      <param name="solids">The list of disjoint breps to remove</param>
      <param name="leftOvers">The resulting left overs of the operation (null if not present)</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Add(devDept.Eyeshot.Entities.Brep[])">
      <summary>
            Adds a list of non-intersecting solids to the original Brep object.
            </summary>
      <param name="solids">The list of disjoint breps to add</param>
      <returns>True if the operation succeeded, false otherwise keeping the Brep object unmutated.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Brep.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.#ctor(devDept.Geometry.Entities.GBrep)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Brep.FacesSelectionInfo">
      <summary>
            List of selected faces per each component instance.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.GetSelectedEdges(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Gets the selected edges.
            </summary>
      <param name="parents">The parents stack that identifies the component instance</param>
      <returns>The collection of selected edges</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.GetSelectedFaces(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Gets the selected faces.
            </summary>
      <param name="parents">The parents stack that identifies the component instance</param>
      <returns>The collection of selected faces</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.GetSelectedVertices(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Gets the selected vertices.
            </summary>
      <param name="parents">The parents stack that identifies the component instance</param>
      <returns>The collection of selected vertices</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.GetSelectedInnerFaces(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Gets the selected inner faces.
            </summary>
      <param name="parents">The parents stack that identifies the component instance</param>
      <returns>The collection of selected inner faces</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Brep.SelectionMode">
      <summary>
            Gets or sets the selection mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Brep.Vertices">
      <summary>
            Gets or sets vertices array.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Brep.Edges">
      <summary>
            Gets or sets edge array.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.IsAnyFaceSelected">
      <summary>
            Tells if there is a selected face.
            </summary>
      <returns>True if there is a selected face</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.IsAnyEdgeSelected">
      <summary>
            Tells if there is a selected edge.
            </summary>
      <returns>True if there is a selected edge</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.IsAnyVertexSelected">
      <summary>
            Tells if there is a selected vertex.
            </summary>
      <returns>True if there is a selected vertex</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.GetFaceSelection(System.Int32,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Tells if the face is selected.
            </summary>
      <param name="faceIndex">The face index</param>
      <param name="parents">The parents stack that define a nested instance</param>
      <returns>True if the face is selected</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.GetFaceSelection(System.Int32,System.Int32,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Tells if the face is selected.
            </summary>
      <param name="shellIndex">The shell index (0 for outer shell)</param>
      <param name="faceIndex">The face index</param>
      <param name="parents">The parents stack that define a nested instance</param>
      <returns>True if the face is selected</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.SetFaceSelection(System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Sets the selection status of a face.
            </summary>
      <param name="faceIndex">The face index</param>
      <param name="status">The selection status</param>
      <param name="parents">The parents stack that define a nested instance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.SetFaceSelection(System.Int32,System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Sets the selection status of a face.
            </summary>
      <param name="shellIndex">The shell index (0 for outer shell)</param>
      <param name="faceIndex">The face index</param>
      <param name="status">The selection status</param>
      <param name="parents">The parents stack that define a nested instance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ClearFacesSelection(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Clears the face selection status for a specific instance.
            </summary>
      <param name="parents">The parents stack that define a nested instance (use null for top-level)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ClearFacesSelectionForAllInstances">
      <summary>
            Clears the face selection status for all instances.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.SelectFace(System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Selects the face of the instance identified by the parents stack.
            </summary>
      <param name="faceIndex">The face index</param>
      <param name="selectionState">The selection state</param>
      <param name="parents">The parents stack</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.SelectFace(System.Int32,System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Selects the face of the instance identified by the parents stack.
            </summary>
      <param name="shellIndex">The shell index (0 for outer shell)</param>
      <param name="faceIndex">The face index</param>
      <param name="selectionState">The selection state</param>
      <param name="parents">The parents stack</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.GetPlanarFaceRegion(System.Int32)">
      <summary>
            Gets the planar face region.
            </summary>
      <param name="index">The face index</param>
      <returns>A <see cref="T:devDept.Eyeshot.Entities.Region" />, null/nothing otherwise.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Brep.TessellationFaces">
      <summary>
            Gets tessellated representation of outer shell face array. One-to-one correspondence with <see cref="P:devDept.Eyeshot.Entities.Brep.Faces" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Brep.TessellationInners">
      <summary>
            Gets tessellated representation of inner (void) shells face array. One-to-one correspondence with <see cref="P:devDept.Eyeshot.Entities.Brep.Inners" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Brep.Faces">
      <summary>
            Gets or sets outer shell face array.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Brep.Inners">
      <summary>
            Gets or sets inner (void) shells face array.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.#ctor(devDept.Geometry.Point3D[],devDept.Geometry.Entities.GBrep.Edge[],devDept.Geometry.Entities.GBrep.Face[],devDept.Geometry.Entities.GBrep.Face[][],System.Boolean,System.Double)">
      <summary>
            Inner shells constructor.
            </summary>
      <param name="vertices">The vertex array</param>
      <param name="edges">The edge array</param>
      <param name="faces">The outer shell face array</param>
      <param name="inners">The inner shells face array</param>
      <param name="splitEdgesOnSeams">If yes, it splits all the edges that intersect the seams of the faces</param>
      <param name="tolerance">The rebuild tolerance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Clone">
      <summary>
            Creates a deep copy of this Solid.
            </summary>
      <returns>The new solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.GetError">
            }<summary>
            Gets the maximum gap between face loops' edge curves.
            </summary><returns>The maximum gap value.</returns></member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Rebuild(System.Double,System.Boolean)">
      <summary>
            Builds parametric face representation using the specified tolerance.
            </summary>
      <param name="tol">Rebuild tolerance, zero for default.</param>
      <param name="soft">When true, only faces without parametric surfaces are rebuilt.</param>
      <remarks> Using soft = true with an input tolerance different from <see cref="P:devDept.Eyeshot.Entities.Brep.RebuildTolerance" /> could generate a  not-watertight Brep.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.GetEdgeIndex(devDept.Geometry.Point3D,devDept.Geometry.Vector3D)">
      <summary>
            Gets the edge index containing the 3D input point.
            </summary>
      <param name="pointOnEdge">A point lying on the desired edge.</param>
      <param name="direction">The edge direction on the pointOnEdge (needed when the point lies on a Brep vertex). It can be null/Nothing.</param>
      <returns>An integer representing the index of the first edge that satisfies the requirements. -1 if the operation failed.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.GetPlanarFaceIndex(devDept.Geometry.Plane,devDept.Geometry.Point3D)">
      <summary>
            Gets the index of the planar face coincident with the specified plane.
            </summary>
      <param name="plane">A plane coincident with the face's one</param>
      <param name="pointOnFace">A point inside the face contour to help identify coplanar faces. Can be null/Nothing.</param>
      <returns>An integer representing the index of the first face that satisfies the requirements.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ResetSelectionMode">
      <summary>
            Resets the <see cref="P:devDept.Eyeshot.Entities.Brep.SelectionMode" /> to <see cref="F:devDept.Eyeshot.selectionFilterType.Entity" /> if there are no other selected inner elements.
            </summary>
      <remarks>Internal use only.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.SetEdgeSelection(System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Sets the selection status of an edge.
            </summary>
      <param name="edgeIndex">The edge index</param>
      <param name="status">The selection status</param>
      <param name="parents">The parents stack that define a nested instance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.GetEdgeSelection(System.Int32,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Tells if the edge is selected.
            </summary>
      <param name="edgeIndex">The edge index</param>
      <param name="parents">The parents stack that define a nested instance</param>
      <returns>True if the edge is selected</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ClearEdgesSelection(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Clears the edge selection status for a specific instance.
            </summary>
      <param name="parents">The parents stack that define a nested instance (use null for top-level)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ClearEdgesSelectionForAllInstances">
      <summary>
            Clears the edge selection status for all instances.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.SetVertexSelection(System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Sets the selection status of a vertex.
            </summary>
      <param name="vertexIndex">The vertex index</param>
      <param name="status">The selection status</param>
      <param name="parents">The parents stack that define a nested instance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.GetVertexSelection(System.Int32,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Tells if the vertex is selected.
            </summary>
      <param name="vertexIndex">The vertex index</param>
      <param name="parents">The parents stack that define a nested instance</param>
      <returns>True if the edge is selected</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ClearVerticesSelection(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Clears the vertex selection status for a specific instance.
            </summary>
      <param name="parents">The parents stack that define a nested instance (use null for top-level)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.SelectEdge(System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Selects the edge of the instance identified by the parents stack.
            </summary>
      <param name="edgeIndex">The edge index</param>
      <param name="selectionState">The selection state</param>
      <param name="parents">The parents stack</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.SelectVertex(System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Selects the vertex of the instance identified by the parents stack.
            </summary>
      <param name="vertexIndex">The edge index</param>
      <param name="selectionState">The selection state</param>
      <param name="parents">The parents stack</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ConvertToSurfaces(System.Double)">
      <summary>
            Converts this Brep to a list of individual surfaces.
            </summary>
      <param name="rebuildTol">Conversion tolerance, zero for default one.</param>
      <returns>An array of surfaces</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ConvertToSolid(System.Double,System.Double)">
      <summary>
            Converts this Brep to <see cref="T:devDept.Eyeshot.Entities.Solid" /> using the specified tolerance.
            </summary>
      <param name="deviation">The maximum deviation, zero for current tessellation.</param>
      <param name="angle">The maximum angular deflection, ignored when zero.</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ConvertToMesh(System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType,System.Boolean,devDept.Eyeshot.MaterialKeyedCollection,devDept.Geometry.linearUnitsType)">
      <summary>
            Converts this Brep to a <see cref="T:devDept.Eyeshot.Entities.Mesh" /> using the specified tolerance.
            </summary>
      <param name="deviation">The maximum deviation, zero for current tessellation.</param>
      <param name="angle">The maximum angular deflection, ignored when zero.</param>
      <param name="meshNature">The desired Mesh <see cref="T:devDept.Geometry.Entities.GMesh.natureType">nature</see></param>
      <param name="weldNow">When true, the resulting meshes are welded immediately.</param>
      <param name="materials">The materials collection</param>
      <param name="blockUnits">The enclosing block's units</param>
      <returns>The resulting <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ConvertToMesh(System.Double,System.Boolean,System.Double)">
      <summary>
            Converts this Brep to a <see cref="T:devDept.Eyeshot.Entities.Mesh" /> using the specified triangle size.
            </summary>
      <param name="maxLength">The maximum triangle edge length</param>
      <param name="weldNow">When true, the resulting face meshes are welded immediately.</param>
      <param name="weldMaxGap">The welding maximum acceptable gap between vertices. Zero for auto-estimation.</param>
      <returns>The resulting <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Brep.silhouettesDrawingType">
      <summary>
            The Brep silhouettes drawing type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Brep.silhouettesDrawingType.Standard">
      <summary>
            Draws the silhouettes on all faces.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Brep.silhouettesDrawingType.SkipPlanars">
      <summary>
            Avoids processing planar faces. Suitable for transparent objects.
            </summary>
      <remarks>The silhouettes are drawn with the same thickness as the edges.</remarks>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Brep.silhouettesDrawingType.SkipInwardPrimitives">
      <summary>
            Avoids processing all planar faces and primitive faces of revolution (Cylindrical, Conical, Spherical, Toroidal) with <see cref="F:devDept.Eyeshot.Entities.Brep.Face.Sense" /> set as false (like cylindrical holes). Suitable for opaque objects.
            </summary>
      <remarks>The silhouettes are drawn with the same thickness as the edges.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Brep.SilhouettesDrawingMode">
      <summary>
            Gets or sets the silhouettes drawing mode.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.FindClosestTriangle(devDept.Geometry.Transformation,devDept.Geometry.Segment3D)">
      <summary>
            Returns a list of triangles hit by the provided segment.
            </summary>
      <param name="transf">The transformation applied to the entity (necessary if the entity is inside a Block to propagate the BlockReference transformation)</param>
      <param name="seg">The 3D segment representing the viewing direction</param>
      <returns>The sorted list of triangles intersecting the provided segment.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.#ctor(devDept.Serialization.BrepSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.BrepSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.BrepSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Brep.IsClosed">
      <summary>
            Gets the shell closure status.
            </summary>
      <returns>True if the shell is closed, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ClosestPointTo(devDept.Geometry.Point3D,devDept.Geometry.Point3D@)">
      <summary>
            Computes the signed distance between a 3D point and this Brep object.
            </summary>
      <param name="P">The 3D point</param>
      <param name="closest">The closest 3D point to P</param>
      <returns>The signed distance with this Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)">
      <summary>
            If the geometry is not created inside Eyeshot, it could be necessary call this method to check and fix/add(if needed) missing data,
             to correctly perform operations like Section/Intersection and Booleans.
            </summary>
      <param name="theFixedSolid">The Brep entity equivalent to the original with additional data. The original one if the operation failed.</param>
      <remarks>The original brep is modified when the operation is successful.</remarks>
      <returns> Return true if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.FixTopology">
      <summary>
            If the geometry is not created inside Eyeshot, it could be necessary call this method to check and fix/add(if needed) missing data,
             to correctly perform operations like Section/Intersection and Booleans.
            </summary>
      <remarks>The original brep is modified when the operation is successful.</remarks>
      <returns> Return true if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Smash(devDept.Eyeshot.Workspace,System.Int32)">
      <summary>
            Shows sequentially all the trimming regions for each face with the correspondent index for each face and the index for each edge.
            </summary>
      <param name="ws">The <see cref="T:devDept.Eyeshot.Workspace" /> control.</param>
      <param name="layerIndex">The index of the layer</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Smash(devDept.Eyeshot.Workspace,System.String)">
      <summary>
            Shows sequentially all the trimming regions for each face with the correspondent index for each face and the index for each edge.
            </summary>
      <param name="ws">The <see cref="T:devDept.Eyeshot.Workspace" /> control.</param>
      <param name="layerName">The layer name</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.CreateBox(System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates a box primitive.</summary>
      <param name="width">Box's width</param>
      <param name="depth">Box's depth</param>
      <param name="height">Box's height</param>
      <param name="tolerance">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.CreateCylinder(System.Double,System.Double,System.Double)">
      <summary>
             Creates a Cylinder primitive.
             </summary>
      <param name="radius">Cylinder's radius</param>
      <param name="height">Cylinder's height</param>
      <param name="tolerance">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.CreateCone(System.Double,System.Double)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="height">The cone's height</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.CreateCone(System.Double,System.Double,System.Double,System.Double)">
      <summary>Creates a Cone primitive.</summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="height">The cone's height</param>
      <param name="tolerance">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.CreateCone(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates an Eccentric Cone primitive.
            </summary>
      <param name="baseRadius">Cone's base radius</param>
      <param name="baseInnerRadius">Cone's base inner radius. 0 if the eccentric cone hasn't an inner offset</param>
      <param name="topRadius">Cone's top radius</param>
      <param name="topInnerRadius">Cone's top inner radius. 0 if the eccentric cone hasn't an inner offset</param>
      <param name="height">The cone's height</param>
      <param name="distance">Distance between circle centers, both projected on the base plane</param>
      <param name="tolerance">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.CreateSphere(System.Double,System.Double)">
      <summary>
             Creates a Sphere primitive.
             </summary>
      <param name="radius">Sphere's radius</param>
      <param name="tolerance">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.CreateTorus(System.Double,System.Double,System.Double)">
      <summary>
             Creates a Torus primitive.
             </summary>
      <param name="majorRadius">Torus radius</param>
      <param name="minorRadius">Torus section radius</param>
      <param name="tolerance">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Ruled(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double)">
      <summary>
            Create a Brep connecting linearly two surfaces.
            </summary>
      <remarks> The two surfaces must have the same orientation, with the normal of the first one pointing towards the inside of the resulting brep, and the same number of curves in the same order.</remarks>
      <param name="bottom">the bottom surface to connect</param>
      <param name="top">the top surface to connect</param>
      <param name="tolerance">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep object.</returns>
      <remarks> The two surfaces should not have collapsed edges.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Loft(devDept.Eyeshot.Entities.ICurve[])">
      <summary>
            Creates a Brep from skinning. 
            </summary>
      <param name="curveList">The skinning curves</param>
      <returns>The resulting Brep if the operation succeeds, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Loft(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Double)">
      <summary>
            Creates a Brep from skinning. 
            </summary>
      <param name="curveList">The skinning curves</param>
      <param name="degree">The desired surface degree</param>
      <param name="splitAtCorners">If True, it splits the curves at corner points. It is useful when the sections are Composite Curves with similar shape, and you want to line up the corners (and curve segments) in the resulting Brep.</param>
      <param name="endCaps">if true, it creates a closed Brep</param>
      <param name="speedChange"> Works only when splitAtCorners is true. If true, when the tangents have the same direction but different lengths, the curve will be split. 
                If false, it won't be split.</param>
      <param name="tolerance">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep if the operation succeeds, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeWithTwist(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double,System.Double,System.Boolean)">
      <summary>
            Creates a brep extruding and twisting a planar curve.. 
            </summary>
      <param name="curve">The curve to extrude</param>
      <param name="direction">Extrusion direction, normal to the plane of the curve</param>
      <param name="center">Point of application for the direction, on the plane of the curve</param>
      <param name="angle">Twist angle in radians</param>
      <param name="tol">Tolerance</param>
      <param name="endCaps">If true, creates a closed Brep</param>
      <returns>The resulting Brep if the operation succeeds, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ExtrudeWithTwist(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double,System.Int32,System.Boolean,System.Double)">
      <summary>
            Creates a brep extruding and twisting a planar curve.. 
            </summary>
      <param name="curve">The curve to extrude</param>
      <param name="direction">Extrusion direction, normal to the plane of the curve</param>
      <param name="center">Point of application for the direction, on the plane of the curve</param>
      <param name="angle">Twist angle in radians</param>
      <param name="numberOfSections">Number of internal sections to be interpolated, it corresponds to the number of distinct internal knots in the extrusion surface's U direction.</param>
      <param name="endCaps">If true, creates a closed Brep</param>
      <param name="rebuildTol">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep if the operation succeeds, null/Nothing otherwise.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Brep.RebuildTolerance">
      <summary>
            Gets or sets the rebuild tolerance used by Brep section, cut and boolean operations.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Difference(devDept.Eyeshot.Entities.Brep,devDept.Eyeshot.Entities.Brep)">
      <summary>
            Compute the difference of the solidA with the solidB.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="solidB">
      </param>
      <returns>An array of solids if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Intersection(devDept.Eyeshot.Entities.Brep,devDept.Eyeshot.Entities.Brep)">
      <summary>
        <para>Compute the Intersection of the solidA (gray in the sample picture below)
            with the solidB (blue), and return the resulting array of <see cref="T:devDept.Eyeshot.Entities.Brep" />
            (green). The returned array may have more than one element if multiple disjoint
            intersections are found.</para>
        <para>
          <img src="intersection.png" />
        </para>
      </summary>
      <param name="solidA">First solid</param>
      <param name="solidB">Second solid</param>
      <returns>
            An array of <see cref="T:devDept.Eyeshot.Entities.Brep" /> containing the intersections if the operation is
            successful. If the operation is successful but no intersections are found, an
            empty array is returned. Otherwise, if due to an error the algorithm fails to
            compute the intersections, null/Nothing is returned.
            </returns>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)">FixTopology method</seealso>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Union(devDept.Eyeshot.Entities.Brep,devDept.Eyeshot.Entities.Brep)">
      <summary>
             Compute the Union of the solidA with the solidB.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="solidA">
      </param>
      <param name="solidB">
      </param>
      <returns>An array of solids if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Mirror(System.Int32,devDept.Eyeshot.Entities.Brep)">
      <summary>
            Create a mirror entity from the input Brep by the plane provided.
            </summary>
      <param name="planarFaceIndex">The face index of the Brep in input needed to get the mirror plane</param>
      <param name="solid">The Brep entity to mirror</param>
      <returns> The resulting Brep union between the original input Brep and the mirrored one.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Mirror(devDept.Geometry.Plane,devDept.Eyeshot.Entities.Brep)">
      <summary>
            Create a mirror entity from the input Brep by the provided plane.
            </summary>
      <param name="mirrorPlane">The plane to use to mirror the entity</param>
      <param name="solid">The Brep entity to mirror</param>
      <returns> The resulting Brep union between the original input Brep and the mirrored one.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.MergeAndKeepFaces(devDept.Eyeshot.Entities.Brep,devDept.Eyeshot.Entities.Brep,devDept.Eyeshot.MaterialKeyedCollection)">
      <summary>
            Merges two Brep objects preserving only one copy of duplicated face.
            </summary>
      <remarks>
        <para>Original objects must <b>not</b> intersect and faces must be compatible (equal and opposite).</para>
        <para>You may need to call <see cref="M:devDept.Eyeshot.Entities.Brep.Rebuild(System.Double,System.Boolean)" /> on original objects to rebuild parametric faces.</para>
      </remarks>
      <param name="a">The first Brep object</param>
      <param name="b">The second Brep object</param>
      <param name="materials">The materials collection. When defined, the resulting Brep faces colors will conserve the input objects colors.</param>
      <returns>A single Brep with only one copy of -internal- duplicated faces when successful. Null/Nothing otherwise.</returns>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.Rebuild(System.Double,System.Boolean)" />
      <seealso cref="!:Triangulation.VolumeMesher" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.MergeAndKeepFaces(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Brep},devDept.Eyeshot.MaterialKeyedCollection)">
      <summary>
            Merges a list of Brep objects preserving only one copy of duplicated face.
            </summary>
      <remarks>
        <para>Original objects must <b>not</b> intersect and faces must be compatible (equal and opposite).</para>
        <para>You may need to call <see cref="M:devDept.Eyeshot.Entities.Brep.Rebuild(System.Double,System.Boolean)" /> on original objects to rebuild parametric faces.</para>
      </remarks>
      <param name="breps">The list of Breps objects to merge</param>
      <param name="materials">The materials collection. When defined, the resulting Brep faces colors will conserve the input objects colors.</param>
      <returns>A single Breps, with only one copy of -internal- duplicated faces when successfully merged. Null/Nothing otherwise.</returns>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.Rebuild(System.Double,System.Boolean)" />
      <seealso cref="!:Triangulation.VolumeMesher" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.MergeFaces">
      <summary>
            Merges coplanar faces when possible.
            </summary>
      <remarks>Rebuild() method could be necessary before to call this.</remarks>
      <returns>then number of the removed faces after merge. -1 if an error occured.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ConvertFaceToMesh(System.Int32,System.Int32,devDept.Geometry.Entities.GMesh.natureType,System.Boolean,System.Single)">
      <summary>
            Converts the specified face tessellation to <see cref="T:devDept.Eyeshot.Entities.Mesh" />.
            </summary>
      <param name="shellIndex">The shell index (0 for outer shell)</param>
      <param name="faceIndex">The face index</param>
      <param name="meshNature">The desired Mesh <see cref="T:devDept.Geometry.Entities.GMesh.natureType">nature</see></param>
      <param name="skipEdges">When true, skips the edges computation.</param>
      <param name="texLength">The material texture length</param>
      <returns>The resulting Mesh object.</returns>
      <seealso cref="P:devDept.Graphics.Material.TextureLength" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.ConvertFaceToSurface(System.Int32,System.Int32)">
      <summary>
            Convert the specified face in one or more parametric surfaces.
            </summary>
      <param name="shellIndex">The shell index (0 for outer shell)</param>
      <param name="faceIndex">The face index</param>
      <returns>The resulting array of surface objects.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.SplitBy(devDept.Geometry.Plane,devDept.Eyeshot.Entities.Brep[]@,devDept.Eyeshot.Entities.Brep[]@)">
      <summary>
            Splits this solid with the specified plane.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="pln">The cutting plane</param>
      <param name="left">The resulting set of left Brep objects</param>
      <param name="right">The resulting set of right Brep objects</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> both left and right are filled, otherwise it exits at the first failure.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.SplitBy(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Brep[]@,devDept.Eyeshot.Entities.Brep[]@)">
      <summary>
            Splits this solid with the specified plane.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="G">The cutting surface</param>
      <param name="left">The resulting set of left Brep objects</param>
      <param name="right">The resulting set of right Brep objects</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> both left and right are filled, otherwise it exits at the first failure.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.CutBy(devDept.Geometry.Plane,System.Boolean)">
      <summary>
            Cut the Brep with the Plane, overriding the original Brep with the result of the cut.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="pln"> cutting plane</param>
      <param name="flip">When true the cut direction is inverted</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> the Brep is modified, otherwise the original Brep is unmutated.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.CutBy(devDept.Geometry.Plane,devDept.Eyeshot.Entities.Brep[]@,System.Boolean)">
      <summary>
            Cut the Brep with the Plane, overriding the original Brep with the result of the cut.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="pln">The cutting plane</param>
      <param name="leftOvers">The possible left over solid objects</param>
      <param name="flip">When true the cut direction is inverted</param>
      <returns>The intersection failure type.</returns>
      <remarks>If the operation is <see cref="F:devDept.Geometry.booleanFailureType.Success" /> the Brep is modified, otherwise the original Brep is unmutated.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.CutBy(devDept.Eyeshot.Entities.Surface,System.Boolean)">
      <summary>
            Cuts this solid with the specified plane, overriding the original Brep with the result of the cut.
            </summary>
      <param name="surface">The cutting surface</param>
      <param name="flip">When true the cut direction is inverted</param>
      <returns>If true the operation succeeds and the original Brep is modified, otherwise the operation failed and the original Brep is unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.CutBy(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Brep[]@,System.Boolean)">
      <summary>
            Cuts this solid with the specified plane, overriding the original Brep with the result of the cut.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="surface">The cutting surface</param>
      <param name="leftOvers">The possible left over solid objects</param>
      <param name="flip">When true the cut direction is inverted</param>
      <returns>If true the operation succeeds and the original Brep is modified, otherwise the operation failed and the original Brep is unmutated.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.SubdivideBy(System.Int32,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
      <summary>
            Subdivide a Brep face by the given curve list.
            </summary>
      <param name="faceIndex">The position index of the face into Brep.Faces array.</param>
      <param name="contours">The disjoint contours (lying on the selected face) to be used to split the face.</param>
      <remarks>The resulting Brep can't be used to perform Boolean operations.</remarks>
      <remarks>The usage of SubdivideBy is suggested at the end of the design construction, for example to perform FEM analysis.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.SubdivideBy(System.Int32,devDept.Geometry.Plane)">
      <summary>
            Subdivide a Brep face by the given plane.
            </summary>
      <param name="faceIndex">The position index of the face into Brep.Faces array.</param>
      <param name="plane">The plane used to split the faces.</param>
      <remarks>The resulting Brep can't be used to perform Boolean operations.</remarks>
      <remarks>The usage of SubdivideBy is suggested at the end of the design construction, for example to perform FEM analysis.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.SubdivideBy(devDept.Geometry.Plane)">
      <summary>
            Subdivide all the Brep faces by the given plane.
            </summary>
      <param name="plane">The plane used to split the faces.</param>
      <remarks>The resulting Brep can't be used to perform Boolean operations.</remarks>
      <remarks>The usage of SubdivideBy is suggested at the end of the design construction, for example to perform FEM analysis.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.IsPointInside(devDept.Geometry.Point3D,System.Boolean)">
      <summary>
            Checks if the specified point is inside or onto the Brep.
            </summary>
      <param name="point">The 3D point</param>
      <param name="skipRebuild">If true, we avoid rebuilding the Brep internally.</param>
      <returns>The point status.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Section(devDept.Geometry.Plane,System.Double)">
      <summary>
            Intersect the Brep with the plane.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="pln"> the plane to intersect</param>
      <param name="tol">the tolerance</param>
      <returns>the list of the resulting intersection curves</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Intersection(devDept.Eyeshot.Entities.Surface)">
      <summary>
            Intersect the Brep with a generic Surface.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="G"> the Surface to intersect</param>
      <returns>the list of the resulting intersection curves</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.IntersectionLoops(devDept.Eyeshot.Entities.Brep,devDept.Eyeshot.Entities.Brep,devDept.Eyeshot.Entities.ICurve[]@)">
      <summary>
            Computes the intersection loops between two Brep objects.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="solidA"> The first Solid to intersect</param>
      <param name="solidB"> The second Solid to intersect</param>
      <param name="intCurves">The resulting intersection curves as a list of CompositeCurve</param>
      <returns> Result of the intersection.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Brep.Intersect(devDept.Eyeshot.Entities.Brep,devDept.Eyeshot.Entities.Brep,devDept.Geometry.Point3D[]@)">
      <summary>
            Checks if two brep intersect each other.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Entities.Brep.FixTopology(devDept.Eyeshot.Entities.Brep@)"> FixTopology method</seealso>
      <param name="solidA"> The first Solid to intersect</param>
      <param name="solidB"> The second Solid to intersect</param>
      <param name="intersectionPoints">The resulting first intersection points found, when available</param>
      <returns> True if they intersect.</returns>
    </member>
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Entities.Brep.Chamfer(devDept.Geometry.Entities.GBrep.Edge,System.Double,System.Double)" -->
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Entities.Brep.Chamfer(System.Int32,System.Double,System.Double)" -->
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Entities.Brep.Fillet(devDept.Geometry.Entities.GBrep.Edge,System.Double,System.Double)" -->
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Entities.Brep.Fillet(System.Int32,System.Double,System.Double)" -->
    <member name="T:devDept.Eyeshot.Entities.Curve">
      <summary>
            Nurbs curve entity.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Trim(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Boolean,System.Boolean)">
      <summary>
            Trims two intersecting curves.
            </summary>
      <param name="C1">First curve</param>
      <param name="C2">Second curve</param>
      <param name="flip1">Flips first curve direction</param>
      <param name="flip2">Flips second curve direction</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Fillet(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Arc@)">
      <summary>
            Fillets two coplanar curves with an arc of given radius.
            </summary>
      <param name="C1">First curve</param>
      <param name="C2">Second curve</param>
      <param name="radius">Radius of the fillet arc</param>
      <param name="flip1">Flips first curve direction</param>
      <param name="flip2">Flips second curve direction</param>
      <param name="trim1">When true the first curve is trimmed</param>
      <param name="trim2">When true the second curve is trimmed</param>
      <param name="fillet">The resulting fillet arc</param>
      <returns>True if the operation is successful, false if the curves don't lie on the same plane or don't touch.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Fillet(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Vector3D,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Arc@)">
      <summary>
            Fillets two coplanar curves with an arc of given radius.
            </summary>
      <param name="C1">First curve</param>
      <param name="C2">Second curve</param>
      <param name="planeNormal">Unit vector, normal to the plane on which both curves lie.</param>
      <param name="radius">Radius of the fillet arc</param>
      <param name="flip1">Flips first curve direction</param>
      <param name="flip2">Flips second curve direction</param>
      <param name="trim1">When true the first curve is trimmed</param>
      <param name="trim2">When true the second curve is trimmed</param>
      <param name="fillet">The resulting fillet arc</param>
      <returns>True if the operation is successful, false if the curves don't lie on the same plane or don't touch.</returns>
      <remarks> Looking at the curves from the top of planeNormal placed at the intersection, the fillet will be
            on the left side of a curve if its flip parameter is false, and on the right side if its flip is true.
            Use planeNormal only if you know exactly how the curves are oriented and where you want the fillet to be placed.
            Otherwise, set it to null or call the Fillet() method without planeNormal and we will compute it internally.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Chamfer(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Line@)">
      <summary>
            Chamfers two curves.
            </summary>
      <param name="C1">First curve</param>
      <param name="C2">Second curve</param>
      <param name="distance">The chamfer distance</param>
      <param name="flip1">Flips first curve direction</param>
      <param name="flip2">Flips second curve direction</param>
      <param name="trim1">When true the first curve is trimmed</param>
      <param name="trim2">When true the second curve is trimmed</param>
      <param name="chamfer">The chamfer line</param>
      <returns>True if the operation is successful, false if the curves don't lie on the same plane or don't touch.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Chamfer(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Vector3D,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Line@)">
      <summary>
            Chamfers two curves.
            </summary>
      <param name="C1">First curve</param>
      <param name="C2">Second curve</param>
      <param name="planeNormal">Unit vector, normal to the plane on which both curves lie.</param>
      <param name="distance">The chamfer distance</param>
      <param name="flip1">Flips first curve direction</param>
      <param name="flip2">Flips second curve direction</param>
      <param name="trim1">When true the first curve is trimmed</param>
      <param name="trim2">When true the second curve is trimmed</param>
      <param name="chamfer">The chamfer line</param>
      <returns>True if the operation is successful, false if the curves don't lie on the same plane or don't touch.</returns>
      <remarks> Looking at the curves from the top of planeNormal placed at the intersection, the chamfer will be
            on the left side of a curve if its flip parameter is false, and on the right side if its flip is true.
            Use planeNormal only if you know exactly how the curves are oriented and where you want the chamfer to be placed.
            Otherwise, set it to null or call the Chamfer() method without planeNormal and we will compute it internally.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.LocalApproximation(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Double,devDept.Geometry.Vector3D[]@,System.Boolean)">
      <summary>
            Local cubic approximation of a curve bounded to a certain error.
            </summary>
      <param name="Q">The list of points to approximate</param>
      <param name="err">The maximum error allowed</param>
      <param name="tangents">Automatically chosen tangents</param>
      <param name="cornerEnd">If true a corner may appear between the beginning and end of the curve, if false (default) the start and end tangents are parallel</param>
      <returns>The approximated curve if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.LocalApproximation(System.Collections.Generic.IList{devDept.Geometry.PointTangent},System.Double)">
      <summary>
            Local cubic approximation of a curve bounded to a certain error.
            </summary>
      <param name="Q">The list of points with tangents to approximate</param>
      <param name="err">The maximum error allowed</param>
      <returns>The approximated curve if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.GlobalApproximation(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32,System.Double)">
      <summary>
            Global approximation of a curve bounded to a certain error.
            </summary>
      <param name="Q">The list of points to approximate</param>
      <param name="deg">The degree of the approximation curve</param>
      <param name="err">The maximum error allowed</param>
      <returns>The approximated curve if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.LeastSquares(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32,System.Int32)">
      <summary>
            Least squares curve approximation.
            </summary>
      <param name="Q">The list of 3D points</param>
      <param name="p">The curve degree</param>
      <param name="n">The number of control points in the new curve</param>
      <remarks>deg must be smaller than Q.Count</remarks>
      <returns>The approximated curve if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Curve.ShowCurvature">
      <summary>
            When true, curvature graph is displayed.
            </summary>
      <remarks>You need to call <see cref="M:devDept.Eyeshot.Entities.Curve.ComputeCurvatureGraph(devDept.Eyeshot.Workspace,System.Single)" /> before enabling curvature graph display.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Curve.ComputeCurvatureGraph(devDept.Eyeshot.Workspace,System.Single)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.ComputeCurvatureGraph(devDept.Eyeshot.Workspace,System.Single)">
      <summary>
            Computes the desired curvature map.
            </summary>
      <param name="workspace">The workspace control.</param>
      <param name="scaleFactor">The scale factor.</param>
      <seealso cref="P:devDept.Eyeshot.Entities.Curve.ShowCurvature" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.InsertKnot(System.Double,System.Int32)">
      <summary>
            Inserts a knot a number of times. It does not affect the shape of the curve.
            </summary>
      <param name="u">The knot to insert</param>
      <param name="r">The number of times to insert</param>
      <returns>The number of knots inserted, zero otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.InsertKnot(devDept.Geometry.Point3D,System.Int32)">
      <summary>
            Inserts a knot a number of times. It is added at the parameter corresponding to the projection of the given point on the curve. 
            The insertion does not affect the shape of the curve.
            </summary>
      <param name="ctrlPoint">The point to be projected on the curve</param>
      <param name="r">The number of times to insert</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.AddControlPoint(devDept.Geometry.Point3D)">
      <summary>
            Inserts a control point on the control polygon. The control point will be added at the projection of the given 3D point on the polygon. 
            The insertion does not affect the shape of the curve.
            </summary>
      <param name="ctrlPoint">The 3D point to be projected on the control polygon</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.RefineKnotVector(System.Double[])">
      <summary>
            Refines the curve knot vector.
            </summary>
      <param name="X">The new knots to insert in the knot vector</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.DegreeElevate(System.Int32)">
      <summary>
            Degree elevates the curve.
            </summary>
      <param name="t">The number of times to increase the degree of the curve</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Decompose">
      <summary>
            Decomposes the curve into Bézier segments.
            </summary>
      <returns>A list of curves.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.RemoveKnot(System.Int32,System.Int32,System.Int32)">
      <summary>
            Removes an internal knot from a curve.
            </summary>
      <remarks>Must be an internal knot.</remarks>
      <param name="r">The knot to remove</param>
      <param name="s">The multiplicity of the knot</param>
      <param name="num">The number of times to try to remove the knot</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.RemoveKnot(System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>
            Removes an internal knot from a curve.
            </summary>
      <remarks>Must be an internal knot.</remarks>
      <param name="r">The knot to remove</param>
      <param name="s">The multiplicity of the knot</param>
      <param name="num">The number of times to try to remove the knot</param>
      <param name="tol">The allowed tolerance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.RemoveKnots(System.Double)">
      <summary>
            Removes as many knots as possible from a curve.
            </summary>
      <param name="tol">The allowed tolerance</param>
      <returns>Number of knots removed.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.GlobalInterpolation(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32)">
      <summary>
            Global curve interpolation.
            </summary>
      <param name="Q">The list of points to interpolate</param>
      <param name="deg">The desired curve degree</param>
      <returns>The interpolated curve if the operation succeeded, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.LocalInterpolation(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Boolean,System.Boolean)">
      <summary>
            Local interpolation.
            </summary>
      <param name="Q">A list of 3D points to interpolate</param>
      <param name="cornerFlag">If true corners are mantained</param>
      <param name="cornerEndFlag">If true a corner may appear between the beginning and end of the curve, if false (default) the start and end tangents are parallel</param>
      <returns>The interpolated curve if the operation succeeded, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.LocalInterpolation(System.Collections.Generic.IList{devDept.Geometry.PointTangent})">
      <summary>
            Local interpolation.
            </summary>
      <param name="Q">A list of 3D points with 3D tangent to interpolate</param>
      <returns>The interpolated curve if the operation succeeded, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.CubicSplineInterpolation``1(System.Collections.Generic.IList{``0},System.Boolean)">
      <summary>
            Cubic spline interpolation with automatic tangents.
            </summary>
      <param name="Q">The list of 3D points to interpolate</param>
      <param name="cornerEnd">If true a corner may appear between the beginning and end of the curve, if false (default) the start and end tangents are parallel</param>
      <returns>The interpolated curve if the operation succeeded, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.CubicSplineInterpolation(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)">
      <summary>
            Cubic spline interpolation.
            </summary>
      <param name="Q">The list of 3D points to interpolate</param>
      <param name="startTang">The start 3D tangent vector, magnitude matters (total chord length of the point set can be a reasonable value).</param>
      <param name="endTang">The end 3D tangent vector, magnitude matters (total chord length of the point set can be a reasonable value).</param>
      <returns>The interpolated curve if the operation succeeded, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.ControlBoundingBox(System.Double,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Computes the extension of the control polygon/net.
            </summary>
      <param name="min">Min 3D point</param>
      <param name="max">Max 3D point</param>
      <param name="inflateBy">Offset</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.MinimumDistance(devDept.Eyeshot.Entities.Curve,devDept.Eyeshot.Entities.Curve,System.Double,System.Double@,System.Double@,System.Double@)">
      <summary>
            Computes the minimum distance between two curves.
            </summary>
      <param name="F">First curve</param>
      <param name="G">Second curve</param>
      <param name="tol">Tolerance</param>
      <param name="u">Initial guess on F curve domain</param>
      <param name="s">Initial guess on G curve domain</param>
      <param name="distance">The resulting minimum distance</param>
      <returns>True if the operation was successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.MinimumDistance(devDept.Eyeshot.Entities.Curve,devDept.Eyeshot.Entities.Curve,System.Double,System.Boolean,System.Double@,System.Double@,System.Double@)">
      <summary>
            Computes the minimum distance between two curves.
            </summary>
      <param name="F">First curve</param>
      <param name="G">Second curve</param>
      <param name="tol">Tolerance</param>
      <param name="allowOutside">If true result could be outside of the curve</param>
      <param name="u">Initial guess on F curve domain</param>
      <param name="s">Initial guess on G curve domain</param>
      <param name="distance">The resulting minimum distance</param>
      <returns>True if the operation was successful, false otherwise.</returns>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Curve.seam">
      <summary>
            Curve seam.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,System.Double,System.Double@)">
      <summary>
            Projects a point on the curve.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="u">The U parametric coordinate of the closest point on curve to P</param>
      <param name="coincTol">Relevant only when P lays on the curve. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="allowOutside">When true, the projection is not constrained inside the curve domain</param>
      <param name="prevU">The U parametric coordinate of a previous succesful point projection</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,System.Double@)">
      <summary>
            Projects a point on the curve.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="u">The U parametric position of the closest point on curve to P</param>
      <param name="coincTol">Relevant only when P lays on the curve. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="allowOutside">When true, the projection is not constrained inside the curve domain</param>
      <returns>True when the projection is perpendicular to the curve, false otherwise.</returns>
      <remarks>When false is returned, the value of u is not reliable.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.ProjectOn(devDept.Geometry.Plane)">
      <summary>
            Project this curve on the specified plane.
            </summary>
      <param name="plane">The plane</param>
      <returns>A new curve with all control points exactly on the specified plane.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Drop(devDept.Geometry.Plane,devDept.Eyeshot.Entities.ICurve)">
      <summary>
            Project curve on the specified plane.
            </summary>
      <param name="pln">The plane</param>
      <param name="curve">The 3D curve</param>
      <returns>The resulting Nurbs curve.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.PointAt(System.Double)">
      <summary>
            Computes the curve point at parametric value u.
            </summary>
      <param name="u">The parametric value</param>
      <returns>The 3D point.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Evaluate(System.Double)">
      <summary>
            Computes the curve point at parametric value u.
            </summary>
      <param name="u">The parametric value</param>
      <returns>The 3D point.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Evaluate(System.Double,System.Int32)">
      <summary>
            Computes the curve derivatives at parametric value u.
            </summary>
      <returns>The derivatives array.</returns>
      <example>
                The following code fragment demonstrates how to compute the first 2 derivatives of
                the curve at the parametric value [0.25].
            <code lang="CS">
            Vector3D[] CK = myCurve.Evaluate(0.25, 2);
             
            Vector3D C   = CK[0];
            Vector3D Cu  = CK[1];
            Vector3D Cuu = CK[2];
            </code><code lang="VB">
            Dim CK() As Vector3D = MyCurve.Evaluate(0.25, 2)
             
            Dim C As Vector3D = CK(0)
            Dim Cu As Vector3D = CK(1)
            Dim Cuu As Vector3D = CK(2)
            </code></example>
      <param name="u">The parametric value</param>
      <param name="d">The degree of the derivative</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Curvature(System.Double)">
      <summary>
            Computes the curve curvature at parametric value u.
            </summary>
      <param name="u">The parametric value</param>
      <returns>The curvature magnitude.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.NormalAt(System.Double)">
      <summary>
            Computes the curve normal at parametric value u.
            </summary>
      <param name="u">The parametric value</param>
      <returns>The normal vector.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.TangentAt(System.Double)">
      <summary>
            Evaluates unit tangent vector at a parameter.
            </summary>
      <param name="t">Evaluation parameter</param>
      <returns>Unit tangent vector of the curve at the parameter t.</returns>
      <remarks>No error handling.</remarks>
      <seealso>EvaluateTangent()</seealso>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.EvaluateTangent(System.Double,devDept.Geometry.Point3D@,devDept.Geometry.Vector3D@)">
      <summary>
            Evaluate unit tangent at a parameter with error checking.
            </summary>
      <param name="t">Evaluation parameter</param>
      <param name="point">The 3D point at t</param>
      <param name="tangent">The unit tangent at t</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Curve.Domain">
      <summary>
            Gets curve domain.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Curve.Order">
      <summary>
            Gets curve order.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Curve.Degree">
      <summary>
            Gets or sets the curve degree.
            </summary>
      <remarks>Not validated in setter. Use constructor if you are unsure of the correctness of your data.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Curve.IsValid" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Curve.IsClosed">
      <summary>
            Returns true if the curve is closed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Curve.IsRational">
      <summary>
            Returns true if the curve is rational.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Curve.ControlPoints">
      <summary>
            Gets or sets the curve control point array.
            </summary>
      <remarks>Not validated in setter. Use constructor if you are unsure of the correctness of your data.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Curve.IsValid" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Curve.KnotVector">
      <summary>
            Gets or sets the curve knot vector U.
            </summary>
      <remarks>Not validated in setter. Use constructor if you are unsure of the correctness of your data.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Curve.IsValid" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Curve.IsLine">
      <summary>
            If true the curve is a line and not a degenerated one (a point).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Curve.IsPoint">
      <summary>
            If true, the curve is a degenerated one (a point).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.TrimBy(devDept.Geometry.Point3D,System.Boolean)">
      <summary>
            Trims the curve at the limit point projection.
            </summary>
      <param name="limit">The limit point</param>
      <param name="flipSide">The flip side flag</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.TrimAt(System.Double,System.Boolean)">
      <summary>
            Trims the curve at the provided parametric value.
            </summary>
      <param name="u">The parametric value</param>
      <param name="flipSide">The flip side flag</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.GetParamsFromLength(System.Double[],System.Double[]@)">
      <summary>
            Given a sorted array of lengths along the curve, finds the parameter values that correspond to them.
            </summary>
      <param name="lengths">Sorted lengths along the curve (ascending order)</param>
      <param name="ts">Corresponding parameter values</param>
      <returns>True if all the operations were successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.TrimBy(devDept.Geometry.Plane,System.Double,System.Boolean)">
      <summary>
            Trims the curve at the limit point projection.
            </summary>
      <param name="pln">The limit plane</param>
      <param name="tol">The tolerance</param>
      <param name="flipSide">The flip side flag</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.IntersectWith(devDept.Geometry.Plane,System.Double)">
      <summary>
            Trims the curve at the limit point projection.
            </summary>
      <param name="pln">The limit plane</param>
      <param name="tol">The search tolerance</param>
      <returns>The list of 3D intersection points.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Curve.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.#ctor(devDept.Geometry.Entities.GCurve)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.#ctor(System.Int32,System.Double[],devDept.Geometry.Point4D[],System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="degree">The curve degree</param>
      <param name="knotVector">The knot vector</param>
      <param name="ctrlPoints">The control points list</param>
      <param name="checkKnotsAndCtrlPts">If false, avoids all the checks (useless in GetNurbsForm() methods)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.#ctor(System.Int32,devDept.Geometry.Point3D[])">
      <summary>
            Curve by control points constructor.
            </summary>
      <param name="degree">The desired curve degree</param>
      <param name="ctrlPoints">The list of control points</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.#ctor(System.Int32,System.Collections.Generic.IList{devDept.Geometry.Point3D})">
      <summary>
            Curve by control points constructor.
            </summary>
      <param name="degree">The desired curve degree</param>
      <param name="ctrlPoints">The list of control points</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
            Elliptical arc by three points and two tangents constructor.
            </summary>
      <param name="P0">Start 3D point</param>
      <param name="T0">Start 3D tangent</param>
      <param name="P1">End 3D point</param>
      <param name="T1">End 3D tangent</param>
      <param name="P">A 3D point between P0 and P1.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Clone">
      <summary>
            Creates a deep copy of this curve.
            </summary>
      <returns>The new curve object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Resize(System.Int32,System.Int32)">
      <summary>
            Resizes a curve.
            </summary>
      <remarks>The old values are lost and new ones have to be created.</remarks>
      <param name="n">The new number of control points for the curve</param>
      <param name="deg">The new degree for the curve</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.ResizeKeep(System.Int32,System.Int32)">
      <summary>
            Resizes a curve, keeping original values.
            </summary>
      <remarks>The old values are lost and new ones have to be created.</remarks>
      <param name="n">The new number of control points for the curve</param>
      <param name="deg">The new degree for the curve</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Merge(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve)">
      <summary>
            Joins two curves.
            </summary>
      <param name="cl">The lower curve</param>
      <param name="cu">The upper curve</param>
      <returns>The resulting curve</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Merge(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
      <summary>
            Joins a list of curves. Curves must be properly oriented.
            </summary>
      <param name="curves">A list of curves to merge</param>
      <returns>The merged curve</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Merge(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Boolean)">
      <summary>
            Joins a list of curves. Curves must be properly oriented.
            </summary>
      <param name="curves">A list of curves to merge</param>
      <param name="clean">When true, it cleans superfluous knots from the resulting curve.</param>
      <returns>The merged curve.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.SplitAt(System.Double,devDept.Eyeshot.Entities.ICurve@,devDept.Eyeshot.Entities.ICurve@)">
      <summary>
            Splits the curve into two curves.
            </summary>
      <param name="u">Splits at this parametric value</param>
      <param name="lower">The lower curve</param>
      <param name="upper">The upper curve</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.SplitAtDiscontinuities(System.Boolean)">
      <summary>
            Splits the curve at derivative discontinuities (e.g. cusps, kinks), returns an array of the smooth segments that form the curve.
            </summary>
      <param name="speedChange">If true, when the tangents have the same direction but different lengths, the curve will be split. 
            If false, it won't be split.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Reverse">
      <summary>
            Reverses the curve direction.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.GetNurbsForm">
      <summary>
            Gets the Nurbs form of this curve.
            </summary>
      <returns>The curve itself, not cloned.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.ConvertToArcsAndLines">
      <summary>
            Converts the curve with a sequence of arcs and lines.
            </summary>
      <returns>List of lines and arcs that approximates the curve</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.ConvertToArcsAndLines(System.Double,System.Double,System.Double)">
      <summary>
            Converts the curve with a sequence of arcs and lines.
            </summary>
      <param name="epsDs">Tolerance regarding the curve length approximation</param>
      <param name="epsLc">Tolerance regarding the chordal error</param>
      <param name="epsAt">Tolerance regarding the curve tangent approximation</param>
      <returns>List of lines and arcs that approximates the curve</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Length">
      <summary>
            Gets the curve length.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.IsLinear(System.Double,devDept.Geometry.Segment3D@)">
      <summary>
            Test a curve to see if the locus of its points is a line segment.
            </summary>
      <param name="tolerance">The tolerance</param>
      <param name="line">The line where the curve lays</param>
      <returns>True if the ends of the curve are farther than tolerance apart
            and the maximum distance from any point on the curve to
            the line segment connecting the curve's ends is &lt;= tolerance
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.IsPlanar(System.Double,devDept.Geometry.Plane@)">
      <summary>
            Checks if the curve is planar.
            </summary>
      <param name="tol">The tolerance</param>
      <param name="plane">The plane where the curve lays</param>
      <returns>True if the curve is planar within tolerance, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.IsInPlane(devDept.Geometry.Plane,System.Double)">
      <summary>
            Checks if the curve lays on the specified plane.
            </summary>
      <param name="plane">The plane to test</param>
      <param name="tol">The tolerance</param>
      <returns>True if the curve lays on this plane, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.ControlLength">
      <summary>
            Gets the length of the curve's control polygon.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.ControlLengthSquared">
      <summary>
            Gets the squared length of the curve's control polygon.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.#ctor(devDept.Serialization.CurveSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.CurveSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.CurveSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.GetTrimCurve">
      <summary>
            Gets a GTrimCurve representation of this curve
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.TryGetArc(devDept.Eyeshot.Entities.Circle@)">
      <summary>
            Converts this generic curve to <see cref="T:devDept.Eyeshot.Entities.Arc" /> or <see cref="T:devDept.Eyeshot.Entities.Circle" /> (when possible).
            </summary>
      <param name="arc">The resulting circular curve (when possible)</param>
      <returns>True if the operation succeeds, false otherwise.</returns>
      <remarks>It works for arcs of angle 0, PI/2, PI, and 2PI.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.TryGetLine(devDept.Eyeshot.Entities.Line@)">
      <summary>
            Converts this generic curve to <see cref="T:devDept.Eyeshot.Entities.Line" /> (when possible).
            </summary>
      <param name="ln">The resulting linear curve (when possible)</param>
      <returns>True if the operation succeeds, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Curve.Promote">
      <summary>
            Converts this generic curve to <see cref="T:devDept.Eyeshot.Entities.Line" />, <see cref="T:devDept.Eyeshot.Entities.Arc" /> or <see cref="T:devDept.Eyeshot.Entities.Circle" /> (when possible).
            </summary>
      <returns>The new curve when possible, null/Nothing otherwise.</returns>
      <remarks>For arcs, it works if the angle is 0, PI/2, PI or 2PI.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Surface">
      <summary>
            Nurbs surface entity.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Fillet(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Constant fillet between two surfaces.
            </summary>
      <param name="F">First surface</param>
      <param name="G">Second surface</param>
      <param name="radius">Fillet radius</param>
      <param name="tol">Tolerance</param>
      <param name="flipNormalF">First surface flip normal flag</param>
      <param name="flipNormalG">Second surface flip normal flag</param>
      <param name="trimF">When true the first surface is trimmed</param>
      <param name="trimG">When true the second surface is trimmed</param>
      <param name="flipTrimSideF">First surface flip trim flag</param>
      <param name="flipTrimSideG">Second surface flip trim flag</param>
      <param name="fillet">An array of resulting fillet surfaces</param>
      <returns>The resulting <see cref="T:devDept.Geometry.ssiFailureType" />.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Fillet(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Constant fillet between two groups of surfaces.
            </summary>
      <param name="listF">First surface group</param>
      <param name="listG">Second surface group</param>
      <param name="radius">Fillet radius</param>
      <param name="tol">Tolerance</param>
      <param name="flipNormalF">First surface flip normal flag</param>
      <param name="flipNormalG">Second surface flip normal flag</param>
      <param name="trimF">When true the first surface is trimmed</param>
      <param name="trimG">When true the second surface is trimmed</param>
      <param name="flipTrimSideF">First surface flip trim flag</param>
      <param name="flipTrimSideG">Second surface flip trim flag</param>
      <param name="fillet">An array of fillet surfaces</param>
      <returns>The resulting <see cref="T:devDept.Geometry.ssiFailureType" />.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Fillet(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Constant fillet between two groups of surfaces, with surfaces leftover by the trim operation.
            </summary>
      <param name="listF">First surface group</param>
      <param name="listG">Second surface group</param>
      <param name="radius">Fillet radius</param>
      <param name="tol">Tolerance</param>
      <param name="flipNormalF">First surface flip normal flag</param>
      <param name="flipNormalG">Second surface flip normal flag</param>
      <param name="trimF">When true the first surface is trimmed</param>
      <param name="trimG">When true the second surface is trimmed</param>
      <param name="flipTrimSideF">First surface flip trim flag</param>
      <param name="flipTrimSideG">Second surface flip trim flag</param>
      <param name="fillet">An array of fillet surfaces</param>
      <param name="leftOversF">Trim operation leftover list for listF</param>
      <param name="leftOversG">Trim operation leftover list for listG</param>
      <returns>The resulting <see cref="T:devDept.Geometry.ssiFailureType" />.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.VariableFillet(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Double,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Variable fillet between two individual surfaces.
            </summary>
      <param name="F">First surface</param>
      <param name="G">Second surface</param>
      <param name="startRadius">Starting fillet radius</param>
      <param name="endRadius">Ending fillet radius</param>
      <param name="linear">Linear/cubic transition flag</param>
      <param name="tol">Tolerance</param>
      <param name="flipNormalF">First surface flip normal flag</param>
      <param name="flipNormalG">Second surface flip normal flag</param>
      <param name="trimF">When true the first surface is trimmed</param>
      <param name="trimG">When true the second surface is trimmed</param>
      <param name="flipTrimSideF">First surface flip trim flag</param>
      <param name="flipTrimSideG">Second surface flip trim flag</param>
      <param name="fillet">An array of fillet surfaces</param>
      <returns>The resulting ssiFailureType.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.VariableFillet(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Variable fillet between two groups of surfaces.
            </summary>
      <param name="listF">First surface group</param>
      <param name="listG">Second surface group</param>
      <param name="startRadius">Starting fillet radius</param>
      <param name="endRadius">Ending fillet radius</param>
      <param name="linear">Linear/cubic transition flag</param>
      <param name="tol">Tolerance</param>
      <param name="flipNormalF">First surface flip normal flag</param>
      <param name="flipNormalG">Second surface flip normal flag</param>
      <param name="trimF">When true the first surface is trimmed</param>
      <param name="trimG">When true the second surface is trimmed</param>
      <param name="flipTrimSideF">First surface flip trim flag</param>
      <param name="flipTrimSideG">Second surface flip trim flag</param>
      <param name="fillet">An array of fillet surfaces</param>
      <returns>The resulting ssiFailureType.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.VariableFillet(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Variable fillet between two groups of surfaces, with surfaces leftover by the trim operation.
            </summary>
      <param name="listF">First surface group</param>
      <param name="listG">Second surface group</param>
      <param name="startRadius">Starting fillet radius</param>
      <param name="endRadius">Ending fillet radius</param>
      <param name="linear">Linear/cubic transition flag</param>
      <param name="tol">Tolerance</param>
      <param name="flipNormalF">First surface flip normal flag</param>
      <param name="flipNormalG">Second surface flip normal flag</param>
      <param name="trimF">When true the first surface is trimmed</param>
      <param name="trimG">When true the second surface is trimmed</param>
      <param name="flipTrimSideF">First surface flip trim flag</param>
      <param name="flipTrimSideG">Second surface flip trim flag</param>
      <param name="fillet">An array of fillet surfaces</param>
      <param name="leftOversF">Trim operation leftover list for listF</param>
      <param name="leftOversG">Trim operation leftover list for listG</param>
      <returns>The resulting ssiFailureType.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Chamfer(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Constant chamfer between two surfaces.
            </summary>
      <param name="F">First surface</param>
      <param name="G">Second surface</param>
      <param name="radius">Chamfer distance</param>
      <param name="tol">Tolerance</param>
      <param name="flipNormalF">First surface flip normal flag</param>
      <param name="flipNormalG">Second surface flip normal flag</param>
      <param name="trimF">When true the first surface is trimmed</param>
      <param name="trimG">When true the second surface is trimmed</param>
      <param name="flipTrimSideF">First surface flip trim flag</param>
      <param name="flipTrimSideG">Second surface flip trim flag</param>
      <param name="chamfer">An array of resulting chamfer surfaces</param>
      <returns>The resulting <see cref="T:devDept.Geometry.ssiFailureType" />.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Chamfer(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Constant chamfer between two groups of surfaces.
            </summary>
      <param name="listF">First surface group</param>
      <param name="listG">Second surface group</param>
      <param name="radius">Chamfer distance</param>
      <param name="tol">Tolerance</param>
      <param name="flipNormalF">First surface flip normal flag</param>
      <param name="flipNormalG">Second surface flip normal flag</param>
      <param name="trimF">When true the first surface is trimmed</param>
      <param name="trimG">When true the second surface is trimmed</param>
      <param name="flipTrimSideF">First surface flip trim flag</param>
      <param name="flipTrimSideG">Second surface flip trim flag</param>
      <param name="chamfer">An array of chamfer surfaces</param>
      <returns>The resulting <see cref="T:devDept.Geometry.ssiFailureType" />.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Chamfer(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Constant chamfer between two groups of surfaces, with surfaces leftover by the trim operation.
            </summary>
      <param name="listF">First surface group</param>
      <param name="listG">Second surface group</param>
      <param name="radius">Chamfer distance</param>
      <param name="tol">Tolerance</param>
      <param name="flipNormalF">First surface flip normal flag</param>
      <param name="flipNormalG">Second surface flip normal flag</param>
      <param name="trimF">When true the first surface is trimmed</param>
      <param name="trimG">When true the second surface is trimmed</param>
      <param name="flipTrimSideF">First surface flip trim flag</param>
      <param name="flipTrimSideG">Second surface flip trim flag</param>
      <param name="chamfer">An array of chamfer surfaces</param>
      <param name="leftOversF">Trim operation leftover list for listF</param>
      <param name="leftOversG">Trim operation leftover list for listG</param>
      <returns>The resulting <see cref="T:devDept.Geometry.ssiFailureType" />.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.VariableChamfer(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Double,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Variable chamfer between two surfaces.
            </summary>
      <param name="F">First surface</param>
      <param name="G">Second surface</param>
      <param name="startRadius">Starting chamfer distance</param>
      <param name="endRadius">Ending chamfer distance</param>
      <param name="linear">Linear/cubic transition flag</param>
      <param name="tol">Tolerance</param>
      <param name="flipNormalF">First surface flip normal flag</param>
      <param name="flipNormalG">Second surface flip normal flag</param>
      <param name="trimF">When true the first surface is trimmed</param>
      <param name="trimG">When true the second surface is trimmed</param>
      <param name="flipTrimSideF">First surface flip trim flag</param>
      <param name="flipTrimSideG">Second surface flip trim flag</param>
      <param name="chamfer">An array of chamfer surfaces</param>
      <returns>The resulting ssiFailureType.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.VariableChamfer(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Variable chamfer between two groups of surfaces.
            </summary>
      <param name="listF">First surface group</param>
      <param name="listG">Second surface group</param>
      <param name="startRadius">Starting chamfer distance</param>
      <param name="endRadius">Ending chamfer distance</param>
      <param name="linear">Linear/cubic transition flag</param>
      <param name="tol">Tolerance</param>
      <param name="flipNormalF">First surface flip normal flag</param>
      <param name="flipNormalG">Second surface flip normal flag</param>
      <param name="trimF">When true the first surface is trimmed</param>
      <param name="trimG">When true the second surface is trimmed</param>
      <param name="flipTrimSideF">First surface flip trim flag</param>
      <param name="flipTrimSideG">Second surface flip trim flag</param>
      <param name="chamfer">An array of chamfer surfaces</param>
      <returns>The resulting ssiFailureType.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.VariableChamfer(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Double,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Variable chamfer between two groups of surfaces, with surfaces leftover by the trim operation.
            </summary>
      <param name="listF">First surface group</param>
      <param name="listG">Second surface group</param>
      <param name="startRadius">Starting chamfer distance</param>
      <param name="endRadius">Ending chamfer distance</param>
      <param name="linear">Linear/cubic transition flag</param>
      <param name="tol">Tolerance</param>
      <param name="flipNormalF">First surface flip normal flag</param>
      <param name="flipNormalG">Second surface flip normal flag</param>
      <param name="trimF">When true the first surface is trimmed</param>
      <param name="trimG">When true the second surface is trimmed</param>
      <param name="flipTrimSideF">First surface flip trim flag</param>
      <param name="flipTrimSideG">Second surface flip trim flag</param>
      <param name="chamfer">An array of chamfer surfaces</param>
      <param name="leftOversF">Trim operation leftover list for listF</param>
      <param name="leftOversG">Trim operation leftover list for listG</param>
      <returns>The resulting ssiFailureType.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.GetIndividualSurfaces(devDept.Eyeshot.Entities.Surface)">
      <summary>
            Subdivides a surface at knots of multiplicity equal to the order. 
            Tabulated Surfaces are divided only along the U direction, Revolved Surfaces only in the V direction. 
            </summary>
      <param name="current">Parent surface</param>
      <returns>List of kids surfaces</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Offset(System.Double,System.Double,devDept.Eyeshot.Entities.Surface@)">
      <summary>
            Computes the offset surface.
            </summary>
      <param name="amount">The signed distance</param>
      <param name="tol">The tolerance</param>
      <param name="offsetSurf">The resulting offset surface</param>
      <returns>True if the operation is succeful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.DropLoops(devDept.Eyeshot.Entities.Surface,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
      <summary>
            Creates the 2D parametric trim loops corresponding to a 3D geometric - closed - contours list which lie on a surface.
            </summary>
      <param name="untrimmed">The surface</param>
      <param name="contours">A list of 3D contours</param>
      <returns>One or more trimmed surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.DropCurve(devDept.Eyeshot.Entities.ICurve,System.Boolean,devDept.Eyeshot.Entities.Curve@)">
      <summary>
            Creates the 2D parametric curve corresponding to a 3D geometric curve which lies on or near a surface.
            </summary>
      <param name="curve">The curve to be dropped</param>
      <param name="parametric">The resulting 2D curve</param>
      <returns>True if the function succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.IsOnSeamU(devDept.Eyeshot.Entities.ICurve,System.Double)">
      <summary>
            Checks if a curve is on the seam of a surface.
            </summary>
      <param name="curve">The curve</param>
      <param name="tol">Maximum distance from seam curve</param>
      <returns>True if the curve lies on the seam, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.IsOnSeamV(devDept.Eyeshot.Entities.ICurve,System.Double)">
      <summary>
            Checks if a curve is on the seam of a surface.
            </summary>
      <param name="curve">The curve</param>
      <param name="tol">Maximum distance from seam curve</param>
      <returns>True if the curve lies on the seam, false otherwise.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.ShowCurvature">
      <summary>
            When true, curvature map is displayed.
            </summary>
      <remarks>You need to call <see cref="M:devDept.Eyeshot.Entities.Surface.ComputeCurvatureMap(devDept.Eyeshot.Workspace,devDept.Eyeshot.Legend,devDept.Eyeshot.Entities.Surface.curvatureType)" /> before enabling curvature map display.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Surface.ComputeCurvatureMap(devDept.Eyeshot.Workspace,devDept.Eyeshot.Legend,devDept.Eyeshot.Entities.Surface.curvatureType)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ComputeCurvatureMap(devDept.Eyeshot.Workspace,devDept.Eyeshot.Legend,devDept.Eyeshot.Entities.Surface.curvatureType)">
      <summary>
            Computes the desired curvature map.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> object instance.</param>
      <param name="legend">The legend.</param>
      <param name="type">The curvature map type.</param>
      <seealso cref="P:devDept.Eyeshot.Entities.Surface.ShowCurvature" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ConvertToMesh(System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType,System.Boolean)">
      <summary>
            Converts this Surface to a <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object.
            </summary>
      <param name="deviation">The maximum deviation, zero for current tessellation.</param>
      <param name="angle">The maximum angular deflection, ignored when zero.</param>
      <param name="meshNature">The desired Mesh <see cref="T:devDept.Geometry.Entities.GMesh.natureType">nature</see></param>
      <param name="skipEdges">If true, skips the Edges computation</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ConvertToBrep(System.Double)">
      <summary>
            Converts this Surface to a <see cref="T:devDept.Eyeshot.Entities.Brep" /> object.
            </summary>
      <param name="rebuildTolerance">The rebuild tolerance to set to the object. Zero for default value.</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ConvertToSolid(System.Double,System.Double)">
      <summary>
            Converts this Surface to a <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object.
            </summary>
      <param name="deviation">The maximum deviation, zero for current tessellation.</param>
      <param name="angle">The maximum angular deflection, ignored when zero.</param>
      <returns>The resulting Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.SkinU(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32)">
      <summary>
            Creates a surface from skinning. The skinning is performed in the U direction.
            </summary>
      <param name="curveList">A list of NURBS curves</param>
      <param name="degU">The degree in the U direction</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.SkinU(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32,System.Boolean)">
      <summary>
            Creates a surface from skinning. The skinning is performed in the U direction.
            </summary>
      <param name="curveList">A list of NURBS curves</param>
      <param name="degU">The degree in the U direction</param>
      <param name="splitAtCorners">If True, it splits the curves at corner points. It is useful when the sections are Composite Curves with similar shape, and you want to line up the corners (and curve segments) in the resulting surface.</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.SkinV(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32)">
      <summary>
            Creates a surface from skinning. The skinning is performed in the V direction.
            </summary>
      <param name="curveList">A list of curves</param>
      <param name="degV">The degree in the V direction</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.SkinV(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32,System.Boolean)">
      <summary>
            Creates a surface from skinning. The skinning is performed in the V direction.
            </summary>
      <param name="curveList">A list of curves</param>
      <param name="degV">The degree in the V direction</param>
      <param name="splitAtCorners">If True, it splits the curves at corner points. It is useful when the sections are Composite Curves with similar shape, and you want to line up the corners (and curve segments) in the resulting surface.</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Gordon(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
      <summary>
            Creates a Gordon surface.
            </summary>
      <param name="lU">The list of non rational curves in the U direction</param>
      <param name="lV">The list of non rational curves in the V direction</param>
      <returns>The resulting surface if the operation succeeds, null/Nothing otherwise.</returns>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Gordon(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Point3D[0:,0:])">
      <summary>
            Creates a Gordon surface.
            </summary>
      <param name="lU">The list of non rational curves in the U direction</param>
      <param name="lV">The list of non rational curves in the V direction</param>
      <param name="intersections">The matrix of curve intersection points</param>
      <returns>The resulting surface if the operation succeeds, null/Nothing otherwise.</returns>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Ruled(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve)">
      <summary>
            Creates a surface connecting linearly two curves.
            </summary>
      <param name="first">First curve</param>
      <param name="second">Second curve</param>
      <returns>The resulting surface if the operation succeeds, null/Nothing otherwise.</returns>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Loft(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
      <summary>
            Creates a surface from skinning. 
            </summary>
      <param name="curveList">The skinning curves</param>
      <returns>The resulting surface array if the operation succeeds, null/Nothing otherwise.</returns>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Loft(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32)">
      <summary>
            Creates a surface from skinning. 
            </summary>
      <param name="curveList">The skinning curves</param>
      <param name="degree">The desired surface degree</param>
      <returns>The resulting surface array if the operation succeeds, null/Nothing otherwise.</returns>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Loft(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Creates a surface from skinning. 
            </summary>
      <param name="curveList">The skinning curves</param>
      <param name="degree">The desired surface degree</param>
      <param name="splitAtCorners">If True, it splits the curves at corner points. It is useful when the curves have similar shapes, and you want to line up the corners in the resulting surface.</param>
      <param name="speedChange">Works only when splitAtCorners is true. If true, when the tangents have the same direction but different lengths, the curve will be split. 
            If false, it won't be split.</param>
      <returns>The resulting surface array if the operation succeeds, null/Nothing otherwise.</returns>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ExtrudeWithTwist(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Extrudes and twists a planar curve. 
            </summary>
      <param name="curve">The curve to extrude</param>
      <param name="direction">Extrusion direction, normal to the plane of the curve</param>
      <param name="center">Point of application for the direction, on the plane of the curve</param>
      <param name="angle">Twist angle in radians</param>
      <param name="numberOfSections">Number of internal sections to be interpolated, it corresponds to the number of distinct internal knots in the surface's V direction.</param>
      <returns>The resulting surface array if the operation succeeds, null/Nothing otherwise.</returns>
      <remarks>Primitives of input curve is cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ExtrudeWithTwist(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double,System.Double)">
      <summary>
            Extrudes and twists a planar curve. 
            </summary>
      <param name="curve">The curve to extrude</param>
      <param name="direction">Extrusion direction, normal to the plane of the curve</param>
      <param name="center">Point of application for the direction, on the plane of the curve</param>
      <param name="angle">Twist angle in radians</param>
      <param name="tol">Tolerance</param>
      <returns>The resulting surface array if the operation succeeds, null/Nothing otherwise.</returns>
      <remarks>Primitives of input curve is cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(devDept.Eyeshot.Entities.ICurve)">
      <summary>Creates a planar surface bounded by the contour provided.</summary>
      <param name="outerContour">The outer contour of the region</param>
      <returns>The planar surface if the operation succeeded, null/Nothing otherwise.</returns>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(devDept.Geometry.Plane,devDept.Eyeshot.Entities.ICurve,System.Boolean)">
      <summary>Creates surface on a given plane bounded by the contour provided.</summary>
      <param name="pln">The plane on which the contour lies</param>
      <param name="outerContour">The outer contour of the region</param>
      <param name="sortAndOrient">When true, outerContour is sorted and oriented</param>
      <returns>The planar surface if the operation succeeded, null/Nothing otherwise.</returns>
      <remarks>When sortAndOrient is false, make sure that outerContour is oriented counter-clockwise with respect to pln.</remarks>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
      <summary>Creates a planar surface bounded by the contours provided.</summary>
      <param name="outerContour">The outer contour of the region</param>
      <param name="innerContours">The inner contour list. It can be null/Nothing.</param>
      <returns>The planar surface if the operation succeeded, null/Nothing otherwise.</returns>
      <remarks>Make sure that the outer contour is oriented counter-clockwise, and that the inner contours are oriented clockwise with respect to plane.</remarks>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(devDept.Geometry.Plane,devDept.Eyeshot.Entities.ICurve,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Boolean)">
      <summary>Creates surface on a given plane, bounded by the contours provided.</summary>
      <param name="pln">The plane on which the contours lie</param>
      <param name="outerContour">The outer contour of the region</param>
      <param name="innerContours">The inner contour list. It can be null/Nothing.</param>
      <param name="sortAndOrient">When true, outerContour and innerContours are sorted and oriented</param>
      <returns>The planar surface if the operation succeeded, null/Nothing otherwise.</returns>
      <remarks>When sortAndOrient is false, make sure that outerContour is oriented counter-clockwise and that innerContours are oriented clockwise with respect to pln.</remarks>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
      <summary>Creates a planar surface bounded by the contour provided.</summary>
      <param name="contours">The contours of the region</param>
      <returns>The planar surface if the operation succeeded, null/Nothing otherwise.</returns>
      <remarks>Make sure that the outer contour is in the first position and oriented counter-clockwise, and that the inner contours are oriented clockwise with respect to plane.</remarks>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(devDept.Geometry.Plane,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Boolean)">
      <summary>Creates surface on a given plane bounded by the contours provided.</summary>
      <param name="pln">The plane on which the contour lies</param>
      <param name="contours">The contours of the region</param>
      <param name="sortAndOrient">When true, contours is sorted and oriented</param>
      <returns>The planar surface if the operation succeeded, null/Nothing otherwise.</returns>
      <remarks>When sortAndOrient is false, make sure that the outer contour is in the first position and oriented counter-clockwise, and that the inner contours are oriented clockwise with respect to pln.</remarks>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.CreatePlanar(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>Creates a planar rectangular surface parallel to the specified plane.</summary>
      <param name="pln">The plane (determines the surface orientation)</param>
      <param name="bottomLeft">First corner (also determines surface distance from the world origin)</param>
      <param name="topRight">Second corner (determines surface width and height)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.CreateEllipsoid(System.Double,System.Double,System.Double)">
      <summary>
            Creates a NURBS ellipsoid centered in the origin.
            </summary>
      <param name="semiaxisX">Length of the semiaxis along the X axis</param>
      <param name="semiaxisY">Length of the semiaxis along the Y axis</param>
      <param name="semiaxisZ">Length of the semiaxis along the Z axis</param>
      <returns>The NURBS ellipsoidal surface.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.TryGetPlanar(devDept.Eyeshot.Entities.PlanarSurface@)">
      <summary>
            Converts this generic surface to <see cref="T:devDept.Eyeshot.Entities.PlanarSurface" /> (when possible).
            </summary>
      <param name="ps">The resulting planar surface (when possible)</param>
      <returns>True if the operation succeeds, false otherwise. If the surface is already a <see cref="T:devDept.Eyeshot.Entities.PlanarSurface" />, it returns false.</returns>
      <remarks>It does not work for for planar cones with revolution angle equal to 2PI.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.TryGetRevolved(devDept.Eyeshot.Entities.RevolvedSurface@)">
      <summary>
            Converts this generic surface to <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface" /> (when possible).
            </summary>
      <param name="rs">The resulting revolved surface (when possible)</param>
      <returns>True if the operation succeeds, false otherwise. If the surface is already a <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface" />, it returns false.</returns>
      <remarks>It only converts surfaces with angle of revolution of PI and 2PI.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.TryGetTabulated(devDept.Eyeshot.Entities.TabulatedSurface@)">
      <summary>
            Converts this generic surface to <see cref="T:devDept.Eyeshot.Entities.TabulatedSurface" /> (when possible).
            </summary>
      <param name="ts">The resulting tabulated surface (when possible)</param>
      <returns>True if the operation succeeds, false otherwise. If the surface is already a <see cref="T:devDept.Eyeshot.Entities.TabulatedSurface" />, it returns false.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Promote">
      <summary>
            Converts this generic surface to <see cref="T:devDept.Eyeshot.Entities.PlanarSurface" />, <see cref="T:devDept.Eyeshot.Entities.TabulatedSurface" /> or <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface" /> (when possible).
            </summary>
      <returns>The new surface when possible, null/Nothing otherwise.</returns>
      <remarks>When the surface is already a <see cref="T:devDept.Eyeshot.Entities.PlanarSurface" />, <see cref="T:devDept.Eyeshot.Entities.TabulatedSurface" /> or <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface" />, the method returns null/Nothing.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.PointAt(devDept.Geometry.Point2D)">
      <summary>
            Computes the surface point.
            </summary>
      <param name="pt">The point in parametric domain</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.PointAt(System.Double,System.Double)">
      <summary>
            Computes the surface point at parametric values [u, v].
            </summary>
      <param name="u">Parametric value along U direction</param>
      <param name="v">Parametric value along V direction</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Evaluate(devDept.Geometry.Point2D)">
      <summary>
            Computes the surface point.
            </summary>
      <param name="pt">The point in parametric domain</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Evaluate(System.Double,System.Double)">
      <summary>
            Computes the surface point at parametric values [u, v].
            </summary>
      <param name="u">Parametric value along U direction</param>
      <param name="v">Parametric value along V direction</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Evaluate(devDept.Geometry.Point2D,System.Int32)">
      <summary>
            Computes the surface derivatives.
            </summary>
      <param name="pt">The point in parametric domain</param>
      <param name="d">The degree of the derivatives</param>
      <return>The derivatives SKL[k, l].</return>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Evaluate(System.Double,System.Double,System.Int32)">
      <summary>
            Computes the surface derivatives at parametric values [u,v].
            </summary>
      <param name="u">Parametric value along U direction</param>
      <param name="v">Parametric value along V direction</param>
      <param name="d">The degree of the derivatives</param>
      <return>The derivatives SKL[k, l].</return>
      <example>
                The following code fragment demonstrates how to compute the first 2 derivatives of
                the surface at the parametric value [0.25, 0.5].
            <code lang="CS">
            Vector3D[,] SKL = mySurf.Evaluate(0.25, 2);
             
            Vector3D S   = SKL[0,0];
            Vector3D Su  = SKL[1,0];
            Vector3D Sv  = SKL[0,1];
            Vector3D Suu = SKL[2,0];
            Vector3D Suv = SKL[1,1];
            Vector3D Svv = SKL[0,2];
            </code><code lang="VB">
            Dim SKL(,) As Vector3D = MySurf.Evaluate(0.25, 0.5, 2)
             
            Dim S As Vector3D = SKL(0,0)
            Dim Su As Vector3D = SKL(1,0)
            Dim Sv As Vector3D = SKL(0,1)
            Dim Suu As Vector3D = SKL(2,0)
            Dim Suv As Vector3D = SKL(1,1)
            Dim Svv As Vector3D = SKL(0,2)
            </code></example>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Curvature(devDept.Geometry.Point2D,System.Double@,System.Double@)">
      <summary>
            Evaluates the surface Gaussian and Mean curvatures at the specified 2D point.
            </summary>
      <param name="pt">The point in parametric domain</param>
      <param name="gauss">Gaussian curvature = kappa1*kappa2</param>
      <param name="mean">Mean curvature = (kappa1+kappa2)/2</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Curvature(System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
            Evaluates the surface Gaussian and Mean curvatures at the specified parametric point.
            </summary>
      <param name="u">Parametric value along U direction</param>
      <param name="v">Parametric value along V direction</param>
      <param name="gauss">Gaussian curvature = kappa1*kappa2</param>
      <param name="mean">Mean curvature = (kappa1+kappa2)/2</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Curvature(System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Evaluates the surface curvatures at the specified parametric point.
            </summary>
      <param name="u">Parametric value along U direction</param>
      <param name="v">Parametric value along V direction</param>
      <param name="gauss">Gaussian curvature = kappa1*kappa2</param>
      <param name="mean">Mean curvature = (kappa1+kappa2)/2</param>
      <param name="kappa1">Largest principal curvature value</param>
      <param name="kappa2">Smallest principal curvature value</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Curvature(System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,devDept.Geometry.Vector3D@,devDept.Geometry.Vector3D@)">
      <summary>
            Evaluates the surface curvatures at the specified parametric point.
            </summary>
      <param name="u">Parametric value along U direction</param>
      <param name="v">Parametric value along V direction</param>
      <param name="gauss">Gaussian curvature = kappa1*kappa2</param>
      <param name="mean">Mean curvature = (kappa1+kappa2)/2</param>
      <param name="kappa1">Largest principal curvature value</param>
      <param name="kappa2">Smallest principal curvature value</param>
      <param name="k1">Unit principal direction relative to kappa1</param>
      <param name="k2">Unit principal direction relative to kappa2</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Normal(devDept.Geometry.Point2D)">
      <summary>
            Evaluates the surface normal at the specified parametric point.
            </summary>
      <param name="pt">The point in parametric domain</param>
      <returns>The normal vector.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Normal(System.Double,System.Double)">
      <summary>
            Evaluates the surface normal at the specified parametric point.
            </summary>
      <param name="u">Parametric value along U direction</param>
      <param name="v">Parametric value along V direction</param>
      <returns>The normal vector.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.InsertKnotU(System.Double,System.Int32)">
      <summary>
            Inserts a knot a number of times in the U parametric direction.
            </summary>
      <param name="u">The knot to Insert</param>
      <param name="r">The number of times to Insert</param>
      <returns>The number of knots inserted, zero otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.InsertKnotU(devDept.Geometry.Point3D,System.Int32)">
      <summary>
            Inserts a knot a number of times in the U parametric direction. It is added at the U parameter corresponding to the projection of the given point on the surface. 
            The operation does not affect the shape of the surface.
            </summary>
      <param name="ctrlPoint">The point to be projected on the surface</param>
      <param name="r">The number of times to insert</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.InsertKnotV(System.Double,System.Int32)">
      <summary>
            Inserts a knot a number of times in the V parametric direction.
            </summary>
      <param name="v">The knot to Insert</param>
      <param name="r">The number of times to Insert</param>
      <returns>The number of knots inserted, zero otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.InsertKnotV(devDept.Geometry.Point3D,System.Int32)">
      <summary>
            Inserts a knot a number of times in the V parametric direction. It is added at the V parameter corresponding to the projection of the given point on the surface. 
            The operation does not affect the shape of the surface.
            </summary>
      <param name="ctrlPoint">The point to be projected on the surface</param>
      <param name="r">The number of times to insert</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.RefineKnotVectorU(System.Double[])">
      <summary>
            Refines the surface knot vector U.
            </summary>
      <param name="X">The new knots to Insert in the knot vector</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.RefineKnotVectorV(System.Double[])">
      <summary>
            Refines the surface knot vector V.
            </summary>
      <param name="X">The new knots to Insert in the knot vector</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.DegreeElevateU(System.Int32)">
      <summary>
            Degree elevates the surface in the U parametric direction.
            </summary>
      <param name="t">Degree elevation amount</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.DegreeElevateV(System.Int32)">
      <summary>
            Degree elevates the surface in the V parametric direction.
            </summary>
      <param name="t">Degree elevation amount</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.DecomposeU">
      <summary>
            Decomposes the surface into Bézier patches in the U parametric direction.
            </summary>
      <returns>A list of surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.DecomposeV">
      <summary>
            Decomposes the surface into Bézier patches in the U parametric direction.
            </summary>
      <returns>A list of surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Decompose">
      <summary>
            Decomposes the surface into Bézier patches.
            </summary>
      <returns>A rectangular array of surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.RemoveKnotU(System.Int32,System.Int32,System.Int32)">
      <summary>
            Removes an internal knot from the surface U knot vector.
            </summary>
      <param name="r">The knot to remove</param>
      <param name="s">The multiplicity of the knot</param>
      <param name="num">The number of times to try to remove the knot</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.RemoveKnotV(System.Int32,System.Int32,System.Int32)">
      <summary>
            Removes an internal knot from the surface V knot vector.
            </summary>
      <param name="r">The knot to remove</param>
      <param name="s">The multiplicity of the knot</param>
      <param name="num">The number of times to try to remove the knot</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.RemoveKnotsU(System.Double)">
      <summary>
            Removes as many knots as possible from the U knot vector of a surface.
            </summary>
      <param name="tol">The allowed tolerance</param>
      <returns>Number of knots removed.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.RemoveKnotsV(System.Double)">
      <summary>
            Removes as many knots as possible from the V knot vector of a surface.
            </summary>
      <param name="tol">The allowed tolerance</param>
      <returns>Number of knots removed.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.GlobalInterpolation(devDept.Geometry.Point3D[0:,0:],System.Int32,System.Int32)">
      <summary>
            Global surface interpolation.
            </summary>
      <param name="Q">A matrix of 3D points</param>
      <param name="degU">The degree of interpolation in the U direction</param>
      <param name="degV">The degree of interpolation in the V direction</param>
      <returns>The interpolated surface if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.LocalInterpolation(devDept.Geometry.Point3D[0:,0:])">
      <summary>
            Local bicubic surface interpolation.
            </summary>
      <param name="Q">A matrix of 3D points.</param>
      <returns>The interpolated surface.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Section(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},devDept.Geometry.Plane,System.Double)">
      <summary>
            Computes the section of a group of surfaces and a plane as a collection of curves.
            </summary>
      <param name="listF">Surface group</param>
      <param name="pln">The plane</param>
      <param name="tol">The tolerance</param>
      <returns>The array of intersection curves.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Intersection(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,devDept.Eyeshot.Entities.ICurve[]@)">
      <summary>
            Computes the intersection of two groups of surfaces as a collection of curves.
            </summary>
      <param name="listF">First surface group</param>
      <param name="listG">Second surface group</param>
      <param name="iCurves">A list of intersection curves</param>
      <param name="tol">The tolerance</param>
      <returns>The intersection failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.IntersectWith(devDept.Eyeshot.Entities.Surface,System.Double,devDept.Eyeshot.Entities.ICurve[]@)">
      <summary>
            Computes the intersection with the specified surface as a collection of curves.
            </summary>
      <param name="G">The surface</param>
      <param name="iCurves">A list of intersection curves</param>
      <param name="tol">The tolerance</param>
      <returns>The intersection failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Intersects(devDept.Eyeshot.Entities.Surface,System.Double)">
      <summary>
            Determines if the surface intersects with another surface.
            </summary>
      <param name="G">The surface</param>
      <param name="tol">The tolerance</param>
      <returns>True if the surfaces intersect, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.IntersectWith(devDept.Geometry.Plane,System.Double)">
      <summary>
            Computes the intersection of a surface and a plane as a collection of curves.
            </summary>
      <param name="pln">The plane</param>
      <param name="tol">The tolerance</param>
      <returns>The array of intersection curves.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.IntersectWith(devDept.Eyeshot.Entities.ICurve,System.Double)">
      <summary>
            Finds all the 3D points where a curve and a surface intersect.
            </summary>
      <param name="curve3D">The 3D curve</param>
      <param name="searchTol">The search tolerance</param>
      <returns>The list of intersection points (if any).</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.MinimumDistance(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Computes the minimum distance between two surfaces.
            </summary>
      <param name="F">First surface</param>
      <param name="G">Second surface</param>
      <param name="tol">Tolerance</param>
      <param name="u">Initial guess on F surface U parametric direction</param>
      <param name="v">Initial guess on F surface V parametric direction</param>
      <param name="s">Initial guess on G surface U parametric direction</param>
      <param name="t">Initial guess on G surface V parametric direction</param>
      <param name="distance">The resulting minimum distance</param>
      <returns>True if the operation was successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.MinimumDistance(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Computes the minimum distance between two surfaces.
            </summary>
      <param name="F">First surface</param>
      <param name="G">Second surface</param>
      <param name="tol">Tolerance</param>
      <param name="allowOutside">If true result could be outside of the curve</param>
      <param name="u">Initial guess on F surface U parametric direction</param>
      <param name="v">Initial guess on F surface V parametric direction</param>
      <param name="s">Initial guess on G surface U parametric direction</param>
      <param name="t">Initial guess on G surface V parametric direction</param>
      <param name="distance">The resulting minimum distance</param>
      <returns>True if the operation was successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.MinimumDistance(devDept.Eyeshot.Entities.Curve,devDept.Eyeshot.Entities.Surface,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Computes the minimum distance between a curve and a surface
            </summary>
      <param name="C">The curve</param>
      <param name="S">The surface</param>
      <param name="tol">Tolerance</param>
      <param name="s">Initial guess on C curve</param>
      <param name="u">Initial guess on S surface U parametric direction</param>
      <param name="v">Initial guess on S surface U parametric direction</param>
      <param name="distance">The resulting minimum distance</param>
      <returns>True if the operation was successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.MinimumDistance(devDept.Eyeshot.Entities.Curve,devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Computes the minimum distance between a curve and a surface
            </summary>
      <param name="C">The curve</param>
      <param name="S">The surface</param>
      <param name="tol">Tolerance</param>
      <param name="allowOutside">If true result could be outside of the curve</param>
      <param name="s">Initial guess on C curve</param>
      <param name="u">Initial guess on S surface U parametric direction</param>
      <param name="v">Initial guess on S surface U parametric direction</param>
      <param name="distance">The resulting minimum distance</param>
      <returns>True if the operation was successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.CollinearNormal(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Computes the collinear normal between two surfaces.
            </summary>
      <param name="F">First surface</param>
      <param name="G">Second surface</param>
      <param name="tol">Tolerance</param>
      <param name="u">Initial guess on F surface U parametric direction</param>
      <param name="v">Initial guess on F surface V parametric direction</param>
      <param name="s">Initial guess on G surface U parametric direction</param>
      <param name="t">Initial guess on G surface V parametric direction</param>
      <returns>True if the operation was successful, false otherwise.</returns>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Surface.leftEdge">
      <summary>
            Surface's bottom pole or tip.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Surface.topEdge">
      <summary>
            Surface's right pole or tip.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Surface.rightEdge">
      <summary>
            Surface's top pole or tip.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Surface.bottomEdge">
      <summary>
            Surface's left pole or tip.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ExtractLoops3D">
      <summary>
            Returns all the surface 3D edge curves.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ExtractEdges">
      <summary>
            Returns all the surface 3D edge curves.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ExtractEdge(System.Int32,System.Int32)">
      <summary>
            Returns the specified 3D edge curve.
            </summary>
      <param name="loopIndex">Trim loop index</param>
      <param name="curveIndex">Loop curve index</param>
      <returns>The surface 3D edge as an individual curve.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.RebuildEdge(System.Int32,System.Int32,System.Double)">
      <summary>
            Rebuild the 3D edge curve corresponding to a 2D trim curve in the parameter space of the surface.
            </summary>
      <param name="loopIndex">Trim loop index</param>
      <param name="curveIndex">Loop curve index</param>
      <param name="tolerance">The tolerance used in the rebuild process</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.RebuildEdges(System.Double)">
      <summary>
            Rebuild all the surface 3D edges.
            </summary>
      <param name="tolerance">The tolerance used in the rebuild process</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.LiftCurve(devDept.Eyeshot.Entities.Curve,System.Double)">
      <summary>
            Creates the 3D curve corresponding to a 2D curve in the parametric space of the surface.
            </summary>
      <param name="curve">The curve in parametric space.</param>
      <param name="tol">Allowed tolerance</param>
      <returns>The individual 3D curve.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ClosestPointTo(devDept.Geometry.Point3D,System.Double@,System.Double@)">
      <summary>
            Finds the closest point on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="u">The U parametric coordinate of the closest point on surface to P</param>
      <param name="v">The V parametric coordinate of the closest point on surface to P</param>
      <remarks>It also checks the trimloops, so that the result is always on the surface.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ClosestPointTo(devDept.Geometry.Point3D,devDept.Geometry.Point3D@)">
      <summary>
            Computes the signed distance between a 3D point and this surface object.
            </summary>
      <param name="P">The 3D point</param>
      <param name="closest">The closest 3D point to P</param>
      <returns>The signed distance with this surface object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,devDept.Geometry.Point2D@)">
      <summary>
            Projects a point on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="proj">The parametric position of the projection on surface to P</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,devDept.Geometry.Point2D@)">
      <summary>
            Projects a point on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="allowOutside">When true, the projection is not constrained inside the surface domain</param>
      <param name="proj">The parametric coordinates of projection on surface to P</param>
      <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,devDept.Geometry.Point2D@,devDept.Geometry.Vector2D@)">
      <summary>
            Projects a point on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="allowOutside">When true, the projection is not constrained inside the surface domain</param>
      <param name="proj">The parametric coordinates of projection on surface to P</param>
      <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="W">The 2D tangent vector in parametric space</param>
      <returns>True when the projection is perpendicular to the surface, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,devDept.Geometry.Point2D,devDept.Geometry.Point2D@)">
      <summary>
            Projects a point on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="proj">The parametric coordinates of the projection on surface to P</param>
      <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="allowOutside">When true, the projection is not constrained inside the surface domain</param>
      <param name="prev">The parametric coordinates of a previous succesful point projection</param>
      <returns>True when the projection is perpendicular to the surface, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
            Projects a point on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="u">The U parametric coordinate of the projection on surface to P</param>
      <param name="v">The V parametric coordinate of the projection on surface to P</param>
      <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="allowOutside">When true, the projection is not constrained inside the surface domain</param>
      <param name="prevU">The U parametric coordinate of a previous succesful point projection</param>
      <param name="prevV">The V parametric coordinate of a previous succesful point projection</param>
      <returns>True when the projection is perpendicular to the surface, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,devDept.Geometry.Point2D,devDept.Geometry.Point2D@,devDept.Geometry.Vector2D@)">
      <summary>
            Projects a point on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="proj">The parametric coordinates of the projection on surface to P</param>
      <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="allowOutside">When true, the projection is not constrained inside the surface domain</param>
      <param name="prev">The parametric coordinates of a previous succesful point projection</param>
      <param name="W">The 2D tangent vector in parametric space</param>
      <returns>True when the projection is perpendicular to the surface, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,System.Double,System.Double,System.Double@,System.Double@,devDept.Geometry.Vector2D@)">
      <summary>
            Projects a point on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="u">The U parametric coordinate of the projection on surface to P</param>
      <param name="v">The V parametric coordinate of the projection on surface to P</param>
      <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="allowOutside">When true, the projection is not constrained inside the surface domain</param>
      <param name="prevU">The U parametric coordinate of a previous successful point projection</param>
      <param name="prevV">The V parametric coordinate of a previous successful point projection</param>
      <param name="W">The 2D tangent vector in parametric space</param>
      <returns>True when the projection is perpendicular to the surface, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double@,System.Double@)">
      <summary>
            Projects a point on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="u">The U parametric coordinate of the projection on surface to P</param>
      <param name="v">The V parametric coordinate of the projection on surface to P</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,devDept.Geometry.Point2D@)">
      <summary>
            Projects a point on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="proj">The parametric coordinates of the projection on surface to P</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,System.Double@,System.Double@)">
      <summary>
            Projects a point on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="allowOutside">When true, the projection is not constrained inside the surface domain</param>
      <param name="u">The U parametric coordinate of the projection on surface to P</param>
      <param name="v">The V parametric coordinate of the projection on surface to P</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.PointInversion(devDept.Geometry.Point3D,System.Double,System.Double@,System.Double@)">
      <summary>
            Projects a point on the surface. The point must already lay on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="u">The U parametric coordinate of the projection on surface to P</param>
      <param name="v">The V parametric coordinate of the projection on surface to P</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Project(devDept.Geometry.Point3D,System.Double,System.Boolean,System.Double@,System.Double@,devDept.Geometry.Vector2D@)">
      <summary>
            Projects a point on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="allowOutside">When true, the projection is not constrained inside the surace domain</param>
      <param name="u">The U parametric coordinate of the projection on surface to P</param>
      <param name="v">The V parametric coordinate of the projection on surface to P</param>
      <param name="W">The 2D tangent vector in parametric space</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.PointInversion(devDept.Geometry.Point3D,System.Double,devDept.Geometry.Point2D@,devDept.Geometry.Vector2D@)">
      <summary>
            Projects a point on the surface. The point must already lay on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="proj">The parametric coordinates of the projection on surface to P</param>
      <param name="W">The 2D tangent vector in parametric space</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.PointInversion(devDept.Geometry.Point3D,System.Double,devDept.Geometry.Point2D@)">
      <summary>
            Projects a point on the surface. The point must already lay on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="proj">The parametric coordinates of the projection on surface to P</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.PointInversion(devDept.Geometry.Point3D,System.Double,System.Double@,System.Double@,devDept.Geometry.Vector2D@)">
      <summary>
            Projects a point on the surface. The point must already lay on the surface.
            </summary>
      <param name="P">The 3D point to project</param>
      <param name="coincTol">Relevant only when P lays on the surface. When the distance between P and its projection is smaller then this value, the projection is considered succesful.</param>
      <param name="u">The U parametric coordinate of the projection on surface to P</param>
      <param name="v">The V parametric coordinate of the projection on surface to P</param>
      <param name="W">The 2D tangent vector in parametric space</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.DomainU">
      <summary>
            Gets surface domain in U parametric direction.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.DomainV">
      <summary>
            Gets surface domain in V parametric direction.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.Trimming">
      <summary>
            Gets or sets the surface's trimming gRegion.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.IsClosedU">
      <summary>
            Returns true if the surface is closed in the U direction.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.IsClosedV">
      <summary>
            Returns true if the surface is closed in the V direction.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.IsRational">
      <summary>
            Returns true if the surface is rational.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.KnotVectorU">
      <summary>
            Gets or sets the surface knot vector in the U parametric direction.
            </summary>
      <remarks>Not validated in setter. Use constructor if you are unsure of the correctness of your data.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Surface.IsValid" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.KnotVectorV">
      <summary>
            Gets or sets the surface knot vector in the V parametric direction.
            </summary>
      <remarks>Not validated in setter. Use constructor if you are unsure of the correctness of your data.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Surface.IsValid" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.Triangles">
      <summary>
            Gets tessellation triangles array.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.DegreeU">
      <summary>
            Gets surface degree in the U direction.
            </summary>
      <remarks>Not validated in setter. Use constructor if you are unsure of the correctness of your data.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Surface.IsValid" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.DegreeV">
      <summary>
            Gets surface degree in the V direction.
            </summary>
      <remarks>Not validated in setter. Use constructor if you are unsure of the correctness of your data.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Surface.IsValid" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.ControlPoints">
      <summary>
            Gets the surface control points array.
            </summary>
      <remarks>Not validated in setter. Use constructor if you are unsure of the correctness of your data.</remarks>
      <seealso cref="M:devDept.Eyeshot.Entities.Surface.IsValid" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.IsTrimmed">
      <summary>
            Returns true if the surface is trimmed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.SeamU">
      <summary>
            Gets surface seam U, if exists.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.SeamV">
      <summary>
            Gets surface seam V, if exists.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.TextureScaleU">
      <summary>
            Gets or set surface texture mapping scale in U direction.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.TextureScaleV">
      <summary>
            Gets or set surface texture mapping scale in V direction.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.TextureOffsetU">
      <summary>
            Gets or set surface texture mapping offset in U direction.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.TextureOffsetV">
      <summary>
            Gets or set surface texture mapping offset in V direction.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.#ctor(devDept.Geometry.Entities.GSurface)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Surface.ConvexHull">
      <summary>
            The convex hull of the surface.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.#ctor(System.Int32,System.Double[],System.Int32,System.Double[],devDept.Geometry.Point4D[0:,0:])">
      <summary>
            Standard constructor.
            </summary>
      <param name="uDegree">Degree in the Primitive.KnotVectorU parametric direction</param>
      <param name="uKnotVector">Knot vector in the Primitive.KnotVectorU parametric direction</param>
      <param name="vDegree">Degree in the Primitive.KnotVectorV parametric direction</param>
      <param name="vKnotVector">Knot vector in the Primitive.KnotVectorV parametric direction</param>
      <param name="ctrlPoints">Control points grid</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Clone">
      <summary>
            Creates a deep copy of this surface.
            </summary>
      <returns>The new surface object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Resizes a surface.
            </summary>
      <remarks>The old values are lost and new ones have to be created.</remarks>
      <param name="n">The new number of control points in the U direction</param>
      <param name="m">The new number of control points in the V direction</param>
      <param name="degU">The degree of the surface in the U direction</param>
      <param name="degV">The degree of the surface in the V direction</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ResizeKeep(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Resizes a surface, keeping original values.
            </summary>
      <param name="n">The new number of control points in the U direction</param>
      <param name="m">The new number of control points in the V direction</param>
      <param name="degU">The degree of the surface in the U direction</param>
      <param name="degV">The degree of the surface in the V direction</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.IsocurveU(System.Double)">
      <summary>
            Generates an iso curve in the U parametric direction.
            </summary>
      <param name="v">The V parametric value</param>
      <returns>The iso-parametric curve</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.IsocurveV(System.Double)">
      <summary>
            Generates an iso curve in the V parametric direction.
            </summary>
      <param name="u">The U parametric value</param>
      <returns>The iso-parametric curve</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.SplitAtU(System.Double,devDept.Eyeshot.Entities.Surface@,devDept.Eyeshot.Entities.Surface@)">
      <summary>
            Splits the surface along U.
            </summary>
      <param name="u">The U parametric value</param>
      <param name="sl">The lower surface</param>
      <param name="su">The upper surface</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.SplitAtV(System.Double,devDept.Eyeshot.Entities.Surface@,devDept.Eyeshot.Entities.Surface@)">
      <summary>
            Splits the surface along V.
            </summary>
      <param name="v">The V parametric value</param>
      <param name="sl">The lower surface</param>
      <param name="su">The upper surface</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.SplitByU(devDept.Geometry.Point3D,devDept.Eyeshot.Entities.Surface@,devDept.Eyeshot.Entities.Surface@)">
      <summary>
            Splits the surface along U.
            </summary>
      <param name="pt">The point used to get the U parametric value</param>
      <param name="sl">The lower surface</param>
      <param name="su">The upper surface</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.SplitByV(devDept.Geometry.Point3D,devDept.Eyeshot.Entities.Surface@,devDept.Eyeshot.Entities.Surface@)">
      <summary>
            Splits the surface along V.
            </summary>
      <param name="pt">The point used to get the V parametric value</param>
      <param name="sl">The lower surface</param>
      <param name="su">The upper surface</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Shrink(System.Double)">
      <summary>
            Shrinks the underlying untrimmed surface in order to make it as small as possible.
            </summary>
      <param name="margin">A margin expressed as the percentage of the surface domain width/height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Untrim">
      <summary>
            Clears all trimming loops.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ReverseU">
      <summary>
            Reverses the surface U direction.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.ReverseV">
      <summary>
            Reverses the surface V direction.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.SwapUV">
      <summary>
            Swaps the U and V directions of the surface.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.IsPlanar(System.Double,devDept.Geometry.Plane@)">
      <summary>
            Checks if the surface is planar.
            </summary>
      <param name="tol">The tolerance</param>
      <param name="plane">The surface plane</param>
      <returns>True if the surface is planar within tolerance, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.FindClosestTriangle(devDept.Geometry.Transformation,devDept.Geometry.Segment3D)">
      <summary>
            Returns a list of triangles hit by the provided segment.
            </summary>
      <param name="transf">The transformation applied to the entity (necessary if the entity is inside a Block to propagate the BlockReference transformation)</param>
      <param name="seg">The 3D segment representing the viewing direction</param>
      <returns>The sorted list of triangles intersecting the provided segment.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.GetGeneric">
      <summary>
            Returns the generic representation of this surface, it can be useful in data translation. 
            </summary>
      <returns>The new surface</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.AdjustTrimLoopsGenericAndRevolved(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface)">
      <summary>
            Transforms the trimLoops when converting a surface from Nurbs to angular parametrization and back.
            </summary>
      <param name="source">The original surface (Nurbs or Revolved)</param>
      <param name="dest">The destination surface (Revolved or Nurbs), whose trimLoops will be transformed.</param>
      <remarks>This method is useful when reading in Eyeshot 11 or higher a RevolvedSurface stored in your proprietary format before Eyeshot 11.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Surface.curvatureType">
      <summary>
            Surface curvature type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Surface.curvatureType.Gauss">
      <summary>
            Gauss curvature
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Surface.curvatureType.Mean">
      <summary>
            Mean curvature
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Surface.curvatureType.Kappa1">
      <summary>
            Maximum principal curvature
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Surface.curvatureType.Kappa2">
      <summary>
            Minimum principal curvature
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Blend(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Int32,System.Int32,System.Double,System.Boolean,System.Boolean)">
      <summary>
            Creates a blend surface between two surfaces.
            </summary>
      <param name="F">First surface</param>
      <param name="G">Second surface</param>
      <param name="edgeIndexF">Index of the edge on F</param>
      <param name="edgeIndexG">Index of the edge on G</param>
      <param name="tol">Tolerance</param>
      <param name="flipEdgeF">If true, the edge of the blending surface has opposite direction of the edge of F</param>
      <param name="flipEdgeG">If true, the edge of the blending surface has opposite direction of the edge of G</param>
      <returns>The blend surface.</returns>
      <remarks>It only works for edges of the outer contour of the surfaces.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.#ctor(devDept.Serialization.SurfaceSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.SurfaceSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.SurfaceSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.GetPerimeter">
      <summary>
            Computes the sum of the lengths of all the surface's edges.
            </summary>
      <returns>The perimeter amount.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Eyeshot.Entities.ICurve,System.Boolean)">
      <summary>
            Trims the surface using an open or closed contour.
            </summary>
      <param name="contour">The 3D geometric contour</param>
      <param name="clockwise">If true, the contour orientation in 2D parametric domain will be clockwise (hole).</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean)">
      <summary>
            Trim the surface using the limit surface provided.
            </summary>
      <param name="G">Limit surface</param>
      <param name="tol">The tolerance</param>
      <param name="flipSide">Reverse flag</param>
      <returns>The failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Trim the surface using the limit surface provided.
            </summary>
      <param name="G">Limit surface</param>
      <param name="tol">The tolerance</param>
      <param name="flipSide">Reverse flag</param>
      <param name="leftOvers">Trim operation left over list</param>
      <returns>The failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Boolean)">
      <summary>
            Trims the surface using the limit surface group provided.
            </summary>
      <param name="listG">Limit surface group</param>
      <param name="tol">The tolerance</param>
      <param name="flipSide">Reverse flag</param>
      <returns>The failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Trims the surface using the limit surface group provided.
            </summary>
      <param name="listG">Limit surface group</param>
      <param name="tol">The tolerance</param>
      <param name="flipSide">Reverse flag</param>
      <param name="leftOvers">Trim operation left over list</param>
      <returns>The failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Trim(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},devDept.Geometry.Plane,System.Double,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Trims a surface group using the limit plane provided. Always removes the splits on the positive side of the plane.
            </summary>
      <param name="listF">The surface group</param>
      <param name="pln">The limit plane</param>
      <param name="tol">The tolerance</param>
      <param name="flipSideF">Reverse flag array for the surface group</param>
      <param name="leftOversF">Trim operation left over list</param>
      <returns>The failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Geometry.Plane,System.Double,System.Boolean)">
      <summary>
            Trims the surface using the limit plane provided.
            </summary>
      <param name="pln">The limit plane</param>
      <param name="tol">The tolerance</param>
      <param name="flipSide">Reverse flag</param>
      <returns>The failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Geometry.Plane,System.Double,System.Boolean,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Trims the surface using the limit plane provided.
            </summary>
      <param name="pln">The limit plane</param>
      <param name="tol">The tolerance</param>
      <param name="flipSide">Reverse flag</param>
      <param name="leftOvers">Trim operation leftovers list</param>
      <returns>The failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Geometry.Plane,System.Double)">
      <summary>
            Trims the surface using the limit plane provided. Always removes the surface on the positive side of the plane.
            </summary>
      <param name="pln">The limit plane</param>
      <param name="tol">The tolerance</param>
      <returns>The failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Trim(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Boolean,System.Boolean)">
      <summary>
            Trims a surface group against the other.
            </summary>
      <param name="listF">First surface group</param>
      <param name="listG">Second surface group</param>
      <param name="tol">The tolerance</param>
      <param name="flipSideF">Reverse flag for the first surface group</param>
      <param name="flipSideG">Reverse flag for the second surface group</param>
      <returns>The intersection failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Trim(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},System.Double,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Trims a surface group against the other.
            </summary>
      <param name="listF">First surface group</param>
      <param name="listG">Second surface group</param>
      <param name="tol">The tolerance</param>
      <param name="flipSideF">Reverse flag for the first surface group</param>
      <param name="flipSideG">Reverse flag for the second surface group</param>
      <param name="leftOversF">Trim operation left over list</param>
      <param name="leftOversG">Trim operation left over list</param>
      <returns>The intersection failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Trim(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean,System.Boolean)">
      <summary>
            Trims a surface against the other.
            </summary>
      <param name="F">First surface</param>
      <param name="G">Second surface</param>
      <param name="tol">The tolerance</param>
      <param name="flipSideF">Reverse flag for the first surface</param>
      <param name="flipSideG">Reverse flag for the second surface</param>
      <returns>The failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Trim(devDept.Eyeshot.Entities.Surface,devDept.Eyeshot.Entities.Surface,System.Double,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Trims a surface against the other.
            </summary>
      <param name="F">First surface</param>
      <param name="G">Second surface</param>
      <param name="tol">The tolerance</param>
      <param name="flipSideF">Reverse flag for the first surface</param>
      <param name="flipSideG">Reverse flag for the second surface</param>
      <param name="leftOversF">
      </param>
      <param name="leftOversG">
      </param>
      <returns>The failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Trim(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},devDept.Geometry.Plane,System.Double,System.Boolean)">
      <summary>
            Trims a surface group by a plane.
            </summary>
      <param name="listF">The surface group</param>
      <param name="pln">The plane</param>
      <param name="tol">The tolerance</param>
      <param name="flipSideF">Reverse flag array for the first surface group</param>
      <returns>The intersection failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.SplitBy(devDept.Geometry.Plane,System.Double,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Splits the surface by a plane.
            </summary>
      <param name="pln">The plane</param>
      <param name="tol">The tolerance</param>
      <param name="splitsF">The resulting F surface splits</param>
      <param name="splitsG">The resulting G surface splits</param>
      <returns>The intersection failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.TrimBy(devDept.Geometry.Plane,System.Double,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Trims the surface using the limit plane provided. Always removes the surface on the positive side of the plane.
            </summary>
      <param name="pln">The limit plane</param>
      <param name="tol">The tolerance</param>
      <param name="leftOvers">Trim operation left over list</param>
      <returns>The failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.SplitBy(devDept.Eyeshot.Entities.Surface,System.Double,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Splits the surface by a surface.
            </summary>
      <param name="G">The surface</param>
      <param name="tol">The tolerance</param>
      <param name="splitF">F surface split list</param>
      <param name="splitG">G surface split list </param>
      <returns>The intersection failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Split(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},devDept.Eyeshot.Entities.Surface,System.Double,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Splits a surface group by a surface.
            </summary>
      <param name="listF">The surface group</param>
      <param name="G">The surface</param>
      <param name="tol">The tolerance</param>
      <param name="splitF">F surface split list</param>
      <param name="splitG">G surface split list</param>
      <returns>The intersection failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.Split(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},devDept.Geometry.Plane,System.Double,devDept.Eyeshot.Entities.Surface[]@,devDept.Eyeshot.Entities.Surface[]@)">
      <summary>
            Splits a surface group by a plane.
            </summary>
      <param name="listF">The surface group</param>
      <param name="pln">The plane</param>
      <param name="tol">The tolerance</param>
      <param name="splitF">F surface split list</param>
      <param name="splitG">G surface split list</param>
      <returns>The intersection failure type.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Surface.SplitBy(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.Surface@,devDept.Eyeshot.Entities.Surface@)">
      <summary>
            Splits the surface using an open or closed contour.
            </summary>
      <param name="contour">The 3D geometric contour</param>
      <param name="split1">The first split</param>
      <param name="split2">The second split</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.MultilineText">
      <summary>
            Multiline Text entity.
            </summary>
      <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.StyleName" /> property and calling the Workspace.Entities.Regen() method.</remarks>
      <remarks>Use <see cref="P:System.Environment.NewLine" /> to mark a new line in the text string.</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Text.StyleName" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(System.Double,System.Double,System.String,System.Double,System.Double,System.Double)">
      <summary>Standard constructor.</summary>
      <param name="x">Position along X axis</param>
      <param name="y">Position along Y axis</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double)">
      <summary>Standard constructor.</summary>
      <param name="x">Position along X axis</param>
      <param name="y">Position along Y axis</param>
      <param name="z">Elevation</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
      <summary>Standard constructor.</summary>
      <param name="x">Position along X axis</param>
      <param name="y">Position along Y axis</param>
      <param name="z">Elevation</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
      <summary>Standard constructor.</summary>
      <param name="x">Position along X axis</param>
      <param name="y">Position along Y axis</param>
      <param name="z">Elevation</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="x">Position along X axis</param>
      <param name="y">Position along Y axis</param>
      <param name="z">Elevation</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
      <param name="simplify">Text simplification flag</param>
      <param name="wrap">The text wrap</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double)">
      <summary>Standard constructor.</summary>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
      <summary>Standard constructor.</summary>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
      <summary>Standard constructor.</summary>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
      <param name="simplify">Text simplification flag</param>
      <param name="wrap">The text wrap</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,System.String,System.Double,System.Double,System.Double)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean,System.Boolean)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="textString">Text string</param>
      <param name="width">Text width</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
      <param name="simplify">Text simplification flag</param>
      <param name="wrap">The text wrap</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean,System.Boolean)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
      <param name="simplify">Text simplification flag</param>
      <param name="wrap">The text wrap</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
      <summary>Sketch plane constructor.</summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
      <summary>Sketch plane constructor.</summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean,System.Boolean)">
      <summary>Sketch plane constructor.</summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="width">Text width. A string longer than "width" will be split on two or more lines (whole words are not split).</param>
      <param name="height">Text height</param>
      <param name="lineSpaceDistance">Spacing between the lines</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
      <param name="simplify">Text simplification flag</param>
      <param name="wrap">The text wrap</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.MultilineText.Wrap">
      <summary>
            When true, the line of text is split (if it contain spaces) into more lines so that their lengths are less than <see cref="P:devDept.Eyeshot.Entities.MultilineText.RectWidth" />. When false, the line is truncated if it goes beyond the <see cref="P:devDept.Eyeshot.Entities.MultilineText.RectWidth" />.
            </summary>
      <remarks>If the value is true and there are no spaces before the <see cref="P:devDept.Eyeshot.Entities.MultilineText.RectWidth" /> of the text, the split is done at the first available space.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.MultilineText.LineSpaceDistance">
      <summary>
            Gets or sets the spacing between lines.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.MultilineText.RectWidth">
      <summary>
            Gets or sets the width of the multiline text.
            </summary>
      <remarks>The text rows are split so that its words stay inside the specified width.</remarks>
            /// <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks></member>
    <member name="P:devDept.Eyeshot.Entities.MultilineText.Width">
      <summary>
            Gets or sets the width of the multiline text.
            </summary>
      <remarks>The text rows are split so that its words stay inside the specified width.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.MultilineText.RectHeight">
      <summary>
            Gets or sets the height of the multiline text.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.MultilineText.WidthFactor">
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when you try to set the <see cref="P:devDept.Eyeshot.Entities.MultilineText.WidthFactor" /> property. Use the <see cref="P:devDept.Eyeshot.Entities.MultilineText.WidthFactors" /> instead.</exception>
    </member>
    <member name="P:devDept.Eyeshot.Entities.MultilineText.WidthFactors">
      <summary>
            Gets or sets the width factor for each line of text.
            </summary>
      <remarks>If null or -1, the value is inherited from the <see cref="P:devDept.Eyeshot.TextStyle.WidthFactor" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.MultilineText.Alignment">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.Entities.MultilineText.InsertionPoint">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Entities.MultilineText.ConvertToMesh(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Converts the text to a list of meshes.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /></param>
      <returns>The list of meshes.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.MultilineText.Contents">
      <summary>
            Gets or sets the original string of the multiline text read from the dwg.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.OrdinateDim">
      <summary>
            Ordinate dimension entity.    
            <para>The ordinate dimension consists of an X or Y value with a leader line.</para><para>It measures the perpendicular distance from an origin point (called the datum) to a defining point (such as a hole in a part).</para><para>X-datum ordinate dimensions measure the distance of the defining point from the datum along the X axis.</para><para>Y-datum ordinate dimensions measure the distance of the defining point from the datum along the Y axis.</para><para>If the dimension is vertical it measures the X value. Otherwise, it measures the Y value.</para></summary>
      <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.StyleName" /> property and calling the Workspace.Entities.Regen() method.</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Text.StyleName" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.OrdinateDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Boolean,System.Double)">
      <summary>Standard constructor.</summary>
      <param name="dimPlane">The dimension plane. Its origin is used to measure the distance from the defining point.</param>
      <param name="definingPoint">The defining point</param>
      <param name="dimLinePos">Dimension line position.</param>
      <param name="isVertical">The type of the ordinate dimension (horizontal or vertical). If true, the x-coordinate is measured, otherwise the y-coordinate is measured.</param>
      <param name="textHeight">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.OrdinateDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Boolean,System.Double)">
      <summary>Sketch plane constructor.</summary>
      <param name="sketchPlane">The sketch plane</param>
      <param name="definingPoint">
      </param>
      <param name="dimLinePos">Dimension line position.</param>
      <param name="isVertical">The type of the ordinate dimension (horizontal or vertical). If true, the x-coordinate is measured, otherwise the y-coordinate is measured.</param>
      <param name="textHeight">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.OrdinateDim.Clone">
      <summary>
            Creates a deep copy of this ordinate dimension.
            </summary>
      <returns>The new ordinate dimension object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.OrdinateDim.IsVertical">
      <summary>
            Indicates if the ordinate dimension is vertical (when true) or horizontal (when false).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.OrdinateDim.Origin">
      <summary>
            Get the origin point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.OrdinateDim.DefiningPoint">
      <summary>
            Gets or sets the defining point.
            </summary>
      <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.OrdinateDim.LeaderEndPoint">
      <summary>
            Gets the leader end point.
            </summary>
      <remarks>You need to call the Viewport.Entities.Regen() to see the updated value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.OrdinateDim.ExtLineOffset">
      <summary>
            Specifies the offset of extension lines from the origin points.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.OrdinateDim.Preview(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double,devDept.Geometry.Point3D@)">
      <summary>
            Gets the segments for the drawing preview
            </summary>
      <param name="dimPlane">The dimension plane. Its origin is used to measure the distance from the defining point.</param>
      <param name="definingPoint">The defining point.</param>
      <param name="dimLinePos">The dimension line position.</param>
      <param name="isVertical">The type of the ordinate dimension (horizontal or vertical). If true, the x-coordinate is measured, otherwise the y-coordinate is measured.</param>
      <param name="textWidth">The text width.</param>
      <param name="textHeight">The text height.</param>
      <param name="textGap">The text gap.</param>
      <param name="hookLen">The lenght of the hook line. (It is the <see cref="P:devDept.Eyeshot.Entities.Dimension.ArrowheadSize" />).</param>
      <param name="offsetFromDefiningPoint">The offset from the defining point. (It is the <see cref="P:devDept.Eyeshot.Entities.OrdinateDim.ExtLineOffset" />).</param>
      <param name="leaderEndPoint">The leader end point.</param>
      <returns>The array of segments for preview.</returns>
      <remarks>
        <para>segments[0] starts from the leader end point.</para>
        <para>segments[1] is the hook line.</para>
        <para>segments[2] ends with the defining point.</para>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.OrdinateDim.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.OrdinateDim.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Leader">
      <summary>
            Leader entity (sequence of segments with an arrowhead).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Leader.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D[])">
      <summary>Standard constructor.</summary>
      <param name="pln">The plane</param>
      <param name="points">The point list</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Leader.#ctor(devDept.Geometry.Plane,System.Collections.Generic.ICollection{devDept.Geometry.Point3D})">
      <summary>Standard constructor.</summary>
      <param name="pln">The plane</param>
      <param name="points">The point array</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Leader.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D[],System.Boolean,System.Boolean,devDept.Eyeshot.Entities.arrowheadType,System.Double,System.Double)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Leader.Vertices">
      <summary>
            Gets or sets entity's 3D vertices.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Leader.Clone">
      <summary>
            Creates a deep copy of this linear dimension.
            </summary>
      <returns>The new linear dimension object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Leader.ArrowheadSize">
      <summary>
            Gets or sets the size of the arrow head.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Leader.ShowArrowHead">
      <summary>
            When true shows the arrow head.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Leader.Scale">
      <summary>
            Gets or sets the scale factor for the arrow head.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Leader.Arrowhead">
      <summary>
            Gets or sets the arrow head type.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Leader.FirstPoint">
      <summary>
            Gets the first line point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Leader.LastPoint">
      <summary>
            Gets the last line point.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Leader.Preview(devDept.Geometry.Plane,devDept.Geometry.Point3D[])">
      <summary>
            Gets the segments for the drawing preview
            </summary>
      <param name="pln">The plane.</param>
      <param name="points">The point array</param>
      <returns>The array of segments for preview.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Leader.GetArrowHeadTransformation(devDept.Eyeshot.Entities.arrowheadType,System.Double)">
      <summary>
            Gets the transformation to apply to the arrowhead.
            </summary>
      <param name="arrowhead">
      </param>
      <param name="myDistance">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Leader.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Leader.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.DiametricDim">
      <summary>
            Diametric dimension entity.
            </summary>
      <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.StyleName" /> property and calling the Workspace.Entities.Regen() method.</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Text.StyleName" />
      <seealso cref="T:devDept.Eyeshot.Entities.LinearDim" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.DiametricDim.TrimLeader">
      <summary>
            Always false. (For <see cref="T:devDept.Eyeshot.Entities.RadialDim" /> only).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.DiametricDim.LeftArrowhead">
      <summary>
            Gets or sets the left arrow head type.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.DiametricDim.RightArrowhead">
      <summary>
            Gets or sets the right arrow head type.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.DiametricDim.#ctor(devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D,System.Double)">
      <summary>Standard constructor.</summary>
      <param name="circle">The <see cref="T:devDept.Eyeshot.Entities.Circle" /> or <see cref="T:devDept.Eyeshot.Entities.Arc" /> entity to be dimensioned</param>
      <param name="dimLinePos">Dimension line position</param>
      <param name="textHeight">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.DiametricDim.#ctor(devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point2D,System.Double)">
      <summary>Sketch plane constructor.</summary>
      <param name="circle">The <see cref="T:devDept.Eyeshot.Entities.Circle" /> or <see cref="T:devDept.Eyeshot.Entities.Arc" /> entity to be dimensioned</param>
      <param name="dimLinePos">Dimension line position</param>
      <param name="textHeight">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.DiametricDim.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.DiametricDim.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.DiametricDim.Clone">
      <summary>
            Creates a deep copy of this diametric dimension.
            </summary>
      <returns>The new diametric dimension object.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.linearDimensionUnitsType">
      <summary>    
            Units for the linear dimension types.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.linearDimensionUnitsType.Scientific">
      <summary>
            Scientific
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.linearDimensionUnitsType.Decimal">
      <summary>
            Decimal
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.linearDimensionUnitsType.Engineering">
      <summary>
            Engineering
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.linearDimensionUnitsType.Architectural">
      <summary>
            Architectural (always displayed not stacked) 
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.linearDimensionUnitsType.Fractional">
      <summary>
            Fractional (always displayed not stacked)
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.linearDimensionUnitsType.WindowsDesktop">
      <summary>
            Decimal format using Control Panel settings for decimal separator and number grouping symbols
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Dimension">
      <summary>
            Radial dimension entity.
            </summary>
      <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.StyleName" /> property and calling the Workspace.Entities.Regen() method.</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Text.StyleName" />
      <seealso cref="T:devDept.Eyeshot.Entities.LinearDim" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.TextColor">
      <summary>
            Gets or sets the dimension's text color.
            </summary>
      <remarks>AutoCAD property: DIMCLRT</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Dimension.TextColorMethod" />
      <seealso cref="!:Workspace.DisplayMode" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.TextColorMethod">
      <summary>
            Gets or sets the dimension's text color source.
            </summary>
      <seealso cref="!:ColorMethod" />
      <seealso cref="!:Workspace.DisplayMode" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.DimStyle">
      <summary>
            Gets or sets the dimension style name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.TextGap">
      <summary>
            Gets or sets the gap (in world units) between the dimension line and the text.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.ArrowheadSize">
      <summary>
            Gets or sets the size of the arrow head.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.LinearScale">
      <summary>
            Gets or sets the global scale factor for linear dimensions.
            </summary>
      <remarks>It has no effect on <see cref="T:devDept.Eyeshot.Entities.AngularDim" /></remarks>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.ToleranceMode">
      <summary>
            Gets or sets the tolerance mode.
            </summary>
      <remarks>AutoCAD property: DIMTOL/DIMLIM</remarks>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.UpperValue">
      <summary>
            Gets or sets the upper tolerance value.
            </summary>
      <remarks>AutoCAD property: DIMTP</remarks>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.LowerValue">
      <summary>
            Gets or sets the lower tolerance value.
            </summary>
      <remarks>AutoCAD property: DIMTM</remarks>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.ScalingForHeight">
      <summary>
            Gets or sets current height for the tolerance text. The ratio of the tolerance height to the main dimension text height.
            </summary>
      <remarks>AutoCAD property: DIMTFAC</remarks>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.ToleranceSuppressLeadingZeros">
      <summary>
            Hides or shows tolerance leading zeros.
            </summary>
      <remarks>AutoCAD property: DIMTZIN</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.ToleranceSuppressTralingZeros">
      <summary>
            Hides or shows tolerance trailing zeros.
            </summary>
      <remarks>AutoCAD property: DIMTZIN</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.TolerancePrecision">
      <summary>
            Gets or sets the tolerance precision for primary units dimension.
            </summary>
      <remarks>AutoCAD property: DIMTDEC</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.ScaleOverall">
      <summary>
            Gets or sets the global scale factor for the dimension.
            </summary>
      <remarks>
            AutoCAD property: DIMSCALE
            Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Dimension.PrepareText(System.String,devDept.Eyeshot.RegenParams,System.Double@,System.Double@,System.Double@,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Prepare 5 text ( prefix, dimText, upperValue, lowerValue, suffix) that compose the whole dimension text
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Dimension.InitVerticesOnPlane(System.Int32@)">
      <summary>
            Initializes the vertices array length according to text variants
            </summary>
      <param name="verticesLength">Initial array length without considering prefix, suffix and tolerance texts</param>
      <returns>The dimensioned array</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Dimension.DimSetup">
      <summary>
            Updates dimension distance and reference points, sets the <see cref="P:devDept.Eyeshot.Entities.Entity.RegenMode" /> as <see cref="F:devDept.Eyeshot.Entities.regenType.RegenAndCompile" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.DimLinePosition">
      <summary>
            Gets or sets the dimension line position. Affects text position when the text cannot fit between extension lines.
            </summary>
      <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.Distance">
      <summary>
            Gets the actual measured distance.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.TextPrefix">
      <summary>
            Gets or sets dimension text prefix.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.TextString">
      <summary>
            Gets the text.
            </summary>
      <remarks>Use the <see cref="P:devDept.Eyeshot.Entities.Dimension.TextOverride" /> to set the text.</remarks>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when you try to set the <see cref="P:devDept.Eyeshot.Entities.Dimension.TextString" /> property. Set the <see cref="P:devDept.Eyeshot.Entities.Dimension.TextOverride" /> instead.</exception>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.TextOverride">
      <summary>
            Gets or sets dimension text override. The angle brackets &lt; &gt; represent the
            dimension value. You can type additional text before or after the angle brackets, or
            you can eliminate the angle brackets.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.TextSuffix">
      <summary>
            Gets or sets dimension text suffix.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.LinearDimensionUnits">
      <summary>
            Gets or sets the units format for linear dimension.
            </summary>
      <remarks>AutoCAD property: DIMLUNIT</remarks>
      <remarks>Not supported in <see cref="T:devDept.Eyeshot.Entities.AngularDim" /></remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.Precision">
      <summary>
            Gets or sets the precision for primary units dimension.
            </summary>
      <remarks>AutoCAD property: DIMDEC</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.SuppressLeadingZeros">
      <summary>
            Hides or shows the leading zeros.
            </summary>
      <remarks>AutoCAD property: DIMZIN</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.SuppressTrailingZeros">
      <summary>
            Hides or shows the trailing zeros.
            </summary>
      <remarks>AutoCAD property: DIMZIN</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Dimension.UpdateDistance">
      <summary>
            Updates dimension distance.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Dimension.GetScaledDistance">
      <summary>
            Gets the scaled distance.
            </summary>
      <returns>The scaled distance</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Dimension.ToleranceAlignment">
      <summary>
            Gets or sets if dimension tolerance must be aligned by decimal point.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Dimension.GetTextRectangleVertices">
      <summary>
            Gets the array of vertices related to dimension's texts.
            </summary>
      <returns>Multiple of 4 vertices representing the rectangles that circumscribe every text line.</returns>
      <remarks>This method is used for HiddenLine printing.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Dimension.ConvertToMesh(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Returns an array of Mesh object representing the dimension text and arrows.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Design" /> control</param>
      <returns>An array of Mesh objects.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Dimension.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Dimension.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Dimension.NeedsToBeFlipped(System.Double)">
      <summary>
            Returns true if the angle is between 90 and 270 degrees.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.LinearDim">
      <summary>
            Linear dimension entity. Dimension line <b>is always oriented</b> as the plane X axis.
            </summary>
      <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.StyleName" /> property and calling the Workspace.Entities.Regen() method.</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Text.StyleName" />
      <seealso cref="T:devDept.Eyeshot.Entities.RadialDim" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.LinearDim.ExtLineExt">
      <summary>
            Specifies the amount to extend the extension line beyond the dimension line.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.LinearDim.ExtLineOffset">
      <summary>
            Specifies the offset of extension lines from the origin points.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.LinearDim.LeftArrowhead">
      <summary>
            Gets or sets the left arrow head type.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.LinearDim.RightArrowhead">
      <summary>
            Gets or sets the right arrow head type.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)">
      <summary>Standard constructor.</summary>
      <param name="extLine1">First extension line point</param>
      <param name="extLine2">Second extension line point</param>
      <param name="dimLinePos">Dimension line position. Affects text position when the text cannot fit between extension lines.</param>
      <param name="textHeight">Text height</param>
      <param name="dimPlane">The dimension plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double)">
      <summary>Sketch plane constructor.</summary>
      <param name="extLine1">First extension line point</param>
      <param name="extLine2">Second extension line point</param>
      <param name="dimLinePos">Dimension line position. Affects text position when the text cannot fit between extension lines.</param>
      <param name="textHeight">Text height</param>
      <param name="sketchPlane">The sketch plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearDim.Clone">
      <summary>
            Creates a deep copy of this linear dimension.
            </summary>
      <returns>The new linear dimension object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.LinearDim.ExtLine1">
      <summary>
            Gets or sets the first extension line point.
            </summary>
      <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.LinearDim.ExtLine2">
      <summary>
            Gets or sets the second extension line point.
            </summary>
      <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.LinearDim.ShowExtLine1">
      <summary>
            When true shows the first extension line.
            </summary>
      <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.LinearDim.ShowExtLine2">
      <summary>
            When true shows the second extension line.
            </summary>
      <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearDim.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearDim.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.RadialDim">
      <summary>
            Radial dimension entity.
            </summary>
      <remarks>
        <para>For proper dimension text orientation on arcs, use a supporting circle
            with plane as <see cref="P:devDept.Geometry.Plane.XY" /> and radius as arc radius.</para>
        <para>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.StyleName" /> property
            and calling the <see cref="!:EntityList.Regen()" /> method.</para>
      </remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Text.StyleName" />
      <seealso cref="T:devDept.Eyeshot.Entities.LinearDim" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.RadialDim.TrimLeader">
      <summary>
            When false the line is extended till the center mark, otherwise no.
            </summary>
      <remarks>AutoCAD property: DIMTMOVE</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.RadialDim.CenterMarkSize">
      <summary>
            Gets or sets the size of the center mark.
            </summary>
      <remarks>AutoCAD property: DIMCEN</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.RadialDim.Arrowhead">
      <summary>
            Gets or sets the arrow head type.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.RadialDim.#ctor(devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D,System.Double)">
      <summary>Standard constructor.</summary>
      <param name="circle">The <see cref="T:devDept.Eyeshot.Entities.Circle" /> or <see cref="T:devDept.Eyeshot.Entities.Arc" /> entity to be dimensioned</param>
      <param name="dimLinePos">Dimension line position</param>
      <param name="textHeight">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.RadialDim.#ctor(devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point2D,System.Double)">
      <summary>Sketch plane constructor.</summary>
      <param name="circle">The <see cref="T:devDept.Eyeshot.Entities.Circle" /> or <see cref="T:devDept.Eyeshot.Entities.Arc" /> entity to be dimensioned</param>
      <param name="dimLinePos">Dimension line position</param>
      <param name="textHeight">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.RadialDim.Clone">
      <summary>
            Creates a deep copy of this radial dimension.
            </summary>
      <returns>The new radial dimension object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.RadialDim.Radius">
      <summary>
            Gets or sets the reference circle.
            </summary>
      <remarks>You need to call the Viewport.Entities.Regen() to see the effect of this command.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.RadialDim.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.RadialDim.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Arc">
      <summary>
            Arc entity.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Arc.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Entities.GArc)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Point3D,System.Double,System.Double)">
      <summary>Arc parallel to XY plane constructor.</summary>
      <param name="center">3D center point</param>
      <param name="radius">Radius</param>
      <param name="angleInRadians">Span angle in radians</param>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double)">
      <summary>Arc not parallel to XY plane constructor.</summary>
      <param name="arcPlane">Plane</param>
      <param name="center">3D center point</param>
      <param name="radius">Radius</param>
      <param name="angleInRadians">Span angle in radians</param>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
      <summary>Arc parallel to XY plane constructor.</summary>
      <param name="center">3D center point</param>
      <param name="radius">Radius</param>
      <param name="startAngleInRadians">Start angle in radians</param>
      <param name="endAngleInRadians">End angle in radians</param>
      <remarks>Angles can be negative. StartAngle must be smaller than EndAngle.</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Arc parallel to XY plane constructor.</summary>
      <param name="x">Center's X coordinate</param>
      <param name="y">Center's Y coordinate</param>
      <param name="z">Center's Z coordinate</param>
      <param name="radius">Radius</param>
      <param name="startAngleInRadians">Start angle in radians</param>
      <param name="endAngleInRadians">End angle in radians</param>
      <remarks>Angles can be negative. StartAngle must be smaller than EndAngle.</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
      <summary>Arc not parallel to XY plane constructor.</summary>
      <param name="arcPlane">Plane</param>
      <param name="center">3D center point</param>
      <param name="radius">Radius</param>
      <param name="startAngleInRadians">Start angle in radians</param>
      <param name="endAngleInRadians">End angle in radians</param>
      <remarks>Angles can be negative. StartAngle must be smaller than EndAngle.</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double,System.Double,System.Double)">
      <summary>Plane, center, radius and angles constructor.</summary>
      <param name="arcPlane">Plane</param>
      <param name="center">2D center point</param>
      <param name="radius">Radius</param>
      <param name="startAngleInRadians">Start angle in radians</param>
      <param name="endAngleInRadians">End angle in radians</param>
      <remarks>Angles can be negative. StartAngle must be smaller than EndAngle.</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>Center, start and end point constructor.</summary>
      <param name="center">3D center point</param>
      <param name="start">3D start point</param>
      <param name="end">3D end point</param>
      <remarks>Center, start point and end point must be non collinear.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
      <summary>Plane, center, start and end point constructor.</summary>
      <param name="arcPlane">Plane</param>
      <param name="center">2D center point</param>
      <param name="start">2D start point</param>
      <param name="end">2D end point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Boolean)">
      <summary>Plane, center, radius, start and end point constructor.</summary>
      <param name="arcPlane">Plane</param>
      <param name="center">3D center point</param>
      <param name="radius">Radius</param>
      <param name="start">3D start point</param>
      <param name="end">3D end point</param>
      <param name="flip">If true, the complementary arc is created.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Boolean)">
      <summary>
            Arc from three points constructor.
            </summary>
      <param name="arcPlane">Plane</param>
      <param name="first">First 2D point</param>
      <param name="second">Second 2D point</param>
      <param name="third">Third 2D point</param>
      <param name="flip">When true, the complementary arc is created.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Boolean)">
      <summary>
            Arc from three 3D points constructor.
            </summary>
      <param name="first">First 3D point</param>
      <param name="second">Second 3D point</param>
      <param name="third">Third 3D point</param>
      <param name="flip">When true, the complementary arc is created.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.Clone">
      <summary>
            Creates a deep copy of this arc.
            </summary>
      <returns>The new arc object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Arc.AngleInRadians">
      <summary>
            Gets arc's angle in radians.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Arc.AngleInDegrees">
      <summary>
            Gets arc's angle in degrees.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Arc.MidPoint">
      <summary>
            Gets the arc's middle point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Arc.Domain">
      <summary>
            Gets or sets the arc's domains in radians.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when trying to set a domain smaller than <see cref="F:devDept.Geometry.Utility.ZERO_TOLERANCE" />.</exception>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Arc.IsCircle">
      <summary>Returns true if the Arc is closed.</summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.GetNurbsFormParameterFromRadian(System.Double,System.Double@)">
      <summary>
            Converts an arc radians parameter to a Nurbs curve arc parameter.
            </summary>
      <param name="radianParam">Radians parameter (0 to 2PI)</param>
      <param name="nurbsParam">The curve arc parameter</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.GetNurbsFormParameterFromRadian(System.Double,System.Double@,devDept.Eyeshot.Entities.Curve)">
      <summary>
            Converts an arc radians parameter to a Nurbs curve arc parameter.
            </summary>
      <param name="radianParam">Radians parameter (0 to 2PI)</param>
      <param name="nurbsParam">The curve arc parameter</param>
      <param name="crv">The arc in Nurbs form</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.GetRadianFromNurbFormParameter(System.Double,System.Double@)">
      <summary>
            Converts a Nurbs curve arc parameter to an arc radian parameter.
            </summary>
      <param name="nurbParameter">The Nurbs curve arc parameter</param>
      <param name="radianParameter">The arc radian parameter </param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.GetRadianFromNurbFormParameter(System.Double,System.Double@,devDept.Eyeshot.Entities.Curve)">
      <summary>
            Converts a Nurbs curve arc parameter to an arc radian parameter.
            </summary>
      <param name="nurbParameter">The Nurbs curve arc parameter</param>
      <param name="radianParameter">The arc radian parameter </param>
      <param name="nurbsArc">The arc in Nurbs form</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Serialization.ArcSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.ArcSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.ArcSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Arc.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Bar">
      <summary>
            Bar entity. A 3D line drawn like a cylinder.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Bar.Slices">
      <summary>
            Gets or sets the number of faces of the cylinder approximation.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Bar.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Draws a line as a Cylinder.
            </summary>
      <param name="x1">StartPoint X coordinate</param>
      <param name="y1">StartPoint Y coordinate</param>
      <param name="z1">StartPoint Z coordinate</param>
      <param name="x2">End X coordinate</param>
      <param name="y2">End Y coordinate</param>
      <param name="z2">End Z coordinate</param>
      <param name="radius">Bar's radius</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Bar.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double,System.Int32)">
      <summary>
            Draws a line as a Cylinder.
            </summary>
      <param name="start">StartPoint point</param>
      <param name="end">End point</param>
      <param name="radius">Bar's radius</param>
      <param name="slices">Number of faces of the cylinder approximation</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Bar.Clone">
      <summary>
            Creates a deep copy of this bar.
            </summary>
      <returns>The new bar object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Bar.Radius">
      <summary>
            Gets or sets the radius of the Bar.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Bar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Bar.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Bar.Triangles">
      <summary>
            Gets the bar triangles.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Circle">
      <summary>
            Circle entity.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Circle.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Geometry.Entities.GCircle)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Circle parallel to XY plane constructor.</summary>
      <param name="x">Center's X coordinate</param>
      <param name="y">Center's Y coordinate</param>
      <param name="z">Center's Z coordinate</param>
      <param name="radius">Radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Geometry.Point3D,System.Double)">
      <summary>Circle parallel to XY plane constructor.</summary>
      <param name="center">3D center point</param>
      <param name="radius">Radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double)">
      <summary>Circle not parallel to XY plane constructor.</summary>
      <param name="plane">Plane</param>
      <param name="center">3D center point</param>
      <param name="radius">Radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Geometry.Plane,System.Double)">
      <summary>Circle not parallel to XY plane constructor.</summary>
      <param name="plane">Plane</param>
      <param name="radius">Radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double)">
      <summary>Plane, center and radius constructor.</summary>
      <param name="plane">Plane</param>
      <param name="center">2D center point</param>
      <param name="radius">Radius</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
      <summary>
            Circle from three points constructor.
            </summary>
      <param name="plane">Plane</param>
      <param name="first">First 2D point</param>
      <param name="second">Second 2D point</param>
      <param name="third">Third 2D point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Circle from three 3D points constructor.
            </summary>
      <param name="first">First 3D point</param>
      <param name="second">Second 3D point</param>
      <param name="third">Third 3D point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.Clone">
      <summary>
            Creates a deep copy of this circle.
            </summary>
      <returns>The new circle object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.IsInPlane(devDept.Geometry.Plane,System.Double)">
      <summary>
            Checks if the Circle lies on a specific plane.
            </summary>
      <param name="testPlane">The plane</param>
      <param name="tolerance">Tolerance</param>
      <returns>True if the test succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.IsPointInside(devDept.Geometry.Point3D)">
      <summary>
            Checks if a point is inside the Circle.
            </summary>
      <param name="testPoint">The point to be tested</param>
      <returns>True if the point is inside, false if it is outside or on the circle.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.PointAt(System.Double)">
      <summary>
            Evaluates a point on the circle using trigonometric parameterization.
            </summary>
      <param name="t">Parameter</param>
      <returns>The 3D point.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Circle.Center">
      <summary>
            Gets or sets circle's center point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Circle.Radius">
      <summary>
            Gets or sets circle's radius.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when trying to set a radius smaller than <see cref="F:devDept.Geometry.Utility.ZERO_TOLERANCE" />.</exception>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Circle.Diameter">
      <summary>
            Gets circle's diameter.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.Length">
      <summary>
            Gets the circle length.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Circle.Domain">
      <summary>
            Gets the circle's domain. It cannot be set.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when you try to set the <see cref="P:devDept.Eyeshot.Entities.Circle.Domain" /> property. Use Arc instead.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.Reverse">
      <summary>
            Reverses the curve direction.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.GetPointsByLength(System.Double)">
      <summary>
            Subdivides the curve by the distance provided.
            </summary>
      <param name="length">The distance</param>
      <returns>An array of 3D points.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.TangentAt(System.Double)">
      <summary>
            Evaluates the unit tangent vector at a parameter.
            </summary>
      <param name="t">Evaluation parameter</param>
      <returns>Unit tangent vector of the curve at the parameter t.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.DerivativeAt(System.Int32,System.Double)">
      <summary>
            Computes the circle derivative at a parameter. 
            </summary>
      <param name="d">The desired derivative (&gt;=0)</param>
      <param name="t">Evaluation parameter</param>
      <returns>The d<sup>th</sup> circle derivative at the parameter t.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.TrimBy(devDept.Geometry.Point3D,System.Boolean)">
      <summary>
            Trims the arc at the limit point projection.
            </summary>
      <param name="limit">The limit point</param>
      <param name="flipSide">The flip side flag</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Serialization.CircleSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.CircleSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.CircleSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Circle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.IEntity">
      <summary>
            Entity interface.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.IEntity.Color">
      <summary>
            Gets or sets the entity color.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.IEntity.ColorMethod" />
      <seealso cref="!:Workspace.DisplayMode" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.IEntity.ColorMethod">
      <summary>
            Gets or sets the entity color source.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.IEntity.ColorMethod" />
      <seealso cref="!:Workspace.DisplayMode" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.IEntity.LayerName">
      <summary>
            Gets or sets the name of the referenced <see cref="T:devDept.Eyeshot.Layer" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.IEntity.Visible">
      <summary>
            Gets or sets the entity visibility status.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.IEntity.LineTypeMethod">
      <summary>
            Gets or sets the entity line type source.
            </summary>
      <remarks>You may need to call Viewport.Entities.Regen() to see your changes.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.IEntity.LineTypeName">
      <summary>
            Gets or sets the line type name of the <see cref="P:devDept.Eyeshot.Workspace.LineTypes" /> dictionary. In use only if the <see cref="P:devDept.Eyeshot.Entities.IEntity.LineTypeMethod" /> is byEntity.
            </summary>
      <remarks>When the line type of an entity already added to the <see cref="T:devDept.Eyeshot.Workspace" /> is changed, 
            the <see cref="P:devDept.Eyeshot.Entities.Entity.RegenMode" /> must be set to <see cref="F:devDept.Eyeshot.Entities.regenType.CompileOnly" /> and the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Workspace.LineTypes" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.IEntity.LineTypeScale">
      <summary>
            Gets or sets the line type scale.
            </summary>
      <remarks>When the line type of an entity already added to the <see cref="T:devDept.Eyeshot.Workspace" /> is changed the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Workspace.LineTypes" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.IEntity.LineWeightMethod">
      <summary>
            Gets or sets the entity line weight source.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.IEntity.LineWeight">
      <summary>
            Gets or sets the entity line weight.
            </summary>
      <remarks>This value corresponds to pixels when drawing on screen and to mm when exporting to vectorial formats.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.IEntity.AutodeskProperties">
      <summary>
            Gets or sets the Autodesk miscellaneous properties of the entity. 
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.AutodeskMiscProperties">
      <summary>
             Class that stores some data specific to AutoCAD entities, such as XData and curves thickness.
             </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AutodeskMiscProperties.#ctor">
      <summary>
            Empty constructor
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AutodeskMiscProperties.#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int16,System.Object}})">
      <summary>
            Standard constructor.
            </summary>
      <param name="XData">The XData of the entity.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AutodeskMiscProperties.#ctor(System.Double,devDept.Geometry.Vector3D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="thickness">The entity thickness.</param>
      <param name="extrusionDir">The extrusion direction (unit length).</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AutodeskMiscProperties.#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.Int16,System.Object}},System.Double,devDept.Geometry.Vector3D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="XData">The XData of the entity.</param>
      <param name="thickness">The entity thickness.</param>
      <param name="extrusionDir">The extrusion direction (unit length).</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AutodeskMiscProperties.XData">
      <summary>
            Gets or sets the XData value list.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AutodeskMiscProperties.Thickness">
      <summary>
            Gets or sets the Thickness.
            </summary>
      <remarks> The thickness value is meaningful only for Line, Arc, Circle, LinearPath and Solid entities.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AutodeskMiscProperties.ExtrusionDir">
      <summary>
            Gets or sets the extrusion direction (unit length).
             </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AutodeskMiscProperties.UnparsedDimensionText">
      <summary>
            Gets or sets the unparsed dimension text. It is meaningful just for dimension entities.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AutodeskMiscProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AutodeskMiscProperties.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.HitVertex">
      <summary>
            Vertex hit by a mouse definition.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.HitVertex.Vertex">
      <summary>
            Vertex point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.HitVertex.VertexIndex">
      <summary>
            Vertex index.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.HitVertex.Parents">
      <summary>
            The Blockreference parents list starting from the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" />, to which the entity with the closest vertex belongs to.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.HitVertex.EntityIndex">
      <summary>
            The index of the entity the vertex belongs to.
            </summary>
      <remarks>The index refers to the <see cref="P:devDept.Eyeshot.Block.Entities" /> list of the inner-most parent of the <see cref="F:devDept.Eyeshot.Entities.HitVertex.Parents" /> list in case it is not empty, 
            else to the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" /> Entities list or, if there is no current BlockReference, to the <see cref="P:devDept.Eyeshot.Workspace.Entities" /> list.</remarks>
    </member>
    <member name="F:devDept.Eyeshot.Entities.HitVertex.FaceIndex">
      <summary>
        <see cref="T:devDept.Geometry.Entities.GBrep.Face" />, <see cref="T:devDept.Eyeshot.Entities.Solid.Portion" /> or <see cref="!:Element.Face" /> index.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.HitVertex.ShellOrElementIndex">
      <summary>
            Shell or <see cref="!:Element" /> index.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.IEvaluable">
      <summary>
            Common properties of curve entities.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IEvaluable.Evaluate(System.Double,System.Int32)">
      <summary>
            Computes the curve derivatives at parametric value u.
            </summary>
      <param name="u">The parametric value</param>
      <param name="d">The degree of the derivative</param>
      <returns>The derivatives array.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.ICurve">
      <summary>
            Common properties of curve entities.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ICurve.Domain">
      <summary>
            Gets curve's domain.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ICurve.EndPoint">
      <summary>Gets curve's end point.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ICurve.StartPoint">
      <summary>Gets curve's start point.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ICurve.IsClosed">
      <summary>Returns true if the curve is closed.</summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.Length">
      <summary>Computes the curve's length.</summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.Reverse">
      <summary>
            Reverses the curve direction.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ICurve.IsPoint">
      <summary>
            Returns true if the curve is degenerated into a point.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SubCurve(System.Double,System.Double,devDept.Eyeshot.Entities.ICurve@)">
      <summary>
            Extracts a sub curve from current one.
            </summary>
      <param name="startParam">Start parameter</param>
      <param name="endParam">End parameter</param>
      <param name="sub">The sub curve</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SubCurve(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Eyeshot.Entities.ICurve@)">
      <summary>
            Extracts a sub curve from current one.
            </summary>
      <param name="startPt">Start 3D point</param>
      <param name="endPt">End 3D point</param>
      <param name="sub">The sub curve</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SplitAt(System.Double,devDept.Eyeshot.Entities.ICurve@,devDept.Eyeshot.Entities.ICurve@)">
      <summary>
            Splits the curve at the parameter provided.
            </summary>
      <param name="t">The parameter indicating the split position</param>
      <param name="lower">Lower curve segment</param>
      <param name="upper">Upper curve segment</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SplitBy(devDept.Geometry.Point3D,devDept.Eyeshot.Entities.ICurve@,devDept.Eyeshot.Entities.ICurve@)">
      <summary>
            Splits the curve at the 3D point provided.
            </summary>
      <param name="pt">The 3D point indicating the split position</param>
      <param name="lower">Lower curve segment</param>
      <param name="upper">Upper curve segment</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SplitBy(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Eyeshot.Entities.ICurve[]@)">
      <summary>
            Splits the curve at the 3D point array provided.
            </summary>
      <param name="points">The 3D point array</param>
      <param name="segments">The resulting segments</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.TrimAt(System.Double,System.Boolean)">
      <summary>
            Trims the curve at the parameter t.
            </summary>
      <param name="flipSide">Reverse flag</param>
      <param name="t">The curve parameter</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.TrimBy(devDept.Geometry.Point3D,System.Boolean)">
      <summary>
            Trims the curve at the specified 3D point.
            </summary>
      <param name="flipSide">Reverse flag</param>
      <param name="pt">The limit point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.GetParamFromLength(System.Double,System.Double@)">
      <summary>
             Given the length along the curve, finds the parameter value that corresponds to it.
             </summary>
      <param name="length">Length along the curve</param>
      <param name="t">Parameter value</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.GetParamFromLength(System.Double,System.Double,System.Double@)">
      <summary>
             Given the length along the curve, finds the parameter value that corresponds to it.
             </summary>
      <param name="length">Length along the curve</param>
      <param name="curveLength">Length of the whole curve</param>
      <param name="t">Parameter value</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.GetLengthFromParam(System.Double,System.Double@)">
      <summary>
             Given the parameter along the curve, finds the the length of the subcurve at that parameter.
             </summary>
      <param name="t">Parameter value</param>
      <param name="length">Length along the curve</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.IntersectWith(devDept.Eyeshot.Entities.ICurve,System.Boolean)">
      <summary>
            Finds all 3D points where the curve intersects another given curve.
            </summary>
      <param name="C2">The other curve</param>
      <param name="computeParameters">When true intersection points array is filled with InterPoints. False, for a quick computation without curves' paramters data.</param>
      <seealso cref="!:Curve.Intersection(ICurve, ICurve)">Curve.Intersection(ICurve, ICurve) Method</seealso>
      <seealso cref="!:Curve.Intersection(ICurve, ICurve, double)">Curve.Intersection(ICurve, ICurve, double) Method</seealso>
      <seealso cref="!:Curve.Intersection2D(ICurve, ICurve, Plane)">Curve.Intersection2D Method</seealso>
      <seealso cref="!:CompositeCurve.IntersectionLineLine(ICurve, ICurve, out Point3D)">CompositeCurve.IntersectionLineLine Method</seealso>
      <seealso cref="!:CompositeCurve.IntersectionCircleCircle(Circle, Circle, Plane, out Point3D, out Point3D)">CompositeCurve.IntersectionCircleCircle Method</seealso>
      <seealso cref="!:CompositeCurve.IntersectionCircleCircle3D(Circle, Circle, out Point3D, out Point3D)">CompositeCurve.IntersectionCircleCircle3D Method</seealso>
      <seealso cref="!:CompositeCurve.IntersectionLineCircle(Line, Circle, Plane, bool, out Point3D, out Point3D)">CompositeCurve.IntersectionLineCircle Method</seealso>
      <seealso cref="!:CompositeCurve.IntersectionLineCircle3D(Line, Circle, out Point3D, out Point3D)">CompositeCurve.IntersectionLineCircle3D Method</seealso>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ClosestPointTo(devDept.Geometry.Point3D,System.Double@)">
      <summary>
            Returns the parameter of the point on curve that is closest to given 3D point.
            </summary>
      <param name="point">The 3D test point</param>
      <param name="t">The curve parameter</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.Project(devDept.Geometry.Point3D,System.Double@)">
      <summary>
            Returns the parameter of the closest perpendicular projection of the given 3D point on the curve.
            If there aren't projections inside the curve, we look for projections on the extensions of the curve.
            If no projections are found, we return the parameter of the StartPoint and false.
            </summary>
      <param name="point">The 3D test point</param>
      <param name="t">The curve parameter</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.GetIndividualCurves">
      <summary>
            Returns an array of the individual curves that form the curve.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.IsPlanar(System.Double,devDept.Geometry.Plane@)">
      <summary>
            Checks if the curve is planar.
            </summary>
      <param name="tol">The tolerance</param>
      <param name="plane">The plane where the curve lays</param>
      <returns>True if the curve is planar within tolerance, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.IsInPlane(devDept.Geometry.Plane,System.Double)">
      <summary>
            Checks if the curve lays on the specified plane.
            </summary>
      <param name="plane">The plane to test</param>
      <param name="tol">The tolerance</param>
      <returns>True if the curve lays on the plane, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.IsLinear(System.Double,devDept.Geometry.Segment3D@)">
      <summary>
            Checks if the curve is linear.
            </summary>
      <param name="line">The line where the curve lays</param>
      <param name="tol">The tolerance</param>
      <returns>True if the curve lays on this plane, false otherwise.</returns>
      <remarks> For LinearPath and CompositeCurve entities type this method gives as output the longest Segment3D contained inside the curve.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.PointAt(System.Double)">
      <summary>
            Evaluates a point on the curve.
            </summary>
      <param name="t">Evaluation parameter</param>
      <returns>The point on curve.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.TangentAt(System.Double)">
      <summary>
            Evaluates the unit tangent vector at a parameter.
            </summary>
      <param name="t">The parameter</param>
      <returns>The unit tangent.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.NormalAt(System.Double)">
      <summary>
            Evaluates the unit normal vector at a parameter.
            </summary>
      <param name="t">The parameter</param>
      <returns>The unit normal.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ICurve.StartTangent">
      <summary>
            Gets the unit tangent vector at the beginning of the curve.
            </summary>
      <value>The unit tangent.</value>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ICurve.EndTangent">
      <summary>
            Gets the unit tangent vector at the end of the curve.
            </summary>
      <value>The unit tangent.</value>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.Offset(System.Double,devDept.Geometry.Vector3D,System.Double,System.Boolean)">
      <summary>
            Offsets the curve of the specified amount.
            </summary>
      <param name="amount">Signed offset amount</param>
      <param name="planeNormal">Normal of the plane where offset occurs (normalized)</param>
      <param name="tolerance">Tolerance used in Nurbs curve offset computation</param>
      <param name="sharp">If false, offset curves are connected with an arc.</param>
      <returns>The offset curve if the operation is successful, null/Nothing otherwise.</returns>
      <remarks>It doesn't work if the number of offset curves is different from the number of curves to be offsetted. For more complex cases use <see cref="M:devDept.Eyeshot.Entities.LinearPath.QuickOffset(System.Double,devDept.Geometry.Plane)" /></remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.OffsetToRegion(System.Double,System.Double,System.Boolean)">
      <summary>
            Offsets the planar curve of the specified amount and builds a <see cref="T:devDept.Eyeshot.Entities.Region" /> entity from the two curves.
            </summary>
      <param name="amount">Signed offset amount</param>
      <param name="tolerance">Tolerance used in Nurbs curve offset computation</param>
      <param name="sharp">If false, offset curves are connected with an arc.</param>
      <returns>The <see cref="T:devDept.Eyeshot.Entities.Region" /> object if the operation is successful, null/Nothing otherwise.</returns>
      <remarks>It doesn't work if the number of offset curves is different from the number of curves to be offsetted. For more complex cases use <see cref="M:devDept.Eyeshot.Entities.LinearPath.QuickOffset(System.Double,devDept.Geometry.Plane)" /></remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.GetPointsByLength(System.Double)">
      <summary>
            Subdivides the curve by the distance provided.
            </summary>
      <param name="length">The distance between points</param>
      <returns>An array of 3D points.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.GetPointsByLengthPerSegment(System.Double)">
      <summary>
            Subdivides the curve by the distance provided, for LinearPaths and CompositeCurves it does it segmentwise.
            </summary>
      <param name="length">The distance between points</param>
      <returns>An array of 3D points.</returns>
      <remarks>In LinearPaths and CompositeCurves, this method is applied to each segment.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.GetTightBBox(devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Computes the curve's axis aligned bounding box.
            </summary>
      <param name="boxMin">Min 3D point</param>
      <param name="boxMax">Max 3D point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ExtrudeAsMesh(devDept.Geometry.Vector3D,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Extrudes this curve along the specified direction.
            </summary>
      <param name="amount">Extrusion direction and length</param>
      <param name="tolerance">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ExtrudeAsMesh(System.Double,System.Double,System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Extrudes this curve along the specified direction.
            </summary>
      <param name="dx">Extrusion amount along the X axis</param>
      <param name="dy">Extrusion amount along the Y axis</param>
      <param name="dz">Extrusion amount along the Z axis</param>
      <param name="tolerance">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ExtrudeAsMesh``1(devDept.Geometry.Vector3D,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Extrudes this curve along the specified direction.
            </summary>
      <param name="amount">Extrusion direction and length</param>
      <param name="tolerance">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ExtrudeAsMesh``1(System.Double,System.Double,System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Extrudes this curve along the specified direction.
            </summary>
      <param name="dx">Extrusion amount along the X axis</param>
      <param name="dy">Extrusion amount along the Y axis</param>
      <param name="dz">Extrusion amount along the Z axis</param>
      <param name="tolerance">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.RevolveAsMesh(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Revolves this curve around an arbitrary axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of subdivisions</param>
      <param name="tolerance">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.RevolveAsMesh(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Revolves this curve around an arbitrary axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Revolution axis</param>
      <param name="center">Revolution center</param>
      <param name="slices">Number of subdivisions</param>
      <param name="tolerance">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.RevolveAsMesh``1(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Revolves this curve around an arbitrary axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of subdivisions</param>
      <param name="tolerance">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.RevolveAsMesh``1(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Revolves this curve around an arbitrary axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Revolution axis</param>
      <param name="center">Revolution center</param>
      <param name="slices">Number of subdivisions</param>
      <param name="tolerance">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SweepAsMesh(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.sweepMethodType,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Sweeps this curve along the provided trajectory.
            </summary>
      <param name="rail">Sweep trajectory</param>
      <param name="tol">Surface trim tolerance</param>
      <param name="methodType">The sweep method, affects only GCurve <paramref name="rail" /> segments.</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The resulting merged surface.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SweepAsMesh``1(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.sweepMethodType,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Sweeps this curve along the provided trajectory.
            </summary>
      <param name="rail">Sweep trajectory</param>
      <param name="tol">Surface trim tolerance</param>
      <param name="methodType">The sweep method, affects only GCurve <paramref name="rail" /> segments.</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The resulting merged surface.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SweepAsMesh(devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,devDept.Geometry.Entities.sweepMethodType,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Sweeps this curve along the provided trajectory.
            </summary>
      <param name="rail">Sweep trajectory</param>
      <param name="tol">Surface trim tolerance</param>
      <param name="merge">When true, it merges al the trimmed pieces when possible. It Keeps them as separated objects otherwise.</param>
      <param name="methodType">The sweep method, affects only GCurve <paramref name="rail" /> segments.</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The list of resulting surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SweepAsMesh``1(devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,devDept.Geometry.Entities.sweepMethodType,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Sweeps this curve along the provided trajectory.
            </summary>
      <param name="rail">Sweep trajectory</param>
      <param name="tol">Surface trim tolerance</param>
      <param name="merge">When true, it merges al the trimmed pieces when possible. It Keeps them as separated objects otherwise.</param>
      <param name="methodType">The sweep method, affects only GCurve <paramref name="rail" /> segments.</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The list of resulting surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.GetNurbsForm">
      <summary>
            Gets the Nurbs form of this curve.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ICurve.EdgeIndex">
      <summary>
            Gets the associated <see cref="T:devDept.Eyeshot.Entities.Brep" /> edge index.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ExtrudeAsSurface(devDept.Eyeshot.Entities.Line)">
      <summary>
            Extrudes this curve along the specified direction.
            </summary>
      <param name="line">Extrusion direction and length as <see cref="T:devDept.Eyeshot.Entities.Line" /></param>
      <returns>The list of resulting surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ExtrudeAsSurface(System.Double,System.Double,System.Double)">
      <summary>
            Extrudes this curve along the specified direction.
            </summary>
      <param name="dx">Extrusion amount along the X axis</param>
      <param name="dy">Extrusion amount along the Y axis</param>
      <param name="dz">Extrusion amount along the Z axis</param>
      <returns>The list of resulting surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ExtrudeAsSurface(devDept.Geometry.Vector3D)">
      <summary>
            Extrudes this curve along the specified direction.
            </summary>
      <param name="amount">Extrusion direction and length</param>
      <returns>The list of resulting surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ExtrudeAsSurface(devDept.Geometry.Vector3D,System.Double,System.Double)">
      <summary>
            Extrudes this curve along the specified direction with a draft angle.
            </summary>
      <param name="amount">Extrusion direction and length</param>
      <param name="draftAngleInRadians">Signed draft angle in radians</param>
      <param name="tolerance">Required for non-perpendicular extrusion directions</param>
      <returns>The list of resulting surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ExtrudeAsBrep(devDept.Eyeshot.Entities.Line,System.Double)">
      <summary>
            Extrudes this curve along the specified direction.
            </summary>
      <param name="line">Extrusion direction and length as <see cref="T:devDept.Eyeshot.Entities.Line" /></param>
      <param name="tolerance">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ExtrudeAsBrep(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Extrudes this curve along the specified direction.
            </summary>
      <param name="dx">Extrusion amount along the X axis</param>
      <param name="dy">Extrusion amount along the Y axis</param>
      <param name="dz">Extrusion amount along the Z axis</param>
      <param name="tolerance">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ExtrudeAsBrep(devDept.Geometry.Vector3D,System.Double,System.Double)">
      <summary>
            Extrudes this curve along the specified direction with a draft angle.
            </summary>
      <param name="amount">Extrusion direction and length</param>
      <param name="draftAngleInRadians">Signed draft angle in radians</param>
      <param name="tolerance">The regeneration tolerance. Required for non-perpendicular extrusion directions. 0 for default value</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.RevolveAsSurface(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
            Revolves this curve around an arbitrary axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Revolution axis direction</param>
      <param name="center">Revolution axis origin</param>
      <returns>The list of resulting surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.RevolveAsSurface(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Revolves this curve around the specified axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">Revolution axis start point</param>
      <param name="axisEnd">Revolution axis end point</param>
      <returns>The list of resulting surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.RevolveAsSurface(System.Double,System.Double,devDept.Eyeshot.Entities.Line)">
      <summary>
            Revolves this curve around the specified axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Revolution axis</param>
      <returns>The list of resulting surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.RevolveAsBrep(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Double)">
      <summary>
            Revolves this curve around an arbitrary axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Revolution axis direction</param>
      <param name="center">Revolution axis origin</param>
      <param name="tolerance">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.RevolveAsBrep(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)">
      <summary>
            Revolves this curve around the specified axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">Revolution axis start point</param>
      <param name="axisEnd">Revolution axis end point</param>
      <param name="tolerance">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.RevolveAsBrep(System.Double,System.Double,devDept.Eyeshot.Entities.Line,System.Double)">
      <summary>
            Revolves this curve around the specified axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Revolution axis</param>
      <param name="tolerance">The regeneration tolerance. 0 for default value</param>
      <returns>The resulting Brep object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SweepAsSurface(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Sweeps this curve along the provided trajectory.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tol">Surface trim tolerance</param>
      <param name="methodType">The sweep method, affects only <see cref="T:devDept.Eyeshot.Entities.Curve" /> rail segments.</param>
      <returns>The array of resulting surfaces.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SweepAsBrep(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.sweepMethodType)">
      <summary>Creates a Brep sweeping the contour on the rail.</summary>
      <param name="rail">Sweep trajectory</param>
      <param name="tolerance">The trim tolerance</param>
      <param name="methodType">The sweep method, affects only <paramref name="rail" /> segments.</param>
      <returns>The resulting merged Brep if the operation succeeded, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SweepAsBrep(devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,devDept.Geometry.Entities.sweepMethodType)">
      <summary>Creates a Brep sweeping the contour on the rail.</summary>
      <param name="rail">Sweep trajectory</param>
      <param name="tolerance">The trim tolerance</param>
      <param name="merge">When true, it merges al the trimmed pieces when possible. It Keeps them as separated objects otherwise.</param>
      <param name="methodType">The sweep method, affects only <paramref name="rail" /> segments.</param>
      <returns>The resulting Brep array if the operation succeeded, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ExtrudeAsSolid(devDept.Geometry.Vector3D,System.Double)">
      <summary>
            Extrudes this curve along the specified direction.
            </summary>
      <param name="amount">Extrusion direction and length</param>
      <param name="tolerance">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <returns>The resulting solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.ExtrudeAsSolid(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Extrudes this curve along the specified direction.
            </summary>
      <param name="dx">Extrusion amount along the X axis</param>
      <param name="dy">Extrusion amount along the Y axis</param>
      <param name="dz">Extrusion amount along the Z axis</param>
      <param name="tolerance">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <returns>The resulting solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.RevolveAsSolid(System.Double,System.Double,devDept.Geometry.Vector3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>
            Revolves this curve around an arbitrary axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axis">Revolution axis direction</param>
      <param name="center">Revolution axis origin</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <returns>The resulting solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.RevolveAsSolid(System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Int32,System.Double)">
      <summary>
            Revolves this curve around an arbitrary axis.
            </summary>
      <param name="startAngle">Revolution start angle in radians</param>
      <param name="deltaAngle">Revolution delta angle in radians</param>
      <param name="axisStart">The axis start point</param>
      <param name="axisEnd">The axis end point</param>
      <param name="slices">Number of slices generated. This value can be also found using <see cref="M:devDept.Geometry.Utility.NumberOfSegments(System.Double,System.Double,System.Double,System.Double)" /></param>
      <param name="tolerance">If some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <returns>The resulting solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SweepAsSolid(devDept.Eyeshot.Entities.ICurve,System.Double,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Sweeps this entity along the provided trajectory.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tol">The regeneration tolerance</param>
      <param name="sweepMethod">The sweep method, affects only <paramref name="rail" /> segments.</param>
      <returns>The resulting merged Solid object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ICurve.SweepAsSolid(devDept.Eyeshot.Entities.ICurve,System.Double,System.Boolean,devDept.Geometry.Entities.sweepMethodType)">
      <summary>
            Sweeps this entity along the provided trajectory.
            </summary>
      <param name="rail">The rail curve</param>
      <param name="tol">The regeneration tolerance</param>
      <param name="merge">When true, it merges al the trimmed pieces when possible. It Keeps them as separated objects otherwise.</param>
      <param name="sweepMethod">The sweep method, affects only <paramref name="rail" /> segments.</param>
      <returns>The resulting Solid array objects.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.IFace">
      <summary>
            Common properties of face entities.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFace.GetArea(devDept.Geometry.Point3D@)">
      <summary>
            Computes total surface area.
            </summary>
      <param name="centroid">
      </param>
      <returns>The area amount.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFace.GetVolume(devDept.Geometry.Point3D@)">
      <summary>
            Computes total volume.
            </summary>
      <param name="centroid">
      </param>
      <returns>The volume amount.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFace.GetMass(devDept.Graphics.Material,devDept.Geometry.linearUnitsType,devDept.Geometry.massUnitsType,System.Double@)">
      <summary>
             Computes total mass.
             </summary>
      <param name="material">
      </param>
      <param name="linearUnits">The length units.</param>
      <param name="massUnits">The mass units.</param>
      <param name="convertedDensity">The density of the material converted from the material system of measurement to the provided system of measurement.</param>
      <returns> The mass amount expressed in the provided system of measurement.</returns>
      <remarks>If the object is not closed, the result could be inaccurate. If the material or its density is undefined, the density is assumed by default 1 kilogram per cubic meter.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFace.FlipNormal">
      <summary>
            Flips face normals.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFace.GetPolygonMeshes">
      <summary>
            Gets a number of meshes representing this object (for readOnly purpose).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFace.FindClosestTriangle(devDept.Geometry.Transformation,devDept.Geometry.Segment3D)">
      <summary>
            Returns a list of triangles hit by the provided segment.
            </summary>
      <param name="transf">The transformation applied to the entity (necessary if the entity is inside a Block to propagate the BlockReference transformation)</param>
      <param name="seg">The 3D segment representing the viewing direction</param>
      <returns>The sorted list of triangles intersecting the provided segment.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFace.Section(devDept.Geometry.Plane,System.Double)">
      <summary>
             Computes the contours resulting from the intersection of the face and the given plane.
            </summary>
      <param name="pln">The plane</param>
      <param name="tol">The tolerance</param>
      <returns>An array of curves representing each section contour.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFace.ConvertToMesh(System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType,System.Boolean)">
      <summary>
             Converts this object to a single mesh.
            </summary>
      <param name="deviation">The maximum deviation, zero for current tessellation.</param>
      <param name="angleInRadians">The maximum angular deflection, ignored when zero.</param>
      <param name="nature">The desired Mesh <see cref="T:devDept.Geometry.Entities.GMesh.natureType">nature</see></param>
      <param name="weld">If true, the resulting meshes are welded (no duplicated points).</param>
      <returns>The resulting mesh object.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.IFaceSelectable">
      <summary>
            Common properties for entities with selectable faces.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFaceSelectable.IsAnyFaceSelected">
      <summary>
            Tells if there is a selected face.
            </summary>
      <returns>True if there is a selected face</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.IFaceSelectable.SelectionMode">
      <summary>
            Gets or sets the selection mode.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFaceSelectable.GetFaceSelection(System.Int32,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Tells if the face is selected.
            </summary>
      <param name="faceIndex">The face index</param>
      <param name="parents">The parents stack that define a nested instance</param>
      <returns>True if the face is selected</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFaceSelectable.GetFaceSelection(System.Int32,System.Int32,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Tells if the face is selected.
            </summary>
      <param name="shellIndex">The shell index (0 for outer shell)</param>
      <param name="faceIndex">The face index</param>
      <param name="parents">The parents stack that define a nested instance</param>
      <returns>True if the face is selected</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFaceSelectable.SetFaceSelection(System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Sets the selection status of a face.
            </summary>
      <param name="faceIndex">The face index</param>
      <param name="status">The selection status</param>
      <param name="parents">The parents stack that define a nested instance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFaceSelectable.SetFaceSelection(System.Int32,System.Int32,System.Boolean,System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Sets the selection status of a face.
            </summary>
      <param name="shellIndex">The shell index (0 for outer shell)</param>
      <param name="faceIndex">The face index</param>
      <param name="status">The selection status</param>
      <param name="parents">The parents stack that define a nested instance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFaceSelectable.ClearFacesSelection(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Clears the face selection status for a specific instance.
            </summary>
      <param name="parents">The parents stack that define a nested instance (use null for top-level)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.IFaceSelectable.ClearFacesSelectionForAllInstances">
      <summary>
            Clears the face selection status for all instances.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.IText">
      <summary>
            Common properties of text entities.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.IText.Height">
      <summary>
            Gets or sets text height.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.IText.WidthFactor">
      <summary>
            Gets or sets text width factor.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.IText.TextString">
      <summary>
            Gets or sets text string.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.IText.StyleName">
      <summary>
            Gets or sets the text style name.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.entityNatureType">
      <summary>
            Entity nature type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.entityNatureType.None">
      <summary>
            Standard (e.g. <see cref="T:devDept.Eyeshot.Entities.BlockReference" />)
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.entityNatureType.Point">
      <summary>
            Points only, (e.g. <see cref="F:devDept.Eyeshot.Entities.entityNatureType.Point" />, <see cref="T:devDept.Eyeshot.Entities.PointCloud" />)
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.entityNatureType.Wire">
      <summary>
            Wireframe only (e.g. <see cref="T:devDept.Eyeshot.Entities.Line" />, <see cref="T:devDept.Eyeshot.Entities.Arc" />)
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.entityNatureType.Polygon">
      <summary>
            Polyhedral only (e.g. <see cref="T:devDept.Eyeshot.Entities.Mesh" />)
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.entityNatureType.RichPolygon">
      <summary>
            Multicolor or textured polyhedral
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.regenType">
      <summary>
            Entity regen type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.regenType.NotNeeded">
      <summary>
            The entity is up to date.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.regenType.RegenAndCompile">
      <summary>
            The entity needs regen and compile
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.regenType.CompileOnly">
      <summary>
            The entity needs only to be compiled. When using this option, you need to call the <see cref="M:devDept.Eyeshot.Entities.Entity.UpdateBoundingBox(devDept.Eyeshot.TraversalParams)" /> method to compute a valid bounding box for the entity.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.colorMethodType">
      <summary>
            Color method type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.colorMethodType.byEntity">
      <summary>
            Entity color
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.colorMethodType.byLayer">
      <summary>
            Layer color
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.colorMethodType.byParent">
      <summary>
            Parent entity color (byBlock)
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.arrowheadType">
      <summary>
            Dimension and leader arrow head type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.arrowheadType.Arrow">
      <summary>
            Closed filled arrow
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.arrowheadType.Tick">
      <summary>
            Architectural tick
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.arrowheadType.Dot">
      <summary>
            Dot
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.arrowheadType.Oblique">
      <summary>
            Oblique
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.elementPositionType">
      <summary>
            Dimension item position type.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.toleranceType">
      <summary>
            Dimension tolerance type (DIMTOL).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.toleranceType.None">
      <summary>
            Does not add a tolerance
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.toleranceType.Symmetrical">
      <summary>
            Adds a plus/minus expression of tolerance in which a single value of variation is applied to the dimension measurement
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.toleranceType.Deviation">
      <summary>
            Adds a plus/minus tolerance expression
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.toleranceType.Limits">
      <summary>
            A maximum and a minimum value are displayed, one over the other.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.dynamicSelectionHaloType">
      <summary>
            Dynamic selection halo type.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Workspace.Selection" />.
        </member>
    <member name="F:devDept.Eyeshot.Entities.dynamicSelectionHaloType.None">
      <summary>
            The entity is drawn with a solid color without halo effect.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.dynamicSelectionHaloType.Slim">
      <summary>
            The entity is drawn with an halo effect whose width is determined by <see cref="P:devDept.Eyeshot.SelectionSettings.HaloWidthWires" />.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.dynamicSelectionHaloType.Thick">
      <summary>
            The entity is drawn with an halo effect whose width is determined by <see cref="P:devDept.Eyeshot.SelectionSettings.HaloWidthPolygons" />.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Joint">
      <summary>
            Joint entity. A point drawn like a sphere.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Joint.Position">
      <summary>
            Joint position.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Joint.Radius">
      <summary>
            Gets or sets the radius of the sphere.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Joint.SubdivisionLevel">
      <summary>
            Gets or sets the number of recursive subdivisions of the sphere.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Joint.Triangles">
      <summary>
            Gets the joints triangles.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Joint.#ctor(System.Double,System.Double,System.Double,System.Double,System.UInt32)">
      <summary>
            Draws a point like a sphere.
            </summary>
      <param name="x">Center's X-coordinate</param>
      <param name="y">Center's y-coordinate</param>
      <param name="z">Center's Z-coordinate</param>
      <param name="radius">Sphere's radius</param>
      <param name="subdivisionLevel">The sphere is subdivided recursively, this parameter represents the number of iterations.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Joint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Byte)">
      <summary>
            Draws a point like a sphere.
            </summary>
      <param name="x">Center's X-coordinate</param>
      <param name="y">Center's y-coordinate</param>
      <param name="z">Center's Z-coordinate</param>
      <param name="radius">Sphere's radius</param>
      <param name="subdivisionLevel">The sphere is subdivided recursively, this parameter represents the number of iterations.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Joint.#ctor(devDept.Geometry.Point3D,System.Double,System.UInt32)">
      <summary>
            Draws a point like a sphere.
            </summary>
      <param name="center">Center point</param>
      <param name="radius">Sphere's radius</param>
      <param name="subdivisionLevel">The sphere is subdivided recursively, this is the number of loops</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Joint.#ctor(devDept.Geometry.Point3D,System.Double,System.Byte)">
      <summary>
            Draws a point like a sphere.
            </summary>
      <param name="center">Center point</param>
      <param name="radius">Sphere's radius</param>
      <param name="subdivisionLevel">The sphere is subdivided recursively, this is the number of loops</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Joint.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double,System.UInt32)">
      <summary>
            Draws a point like a sphere.
            </summary>
      <param name="pln">Skecth plane.</param>
      <param name="center">2D center point</param>
      <param name="radius">Sphere's radius</param>
      <param name="subdivisionLevel">The sphere is subdivided recursively, this is the number of levels</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Joint.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double,System.Byte)">
      <summary>
            Draws a point like a sphere.
            </summary>
      <param name="pln">Skecth plane.</param>
      <param name="center">2D center point</param>
      <param name="radius">Sphere's radius</param>
      <param name="subdivisionLevel">The sphere is subdivided recursively, this is the number of levels</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Joint.#ctor(devDept.Eyeshot.Entities.Joint)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other Joint</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Joint.Clone">
      <summary>
            Creates a deep copy of this joint.
            </summary>
      <returns>The new joint object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Joint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Joint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Line">
      <summary>
            Line entity.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Line.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Geometry.Entities.GLine)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Line.Vertices">
      <summary>
            Gets or sets entity's 3D vertices.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Line on XY plane constructor.
            </summary>
      <param name="x1">Start point's X coordinate</param>
      <param name="y1">Start point's Y coordinate</param>
      <param name="x2">End point's X coordinate</param>
      <param name="y2">End point's Y coordinate</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double)">
      <summary>Sketch plane constructor.</summary>
      <param name="sketchPlane">The sketch plane</param>
      <param name="x1">Start point's X coordinate</param>
      <param name="y1">Start point's Y coordinate</param>
      <param name="x2">End point's X coordinate</param>
      <param name="y2">End point's Y coordinate</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
      <summary>Sketch plane constructor.</summary>
      <param name="sketchPlane">The sketch plane</param>
      <param name="startPoint">Start point</param>
      <param name="endPoint">End point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Individual coordinates constructor.
            </summary>
      <param name="x1">Start point's X coordinate</param>
      <param name="y1">Start point's Y coordinate</param>
      <param name="z1">Start point's Z coordinate</param>
      <param name="x2">End point's X coordinate</param>
      <param name="y2">End point's Y coordinate</param>
      <param name="z2">End point's Z coordinate</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Two 3D points constructor.
            </summary>
      <param name="start">Start point</param>
      <param name="end">End point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Geometry.Segment2D)">
      <summary>
            2D segment constructor.
            </summary>
      <param name="seg">The 2D segment</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Geometry.Segment3D)">
      <summary>
            3D segment constructor.
            </summary>
      <param name="seg">The 3D segment</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.Clone">
      <summary>
            Creates a deep copy of this line.
            </summary>
      <returns>The new line object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Line.MidPoint">
      <summary>
            Gets the line's middle point.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.Length">
      <summary>
            Gets the line length.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.GetPointsByLength(System.Double)">
      <summary>
            Subdivides the curve by the distance provided.
            </summary>
      <param name="length">The distance</param>
      <returns>An array of 3D points.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.PointAt(System.Double)">
      <summary>
            Evaluates a point on (infinite) line.
            </summary>
      <param name="t">Evaluation parameter</param>
      <returns>(1 - t/Domain.Length) * start + t/Domain.Length * end</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Line.Tangent">
      <summary>
            Evaluates the unit tangent vector, it is the same at all the points of the line.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.TrimBy(devDept.Geometry.Point3D,System.Boolean)">
      <summary>
            Trims the line at the limit point projection.
            </summary>
      <param name="limit">The limit point</param>
      <param name="flipSide">The flip side flag</param>
      <returns>True if the operation is successful, false otherwise.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Line.Direction">
      <summary>
            Gets the line direction as a 3D vector.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.Line.Tangent" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Serialization.LineSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.LineSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.LineSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.InPlane(devDept.Geometry.Plane@,System.Double)">
      <summary>
            Gets a plane that contains the line.
            </summary>
      <param name="plane">A plane that contains the line.  The origin
            of the plane is at the start of the line.  The distance
            from the end of the line to the plane is &lt;= tolerance.
            If possible a plane parallel to the world xy, yz or zx
            plane is returned.</param>
      <param name="tolerance">The tolerance</param>
      <returns>true if a coordinate of the line's direction vector is larger than tolerance</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Line.AreCollinear(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Line)">
      <summary>
            Returns true if the two lines are collinear.
            </summary>
      <param name="l1">The first line</param>
      <param name="l2">The second line</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Point">
      <summary>
            Point entity.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Point.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Geometry.Entities.GPoint)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Point.Vertices">
      <summary>
            Gets or sets entity's 3D vertices.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.#ctor(System.Double,System.Double,System.Double,System.Single)">
      <summary>
            Position and size constructor.
            </summary>
      <param name="x">Point's X coordinate</param>
      <param name="y">Point's Y coordinate</param>
      <param name="z">Point's Z coordinate</param>
      <param name="size">On screen size</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Position constructor.
            </summary>
      <param name="x">Point's X coordinate</param>
      <param name="y">Point's Y coordinate</param>
      <param name="z">Point's Z coordinate</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.#ctor(System.Double,System.Double)">
      <summary>
            2D point constructor.
            </summary>
      <param name="x">Point's X coordinate</param>
      <param name="y">Point's Y coordinate</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Geometry.Point2D,System.Single)">
      <summary>
            2D point constructor.
            </summary>
      <param name="p">Point position</param>
      <param name="size">On screen size</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Geometry.Point2D)">
      <summary>
            2D point constructor.
            </summary>
      <param name="p">Point position</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Geometry.Point3D,System.Single)">
      <summary>
            3D point and size constructor.
            </summary>
      <param name="p">Point position</param>
      <param name="size">On screen size</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Geometry.Point3D)">
      <summary>
            3D point constructor.
            </summary>
      <param name="p">Point position</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Geometry.Plane,System.Double,System.Double)">
      <summary>
            Sketch plane constructor.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="x">Point's X coordinate</param>
      <param name="y">Point's Y coordinate</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D)">
      <summary>
            Sketch plane constructor.
            </summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="p">Point's position</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.Clone">
      <summary>
            Creates a deep copy of this point.
            </summary>
      <returns>The new point object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Point.Position">
      <summary>
            Gets or sets the Point position.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Serialization.PointSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.PointSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.PointSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Point.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.LinearPath">
      <summary>
            Linear path entity (piecewise linear curve).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.LinearPath.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(devDept.Geometry.Entities.GLinearPath)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.LinearPath.Vertices">
      <summary>
            Gets or sets entity's 3D vertices.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.LinearPath.GlobalWidth">
      <summary>
            Gets or sets the constant width. 
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(System.Collections.Generic.ICollection{devDept.Geometry.Point3D})">
      <summary>
            3D point array constructor.
            </summary>
      <param name="points">The point array</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(devDept.Geometry.Point3D[])">
      <summary>
            Point list constructor.
            </summary>
      <param name="points">The point list</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D[])">
      <summary>
            Sketch pln constructor.
            </summary>
      <param name="sketchPlane">The sketch plane</param>
      <param name="points">The 2D point array</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(System.Double,System.Double)">
      <summary>
            2D rectangle on the origin constructor.
            </summary>
      <param name="width">Rectangle's width</param>
      <param name="height">Rectangle's height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
      <summary>
            2D rectangle min/max constructor.
            </summary>
      <param name="min">Rectangle's 2D min corner</param>
      <param name="max">Rectangle's 2D max corner</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
      <summary>
            2D rectangle on the origin constructor.
            </summary>
      <param name="plane">Sketch plane</param>
      <param name="min">Rectangle's 2D min corner</param>
      <param name="max">Rectangle's 2D max corner</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            2D rectangle constructor.
            </summary>
      <param name="x">Lower-left corner position along X-axis</param>
      <param name="y">Lower-left corner position along y-axis</param>
      <param name="width">Rectangle's width</param>
      <param name="height">Rectangle's height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Sketch plane rectangle constructor.
            </summary>
      <param name="plane">Sketch plane</param>
      <param name="x">Lower-left corner position along X-axis</param>
      <param name="y">Lower-left corner position along y-axis</param>
      <param name="width">Rectangle's width</param>
      <param name="height">Rectangle's height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.Clone">
      <summary>
            Creates a deep copy of this linear path.
            </summary>
      <returns>The new linear path object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.Length">
      <summary>
            Gets the linear path length.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.ConvertToLines">
      <summary>
            Returns the linear path individual <see cref="T:devDept.Eyeshot.Entities.Line">lines</see> array.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.GetPointsByLength(System.Double)">
      <summary>
            Subdivides the curve by the distance provided.
            </summary>
      <param name="length">The distance</param>
      <returns>An array of 3D points.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.GetPointsByLengthPerSegment(System.Double)">
      <summary>
            Subdivides each segment of the curve by the distance provided.
            </summary>
      <param name="length">The distance</param>
      <returns>An array of 3D points.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.MergeWith(devDept.Eyeshot.Entities.LinearPath)">
      <summary>
            Merges this linear path with a consecutive linear path.
            </summary>
      <param name="other">The second Linear Path.</param>
      <returns>True if the linear paths were merged, false otherwise.</returns>
      <remarks>The EndPoint of the first linear path must be equal to the StartPoint of the second.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.PointAt(System.Double)">
      <summary>
            Evaluates a point on the linear path.
            </summary>
      <param name="t">Evaluation parameter</param>
      <returns>Returns the point at length t</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.Inflate(System.Double,System.Double)">
      <summary>
            Inflates this linear path of the desired amount.
            </summary>
      <param name="amount">The inflate amount</param>
      <param name="tol">The tessellation tolerance</param>
      <returns>The resulting array of closed contours.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.Inflate(System.Double,devDept.Geometry.Vector3D,System.Double)">
      <summary>
            Inflates this linear path of the desired amount.
            </summary>
      <param name="amount">The inflate amount</param>
      <param name="planeNormal">Normal of the plane where inflate occurs (normalized), it is useful for lines.</param>
      <param name="tol">The tessellation tolerance</param>
      <returns>The resulting array of closed contours. Use planeNormal only for lines.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.Inflate(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Inflates a LinearPath in 3D given an elliptical section.
            </summary>
      <param name="rX">X radius of the elliptical section</param>
      <param name="rY">Y radius of the elliptical section</param>
      <param name="angleLimit">Limit that controls the stretching of the section while it follows curves along the path. Under this tolerance no stretch is applied.</param>
      <param name="smoothingAngle">Smoothing angles using in the process  of mesh creation</param>
      <param name="fillCaps">True if ends of opened linear paths must be filled with triangles fan</param>
      <returns>A mesh representing the inflation of the LinearPath</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.Offset(System.Double)">
      <summary>
            Offsets the curve of the specified amount.
            </summary>
      <param name="amount">Signed offset amount</param>
      <returns>The offset curve if the operation is successful, null/Nothing otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.QuickOffset(System.Double,devDept.Geometry.Plane)">
      <summary>
            Quick offset function for NC toolpaths.
            </summary>
      <param name="amount">Signed offset amount</param>
      <param name="pln">Toolpath pln</param>
      <returns>An array of curves.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.QuickOffset(System.Double,devDept.Geometry.Plane,devDept.Geometry.Entities.cornerType)">
      <summary>
            Quick offset function for NC toolpaths.
            </summary>
      <param name="amount">Signed offset amount</param>
      <param name="pln">Toolpath pln</param>
      <param name="ct">Corner type</param>
      <returns>An array of curves.</returns>
      <remarks>For open linear paths, different corner types are not supported.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.QuickOffset(System.Double,devDept.Geometry.Plane,devDept.Geometry.Entities.cornerType,System.Double,System.Double)">
      <summary>
            Quick offset function for NC toolpaths.
            </summary>
      <param name="amount">Signed offset amount</param>
      <param name="pln">Toolpath pln</param>
      <param name="ct">Corner type</param>
      <param name="tol">Tolerance, used only with Round corners.</param>
      <param name="miterLimit">The higher the miter limit setting, the sharper the corner can be while retaining its miter.</param>
      <returns>An array of curves.</returns>
      <remarks>For open linear paths, different corner types are not supported.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.Pocket(System.Double,devDept.Geometry.Plane)">
      <summary>
            Pocket function for NC toolpaths.
            </summary>
      <param name="amount">Offset amount (positive)</param>
      <param name="pln">Toolpath pln</param>
      <returns>An array of curves.</returns>
      <remarks>The linear path must be closed and must have counterclockwise orientation with respect to the Z axis of the plane.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.Pocket(System.Double,devDept.Geometry.Plane,devDept.Geometry.Entities.cornerType)">
      <summary>
            Pocket function for NC toolpaths.
            </summary>
      <param name="amount">Offset amount (positive)</param>
      <param name="pln">Toolpath pln</param>
      <param name="ct">Corner type</param>
      <returns>An array of curves.</returns>
      <remarks>The linear path must be closed and must have counterclockwise orientation with respect to the Z axis of the plane.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.Pocket(System.Double,devDept.Geometry.Plane,devDept.Geometry.Entities.cornerType,System.Double,System.Double)">
      <summary>
            Pocket function for NC toolpaths.
            </summary>
      <param name="amount">Offset amount (positive)</param>
      <param name="pln">Toolpath pln</param>
      <param name="ct">Corner type</param>
      <param name="tol">Tolerance, used only with Round corners.</param>
      <param name="miterLimit">The higher the miter limit setting, the sharper the corner can be while retaining its miter.</param>
      <returns>An array of curves.</returns>
      <remarks>The linear path must be closed and must have counterclockwise orientation with respect to the Z axis of the plane.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.SplitAtDiscontinuities">
      <summary>
            Splits the curve at derivative discontinuities (e.g. kinks), returns an array of the smooth segments that form the curve.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.CreateHelix(System.Double,System.Double,System.Double,System.Boolean,System.Double)">
      <summary>Creates a linear path in the form of an helix.
            </summary>
      <param name="radius">Radius of the helix</param>
      <param name="pitch">Height of each full turn of the helix</param>
      <param name="turns">Number of turns</param>
      <param name="reverseTwist">Reverse direction of the Helix</param>
      <param name="deviation">The maximum deviation</param>
      <returns>The helicoidal linear path</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.CreateHelix(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>Creates a linear path in the form of an helix.</summary>
      <param name="radius">Radius of the helix</param>
      <param name="angle">Angle between the helix and an axial line on its cylinder</param>
      <param name="height">Total height of the helix</param>
      <param name="deviation">The maximum deviation</param>
      <param name="reverseTwist">Reverse the helix direction</param>
      <returns>The helicoidal linear path</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.ExtrudeAsBrep(devDept.Geometry.Interval,System.Double,System.Double,System.Boolean,System.Double)">
      <summary>
            Create a base flange by offsetting and Extruding the curve after fillet the corners.
            </summary>
      <param name="amount">The extrusion amount</param>
      <param name="bendRadius">The bend radius replacing the corners</param>
      <param name="thickness">The sheet metal thickness</param>
      <param name="reverse">When true, it thickens the linear path in the opposite direction</param>
      <param name="tolerance">The tolerance</param>
      <returns>A Brep object representing the resulting sheet metal. Null/Nothing if an error occured.</returns>
      <remarks>The linear path must be planar.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.#ctor(devDept.Serialization.LinearPathSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.LinearPathSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.LinearPathSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.IsOrientedClockwise(devDept.Geometry.Plane)">
      <summary>
            Checks if the closed curve orientation is clockwise.
            </summary>
      <param name="plane">The curve plane, can be obtained using the <see cref="M:devDept.Eyeshot.Entities.LinearPath.IsPlanar(System.Double,devDept.Geometry.Plane@)" /> method.</param>
      <returns>True if the curve is oriented clockwise, false otherwise.</returns>
      <remarks>If the curve is not planar, the points are projected on the plane.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.LinearPath.IsOrientedClockwise(devDept.Geometry.Transformation)">
      <summary>
            Checks if the closed curve orientation is clockwise.
            </summary>
      <param name="t">The transformation needed to project all points on the curve plane.</param>
      <returns>True if the curve is oriented clockwise, false otherwise.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Quad">
      <summary>
            Quadrangular face entity.
            </summary>
      <remarks>Does not support material's texture.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Quad.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Quad.#ctor(devDept.Geometry.Entities.GQuad)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Quad.Vertices">
      <summary>
            Gets or sets entity's 3D vertices.
            </summary>
      <remarks>sdgdg</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Quad.VisibleEdgeFlag">
      <summary>Determines which Quad's edge is drawn.</summary>
      <example>
            The following code fragment demonstrates how to draw only the first, third and forth edges of the Quad entity.
            	<code lang="CS" title="[New Example]">
            myQuad.VisibleEdgeFlag = 0x01 | 0x04 | 0x08;
            </code><code lang="VB" title="[New Example]">
            myQuad.VisibleEdgeFlag = &amp;H01 | &amp;H04 | &amp;H08;
            </code></example>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Quad.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Standard constructor
            </summary>
      <param name="v1x">First vertex's X-coordinate</param>
      <param name="v1y">First vertex's y-coordinate</param>
      <param name="v1z">First vertex's Z-coordinate</param>
      <param name="v2x">Second vertex's X-coordinate</param>
      <param name="v2y">Second vertex's y-coordinate</param>
      <param name="v2z">Second vertex's Z-coordinate</param>
      <param name="v3x">Third vertex's X-coordinate</param>
      <param name="v3y">Third vertex's y-coordinate</param>
      <param name="v3z">Third vertex's Z-coordinate</param>
      <param name="v4x">Fourth vertex's X-coordinate</param>
      <param name="v4y">Fourth vertex's y-coordinate</param>
      <param name="v4z">Fourth vertex's Z-coordinate</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Quad.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="v1">First vertex</param>
      <param name="v2">Second vertex</param>
      <param name="v3">Third vertex</param>
      <param name="v4">Fourth vertex</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Quad.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
      <summary>
            Sketch plane constructor.
            </summary>
      <param name="plane">Sketch plane</param>
      <param name="v1">First 2D point</param>
      <param name="v2">Second 2D point</param>
      <param name="v3">Third 2D point</param>
      <param name="v4">Fourth 2D point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Quad.#ctor(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Sketch plane rectangle constructor.
            </summary>
      <param name="plane">Sketch plane</param>
      <param name="v1">First 2D point</param>
      <param name="v2">Second 2D point</param>
      <param name="v3">Third 2D point</param>
      <param name="v4">Fourth 2D point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Quad.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Rectangle constructor.
            </summary>
      <param name="v1">First 2D point</param>
      <param name="v2">Second 2D point</param>
      <param name="v3">Third 2D point</param>
      <param name="v4">Fourth 2D point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Quad.Clone">
      <summary>
            Creates a deep copy of this triangle.
            </summary>
      <returns>The new triangle object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Quad.Normal">
      <summary>
            Gets or sets the quad's normal.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Quad.FindClosestTriangle(devDept.Geometry.Transformation,devDept.Geometry.Segment3D)">
      <summary>
            Returns a list of triangles hit by the provided segment.
            </summary>
      <param name="transf">The transformation applied to the entity (necessary if the entity is inside a Block to propagate the BlockReference transformation)</param>
      <param name="seg">The 3D segment representing the viewing direction</param>
      <returns>The sorted list of triangles intersecting the provided segment.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Quad.GetPerimeter">
      <summary>
            Computes the perimeter of the quad entity.
            </summary>
      <returns>The perimeter amount.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Quad.GetArea(devDept.Geometry.Point3D@)">
      <summary>
            Computes the area of the quad entity.
            </summary>
      <param name="centroid">The centroid.</param>
      <returns>The area amount.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Quad.GetVolume(devDept.Geometry.Point3D@)">
      <summary>
            Computes the volume of the quad entity.
            </summary>
      <param name="centroid">The centroid.</param>
      <returns>The volume amount.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Quad.GetMass(devDept.Graphics.Material,devDept.Geometry.linearUnitsType,devDept.Geometry.massUnitsType,System.Double@)">
      <summary>
            Computes the mass of the quad entity.
            </summary>
      <param name="convertedDensity">The density according to the mass units.</param>
      <returns>The mass amount.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Quad.#ctor(devDept.Serialization.QuadSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.QuadSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.QuadSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Triangle">
      <summary>
            Triangular face entity.
            </summary>
      <remarks>Does not support material's texture.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Triangle.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.#ctor(devDept.Geometry.Entities.GTriangle)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Triangle.Vertices">
      <summary>
            Gets or sets entity's 3D vertices.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Triangle.VisibleEdgeFlag">
      <summary>
            Determines which IndexTriangle's edge is drawn.
            </summary>
      <example>
            The following code fragment demonstrates how to draw only the first, and third edges of the IndexTriangle entity.
            	<code lang="CS" title="[New Example]">
            myTriangle.VisibleEdgeFlag = 0x01 | 0x04;
            </code><code lang="VB" title="[New Example]">
            myTriangle.VisibleEdgeFlag = &amp;H01 | &amp;H04;
            </code></example>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="v1x">First vertex's X-coordinate</param>
      <param name="v1y">First vertex's Y-coordinate</param>
      <param name="v1z">First vertex's Z-coordinate</param>
      <param name="v2x">Second vertex's X-coordinate</param>
      <param name="v2y">Second vertex's Y-coordinate</param>
      <param name="v2z">Second vertex's Z-coordinate</param>
      <param name="v3x">Third vertex's X-coordinate</param>
      <param name="v3y">Third vertex's Y-coordinate</param>
      <param name="v3z">Third vertex's Z-coordinate</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            3D point constructor.
            </summary>
      <param name="v1">First vertex</param>
      <param name="v2">Second vertex</param>
      <param name="v3">Third vertex</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.Clone">
      <summary>
            Creates a deep copy of this triangle.
            </summary>
      <returns>The new triangle object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.Regen(devDept.Eyeshot.RegenParams)">
      <summary>
            Updates triangle normal.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Triangle.Normal">
      <summary>
            Gets or sets the triangle's normal.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.FindClosestTriangle(devDept.Geometry.Transformation,devDept.Geometry.Segment3D)">
      <summary>
            Returns a list of triangles hit by the provided segment.
            </summary>
      <param name="transf">The transformation applied to the entity (necessary if the entity is inside a Block to propagate the BlockReference transformation)</param>
      <param name="seg">The 3D segment representing the viewing direction</param>
      <returns>The sorted list of triangles intersecting the provided segment.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.DrawNormals(devDept.Eyeshot.DrawParams)">
      <summary>
            Standard DrawNormal method.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.DrawEdges(devDept.Eyeshot.DrawParams)">
      <summary>
            Standard DrawEdges method.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.Area(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Computes the area of a triangle.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.Area2D(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Computes the projected area (on plane XY) of a triangle.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.Centroid(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Computes the centroid of a triangle.
            </summary>
      <param name="p1">First vertex</param>
      <param name="p2">Second vertex</param>
      <param name="p3">Third vertex</param>
      <returns>The 3D centroid position.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.#ctor(devDept.Serialization.TriangleSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.TriangleSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.TriangleSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.GetPerimeter">
      <summary>
            Computes the perimeter of the triangle entity.
            </summary>
      <returns>The perimeter amount.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.GetArea(devDept.Geometry.Point3D@)">
      <summary>
            Computes the area of the triangle entity.
            </summary>
      <param name="centroid">The centroid.</param>
      <returns>The area amount.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.GetVolume(devDept.Geometry.Point3D@)">
      <summary>
            Computes the volume of the triangle entity.
            </summary>
      <param name="centroid">The centroid.</param>
      <returns>The volume amount.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Triangle.GetMass(devDept.Graphics.Material,devDept.Geometry.linearUnitsType,devDept.Geometry.massUnitsType,System.Double@)">
      <summary>
            Computes the mass of the triangle entity.
            </summary>
      <param name="convertedDensity">The density according to the mass units.</param>
      <returns>The mass amount.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Picture">
      <summary>
            Picture entity.
            </summary>
      <remarks>In case of semitransparent bitmaps, the Picture must be added as last entity.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Picture.ShowClipped">
      <summary>
            If true, the picture will be clipped accordingly to its polygon clipping boundary.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Picture.ClippingBoundary">
      <summary>
            Get or sets the Picture clipping boundary. 
            </summary>
      <remarks>The point 2D coordinates are referred to the picture's plane. </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Picture.Accelerated">
      <summary>
            Gets or sets the use of hardware acceleration to draw the picture.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Picture.Tiling">
      <summary>
            If true, texture coordinates are adjusted so that a big image can be decomposed in smaller images with one pixel overlapping.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Picture.Lighted">
      <summary>
            If false, the picture is not involved in lighting.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Picture.DrawEdge">
      <summary>
            If false, the picture edge is never drawn.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Picture.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,System.Drawing.Image)">
      <summary>
            Plane, base point and dimensions constructor.
            </summary>
      <param name="pln">The picture plane (also determines the picture rotation)</param>
      <param name="basePoint">The base point (also determines the distance from world origin)</param>
      <param name="width">The picture width</param>
      <param name="height">The picture height</param>
      <param name="image">The picture image</param>
      <remarks>The supported pixel formats are: <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed" />, <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed" />, <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb" />, <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb" /></remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Picture.#ctor(devDept.Geometry.Plane,System.Double,System.Double,System.Drawing.Image,System.Boolean)">
      <summary>
            Plane, dimensions and tiling constructor.
            </summary>
      <param name="pln">The picture plane (also determines the picture rotation)</param>
      <param name="width">The picture width</param>
      <param name="height">The picture height</param>
      <param name="image">The picture image</param>
      <param name="tiling">If true, texture coordinates are adjusted so that a big image can be decomposed in smaller pictures with one pixel overlap</param>
      <remarks>The supported pixel formats are: <see cref="F:System.Drawing.Imaging.PixelFormat.Format1bppIndexed" />, <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed" />, <see cref="F:System.Drawing.Imaging.PixelFormat.Format24bppRgb" />, <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppArgb" /></remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Picture.Clone">
      <summary>
            Creates a deep copy of this picture entity.
            </summary>
      <returns>The new picture object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Picture.PrepareGreyScaleImage(devDept.Graphics.RenderContextBase)">
      <summary>
            Creates the grey bitmap for the picture to draw during the Edit mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Picture.Image">
      <summary>
            Gets or sets the picture image.
            </summary>
      <remarks>The setter resets the <see cref="P:devDept.Eyeshot.Entities.Picture.FullPath" /> property as well.</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Picture.FullPath" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Picture.FullPath">
      <summary>
            Gets or sets the full path of the Picture's image for export purpose. Default value is null/Nothing.
            </summary>
      <remarks>
            This property is used when saving a file in DWG/DXF file format for skipping the automatic creation of the image on disk.
            By design, the Picture's image is stored in the same directory of the output file.
            This property is reset when <see cref="P:devDept.Eyeshot.Entities.Picture.Image" /> property is set.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Picture.Image" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Picture.AnisotropicFiltering">
      <summary>
            When true, enables anisotropic filtering for mipmapping.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Picture.MinifyingFunction">
      <summary>Gets or sets the texture minifying function. The texture minifying function is used whenever
            the pixel being textured maps to an area greater than one texture element. There are
            six defined minifying functions. Two of them use the nearest one or nearest four texture
            elements to compute the	texture	value. The other four use mipmaps.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Picture.MagnifyingFunction">
      <summary>Gets or sets the texture magnifying function. The texture magnifying function is used whenever
            the pixel being textured maps to an area smaller than one texture element. There are
            six defined minifying functions. Two of them use the nearest one or nearest four texture
            elements to compute the	texture	value. The other four use mipmaps.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Picture.Height">
      <summary>
            Gets or sets picture height.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Picture.Width">
      <summary>
            Gets or sets picture width.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Picture.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Picture.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.RevolvedSurface">
      <summary>
            Surface of revolution definition, created by rotating the generatrix about the axis of rotation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.RevolvedSurface.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.RevolvedSurface.#ctor(devDept.Geometry.Entities.GRevolvedSurface)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.RevolvedSurface.Generatrix">
      <summary>
            Gets the generatrix of this surface of revolution.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.RevolvedSurface.Axis" />
      <seealso cref="P:devDept.Eyeshot.Entities.RevolvedSurface.Center" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.RevolvedSurface.Center">
      <summary>
            Gets revolution center point.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.RevolvedSurface.Axis" />
      <seealso cref="P:devDept.Eyeshot.Entities.RevolvedSurface.Generatrix" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.RevolvedSurface.Axis">
      <summary>
            Gets the revolution axis.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.RevolvedSurface.Center" />
      <seealso cref="P:devDept.Eyeshot.Entities.RevolvedSurface.Generatrix" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.RevolvedSurface.Angle">
      <summary>
            Gets the revolution angle in radians.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.RevolvedSurface.SeamPlane">
      <summary>
            Gets the seam plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.RevolvedSurface.Plane">
      <summary>
            Gets the base plane.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.RevolvedSurface.Clone">
      <summary>
            Creates a deep copy of this revolution surface.
            </summary>
      <returns>The new revolution surface object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.RevolvedSurface.#ctor(devDept.Serialization.RevolvedSurfaceSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.RevolvedSurfaceSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.RevolvedSurfaceSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Entities.CylindricalSurface">
      <summary>
            Cylindrical surface definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.CylindricalSurface.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CylindricalSurface.#ctor(devDept.Geometry.Entities.GCylindricalSurface)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.CylindricalSurface.Radius">
      <summary>
            Gets the cone radius.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CylindricalSurface.Clone">
      <summary>
            Creates a deep copy of this cylindrical surface.
            </summary>
      <returns>The new cylindrical surface object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.CylindricalSurface.#ctor(devDept.Serialization.CylindricalSurfaceSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.CylindricalSurfaceSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.CylindricalSurfaceSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Entities.SphericalSurface">
      <summary>
            Spherical surface definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.SphericalSurface.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SphericalSurface.#ctor(devDept.Geometry.Entities.GSphericalSurface)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SphericalSurface.Clone">
      <summary>
            Creates a deep copy of this spherical surface.
            </summary>
      <returns>The new spherical surface object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.SphericalSurface.Radius">
      <summary>
            Gets sphere radius
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.SphericalSurface.#ctor(devDept.Serialization.SphericalSurfaceSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.SphericalSurfaceSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.SphericalSurfaceSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Entities.ConicalSurface">
      <summary>
            Conical surface definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ConicalSurface.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ConicalSurface.#ctor(devDept.Geometry.Entities.GConicalSurface)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ConicalSurface.Clone">
      <summary>
            Creates a deep copy of this conical surface.
            </summary>
      <returns>The new conical surface object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ConicalSurface.HalfAngle">
      <summary>
            Gets cone's angle.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ConicalSurface.Tip">
      <summary>
            Gets cone's tip.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ConicalSurface.#ctor(devDept.Serialization.ConicalSurfaceSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.ConicalSurfaceSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.ConicalSurfaceSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Entities.ToroidalSurface">
      <summary>
            Toroidal surface definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ToroidalSurface.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ToroidalSurface.#ctor(devDept.Geometry.Entities.GToroidalSurface)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ToroidalSurface.Type">
      <summary>
            Gets the torus type.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ToroidalSurface.Clone">
      <summary>
            Creates a deep copy of this toroidal surface.
            </summary>
      <returns>The new toroidal surface object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ToroidalSurface.MajorRadius">
      <summary>
            Gets torus' major radius.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ToroidalSurface.MinorRadius">
      <summary>
            Gets torus' minor radius.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.TabulatedSurface">
      <summary>
            Tabulated surface definition, formed by moving a line segment called the generatrix parallel to itself along a curve called the directrix.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.TabulatedSurface.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.TabulatedSurface.#ctor(devDept.Geometry.Entities.GTabulatedSurface)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.TabulatedSurface.Directrix">
      <summary>
            Gets the tabulated surface generatrix.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.TabulatedSurface.Generatrix">
      <summary>
            Gets the tabulated surface generatrix.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.TabulatedSurface.Clone">
      <summary>
            Creates a deep copy of this revolution surface.
            </summary>
      <returns>The new revolution surface object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.TabulatedSurface.#ctor(devDept.Serialization.TabulatedSurfaceSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.TabulatedSurfaceSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.TabulatedSurfaceSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.TabulatedSurface.IsOrthogonal">
      <summary>
            This method determines a priori if we can apply the fast point projection on this tabulated surface.
            </summary>
      <returns>True if the directix is a planar curve and its plane is perpendicular to the generatrix, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.TabulatedSurface.TryGetCylindrical(devDept.Eyeshot.Entities.Surface@)">
      <summary>
            Converts this tabulated surface to <see cref="T:devDept.Eyeshot.Entities.CylindricalSurface" /> (when possible).
            </summary>
      <returns>The resulting cylindrical surface (when possible)</returns>
      <returns>True if the operation succeeds, false otherwise.</returns>
      <remarks>To be converted, this tabulated surface must have a Circle or an Arc as directrix.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Entities.NurbsBase">
      <exclude />
      <excludetoc />
    </member>
    <member name="P:devDept.Eyeshot.Entities.NurbsBase.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.NurbsBase.#ctor(devDept.Geometry.Entities.GNurbsBase)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.NurbsBase.Bernstain(System.Int32,System.Int32,System.Double)">
      <summary>
            Computes the value of Berstain polynomial.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.NurbsBase.BernstainDer(System.Int32,System.Int32,System.Double)">
      <summary>
            Computes the value of the first derivative of a Berstain polynomial.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.NurbsBase.ChordLengthParametrization``1(System.Collections.Generic.IList{``0},System.Double[]@)">
      <summary>
            Computes chord length parameterization from a vector of points.
            </summary>
      <param name="Q">The list of 3D points</param>
      <param name="ub">The resulting length parameterization</param>
      <returns>The total chord length.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.NurbsBase.ChordLengthParametrization``1(System.Int32,System.Int32,System.Collections.Generic.IList{``0},System.Double[]@,System.Double[]@)">
      <summary>
            Computes chord length parameterization from a vector of points.
            </summary>
      <param name="from">Start index</param>
      <param name="to">End index</param>
      <param name="Q">The list of 3D points</param>
      <param name="distances">The length of each chord</param>
      <param name="ub">The resulting length parameterization</param>
      <returns>The total chord length.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.NurbsBase.ShowControl">
      <summary>
            If true, the control polygon/net for this entity is displayed.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.NurbsBase.ControlBoundingBox(devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Computes the extension of the control polygon/net.
            </summary>
      <param name="min">Min 3D point</param>
      <param name="max">Max 3D point</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.NurbsBase.ControlBoundingBox">
      <summary>
            Computes the extension of the control polygon/net.
            </summary>
      <returns>The 3D size of the control polygon/net</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.NurbsBase.UniformKnotVector(System.Int32,System.Int32)">
      <summary>
            Constructs a uniform clamped knot vector. v[j+1]-v[j] is equal for all inners nodes.
            </summary>
      <param name="p">Degree</param>
      <param name="n">Number of control points</param>
      <returns>The resulting knot vector.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.ConicalBar">
      <summary>
            Conical bar entity. A 3D line drawn like a cone.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ConicalBar.Clone">
      <summary>
            Creates a deep copy of this conic bar.
            </summary>
      <returns>The new conic bar object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ConicalBar.BaseRadius">
      <summary>
            Gets or sets the base radius of the ConicBar.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.ConicalBar.TopRadius">
      <summary>
            Gets or sets the top radius of the ConicBar.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ConicalBar.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.ConicalBar.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Ellipse">
      <summary>
            Ellipse entity.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Ellipse.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.#ctor(devDept.Geometry.Entities.GEllipse)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.#ctor(devDept.Geometry.Point3D,System.Double,System.Double)">
      <summary>Ellipse parallel to XY plane constructor.</summary>
      <param name="center">3D center point</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Ellipse parallel to XY plane constructor.</summary>
      <param name="x">Center's X coordinate</param>
      <param name="y">Center's Y coordinate</param>
      <param name="z">Center's Z coordinate</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double,System.Double)">
      <summary>Plane, center, radius X and radius Y constructor.</summary>
      <param name="ellipsePlane">Plane</param>
      <param name="center">2D center point</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double)">
      <summary>Ellipse not parallel to XY plane constructor.</summary>
      <param name="ellipsePlane">Plane</param>
      <param name="center">3D center point</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.#ctor(devDept.Geometry.Plane,System.Double,System.Double)">
      <summary>Ellipse not parallel to XY plane constructor.</summary>
      <param name="plane">Plane</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.Clone">
      <summary>
            Creates a deep copy of this ellipse.
            </summary>
      <returns>The new ellipse object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.IsInPlane(devDept.Geometry.Plane,System.Double)">
      <summary>
            Checks if the Ellipse lies on a specific plane.
            </summary>
      <param name="testPlane">The plane</param>
      <param name="tolerance">Tolerance</param>
      <returns>True if the test succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.IsPointInside(devDept.Geometry.Point3D)">
      <summary>
            Checks if a point is inside the Ellipse.
            </summary>
      <param name="testPoint">The point to be tested</param>
      <returns>True if the point is inside, false if it is outside or on the ellipse.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Ellipse.IsCircle">
      <summary>Returns true if Ellipse is a Circle.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Ellipse.RadiusX">
      <summary>
            Gets or sets ellipse's X radius.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when trying to set a RadiusX smaller than <see cref="F:devDept.Geometry.Utility.ZERO_TOLERANCE" />.</exception>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Ellipse.RadiusY">
      <summary>
            Gets or sets ellipse's Y radius.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when trying to set a RadiusY smaller than <see cref="F:devDept.Geometry.Utility.ZERO_TOLERANCE" />.</exception>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Ellipse.Center">
      <summary>
            Gets ellipse's center.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Ellipse.FocalDistance">
      <summary>
            Distance from the center to a focus, commonly called "c".
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.GetFoci(devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>Gets ellipse's foci.</summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.PointAt(System.Double)">
      <summary>Evaluates a point on the ellipse using the trigonometric parameterization.</summary>
      <param name="t">The parameter</param>
      <returns>The 3D point.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.TangentAt(System.Double)">
      <summary>
            Evaluates the unit tangent vector at a parameter.
            </summary>
      <param name="t">The parameter</param>
      <returns>The unit tangent.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.CurvatureAt(System.Double)">
      <summary>
            Evaluates the curvature 3D vector.
            </summary>
      <param name="t">Evaluation parameter</param>
      <returns>The 3D curvature vector.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.#ctor(devDept.Serialization.EllipseSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.EllipseSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.EllipseSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Ellipse.Domain">
      <summary>
            Gets or sets the ellipse's domain.
            The parameter t on an ellipse is not the angle of ellipse.PointAt(t) with the X-axis, even if t is in [0, 2*PI].
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when you try to set the <see cref="P:devDept.Eyeshot.Entities.Ellipse.Domain" /> property. Use EllipticalArc instead.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Ellipse.Length">
      <summary>
            Gets the ellipse length.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.PlanarEntity">
      <summary>
            Base class for all planar entities.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarEntity.#ctor(devDept.Geometry.Entities.GPlanarEntity)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarEntity.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarEntity.#ctor(devDept.Geometry.Entities.GPlanarEntity,System.Single)">
      <summary>
            Constructor with primitive and symbol size.
            </summary>
      <param name="primitive">The primitive object.</param>
      <param name="symbolSize">The plane symbol size</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarEntity.#ctor(devDept.Geometry.Plane)">
      <summary>
            Plane constructor.
            </summary>
      <param name="pln">The plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarEntity.#ctor(devDept.Geometry.Plane,System.Single)">
      <summary>
            Plane and symbol size constructor.
            </summary>
      <param name="pln">The plane</param>
      <param name="symbolSize">The plane symbol size</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarEntity.Update(devDept.Eyeshot.Entities.PlanarEntity)">
      <summary>
            Updates the contents of this entity with the contents of another entity.
            </summary>
      <param name="another">The other entity.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.PlanarEntity.Plane">
      <summary>Gets or sets the planar entity supporting plane.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.PlanarEntity.SymbolSize">
      <summary>
            Gets or sets the plane symbol size.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarEntity.ExtrudeAsMesh(System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Extrudes this entity along plane's Z-axis.
            </summary>
      <param name="amount">Extrusion amount, direction is along plane's Z-axis.</param>
      <param name="tol">Some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarEntity.ExtrudeAsMesh``1(System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Extrudes this entity along plane's Z-axis.
            </summary>
      <param name="amount">Extrusion amount, direction is along plane's Z-axis.</param>
      <param name="tol">Some entities need to be regenerated, this is the regeneration tolerance (chordal error).</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarEntity.ExtrudeAsSurface(System.Double)">
      <summary>
            Extrude this planar entity along plane's Z-axis.
            </summary>
      <param name="amount">Extrusion amount</param>
      <returns>The resulting surface.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarEntity.#ctor(devDept.Serialization.PlanarEntitySurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.PlanarEntitySurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.PlanarEntitySurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarEntity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarEntity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Table">
      <summary>
            Table entity.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.#ctor(System.Data.DataTable,devDept.Geometry.Plane,System.Double[],System.Double[],System.Double,devDept.Eyeshot.Entities.Table.flowDirection)">
      <summary>
            DataTable constructor
            </summary>
      <param name="data">The DataTable.</param>
      <param name="tablePlane">The orientation plane.</param>
      <param name="textHeight">The text height.</param>
      <param name="direction">The flow direction.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.#ctor(devDept.Geometry.Plane,System.Int32,System.Int32,System.Double,System.Double,System.Double,devDept.Eyeshot.Entities.Table.flowDirection)">
      <summary>
            Standard constructor.
            </summary>
      <param name="tablePlane">Orientation plane</param>
      <param name="rows">Number of rows</param>
      <param name="columns">Number of columns</param>
      <param name="rowsHeight">Rows height</param>
      <param name="columnsWidth">Columns width</param>
      <param name="textHeight">Default text height</param>
      <param name="direction">Flow direction</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.#ctor(devDept.Geometry.Plane,System.Int32,System.Int32,System.Double[],System.Double[],System.Double,devDept.Eyeshot.Entities.Table.flowDirection)">
      <summary>
            Standard constructor.
            </summary>
      <param name="tablePlane">Orientation plane</param>
      <param name="rows">Number of rows</param>
      <param name="columns">Number of columns</param>
      <param name="rowsHeights">Array with the heights of the rows</param>
      <param name="columnsWidths">Array with the widths of the columns</param>
      <param name="textHeight">Default text height</param>
      <param name="direction">Flow direction</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Table.flowDirection">
      <summary>
            Table entity flow direction.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Table.flowDirection.Down">
      <summary>
            Flow direction from top to bottom. 
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Table.flowDirection.Up">
      <summary>
            Flow direction from bottom to top.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Table.RowsNum">
      <summary>
            Gets the number of rows.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Table.ColumnsNum">
      <summary>
            Gets the number of columns.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Table.RowsHeights">
      <summary>
            Gets an array with the heights of the rows.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Table.ColumnsWidths">
      <summary>
            Gets an array with the widhts of the columns.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Table.Direction">
      <summary>
            Gets the table flow direction.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Table.Width">
      <summary>
            Gets the table width.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Table.Height">
      <summary>
            Gets the table height.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Table.HorzCellMargin">
      <summary>
            Gets or sets the horizontal margin of the text for all cells.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Table.VertCellMargin">
      <summary>
            Gets or sets the vertical margin of the text for all cells.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.ConvertToSurrogate">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.Regen(devDept.Eyeshot.RegenParams)">
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when the regen params don't contain a valid Workspace control.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.Regen(System.Double)">
      <summary>
            Can't call Table.Regen(double deviation), call Table.Regen(RegenParams data) instead.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown if you use this method.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.Compile(devDept.Eyeshot.CompileParams)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.ExtrudeAsMesh(System.Double,System.Double,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Can't extrude a Table entity.
            </summary>
      <exception cref="T:System.NotImplementedException">Thrown if you use this method.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.ExtrudeAsSurface(System.Double)">
      <summary>
            Can't extrude a Table entity.
            </summary>
      <exception cref="T:System.NotImplementedException">Thrown if you use this method.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.Clone">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.Dump(devDept.Geometry.linearUnitsType,devDept.Geometry.massUnitsType,devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.MaterialKeyedCollection,devDept.Eyeshot.BlockKeyedCollection)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.Dispose">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.Explode">
      <summary>
            Explodes the Table into <see cref="T:devDept.Eyeshot.Entities.Line" /> and <see cref="T:devDept.Eyeshot.Entities.MultilineText" />.
            </summary>
      <returns>The array of individual entities</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Merges the specified cells.
            </summary>
      <param name="minRow">Minimum row index of the merged cells</param>
      <param name="minCol">Minimum column index of the merged cells</param>
      <param name="maxRow">Maximum row index of the merged cells</param>
      <param name="maxCol">Maximum column index of the merged cells</param>
      <returns>True if the operation succeeded, false otherwise</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.IsMerged(System.Int32,System.Int32)">
      <summary>
            Gets the merge status of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
      <returns>True if the cell is merged</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.MergeRange(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
            Gets the merge range of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
      <param name="minRow">The minimum row index of the marge range</param>
      <param name="minCol">The minimum column index of the marge range</param>
      <param name="maxRow">The maximum row index of the marge range</param>
      <param name="maxCol">The maximum column index of the marge range</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.GetTextString(System.Int32,System.Int32)">
      <summary>
            Gets the text string of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.SetTextString(System.Int32,System.Int32,System.String)">
      <summary>
            Sets the text string of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
      <param name="text">Text string</param>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.GetTextHeight(System.Int32,System.Int32)">
      <summary>
            Gets the text height of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.SetTextHeight(System.Int32,System.Int32,System.Double)">
      <summary>
            Sets the text height of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
      <param name="height">Text height</param>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.GetStyleName(System.Int32,System.Int32)">
      <summary>
            Gets the text style name of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.SetStyleName(System.Int32,System.Int32,System.String)">
      <summary>
            Sets the text style name of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
      <param name="styleName">Text style name</param>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.GetAlignment(System.Int32,System.Int32)">
      <summary>
            Gets the text alignment of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.SetAlignment(System.Int32,System.Int32,devDept.Eyeshot.Entities.Text.alignmentType)">
      <summary>
            Sets the text alignment of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
      <param name="alignment">Text alignment</param>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.GetLineSpaceDistance(System.Int32,System.Int32)">
      <summary>
            Gets the spacing between lines of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.SetLineSpaceDistance(System.Int32,System.Int32,System.Double)">
      <summary>
            Sets the spacing between lines of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
      <param name="value">Line space distance</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.GetWrap(System.Int32,System.Int32)">
      <summary>
            Gets the wrap state of the specified cell. When true, the line of text is split (if it contain spaces) into more lines so that their lengths are less than cell width/&gt;. When false, the line is truncated if it goes beyond the cell width"/&gt;.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
      <remarks>If the value is true and there are no spaces before the cell width of the text, the split is done at the first available space.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.SetWrap(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Sets the wrap state of the specified cell. When true, the line of text is split (if it contain spaces) into more lines so that their lengths are less than cell width/&gt;. When false, the line is truncated if it goes beyond the cell width"/&gt;.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
      <param name="value">Wrap status</param>
      <remarks>If the value is true and there are no spaces before the cell width of the text, the split is done at the first available space.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.GetBottomLeftCorner(System.Int32,System.Int32)">
      <summary>
            Gets the bottom-left corner point of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.GetCenter(System.Int32,System.Int32)">
      <summary>
            Gets the center point of the specified cell.
            </summary>
      <param name="row">Row index</param>
      <param name="col">Column index</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.GetRectWidth(System.Int32,System.Int32)">
      <summary>
            Gets the width of the specified cell.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Table.GetRectHeight(System.Int32,System.Int32)">
      <summary>
            Gets the height of the specified cell.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.EllipticalArc">
      <summary>
            Elliptical arc entity.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.EllipticalArc.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Entities.GEllipticalArc)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
      <summary>Arc parallel to XY plane constructor.</summary>
      <param name="center">3D center point</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="endParameter">Span parameter [0, endParameter]</param>
      <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Arc parallel to XY plane constructor.</summary>
      <param name="x">Center's X coordinate</param>
      <param name="y">Center's Y coordinate</param>
      <param name="z">Center's Z coordinate</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="endParameter">Span parameter will be [0, endParameter]</param>
      <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Point3D,System.Double,System.Double,System.Double,System.Double)">
      <summary>Arc parallel to XY plane constructor.</summary>
      <param name="center">3D center point</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="startParameter">Start parameter</param>
      <param name="endParameter">End parameter</param>
      <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Point3D,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>Arc parallel to XY plane constructor.</summary>
      <param name="center">3D center point</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="startAngleInRadians">Start angle in radians</param>
      <param name="endAngleInRadians">End angle in radians</param>
      <param name="polarAngles">When True the two previous parameters represent angles from the X-axis, otherwise they represent parameters on the ellipse.</param>
      <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Arc parallel to XY plane constructor.</summary>
      <param name="x">Center's X coordinate</param>
      <param name="y">Center's Y coordinate</param>
      <param name="z">Center's Z coordinate</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="startParameter">Start parameter</param>
      <param name="endParameter">End parameter</param>
      <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>Arc parallel to XY plane constructor.</summary>
      <param name="x">Center's X coordinate</param>
      <param name="y">Center's Y coordinate</param>
      <param name="z">Center's Z coordinate</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="startAngleInRadians">Start angle in radians</param>
      <param name="endAngleInRadians">End angle in radians</param>
      <param name="polarAngles">When True the two previous parameters represent angles from the X-axis, otherwise they represent parameters on the ellipse.</param>
      <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
      <summary>Arc not parallel to XY plane constructor.</summary>
      <param name="arcPlane">Plane</param>
      <param name="center">3D center point</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="endParameter">Span parameter will be [0, endParameter]</param>
      <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,System.Double,System.Double)">
      <summary>Arc not parallel to XY plane constructor with center.</summary>
      <param name="arcPlane">Plane</param>
      <param name="center">3D center point</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="startParameter">Start parameter</param>
      <param name="endParameter">End parameter</param>
      <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double)">
      <summary>Arc not parallel to XY plane constructor.</summary>
      <param name="arcPlane">Plane</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="startParameter">Start parameter</param>
      <param name="endParameter">End parameter</param>
      <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>Arc not parallel to XY plane constructor.</summary>
      <param name="arcPlane">Plane</param>
      <param name="center">3D center point</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="startAngleInRadians">Start angle in radians</param>
      <param name="endAngleInRadians">End angle in radians</param>
      <param name="polarAngles">When True the two previous parameters represent angles from the X-axis, otherwise they represent parameters on the ellipse.</param>
      <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double,System.Double,System.Double,System.Double)">
      <summary>Sketch plane constructor.</summary>
      <param name="arcPlane">Plane</param>
      <param name="center">2D center point</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="startParameter">Start parameter</param>
      <param name="endParameter">End parameter</param>
      <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>Sketch plane constructor.</summary>
      <param name="arcPlane">Plane</param>
      <param name="center">2D center point</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="startAngleInRadians">Start angle in radians</param>
      <param name="endAngleInRadians">End angle in radians</param>
      <param name="polarAngles">When True the two previous parameters represent angles from the X-axis, otherwise they represent parameters on the ellipse.</param>
      <remarks>The parameter t on an ellipse is not the angle of (X(t),Y(t)) with the X-axis, even if also t is in [0, 2*PI].</remarks>
      <seealso cref="M:devDept.Geometry.Utility.DegToRad(System.Double)" />
      <seealso cref="M:devDept.Geometry.Utility.RadToDeg(System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Boolean)">
      <summary>Plane, center, radius X, radius Y, start and end point constructor.</summary>
      <param name="arcPlane">Plane</param>
      <param name="center">3D center point</param>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="start">3D start point</param>
      <param name="end">3D end point</param>
      <param name="flip">If true, the complementary arc is created.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.Clone">
      <summary>
            Creates a deep copy of this elliptical arc.
            </summary>
      <returns>The new elliptical arc object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.GetIntervalOfAngles(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
      <summary>
            Gets an interval of angles corresponding to and interval of parameters.
            </summary>
      <param name="rx">Radius X</param>
      <param name="ry">Radius Y</param>
      <param name="startParam">Start parameter</param>
      <param name="endParam">End parameter</param>
      <param name="startAngleInRadians">Start angle in radians</param>
      <param name="endAngleInRadians">End angle in radians</param>
      <returns>True if the interval of parameters is decreasing.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.EllipticalArc.AngleInRadians">
      <summary>
            Gets arc's angle in radians.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.EllipticalArc.AngleInDegrees">
      <summary>
            Gets arc's angle in degrees.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.EllipticalArc.Domain">
      <summary>
            Gets or sets the elliptical arc's domain.
            The parameter t on an elliptical arc is not the angle of ellipticalArc.PointAt(t) with the X-axis, even if t is in [0, 2*PI].
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when trying to set a domain smaller than <see cref="F:devDept.Geometry.Utility.ZERO_TOLERANCE" />.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Serialization.EllipticalArcSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.EllipticalArcSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.EllipticalArcSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.BlockReference">
      <summary>
            BlockReference entity.
            </summary>
      <remarks>
            Please note that scaling entities of the <see cref="T:devDept.Eyeshot.Entities.Mesh" /> family is not
            recommended. It will result in color alteration because scaling is applied also to
            triangles normal.
            </remarks>
      <seealso cref="T:devDept.Eyeshot.Block" />
      <seealso cref="P:devDept.Eyeshot.Workspace.Blocks" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.BlockReference.Attributes">
      <summary>
            Gets the dictionary of AttributeReference.
            </summary>
      <remarks>The suffixes "#1", "#2" etc... are used to distinguish between different AttributeReferences with the same tag name when reading from dwg and are removed from the tag names when the file is written to dwg.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.BlockReference.AccumulatedParentsTransform">
      <summary>
            Gets the global transformation given by the current BlockReference's transformation and its parents' ones.
            </summary>
      <remarks>The BlockReference must have been set as current with <see cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.GetFullTransformation(devDept.Eyeshot.BlockKeyedCollection)">
      <summary>
            Gets the BlockReference transformation combined with the <see cref="P:devDept.Eyeshot.Block.BasePoint" /> position.
            </summary>
      <param name="blocks">The blocks collection</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.GetFullTransformation``1(devDept.Eyeshot.BlockKeyedCollection{``0},devDept.Eyeshot.BlockKeyedCollection{``0})">
      <summary>
            Gets the BlockReference transformation combined with the <see cref="P:devDept.Eyeshot.Block.BasePoint" /> position.
            </summary>
      <param name="blocks">The blocks collection</param>
      <param name="parentBlocks">The parent blocks collection</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(System.Double,System.Double,System.Double,System.String,System.Double)">
      <summary>
            Individual insertion point coordinates constructor.
            </summary>
      <param name="x">Insertion point's X coordinates</param>
      <param name="y">Insertion point's Y coordinates</param>
      <param name="z">Insertion point's Z coordinates</param>
      <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block" /> to be inserted</param>
      <param name="rotationAngleInRadians">Rotation angle in radians</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(System.Double,System.Double,System.Double,System.String,devDept.Geometry.linearUnitsType,devDept.Eyeshot.BlockKeyedCollection,System.Double)">
      <summary>
            Individual insertion point coordinates and units constructor.
            </summary>
      <param name="x">Insertion point's X coordinates</param>
      <param name="y">Insertion point's Y coordinates</param>
      <param name="z">Insertion point's Z coordinates</param>
      <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block" /> to be inserted</param>
      <param name="globalUnits">The units to scale inserted content</param>
      <param name="blocks">The <see cref="P:devDept.Eyeshot.Workspace.Blocks" /> collection</param>
      <param name="rotationAngleInRadians">Rotation angle in radians</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Individual insertion point coordinates and scale constructor.
            </summary>
      <param name="x">Insertion point's X coordinates</param>
      <param name="y">Insertion point's Y coordinates</param>
      <param name="z">Insertion point's Z coordinates</param>
      <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block" /> to be inserted</param>
      <param name="sx">Scale factor along X axis</param>
      <param name="sy">Scale factor along Y axis</param>
      <param name="sz">Scale factor along Z axis</param>
      <param name="rotationAngleInRadians">Rotation angle in radians</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(devDept.Geometry.Point3D,System.String,System.Double)">
      <summary>
            3D insertion point constructor.
            </summary>
      <param name="insPoint">Insertion point</param>
      <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block" /> to be inserted</param>
      <param name="rotationAngleInRadians">Rotation angle in radians</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(devDept.Geometry.Point3D,System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            3D insertion point and scale constructor.
            </summary>
      <param name="insPoint">Insertion point</param>
      <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block" /> to be inserted</param>
      <param name="sx">Scale factor along X axis</param>
      <param name="sy">Scale factor along Y axis</param>
      <param name="sz">Scale factor along Z axis</param>
      <param name="rotationAngleInRadians">Rotation angle in radians</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(System.String)">
      <summary>
            Block name constructor.
            </summary>
      <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block" /> to be inserted</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(devDept.Geometry.Transformation,System.String)">
      <summary>
            Transformation constructor.
            </summary>
      <param name="t">The transformation</param>
      <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block" /> to be inserted</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(devDept.Geometry.Transformation,System.String,devDept.Geometry.linearUnitsType,devDept.Eyeshot.BlockKeyedCollection)">
      <summary>
            Transformation and units constructor.
            </summary>
      <param name="t">The transformation</param>
      <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block" /> to be inserted</param>
      <param name="globalUnits">The units to scale inserted content</param>
      <param name="blocks">The <see cref="P:devDept.Eyeshot.Workspace.Blocks" /> collection</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.Clone">
      <summary>
            Creates a deep copy of this block reference.
            </summary>
      <returns>The new block reference object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.BlockReference.BlockName">
      <summary>
            Gets or sets the name of the referenced <see cref="T:devDept.Eyeshot.Block" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.BlockReference.InsertionPoint">
      <summary>
            Gets or sets the insertion point for this block reference.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.GetScaleFactorX">
      <summary>
            Gets the scale factor along X.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.GetScaleFactorY">
      <summary>
            Gets the scale factor along Y.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.GetScaleFactorZ">
      <summary>
            Gets the scale factor along Z.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.BlockReference.Transformation">
      <summary>
            Gets or sets the transformation matrix for this block reference.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.ExplodeDeep(devDept.Eyeshot.BlockKeyedCollection,System.Boolean)">
      <summary>
            Explodes the block reference recursively. 
            </summary>
      <param name="blocks">The block collection.</param>
      <param name="keepTessellation">When true, the tessellation of the original entity is preserved.</param>
      <return>The flatten array of entities.</return>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.GetBlockUnits(devDept.Eyeshot.BlockKeyedCollection)">
      <summary>
            Gets the block definition linear units.
            </summary>
      <param name="blocks">The <see cref="P:devDept.Eyeshot.Workspace.Blocks" /> collection</param>
      <returns>The referenced block linear units.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.GetEntities(devDept.Eyeshot.BlockKeyedCollection,devDept.Eyeshot.BlockKeyedCollection)">
      <summary>
            Gets the entities of the block referred by this BlockReference.
            </summary>
      <param name="blocks">The blocks collection</param>
      <param name="parentBlocks">The parent blocks collection</param>
      <returns>The entities of the referred block.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.Explode(devDept.Eyeshot.BlockKeyedCollection,System.Boolean,System.Boolean,devDept.Eyeshot.Workspace)">
      <summary>
            Returns the block reference individual entity list.
            </summary>
      <param name="blocks">The <see cref="P:devDept.Eyeshot.Workspace.Blocks" /> collection</param>
      <param name="resolveByParent">If true, the <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /><see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" />, <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod" /> and <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeightMethod" /> are resolved propagating the BlockReference properties.</param>
      <param name="keepTessellation">When true, the tessellation of the original entity is preserved.</param>
      <param name="workspace">The current <see cref="T:devDept.Eyeshot.Workspace" /> instance.</param>
      <returns>The list of individual entities.</returns>
      <seealso cref="M:devDept.Eyeshot.EntityList.Explode(devDept.Eyeshot.Entities.BlockReference,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.MoveTo(devDept.Eyeshot.DrawParams)">
      <summary>
            Allow the entity to be moved/rotated on the GPU using RenderContext calls during
            animation.
            </summary>
      <remarks>
        <para>It is always recommended to call base class implementation from overriders.</para>
        <para>It is important when applying an on-the-fly transformation in this method to override the <see cref="M:devDept.Eyeshot.Entities.Entity.IsInFrustum(devDept.Eyeshot.FrustumParams,devDept.Geometry.Point3D,System.Double)">BlockReference.IsInFrustum()</see>
                and return true without calling the base method in order to avoid undesired clipping.</para>
      </remarks>
      <seealso cref="M:devDept.Eyeshot.Design.StartAnimation(System.Int32)">StartAnimation Method (devDept.Eyeshot.Design)</seealso>
      <seealso cref="M:devDept.Eyeshot.Design.StopAnimation">StopAnimation Method (devDept.Eyeshot.Design)</seealso>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.Transform(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Eyeshot.BlockKeyedCollection)">
      <summary>
            Applies the block reference transformation to a list of 3D points.
            </summary>
      <param name="points">A list of 3D points</param>
      <param name="blocks">Blocks dictionary</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.FindClosestTriangle(devDept.Geometry.Segment3D,devDept.Eyeshot.BlockKeyedCollection)">
      <summary>
            Returns a list of HitTriangle that intersect with the provided segment.
            </summary>
      <param name="seg">The 3D segment</param>
      <param name="blocks">The Workspace's Block collection</param>
      <returns>The sorted list of HitTriangles intersecting the provided segment.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.Draw(devDept.Eyeshot.Workspace.DrawEntitiesParams,devDept.Eyeshot.Workspace.drawCallback)">
      <summary>
            Draws the BlockReference.
            </summary>
      <param name="myParams">The parameters</param>
      <param name="drawCall">The draw callback</param>
      <remarks>Override this method to do special things before or after drawing the blockreference.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.DrawForSelection(devDept.Eyeshot.Workspace.DrawEntitiesParams,devDept.Eyeshot.Workspace.drawForSelectionCallback)">
      <summary>
            Draws the BlockReference for the selection.
            </summary>
      <typeparam name="T">The entity</typeparam>
      <param name="myParams">The parameter</param>
      <param name="drawCall">The draw callback</param>
      <remarks>Override this method to do special things before or after drawing the blockreference for the selection.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.BlockReference.DrawTrianglesForShadowMap(devDept.Eyeshot.Workspace.DrawEntitiesParams)">
      <summary>
            Draws the triangles for the shadow map creation.
            </summary>
      <param name="data">The draw parameters</param>
      <returns>True if successful, false otherwise/</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.PointCloud">
      <summary>
        <para>Point cloud entity. Depending on the types of vertices can assume
                different configurations, see table below:</para>
        <para>
          <list type="table">
            <item>
              <term>
                <see cref="T:devDept.Geometry.Point3D" />
              </term>
              <description>
                <see cref="T:devDept.Geometry.PointRGB" />
              </description>
            </item>
            <item>
              <term>Plain</term>
              <description>Multicolor</description>
            </item>
          </list>
        </para>
      </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.PointCloud.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCloud.#ctor(devDept.Geometry.Entities.GPointCloud)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.PointCloud.Nature">
      <summary>
            Gets point cloud nature.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.PointCloud.DrawingStyle">
      <summary>
            Gets or sets point cloud drawing style.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCloud.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point3D})">
      <summary>Standard constructor.</summary>
      <param name="points">The collection of 3D points</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCloud.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Single)">
      <summary>Point list and point size constructor.</summary>
      <param name="points">The collection of 3D points</param>
      <param name="pointSize">On screen point size</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCloud.#ctor(System.Int32,System.Single,devDept.Geometry.Entities.GPointCloud.natureType)">
      <summary>Point list, point size and point cloud nature constructor.</summary>
      <param name="numPoints">Number of point the point cloud will hold</param>
      <param name="pointSize">On screen point size</param>
      <param name="nature">The point cloud nature</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCloud.Clone">
      <summary>
            Creates a deep copy of this point cloud.
            </summary>
      <returns>The new point cloud object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Entities.PointCloud.Vertices">
      <summary>
            Gets or sets point cloud's 3D vertices.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCloud.FitLine(devDept.Geometry.Point3D@,devDept.Geometry.Vector3D@)">
      <summary>
            Fits a line to the point cloud vertices.
            </summary>
      <param name="p">The line start point</param>
      <param name="v">The line direction</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCloud.FitCircle(devDept.Geometry.Plane@,System.Double@)">
      <summary>
            Fits a circle to the point cloud vertices.
            </summary>
      <param name="pln">The plane of the circle, whose origin is the center of the circle</param>
      <param name="radius">The radius of the circle</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCloud.FitPlane">
      <summary>
            Fits a plane to the point cloud vertices.
            </summary>
      <returns>The plane.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCloud.#ctor(devDept.Serialization.PointCloudSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.PointCloudSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.PointCloudSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCloud.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PointCloud.ConvertToFastPointCloud">
      <summary>
            Converts this point cloud into a FastPointCloud.
            </summary>
      <returns>The resulting FastPointCloud.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Entities.PointCloud.drawingStyleType">
      <summary>
            Point cloud drawing style type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.PointCloud.drawingStyleType.Points">
      <summary>Points only</summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.PointCloud.drawingStyleType.Lines">
      <summary>Lines only</summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.PointCloud.drawingStyleType.LineStrip">
      <summary>Line strip only</summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.PointCloud.drawingStyleType.PointsAndLines">
      <summary>Both points and lines</summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.PointCloud.drawingStyleType.PointsAndLineStrip">
      <summary>
            Both points and line strip.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Text">
      <summary>
            Text entity.
            </summary>
      <remarks>Text font can be changed using the <see cref="P:devDept.Eyeshot.Entities.Text.StyleName" /> property and calling the Workspace.Entities.Regen() method.</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Text.StyleName" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Text.StyleName">
      <summary>
            Gets or sets the text style name.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Workspace.TextStyles" />
    </member>
    <member name="P:devDept.Eyeshot.Entities.Text.Backward">
      <summary>
            The text is flipped in X.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Text.UpsideDown">
      <summary>
            The text is flipped in Y.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(System.Double,System.Double,System.String,System.Double)">
      <summary>Standard constructor.</summary>
      <param name="x">Position along X axis</param>
      <param name="y">Position along Y axis</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(System.Double,System.Double,System.Double,System.String,System.Double)">
      <summary>Standard constructor.</summary>
      <param name="x">Position along X axis</param>
      <param name="y">Position along Y axis</param>
      <param name="z">Elevation</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
      <summary>Standard constructor.</summary>
      <param name="x">Position along X axis</param>
      <param name="y">Position along Y axis</param>
      <param name="z">Elevation</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
      <summary>Standard constructor.</summary>
      <param name="x">Position along X axis</param>
      <param name="y">Position along Y axis</param>
      <param name="z">Elevation</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(System.Double,System.Double,System.Double,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="x">Position along X axis</param>
      <param name="y">Position along Y axis</param>
      <param name="z">Elevation</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
      <param name="simplify">Text simplification flag</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Point3D,System.String,System.Double)">
      <summary>Standard constructor.</summary>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Point3D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
      <summary>Standard constructor.</summary>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Point3D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
      <summary>Standard constructor.</summary>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Point3D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
      <param name="simplify">Text simplification flag</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,System.String,System.Double)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
      <param name="simplify">Text simplification flag</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean)">
      <summary>Not parallel to XY plane constructor.</summary>
      <param name="textPlane">Orientation plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
      <param name="simplify">Text simplification flag</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double)">
      <summary>Sketch plane constructor.</summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType)">
      <summary>Sketch plane constructor.</summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String)">
      <summary>Sketch plane constructor.</summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point2D,System.String,System.Double,devDept.Eyeshot.Entities.Text.alignmentType,System.String,System.Boolean)">
      <summary>Sketch plane constructor.</summary>
      <param name="sketchPlane">Sketch plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="textString">Text string</param>
      <param name="height">Text height</param>
      <param name="alignment">Text alignment</param>
      <param name="styleName">The text style name (see <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />)</param>
      <param name="simplify">Text simplification flag</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Text.TextString">
      <summary>
            Gets or sets the text itself.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Text.Height">
      <summary>
            Gets or sets the text height.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Text.WidthFactor">
      <summary>
            Gets or sets the text width factor.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
      <remarks>If -1, the value is inherited from the <see cref="P:devDept.Eyeshot.TextStyle.WidthFactor" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Text.Alignment">
      <summary>
            Gets or sets the text alignment.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Text.InsertionPoint">
      <summary>
            Gets or sets the insertion point (it corresponds to the <see cref="!:Text.Plane" /> origin).
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Text.Simplify">
      <summary>
            Gets or sets a value indicating whether the text must be simplified when it becomes small on screen. Ignored when <see cref="P:devDept.Eyeshot.Workspace.Turbo" /> is enabled.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Text.Billboard">
      <summary>
            Gets or sets a value indicating whether the text must be always faces the camera.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.DrawSimplified(devDept.Graphics.RenderContextBase)">
      <summary>
            Draws a rectangle to approximate small texts for better performances.
            </summary>
      <remarks>When <see cref="P:devDept.Eyeshot.Entities.Text.Simplify" /> is true.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.CheckRegenParams(devDept.Eyeshot.RegenParams)">
      <summary>
            All the Text derived classes must call this method at the beginning of the <see cref="M:devDept.Eyeshot.Entities.Text.Regen(devDept.Eyeshot.RegenParams)" /> method.
            </summary>
      <param name="data">The <see cref="T:devDept.Eyeshot.RegenParams" /> data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.Regen(devDept.Eyeshot.RegenParams)">
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when the regen params don't contain a valid Workspace control.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.ConvertToMesh(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Converts the text to a list of meshes.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /></param>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when the text to convert has an SHX font style.</exception>
      <returns>The list of meshes.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.ConvertToLinearPaths(System.Double,devDept.Eyeshot.Workspace)">
      <summary>
            Converts the text outlines to LinearPath.
            </summary>
      <param name="deviation">The maximum deviation</param>
      <param name="workspace">The workspace parent control</param>
      <returns>The array of LinearPaths</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.ConvertToLinearPaths(System.Double,devDept.Eyeshot.Workspace,devDept.Eyeshot.Entities.LinearPath[]@,devDept.Eyeshot.Entities.LinearPath[][]@)">
      <summary>
            Converts the text outlines to LinearPath, separating outer and inner loops.
            </summary>
      <param name="deviation">The maximum deviation</param>
      <param name="workspace">The workspace parent control</param>
      <param name="outers">The outer loops</param>
      <param name="inners">The inner loops belonging to each outer loops</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.ConvertToCurves(devDept.Eyeshot.Workspace)">
      <summary>
            Converts the text outlines to a list of composite curves.
            </summary>
      <param name="workspace">The workspace parent control</param>
      <returns>The array of composite curves</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.ConvertToCurves(devDept.Eyeshot.Workspace,devDept.Eyeshot.Entities.ICurve[]@,devDept.Eyeshot.Entities.ICurve[][]@)">
      <summary>
            Converts the text outlines to composite curves, separating outer and inner loops.
            </summary>
      <param name="workspace">The workspace parent control</param>
      <param name="outers">The outer loops</param>
      <param name="inners">The inner loops belonging to each outer loops</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.ConvertToRegions(devDept.Eyeshot.Workspace)">
      <summary>
            Converts the text outlines to a list of regions.
            </summary>
      <param name="workspace">The workspace parent control</param>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when the text to convert has an SHX font style.</exception>
      <returns>The array of regions</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.ConvertToSurfaces(devDept.Eyeshot.Workspace)">
      <summary>
            Converts the text outlines to a list of surfaces.
            </summary>
      <param name="workspace">The workspace parent control</param>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when the text to convert has an SHX font style.</exception>
      <returns>The array of surfaces</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.GetTextRectangleVertices">
      <summary>
            Gets the array of vertices related to dimension's texts.
            </summary>
      <returns>4 vertices of the rectangle that circumscribe the text.</returns>
      <remarks>This method is used for HiddenLine printing.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Text.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.Text.alignmentType">
      <summary>
            Text entity alignment type
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.BottomLeft">
      <summary>
            Content is vertically aligned at the bottom, and horizontally aligned on the left.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.BottomCenter">
      <summary>
            Content is vertically aligned at the bottom, and horizontally aligned at the center.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.BottomRight">
      <summary>
            Content is vertically aligned at the bottom, and horizontally aligned on the right.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.MiddleLeft">
      <summary>
            Content is vertically aligned in the middle, and horizontally aligned on the left.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.MiddleCenter">
      <summary>
            Content is vertically aligned in the middle, and horizontally aligned at the center.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.MiddleRight">
      <summary>
            Content is vertically aligned in the middle, and horizontally aligned on the right.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.TopLeft">
      <summary>
            Content is vertically aligned at the top, and horizontally aligned on the left.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.TopCenter">
      <summary>
            Content is vertically aligned at the top, and horizontally aligned at the center.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.TopRight">
      <summary>
            Content is vertically aligned at the top, and horizontally aligned on the right.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.BaselineLeft">
      <summary>
            Content is vertically aligned at the baseline, and horizontally aligned on the left.
            Not applicable to <see cref="T:devDept.Eyeshot.Entities.MultilineText" /> entity.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.BaselineCenter">
      <summary>
            Content is vertically aligned at the baseline, and horizontally aligned at the center.
            Not applicable to <see cref="T:devDept.Eyeshot.Entities.MultilineText" /> entity.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Entities.Text.alignmentType.BaselineRight">
      <summary>
            Content is vertically aligned at the baseline, and horizontally aligned on the right.
            Not applicable to <see cref="T:devDept.Eyeshot.Entities.MultilineText" /> entity.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Entities.AttributeReferenceDictionary">
      <summary>
            AttributeReference dictionary class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AttributeReferenceDictionary.Add(System.String,System.String)">
      <summary>
            Adds an <see cref="T:devDept.Eyeshot.AttributeReference" /> inheriting the properties from the attribute defined in the Block.
            </summary>
      <param name="tag">The tag</param>
      <param name="value">The text</param>
      <remarks>The properties are inherited at the next <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /></remarks>
      <seealso cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)" />
    </member>
    <member name="T:devDept.Eyeshot.Entities.Attribute">
      <summary>
            AutoCAD attribute definition.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Attribute.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.String,System.Double)">
      <summary>
      </summary>
      <param name="pln">
      </param>
      <param name="insPoint">
      </param>
      <param name="tag">The tag</param>
      <param name="value">The attribute value</param>
      <param name="height">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Attribute.#ctor(devDept.Geometry.Point3D,System.String,System.String,System.Double)">
      <summary>
      </summary>
      <param name="insPoint">
      </param>
      <param name="tag">The tag</param>
      <param name="value">The attribute value</param>
      <param name="height">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.Attribute.#ctor(System.Double,System.Double,System.Double,System.String,System.String,System.Double)">
      <summary>
      </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="z">
      </param>
      <param name="tag">The attribute tag</param>
      <param name="value">The attribute value</param>
      <param name="height">
      </param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Attribute.Prompt">
      <summary>
            Gets or sets the attribute prompt text.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Attribute.Tag">
      <summary>
            Gets or sets the attribute tag.
            </summary>
      <remarks>It's an override of the <see cref="P:devDept.Eyeshot.Entities.Text.TextString" /></remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Attribute.Value">
      <summary>
            Gets or sets the attribute value.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.Attribute.Invisible">
      <summary>
            Gets or sets a value that determines if the <see cref="T:devDept.Eyeshot.AttributeReference" /> is visible or not.
            </summary>
      <remarks>It does not affect the visibility of the <see cref="T:devDept.Eyeshot.Entities.Attribute" /> but only of the <see cref="T:devDept.Eyeshot.AttributeReference" />. 
            This allows to keep the Attribute visible when editing a <see cref="T:devDept.Eyeshot.Entities.BlockReference" /> (with <see cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)" />), so it can be selected and
            the <see cref="P:devDept.Eyeshot.Entities.Attribute.Invisible" /> property can be set to true or false without affecting its visibility on screen that would prevent to select it again. 
            Then the <see cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)" /> will propagate the Invisible property to the AttributeReferences and make them invisible
            (after the current BlockReference is reset).
            </remarks>
    </member>
    <member name="T:devDept.Eyeshot.Entities.AttributeBase">
      <summary>
            AutoCAD attribute definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AttributeBase.Invisible">
      <summary>
            Autodesk attribute mode. The attribute text is invisible.
            </summary>
      <remarks>To see the effect of this change, call <see cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)" /></remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AttributeBase.Constant">
      <summary>
            Autodesk attribute mode. The attribute text is a fixed value and the value is preset.
            </summary>
      <remarks>To see the effect of this change, call <see cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)" /></remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AttributeBase.Verify">
      <summary>
            Autodesk attribute mode. The attribute value is entered twice; upon block insertion, a prompt displays to verify that the attribute value is correct. 
            </summary>
      <remarks>To see the effect of this change, call <see cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)" /></remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AttributeBase.Preset">
      <summary>
            Autodesk attribute mode. The attribute is set to the default value if a preset value exists.
            </summary>
      <remarks>To see the effect of this change, call <see cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)" /></remarks>
    </member>
    <member name="P:devDept.Eyeshot.Entities.AttributeBase.NormalMode">
      <summary>
            If true, the attribute modes are all false.
            </summary>
      <remarks>To see the effect of this change, call <see cref="M:devDept.Eyeshot.EntityList.SynchronizeAttributes(System.String)" /></remarks>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AttributeBase.#ctor(System.Double,System.Double,System.Double,System.String,System.Double)">
      <summary>
            Individual coordinates constructor.
            </summary>
      <param name="x">Insertion point X-coordinate</param>
      <param name="y">Insertion point X-coordinate</param>
      <param name="z">Insertion point X-coordinate</param>
      <param name="text">Text</param>
      <param name="height">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AttributeBase.#ctor(devDept.Geometry.Point3D,System.String,System.Double)">
      <summary>
            3D point constructor.
            </summary>
      <param name="insPoint">Insertion point</param>
      <param name="text">Text</param>
      <param name="height">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AttributeBase.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double)">
      <summary>
            3D point and plane constructor.
            </summary>
      <param name="pln">Orientation plane</param>
      <param name="insPoint">Insertion point</param>
      <param name="text">Text</param>
      <param name="height">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AttributeBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Entities.AttributeBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Entities.PlanarSurface">
      <summary>
            Planar surface definition. Adds the <see cref="P:devDept.Eyeshot.Entities.PlanarSurface.Plane" /> property to standard surface.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Entities.PlanarSurface.Primitive">
      <summary>
            Gets the primitive object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarSurface.#ctor(devDept.Geometry.Entities.GPlanarSurface)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="P:devDept.Eyeshot.Entities.PlanarSurface.Plane">
      <summary>
            Gets the planar surface plane.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarSurface.Clone">
      <summary>
            Creates a deep copy of this revolution surface.
            </summary>
      <returns>The new revolution surface object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Entities.PlanarSurface.#ctor(devDept.Serialization.PlanarSurfaceSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.PlanarSurfaceSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.PlanarSurfaceSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.VisibleChangedEventHandler">
      <summary>
            The delegate for the <see cref="E:devDept.Eyeshot.INotifyVisibleChanged.VisibleChanged" /> event.
            </summary>
      <param name="sender">The sender.</param>
      <param name="e">The <see cref="T:devDept.Eyeshot.VisibleChangedEventArgs" />.</param>
    </member>
    <member name="T:devDept.Eyeshot.INotifyVisibleChanged">
      <summary>
            Interface for <see cref="T:devDept.Graphics.IKeyedCollectionItem`1" /> to preserve the collection integrity when the key changes.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.INotifyVisibleChanged.VisibleChanged">
      <summary>
            The key changed event.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.EyeshotDisposableCollection`1">
      <summary>
            Base collection with virtual methods for handling code when items are added or removed.
            </summary>
      <typeparam name="T">The type of the collection's items. The item must implement <see cref="T:System.IDisposable" /> interface.</typeparam>
      <remarks>This collection is used in conjunction with the <see cref="F:devDept.Eyeshot.EyeshotDisposableCollection`1.Workspace" /> control.</remarks>
    </member>
    <member name="F:devDept.Eyeshot.EyeshotDisposableCollection`1.Workspace">
      <summary>
            The Workspace related to the collection.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.TempEntityList">
      <summary>
            Entity collection.
            </summary>
      <remarks>When overriding a method of this class, never forget to call its base class implementation.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.TempEntityList.#ctor">
      <summary>
            Special constructor, can be used when annotation entities (<see cref="T:devDept.Eyeshot.Entities.Text" />, <see cref="T:devDept.Eyeshot.Entities.Dimension" />, etc.) are not involved.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.TempEntityList.Remove(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Removes the first occurrence of a specific entity from this collection.
            </summary>
      <param name="entity">The object to remove from this collection</param>
      <returns>True if entity is successfully removed; otherwise, false. This method also
            returns false if entity was not found in this collection.</returns>
    </member>
    <member name="M:devDept.Eyeshot.TempEntityList.RemoveAt(System.Int32)">
      <summary>
            Removes the entity at the specified index of this collection.
            </summary>
      <param name="index">The zero-based index of the entity to remove</param>
    </member>
    <member name="M:devDept.Eyeshot.TempEntityList.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> from this collection.
            </summary>
      <param name="index">The zero-based starting index of the range of <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> to remove</param>
      <param name="count">The number of <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> to remove</param>
    </member>
    <member name="M:devDept.Eyeshot.TempEntityList.RemoveAll(System.Predicate{devDept.Eyeshot.Entities.Entity})">
      <summary>Removes all the entities that match the conditions defined by the specified predicate.</summary>
      <param name="match">The predicate delegate that defines the conditions of the entities to remove.</param>
      <returns>The number of entities removed from this collection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:devDept.Eyeshot.TempEntityList.UpdateBoundingBox">
      <summary>
            Computes the temporary entities bounding box.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.TempEntityList.Add(devDept.Eyeshot.Entities.Entity,System.Drawing.Color)">
      <summary>
            Adds one <see cref="T:devDept.Eyeshot.Entities.Entity" /> at the end of this collection using the specified color.
            </summary>
      <param name="entity">The entity to be added.</param>
      <param name="color">The entity color</param>
      <remarks>The entity will be added to the "Default" layer or to the first one if missing.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.TempEntityList.AddRange``1(System.Collections.Generic.IEnumerable{``0},System.Drawing.Color)">
      <summary>
            Adds the <see cref="T:devDept.Eyeshot.Entities.Entity">entities</see> of the specified collection to the end of this collection using the specified layer.
            </summary>
      <param name="collection">The collection whose entities should be added to the end of this collection.</param>
      <param name="color">The color assigned to the entities of the collection</param>
    </member>
    <member name="T:devDept.Eyeshot.RegenOptions">
      <summary>
            Asynchronous regeneration options.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.RegenOptions.Async">
      <summary>
            When true, entity regeneration is performed asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.RegenOptions.PreProcessSilhouettes">
      <summary>
            When true, entity regeneration will pre-process object's silhouette curves.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.RegenOptions.ProgressBarText">
      <summary>
            Gets or sets the asynchronous regeneration progress bar text.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.RegenOptions.Count">
      <summary>
            Gets the number of entities involved in the (last) regeneration operation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.RegenOptions.ExecutionTime">
      <summary>
            Gets the time spent in the (last) regeneration operation.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Regeneration">
      <summary>
            Utility class for block and entities regeneration.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Regeneration.Entities">
      <summary>
            Gets the entities to be regenerated.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Regeneration.RegenParams">
      <summary>
        <see cref="P:devDept.Eyeshot.Regeneration.RegenParams" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Regeneration.Count">
      <summary>
            Gets the number of regenerated entities.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.EyeshotDisposableDictionary`1">
      <summary>
            Eyeshot disposable dictionary.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.EyeshotDisposableDictionary`1.Item(System.String)">
      <summary>
            Gets or sets the object at the specified index.
            </summary>
      <param name="name">The name of the object to get or set</param>
      <returns>The object at the specified index</returns>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotDisposableDictionary`1.Remove(System.String)">
      <summary>
            Removes the first occurrence of a specific object from this collection.
            </summary>
      <param name="name">The object name to remove from this collection</param>
      <returns>True if label is successfully removed; otherwise, false. This method also
            returns false if label was not found in this collection.</returns>
    </member>
    <member name="T:devDept.Eyeshot.EyeshotCollection`1">
      <summary>
            Base collection with virtual methods for handling code when items are added or removed.
            </summary>
      <typeparam name="T">The type of the collection's items.</typeparam>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Adds the items of the specified collection to the end of this collection.
            </summary>
      <param name="collection">The collection whose items should be added to the end of this collection</param>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.Insert(System.Int32,`0)">
      <summary>
            Inserts an item into this collection at the specified index.
            </summary>
      <param name="index">The zero-based index at which item should be inserted</param>
      <param name="item">The item to insert</param>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Inserts the items of a collection into this collection at the specified index.
            </summary>
      <param name="index">The zero-based index at which the new items should be inserted</param>
      <param name="collection">The collection to insert</param>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.Add(`0)">
      <summary>
            Adds one item at the end of this collection.
            </summary>
      <param name="item">The item to add.</param>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.Clear">
      <summary>
            Removes all items from the collection.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.Contains(`0)">
      <summary>
            Determines whether an item is in the collection.
            </summary>
      <param name="item">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the entire collection to a compatible one-dimensional array.
            </summary>
      <param name="array">The one-dimensional System.Array that is the destination of the elements copied from the collection.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins</param>
    </member>
    <member name="P:devDept.Eyeshot.EyeshotCollection`1.Count">
      <summary>
            Gets the number of items actually contained in the collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.EyeshotCollection`1.IsReadOnly">
      <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>
            Sorts the items in the entire collection.
            </summary>
      <param name="comparer">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific item from this collection.
            </summary>
      <param name="item">The object to remove from this collection</param>
      <returns>True if item is successfully removed; otherwise, false. This method also returns false if item was not found in this collection.</returns>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index of this collection.
            </summary>
      <param name="index">The zero-based index of the item to remove</param>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of items from this collection.
            </summary>
      <param name="index">The zero-based starting index of the range of items to remove</param>
      <param name="count">The number of items to remove</param>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.RemoveAll(System.Predicate{`0})">
      <summary>Removes all the elements that match the conditions defined by the specified predicate.</summary>
      <param name="match">The predicate delegate that defines the conditions of the elements to remove.</param>
      <returns>The number of elements removed from this collection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="P:devDept.Eyeshot.EyeshotCollection`1.Item(System.Int32)">
      <summary>
            Gets or sets the item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to get or set</param>
      <returns>The item at the specified index.</returns>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.Reverse">
      <summary>
            Reverses the order of the items in the entire collection.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.Exists(System.Predicate{`0})">
      <summary>Determines whether this collection contains elements that match the conditions defined by the specified predicate.</summary>
      <param name="match">The predicate delegate that defines the conditions of the elements to search for.</param>
      <returns>
            True if this collection contains one or more elements that match the conditions defined by the specified predicate; otherwise, False /&gt;.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.Find(System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire collection.</summary>
      <param name="match">The predicate delegate that defines the conditions of the element to search for.</param>
      <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.FindAll(System.Predicate{`0})">
      <summary>Retrieves all the elements that match the conditions defined by the specified predicate.</summary>
      <param name="match">The predicate delegate that defines the conditions of the elements to search for.</param>
      <returns>A collection containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty collection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.FindIndex(System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire collection.</summary>
      <param name="match">The predicate delegate that defines the conditions of the element to search for.</param>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in this collection that extends from the specified index to the last element.</summary>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="match">The predicate delegate that defines the conditions of the element to search for.</param>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for this collection.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in this collection that starts at the specified index and contains the specified number of elements.</summary>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The predicate delegate that defines the conditions of the element to search for.</param>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for this collection.
            -or-
            <paramref name="count" /> is less than 0.
            -or-
            <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in this collection.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.FindLast(System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire collection.</summary>
      <param name="match">The predicate delegate that defines the conditions of the element to search for.</param>
      <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.FindLastIndex(System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire collection.</summary>
      <param name="match">The predicate delegate that defines the conditions of the element to search for.</param>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in this collection that extends from the first element to the specified index.</summary>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="match">The predicate delegate that defines the conditions of the element to search for.</param>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for this collection.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in this collection that contains the specified number of elements and ends at the specified index.</summary>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The predicate delegate that defines the conditions of the element to search for.</param>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for this collection.
            -or-
            <paramref name="count" /> is less than 0.
            -or-
            <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in this collection.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotCollection`1.ForEach(System.Action{`0})">
      <summary>Performs the specified action on each element of the collection.</summary>
      <param name="action">The action delegate to perform on each element of this collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">An element in the collection has been modified.</exception>
    </member>
    <member name="T:devDept.Eyeshot.HatchPattern">
      <summary>
            HatchPattern definition. The pattern is defined by a collection of
            HatchPatternLine. The process of hatching consists of expanding each line to its
            infinite family of parallel lines. All hatch contours are checked for
            intersections with any of these lines, any intersections cause the hatch lines
            to be turned on and off.
            </summary>
      <seealso cref="T:devDept.Eyeshot.HatchPatternLine" />
    </member>
    <member name="P:devDept.Eyeshot.HatchPattern.Name">
      <summary>
            Gets or sets the hatch pattern name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HatchPattern.Lines">
      <summary>
            Gets or sets the hatch pattern lines.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HatchPattern.Description">
      <summary>
            Gets or sets the hatch pattern description.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.HatchPattern.ToString">
      <inehrit />
    </member>
    <member name="M:devDept.Eyeshot.HatchPattern.Equals(devDept.Eyeshot.HatchPattern)">
      <summary>
            Compares hatch pattern names ignoring cases.
            </summary>
      <param name="other">The other hatch pattern</param>
      <returns>True if the two hatch pattern names are the same, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.HatchPattern.GetHashCode">
      <inehrit />
    </member>
    <member name="E:devDept.Eyeshot.HatchPattern.KeyChanged">
      <summary>
            Occurs when the <see cref="P:devDept.Eyeshot.HatchPattern.Name" /> changes.
            </summary>
      <seealso cref="E:devDept.Graphics.INotifyKeyChanged.KeyChanged" />
    </member>
    <member name="M:devDept.Eyeshot.HatchPattern.OnKeyChanged(System.String,System.String)">
      <summary>
            When the <see cref="P:devDept.Eyeshot.HatchPattern.Name" /> changes I need to notify it to the related keyed collections before changing it.
            </summary>
      <param name="newKey">The new <see cref="P:devDept.Eyeshot.HatchPattern.Name" /></param>
      <param name="propertyName">The property name that represent the key for the related keyed collections.</param>
    </member>
    <member name="M:devDept.Eyeshot.HatchPattern.GetKey">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.HatchPattern.SetKey(System.String)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.HatchPattern.#ctor(System.String,devDept.Eyeshot.HatchPatternLine[],System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="name">The pattern name.</param>
      <param name="pattern">The pattern.</param>
      <param name="description">The pattern description.</param>
    </member>
    <member name="M:devDept.Eyeshot.HatchPattern.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.HatchPattern.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.HatchPatternLine">
      <summary>
            HatchPatternLine definition. Each pattern line is considered to be the first
            member of a line family, created by applying the delta offsets in both
            directions to generate an infinite family of parallel lines.
            </summary>
      <seealso cref="T:devDept.Eyeshot.HatchPattern" />
    </member>
    <member name="P:devDept.Eyeshot.HatchPatternLine.Angle">
      <summary>
            The lines angle in radians.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HatchPatternLine.Origin">
      <summary>
            The drawing origin of the first line of the family of hatch lines.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HatchPatternLine.DeltaX">
      <summary>
            The displacement between members of the family in the direction of the line. It is used only for dashed lines.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HatchPatternLine.DeltaY">
      <summary>
            The spacing between members of the family. It is measured perpendicular to the lines.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HatchPatternLine.Pattern">
      <summary>
            Gets the line pattern.
            </summary>
      <remarks>Use an empty pattern for a continuous line.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.HatchPatternLine.#ctor(System.Double,devDept.Geometry.Point2D,System.Double,System.Double,System.Single[])">
      <summary>
            Initializes a new instance of the <see cref="T:devDept.Eyeshot.HatchPatternLine" />
            class.
            </summary>
      <param name="angle">The lines angle in radians.</param>
      <param name="origin">The drawing origin of the first line of the family of hatch lines.</param>
      <param name="deltaX">The displacement between members of the family in the direction of the line. It is used only for dashed lines.</param>
      <param name="deltaY">The spacing between members of the family. It is measured perpendicular to the lines.</param>
      <param name="pattern">The line pattern.</param>
    </member>
    <member name="M:devDept.Eyeshot.HatchPatternLine.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.HatchPatternLine.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.HatchPatternLine.GetCrossLines(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Point2D,devDept.Geometry.Vector2D,devDept.Geometry.Vector2D,System.Double,System.Int32,System.Collections.Generic.List{System.Tuple{devDept.Geometry.Segment2D,devDept.Geometry.Point2D}}@)" -->
    <member name="T:devDept.Eyeshot.HatchPatternKeyedCollection.measurementType">
      <summary>
            System of measurement type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.HatchPatternKeyedCollection.measurementType.Imperial">
      <summary>
            Imperial
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.HatchPatternKeyedCollection.measurementType.Metric">
      <summary>
            Metric
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HatchPatternKeyedCollection.Measurement">
      <summary>
            Gets or sets the system of measurement type. Meaningful only when exporting to AutoCAD file formats, controls whether imperial or metric hatch definitions are used for predefined patterns.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.HatchPatternKeyedCollection.#ctor">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.HatchPatternKeyedCollection.#ctor(System.Collections.Generic.IEnumerable{devDept.Eyeshot.HatchPattern})">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.HatchPatternKeyedCollection.Clear">
      <summary>
            Clears the collection.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">If some items are still in use.</exception>
    </member>
    <member name="M:devDept.Eyeshot.HatchPatternKeyedCollection.RemoveItem(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.HatchPatternKeyedCollection.AreEntitiesWith(System.String,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.HatchPatternKeyedCollection.ChangeEntitiesRegenMode(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.Entity},System.String)">
      <ineheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.HatchPatternKeyedCollection.AddDefaultPattern">
      <summary>
            Add the default ANSI31 pattern at the end of this collection.
            </summary>
      <returns>The pattern name</returns>
    </member>
    <member name="T:devDept.Eyeshot.EyeshotKeyedCollection`1">
      <inheritdoc />
      <summary>
            Base class for Eyeshot keyed collections.
            </summary>
      <typeparam name="T">The dictionary value type</typeparam>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:devDept.Eyeshot.EyeshotKeyedCollection`1" /> class that uses the default equality comparer.</summary>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
      <summary>Initializes a new instance of the <see cref="T:devDept.Eyeshot.EyeshotKeyedCollection`1" /> class that uses the specified equality comparer.</summary>
      <param name="comparer">The implementation of the IEqualityComparer generic interface to use when comparing keys, or null to use the default equality comparer.</param>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{System.String},System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:devDept.Eyeshot.EyeshotKeyedCollection`1" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</summary>
      <param name="comparer">The implementation of the IEqualityComparer generic interface to use when comparing keys, or null to use the default equality comparer.</param>
      <param name="dictionaryCreationThreshold">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or -1 to specify that a lookup dictionary is never created.</param>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{System.String})">
      <summary>Initializes a new instance of the <see cref="T:devDept.Eyeshot.EyeshotKeyedCollection`1" /> class that uses the specified equality comparer from another <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</summary>
      <param name="collection">The base collection.</param>
      <param name="comparer">The implementation of the IEqualityComparer generic interface to use when comparing keys, or null to use the default equality comparer.</param>
    </member>
    <member name="F:devDept.Eyeshot.EyeshotKeyedCollection`1.Workspace">
      <summary>
            The related <see cref="F:devDept.Eyeshot.EyeshotKeyedCollection`1.Workspace" /></summary>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserts an element into the collection at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert.</param>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.SetItem(System.Int32,`0)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.RemoveItem(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.TryRemove(`0)">
      <summary>
            Removes the item form the collection, if present.
            </summary>
      <param name="item">The item.</param>
      <returns>True if the item was found and removed, otherwise false.</returns>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.TryRemove(System.String)">
      <summary>
            Removes the value associated with the specified key form the collection, if present.
            </summary>
      <param name="item">The item.</param>
      <returns>True if the item was found and removed, otherwise false.</returns>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.ReplaceItem(`0)">
      <summary>
            Replaces the element with the same key.
            </summary>
      <param name="newItem">The new element.</param>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when element key is not found.</exception>
      <returns>True if the replaced item was already in use.</returns>
      <remarks>When the replaced item was already in use the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.AddOrReplace(`0)">
      <summary>
            Adds or replaces an element.
            </summary>
      <param name="newItem">The new element.</param>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when an error occurs adding the element.</exception>
      <returns>True if the element replaced another item that was already in use, otherwise false.</returns>
      <remarks>When the replaced item was already in use the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.TryAdd(`0)">
      <summary>
            Adds an element only if not already present in the collection.
            </summary>
      <param name="item">The element to add.</param>
      <returns>True if the item was added, otherwise false.</returns>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.ItemCanBeRemoved(`0,System.String)">
      <summary>
            Checks if a specific item is used somewhere.
            </summary>
      <param name="item">The item to remove</param>
      <param name="defaultValueKey">The key of the collection default value that must never be removed.</param>
      <returns>True if the item is unused; otherwise, false. This method also
            returns false if item was not found in this collection.</returns>
    </member>
    <member name="P:devDept.Eyeshot.EyeshotKeyedCollection`1.Item(System.String)">
      <summary>
            Gets the element with the specified name.
            </summary>
      <param name="name">The name of the object to get.</param>
      <returns>The object with the specified name.</returns>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when an element with the specified name does not exist in the collection or the name is null.</exception>
    </member>
    <member name="P:devDept.Eyeshot.EyeshotKeyedCollection`1.Item(System.Int32)">
      <summary>
            Gets or sets the element at the specified index.
            </summary>
      <param name="index">The zero-based index of the element to get or set.</param>
      <returns>The object at the specified idex.</returns>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when an element at the specified index does not exist.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.Add(`0)">
      <summary>
            Adds one item at the end of this collection.
            </summary>
      <param name="item">The item to add.</param>
      <returns>The item index.</returns>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when an item with the same key already exists in the collection.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>        
            Adds the items of the specified collection to the end of this collection.
            </summary>
      <param name="collection">The collection whose items should be added to the end of this collection.</param>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when an item with the same key already exists in the collection.</exception>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.ClearItems">
      <summary>Removes all elements from the collection.</summary>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.ChangeEntitiesRegenMode(System.String)">
      <summary>
            Changes the RegenMode for all the Workspace Entities according to the replaced item.
            </summary>
      <param name="key">The key of the replaced item.</param>
      <returns>True if the replaced item was used by at least one entity that must be regenerated.</returns>
      <remarks>When the replaced item was already in use the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.</remarks>
      <seealso cref="M:devDept.Eyeshot.EyeshotKeyedCollection`1.ReplaceItem(`0)" />
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.ChangeEntitiesRegenMode(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.Entity},System.String)">
      <summary>
            Changes the entities RegenMode according to the replaced item.
            </summary>
      <param name="entities">The entity collection.</param>
      <param name="key">The key of the replaced item.</param>
      <returns>True if the replaced item was used by at least one entity that must be regenerated.</returns>
      <remarks>When the replaced item was already in use the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.</remarks>
      <seealso cref="M:devDept.Eyeshot.EyeshotKeyedCollection`1.ReplaceItem(`0)" />
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.TryGetValue(System.String,`0@)">
      <summary>
            Gets the value associated with the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="value">The value associated with the specified key.</param>
      <returns>True when the collection contains an element with the specified key, otherwise false.</returns>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.AreEntitiesWith(System.String)">
      <summary>
            Tells if there are some entities using this element.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.AreEntitiesWith(System.String,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
      <summary>
            Tells if there are some entities using this dictionary element.
            </summary>
      <param name="name">The element name</param>
      <param name="entities">The entities collection</param>
      <returns>True if any entity using this dictionary element is found.</returns>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.CheckItemKey(System.String,System.Boolean)">
      <summary>
            Checks if a key exists in the collection.
            </summary>
      <param name="key">The key to check.</param>
      <param name="throwEx">When true an exception is thrown if the check fails.</param>
      <returns>True if the key exists, otherwise false.</returns>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotKeyedCollection`1.CheckItemIndex(System.Int32,System.Boolean)">
      <summary>
            Checks if an index is valid for the collection.
            </summary>
      <param name="index">The index to check.</param>
      <param name="throwEx">When true an exception is thrown if the check fails.</param>
      <returns>True if the index is valid, otherwise false.</returns>
    </member>
    <member name="T:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1">
      <inheritdoc />
      <summary>
            Base class for Eyeshot disposable keyed collections.
            </summary>
      <typeparam name="T">The dictionary value type</typeparam>
      <remarks>When an item is removed from the collection it is disposed only if the collection belong to a Workspace control.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1" /> class that uses the default equality comparer.</summary>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
      <summary>Initializes a new instance of the <see cref="T:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1" /> class that uses the specified equality comparer.</summary>
      <param name="comparer">The implementation of the IEqualityComparer generic interface to use when comparing keys, or null to use the default equality comparer.</param>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{System.String},System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</summary>
      <param name="comparer">The implementation of the IEqualityComparer generic interface to use when comparing keys, or null to use the default equality comparer.</param>
      <param name="dictionaryCreationThreshold">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or -1 to specify that a lookup dictionary is never created.</param>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{System.String})">
      <summary>Initializes a new instance of the <see cref="T:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1" /> class that uses the specified equality comparer from another <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</summary>
      <param name="collection">The base collection.</param>
      <param name="comparer">The implementation of the IEqualityComparer generic interface to use when comparing keys, or null to use the default equality comparer.</param>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1.SetItem(System.Int32,`0)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1.RemoveItem(System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1.DisposeItems">
      <summary>
            True when the collection belongs to a Workspace control and items must be disposed after removal.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1.DisposeItem(`0)">
      <summary>
            Dispose the item of the collection.
            </summary>
      <param name="item">The item that must be disposed.</param>
      <remarks>The item is disposed only if the collection belongs to a Workspace control.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.EyeshotDisposableKeyedCollection`1.ClearItems">
      <inheritdoc />
    </member>
    <member name="T:devDept.Eyeshot.Layer">
      <summary>
            Layer definition. Layers are a way to group objects so that the groups can have common formatting.
            For example, you may want your objects to show up in one color and your dimensions to show in another.
            Create a separate layer for each, then you can change all the dimensions or all the objects at the 
            same time. You may show or hide layers, change the color, lineweight, or linetype. Layers are utilized
            often to make drawing easier to read.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Layer.Locked">
      <summary>
            Gets or sets a value indicating if the entities on the layer can be selected.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Layer.Exportable">
      <summary>
            Gets or sets a value indicating whether the layer (and all the entities belonging to it) are exported by the various Write* classes.
            </summary>
      <remarks>This property has no effect on the Eyeshot proprietary file format.</remarks>
      <seealso cref="T:devDept.Eyeshot.Translators.WriteASC" />
      <seealso cref="T:devDept.Eyeshot.Translators.WriteIGES" />
      <seealso cref="T:devDept.Eyeshot.Translators.WriteOBJ" />
      <seealso cref="T:devDept.Eyeshot.Translators.WriteSTL" />
    </member>
    <member name="P:devDept.Eyeshot.Layer.Name">
      <summary>
            Gets or sets layer name.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Layer.KeyChanged">
      <summary>
            Occurs when the <see cref="P:devDept.Eyeshot.Layer.Name" /> changes.
            </summary>
      <seealso cref="E:devDept.Graphics.INotifyKeyChanged.KeyChanged" />
    </member>
    <member name="M:devDept.Eyeshot.Layer.OnKeyChanged(System.String,System.String)">
      <summary>
            When the <see cref="P:devDept.Eyeshot.Layer.Name" /> changes I need to notify it to the related keyed collections before changing it.
            </summary>
      <param name="newKey">The new <see cref="P:devDept.Eyeshot.Layer.Name" /></param>
      <param name="propertyName">The property name that represent the key for the related keyed collections.</param>
    </member>
    <member name="M:devDept.Eyeshot.Layer.GetKey">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Layer.SetKey(System.String)">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.Layer.Color">
      <summary>
            Gets or sets layer color.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Layer.MaterialName">
      <summary>
            Gets or sets layer material.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Layer.Visible">
      <summary>
            Gets or sets layer status (On/Off).
            </summary>
      <remarks>When changing the visibility of a Layer, call <see cref="M:devDept.Eyeshot.Workspace.UpdateBoundingBox" /> to avoid visualization problems.</remarks>
    </member>
    <member name="E:devDept.Eyeshot.Layer.VisibleChanged">
      <summary>
            Occurs when the <see cref="P:devDept.Eyeshot.Layer.Visible" /> changes.
            </summary>
      <seealso cref="E:devDept.Eyeshot.INotifyVisibleChanged.VisibleChanged" />
    </member>
    <member name="P:devDept.Eyeshot.Layer.LineWeight">
      <summary>
            Gets or sets layer line weight.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Layer.LineTypeName">
      <summary>
            Gets or sets the line type name of the <see cref="P:devDept.Eyeshot.Workspace.LineTypes" /> collection.
            </summary>
      <remarks>
            When the line type used by entities already added to the <see cref="T:devDept.Eyeshot.Workspace" /> is changed, 
            their <see cref="P:devDept.Eyeshot.Entities.Entity.RegenMode" /> must be set to <see cref="F:devDept.Eyeshot.Entities.regenType.CompileOnly" /> and the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.LineTypeName" />
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod" />
    </member>
    <member name="M:devDept.Eyeshot.Layer.#ctor(System.String,System.Drawing.Color,System.String,System.Single,System.Boolean,System.Boolean)">
      <summary>
            Name, color, linetype name, line weight, status and locked constructor.
            </summary>
      <param name="name">Layer name</param>
      <param name="color">Layer color</param>
      <param name="lineWeight">Line weight</param>
      <param name="lineTypeName">Line type name</param>
      <param name="visible">Layer status (On/Off)</param>
      <param name="locked">Layer locked status (if true, the entities on the layer can't be selected)</param>
    </member>
    <member name="M:devDept.Eyeshot.Layer.#ctor(System.String)">
      <summary>
            Name only constructor.
            </summary>
      <param name="name">Layer name</param>
    </member>
    <member name="M:devDept.Eyeshot.Layer.#ctor(System.String,System.Drawing.Color)">
      <summary>
            Name and color constructor.
            </summary>
      <param name="name">Layer name</param>
      <param name="color">Layer color</param>
    </member>
    <member name="M:devDept.Eyeshot.Layer.#ctor(System.String,System.Drawing.Color,System.Boolean)">
      <summary>
            Name color and visible constructor. Layer's material is created automatically using the provided color.
            </summary>
      <param name="name">Layer name</param>
      <param name="color">Layer color</param>
      <param name="visible">Layer status (On/Off)</param>
    </member>
    <member name="M:devDept.Eyeshot.Layer.#ctor(System.String,System.Drawing.Color,System.String)">
      <summary>
            Name, color and material constructor.
            </summary>
      <param name="name">Layer name</param>
      <param name="color">Layer color</param>
      <param name="lineTypeName">Line type name</param>
    </member>
    <member name="M:devDept.Eyeshot.Layer.Clone">
      <summary>
            Creates a deep copy of this layer.
            </summary>
      <returns>The new layer object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Layer.Equals(devDept.Eyeshot.Layer)">
      <summary>
            Compares layer names ignoring cases.
            </summary>
      <param name="other">The other layer</param>
      <returns>True if the two layer names are the same, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Layer.GetHashCode">
      <inehrit />
    </member>
    <member name="M:devDept.Eyeshot.Layer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Layer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.LayerKeyedCollection">
      <summary>
            Layers collection.
            </summary>
      <remarks>Layer name comparison is performed case insensitive.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.GetKeyForItem(devDept.Eyeshot.Layer)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.#ctor(devDept.Eyeshot.Layer)">
      <summary>
            Constructor with default layer.
            </summary>
      <param name="defaultLayer">The default layer that will be added to the collection.</param>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.#ctor(devDept.Eyeshot.LayerKeyedCollection)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.TurnOn(System.String)">
      <summary>
            Turns the specified layer on.
            </summary>
      <param name="layerName">The layer name</param>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.TurnOn(System.Int32)">
      <summary>
            Turns the specified layer on.
            </summary>
      <param name="layerIndex">The layer index</param>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.TurnAllOn">
      <summary>
            Turns all layers on.
            </summary>
      <remarks>When changing the visibility of a Layer, call <see cref="M:devDept.Eyeshot.Workspace.UpdateBoundingBox" /> to avoid visualization problems.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.TurnOff(System.String)">
      <summary>
            Turns the specified layer off.
            </summary>
      <param name="layerName">The layer name</param>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.TurnOff(System.Int32)">
      <summary>
            Turns the specified layer off.
            </summary>
      <param name="layerIndex">The layer index</param>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.TurnAllOff">
      <summary>
            Turns all layers off.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.Remove(System.String)">
      <summary>
            Removes the specified layer and all entities on it.
            </summary>
      <param name="layerName">The layer name</param>
      <remarks>It removes also entities on the specified layer inside the <see cref="P:devDept.Eyeshot.Workspace.Blocks" />. If a block becomes empty after the removal of the entities on the layer, all the BlockReferences referring to it are removed as well.</remarks>
      <exception cref="T:devDept.Eyeshot.EyeshotException">When the collection is assigned to an workspace, thrown if the OpenBlock is not the RootBlock or if the CurrentBlockReference is different from null.</exception>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.Remove(devDept.Eyeshot.Layer)">
      <summary>
            Removes the specified layer and all entities on it.
            </summary>
      <param name="layer">The layer</param>
      <remarks>It removes also entities on the specified layer inside the <see cref="P:devDept.Eyeshot.Workspace.Blocks" />. If a block becomes empty after the removal of the entities on the layer, all the BlockReferences referring to it are removed as well.</remarks>
      <exception cref="T:devDept.Eyeshot.EyeshotException">When the collection is assigned to an workspace, thrown if the OpenBlock is not the RootBlock or if the CurrentBlockReference is different from null.</exception>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.RemoveAt(System.Int32)">
      <summary>
            Removes the specified layer and all entities on it.
            </summary>
      <param name="layerIndex">The layer index</param>
      <remarks>It removes also entities on the specified layer inside the <see cref="P:devDept.Eyeshot.Workspace.Blocks" />. If a block becomes empty after the removal of the entities on the layer, all the BlockReferences referring to it are removed as well.</remarks>
      <exception cref="T:devDept.Eyeshot.EyeshotException">When the collection is assigned to an workspace, thrown if the OpenBlock is not the RootBlock or if the CurrentBlockReference is different from null.</exception>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.Empty(System.String)">
      <summary>
            Removes all the entities on the specified layer.
            </summary>
      <param name="layerName">The layer name</param>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown if the OpenBlock is not the RootBlock or if the CurrentBlockReference is different from null.</exception>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.Empty(System.Int32)">
      <summary>
            Removes all the entities on the specified layer.
            </summary>
      <param name="layerIndex">The layer index</param>
      <remarks>It removes also entities on the specified layer inside the <see cref="P:devDept.Eyeshot.Workspace.Blocks" />. If a block becomes empty after the removal of the entities on the layer, all the BlockReferences referring to it are removed as well.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.Clear">
      <summary>
            Clears this collection and adds a layer called "Default".
            </summary>
      <param name="addDefaultLayer">When true the collection is initialized with the "Default" layer.</param>
      <remarks>Clears also the <see cref="P:devDept.Eyeshot.Workspace.Entities" /> collection.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.Clear(System.Boolean)">
      <summary>
            Clears this collection.
            </summary>
      <param name="addDefaultLayer">When true the collection is initialized with the "Default" layer.</param>
      <remarks>        
            When the collection is linked to a Workspace, it clears also the <see cref="P:devDept.Eyeshot.Workspace.Entities" /> collection and the default layer is always added.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.Clear(devDept.Eyeshot.Layer)">
      <summary>
            Clears this collection and adds a default layer.
            </summary>
      <param name="defaultLayer">The default layer added after the clear. If null the layer called "Default" is created and added.</param>
      <remarks>Clears also the <see cref="P:devDept.Eyeshot.Workspace.Entities" /> collection.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.AddRange(System.Collections.Generic.IList{devDept.Eyeshot.Layer})">
      <summary>
            Adds the Layers of the specified collection to the end of this one.
            </summary>
      <param name="layerList">A list of layers to add</param>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.Add(System.String,System.Drawing.Color)">
      <summary>
            Adds one <see cref="T:devDept.Eyeshot.Layer" /> at the end of this collection.
            </summary>
      <param name="layerName">The layer name</param>
      <param name="color">The layer color</param>
      <returns>The layer index.</returns>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.Add(System.String,System.Drawing.Color,System.String)">
      <summary>
            Adds one <see cref="T:devDept.Eyeshot.Layer" /> at the end of this collection.
            </summary>
      <param name="layerName">The layer name</param>
      <param name="color">The layer color</param>
      <param name="lineTypeName">The line type name</param>
      <returns>The layer index.</returns>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.Add(System.String,System.Drawing.Color,System.Boolean)">
      <summary>
            Adds a layer at the end of this collection.
            </summary>
      <param name="layerName">The layer name</param>
      <param name="color">The layer color</param>
      <param name="visible">The layer status</param>
      <returns>The layer index.</returns>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.Add(System.String,System.Drawing.Color,System.String,System.String)">
      <summary>
            Adds a layer at the end of this collection..
            </summary>
      <param name="layerName">The layer name</param>
      <param name="color">The layer color</param>
      <param name="materialName">The layer material</param>
      <param name="lineTypeName">The layer line type</param>
      <returns>The layer index.</returns>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.Add(System.String)">
      <summary>
            Adds one <see cref="T:devDept.Eyeshot.Layer" /> at the end of this collection.
            </summary>
      <param name="layerName">The layer name</param>
      <returns>The layer index.</returns>
    </member>
    <member name="M:devDept.Eyeshot.LayerKeyedCollection.ChangeEntitiesRegenMode(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.Entity},System.String)">
      <ineheritdoc />
    </member>
    <member name="T:devDept.Eyeshot.LineType">
      <summary>
            LineType class.
            The pattern defines pen-up lengths (spaces), pen-down lengths (dashes), and dots. 
            A pattern specifies the length of segments that make up the linetype. A positive 
            decimal number specifies a pen-down (dash) segment of that length. A negative decimal
            number specifies a pen-up (space) segment of that length. Zero specifies a dot. For 
            example, the DASHDOT linetype is defined by a repeating pattern starting with a dash
            0.5 drawing units long, a space 0.25 drawing units long, a dot, and another space 0.25
            drawing units long.</summary>
      <remarks>When the line type used by entities already added to the <see cref="T:devDept.Eyeshot.Workspace" /> is changed, 
            their <see cref="P:devDept.Eyeshot.Entities.Entity.RegenMode" /> must be set to <see cref="F:devDept.Eyeshot.Entities.regenType.CompileOnly" /> and the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> must be called.
            </remarks>
      <remarks>Use an empty pattern for a continuous line.</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.LineTypeName" />
      <seealso cref="P:devDept.Eyeshot.Layer.LineTypeName" />
    </member>
    <member name="P:devDept.Eyeshot.LineType.Name">
      <summary>
            Gets or sets line type name.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.LineType.ToString">
      <inehrit />
    </member>
    <member name="M:devDept.Eyeshot.LineType.Equals(devDept.Eyeshot.LineType)">
      <summary>
            Compares line type names ignoring cases.
            </summary>
      <param name="other">The other material</param>
      <returns>True if the two line type names are the same, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.LineType.GetHashCode">
      <inehrit />
    </member>
    <member name="E:devDept.Eyeshot.LineType.KeyChanged">
      <summary>
            Occurs when the <see cref="P:devDept.Eyeshot.LineType.Name" /> changes.
            </summary>
      <seealso cref="E:devDept.Graphics.INotifyKeyChanged.KeyChanged" />
    </member>
    <member name="M:devDept.Eyeshot.LineType.OnKeyChanged(System.String,System.String)">
      <summary>
            When the <see cref="P:devDept.Eyeshot.LineType.Name" /> changes I need to notify it to the related keyed collections before changing it.
            </summary>
      <param name="newKey">The new <see cref="P:devDept.Eyeshot.LineType.Name" /></param>
      <param name="propertyName">The property name that represent the key for the related keyed collections.</param>
    </member>
    <member name="M:devDept.Eyeshot.LineType.GetKey">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.LineType.SetKey(System.String)">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.LineType.Pattern">
      <summary>
            Gets the line type pattern.
            </summary>
      <remarks>Use an empty pattern for a continuous line.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.LineType.Description">
      <summary>
            Gets or sets the line type description.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.LineType.Length">
      <summary>
            Gets the length of the line type pattern.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.LineType.#ctor(System.String,System.Single[],System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="name">The line type name.</param>
      <param name="pattern">The pattern.</param>
      <param name="description">The line type description.</param>
    </member>
    <member name="M:devDept.Eyeshot.LineType.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.LineType.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.LineType.#ctor(System.Single[],System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="pattern">The pattern.</param>
      <param name="description">The line type description.</param>
    </member>
    <member name="M:devDept.Eyeshot.LineType.CheckPattern(System.Single[],System.Boolean,System.Single@)">
      <summary>
            Checks if the pattern has: more than one value, alternate sign for penDown/penUp or values are not all zero.
            </summary>
      <remarks>A null pattern or a pattern with 0 elements means that the line is continuous.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.LineType.GetPatternVertices(System.Int32,devDept.Geometry.Point3D[],System.Single,System.Collections.Generic.List{devDept.Geometry.Point3D}@,System.Collections.Generic.List{devDept.Geometry.Point3D}@,devDept.Geometry.Transformation)">
      <summary>
            Computes the pattern from the given vertices and returns the lines and points that represent it.
            </summary>
      <param name="maxPatternRepetitions">The maximum number of pattern repetitions allowed between two vertices of a curve</param>
      <param name="vertices">The list of segments on which to compute the pattern</param>
      <param name="scale">The line type scale</param>
      <param name="lines">The computed points representing the lines of the pattern</param>
      <param name="points">The computed points representing the dots of the pattern</param>
      <param name="transformation">The accumulated parents transformation</param>
      <seealso cref="P:devDept.Graphics.GfxEnvironmentParams.MaxPatternRepetitions" />
    </member>
    <member name="T:devDept.Eyeshot.LineTypeKeyedCollection">
      <summary>
            Line types collection.
            </summary>
      <remarks>Line type name comparison is performed case insensitive.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.LineTypeKeyedCollection.GetKeyForItem(devDept.Eyeshot.LineType)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.LineTypeKeyedCollection.#ctor">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.LineTypeKeyedCollection.#ctor(System.Collections.Generic.IEnumerable{devDept.Eyeshot.LineType})">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.LineTypeKeyedCollection.Clear">
      <summary>
            Clears the collection.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">If some items are still in use.</exception>
    </member>
    <member name="M:devDept.Eyeshot.LineTypeKeyedCollection.Add(System.String,System.Single[])">
      <summary>
            Adds a new line type definition.
            </summary>
      <param name="name">The type name</param>
      <param name="pattern">The line pattern values</param>
      <seealso cref="T:devDept.Eyeshot.LineType" />
    </member>
    <member name="M:devDept.Eyeshot.LineTypeKeyedCollection.IsReservedName(System.String)">
      <summary>
            Tells if the LineType name is a reserved one (ByBlock, ByLayer, Continuous).
            </summary>
      <param name="name">?The name to check</param>
      <returns>True if the name is a reserved one (either ByLayer, ByBlock or Continuous).</returns>
    </member>
    <member name="M:devDept.Eyeshot.LineTypeKeyedCollection.InsertItem(System.Int32,devDept.Eyeshot.LineType)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.LineTypeKeyedCollection.Add(System.String,devDept.Eyeshot.LineType)">
      <summary>
            Assigns the name to the line type then adds it to the collection.
            </summary>
      <param name="name">The name that will override the line type name</param>
      <param name="type">The line type</param>
      <seealso cref="T:devDept.Eyeshot.LineType" />
    </member>
    <member name="M:devDept.Eyeshot.LineTypeKeyedCollection.RemoveItem(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.LineTypeKeyedCollection.AreEntitiesWith(System.String,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.LineTypeKeyedCollection.ChangeEntitiesRegenMode(System.String)">
      <ineheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.LineTypeKeyedCollection.ChangeEntitiesRegenMode(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.Entity},System.String)">
      <ineheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.LineTypeKeyedCollection.AddDefaultLineType">
      <summary>
            Add a default DASHDOT line type at the end of this collection.
            </summary>
      <returns>The line type name</returns>
    </member>
    <member name="T:devDept.Eyeshot.MaterialKeyedCollection">
      <summary>
            Materials collection. Automatically manages OpenGL resources allocation / deallocation.
            </summary>
      <remarks>Material name comparison is performed case insensitive.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.MaterialKeyedCollection.GetKeyForItem(devDept.Graphics.Material)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.MaterialKeyedCollection.#ctor">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.MaterialKeyedCollection.#ctor(System.Collections.Generic.IEnumerable{devDept.Graphics.Material})">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.MaterialKeyedCollection.Add(System.String,devDept.Graphics.Material)">
      <summary>
            Assigns the name to the material then adds it to the collection.
            </summary>
      <param name="name">The name that will override the material name</param>
      <param name="material">The material</param>
      <seealso cref="T:devDept.Graphics.Material" />
    </member>
    <member name="M:devDept.Eyeshot.MaterialKeyedCollection.Add(System.String,System.Drawing.Image)">
      <summary>
            Adds a new material definition.
            </summary>
      <param name="name">The material name</param>
      <param name="texture">The material texture image</param>
    </member>
    <member name="M:devDept.Eyeshot.MaterialKeyedCollection.Add(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single)">
      <summary>
            Adds a new material definition.
            </summary>
      <param name="name">The material name</param>
      <param name="ambient">The material ambient intensity</param>
      <param name="diffuse">The material diffuse intensity</param>
      <param name="specular">The material specular intensity</param>
      <param name="shininess">The material shininess factor (0-1)</param>
    </member>
    <member name="M:devDept.Eyeshot.MaterialKeyedCollection.Add(System.String,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.Image)">
      <summary>
            Adds a new material definition.
            </summary>
      <param name="name">The material name</param>
      <param name="ambient">The material ambient intensity</param>
      <param name="specular">The material specular intensity</param>
      <param name="shininess">The material shininess factor (0-1)</param>
      <param name="texture">The material texture image</param>
    </member>
    <member name="M:devDept.Eyeshot.MaterialKeyedCollection.Add(System.String,System.Drawing.Color,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds a new material definition.
            </summary>
      <param name="name">Material name</param>
      <param name="diffuse">Material diffuse intensity</param>
      <param name="poisson">Material modulus of elasticity</param>
      <param name="young">Material Poisson's ratio</param>
      <param name="yield">Material yield strength</param>
      <param name="density">Material density</param>
      <param name="coeffOfThermalExp">Material coefficient of thermal expansion</param>
    </member>
    <member name="M:devDept.Eyeshot.MaterialKeyedCollection.ReplaceItem(devDept.Graphics.Material)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.MaterialKeyedCollection.RemoveItem(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.MaterialKeyedCollection.Clear">
      <summary>
            Clears the collection.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">If some items are still in use.</exception>
    </member>
    <member name="M:devDept.Eyeshot.MaterialKeyedCollection.AreEntitiesWith(System.String,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
      <inheritdoc />
    </member>
    <member name="T:devDept.Eyeshot.TextStyleKeyedCollection">
      <summary>
            Text style collection.
            </summary>
      <remarks>Text style name comparison is performed case insensitive.</remarks>
      <remarks>The "Default" style is applied to all text-derived entities that do not specify a different <see cref="P:devDept.Eyeshot.Entities.Text.StyleName" />.
            	<para>
                    Call <see cref="M:devDept.Eyeshot.Entities.Entity.Regen(System.Double)" /> to see the effect when changing the value of a collection element.
                </para></remarks>
      <seealso cref="T:devDept.Eyeshot.Entities.Text" />
      <seealso cref="T:devDept.Eyeshot.Entities.LinearDim">LinearDim class</seealso>
      <seealso cref="T:devDept.Eyeshot.Entities.RadialDim">RadialDim class</seealso>
      <seealso cref="T:devDept.Eyeshot.Entities.DiametricDim">DiametricDim class</seealso>
    </member>
    <member name="M:devDept.Eyeshot.TextStyleKeyedCollection.GetKeyForItem(devDept.Eyeshot.TextStyle)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.TextStyleKeyedCollection.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.TextStyleKeyedCollection.#ctor(System.Collections.Generic.IEnumerable{devDept.Eyeshot.TextStyle})">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.TextStyleKeyedCollection.#ctor(devDept.Eyeshot.TextStyleKeyedCollection)">
      <summary>
            Copy constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.TextStyleKeyedCollection.Add(System.String,devDept.Eyeshot.TextStyle)">
      <summary>
            Assigns the name to the textStyle then adds it to the collection.
            </summary>
      <param name="name">The name that will override the textStyle name</param>
      <param name="textStyle">The textStyle</param>
      <seealso cref="T:devDept.Eyeshot.TextStyle" />
    </member>
    <member name="M:devDept.Eyeshot.TextStyleKeyedCollection.RemoveItem(System.Int32)">
      <inheritdoc />
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when trying to remove the Default text style.</exception>
    </member>
    <member name="M:devDept.Eyeshot.TextStyleKeyedCollection.Clear">
      <summary>
            Clears this collection and adds the default text style.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">If some items are still in use.</exception>
    </member>
    <member name="M:devDept.Eyeshot.TextStyleKeyedCollection.Clear(System.Boolean)">
      <summary>
            Clears this collection.
            </summary>
      <param name="addDefaultTextStyle">When true the collection is initialized with the default text style.</param>
      <remarks>When the collection is linked to a Workspace control, the default text style is always added.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.TextStyleKeyedCollection.AreEntitiesWith(System.String,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.TextStyleKeyedCollection.ChangeEntitiesRegenMode(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.Entity},System.String)">
      <ineheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.TextStyleKeyedCollection.Clone">
      <summary>
            Creates a copy of the collection.
            </summary>
      <returns>The new collection.</returns>
    </member>
    <member name="M:devDept.Eyeshot.TextStyleKeyedCollection.LoadFont(System.String,System.String)">
      <summary>
            Loads a ".shx" shape file.
            </summary>
      <param name="styleName">The style name</param>
      <param name="fileName">The SHX file name</param>
      <remarks>Call a <see cref="!:EntityList.Regen()" /> afterwards</remarks>
    </member>
    <member name="T:devDept.Eyeshot.SheetKeyedCollection">
      <summary>
            Sheets collection. Automatically manages OpenGL resources allocation / deallocation.
            </summary>
      <remarks>Sheet name comparison is performed case insensitive.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.SheetKeyedCollection.GetKeyForItem(devDept.Eyeshot.Sheet)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.SheetKeyedCollection.#ctor">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.SheetKeyedCollection.#ctor(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Sheet})">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.SheetKeyedCollection.Add(devDept.Geometry.linearUnitsType,System.Double,System.Double,System.String)">
      <summary>
            Adds a new sheet definition.
            </summary>
      <param name="units">The measurement system type for the sheet.</param>
      <param name="width">The sheet width.</param>
      <param name="height">The sheet height.</param>
      <param name="name">The name of the sheet.</param>
      <returns>The new sheet.</returns>
    </member>
    <member name="M:devDept.Eyeshot.SheetKeyedCollection.AreEntitiesWith(System.String,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
      <inheritdoc />
    </member>
    <member name="T:devDept.Eyeshot.BiDictionary`2">
      <summary>
            This is a dictionary guaranteed to have only one of each value and key. 
            It may be searched either by TFirst or by TSecond, giving a unique answer because it is 1 to 1.
            </summary>
      <typeparam name="TFirst">The type of the "key"</typeparam>
      <typeparam name="TSecond">The type of the "value"</typeparam>
    </member>
    <member name="M:devDept.Eyeshot.BiDictionary`2.Add(`0,`1)">
      <summary>
            Tries to add the pair to the dictionary.
            Throws an exception if either element is already in the dictionary
            </summary>
      <param name="first">
      </param>
      <param name="second">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.BiDictionary`2.GetByFirst(`0)">
      <summary>
            Find the TSecond corresponding to the TFirst first
            Throws an exception if first is not in the dictionary.
            </summary>
      <param name="first">the key to search for</param>
      <returns>the value corresponding to first</returns>
    </member>
    <member name="M:devDept.Eyeshot.BiDictionary`2.GetBySecond(`1)">
      <summary>
            Find the TFirst corresponding to the Second second.
            Throws an exception if second is not in the dictionary.
            </summary>
      <param name="second">the key to search for</param>
      <returns>the value corresponding to second</returns>
    </member>
    <member name="M:devDept.Eyeshot.BiDictionary`2.RemoveByFirst(`0)">
      <summary>
            Remove the record containing first.
            If first is not in the dictionary, throws an Exception.
            </summary>
      <param name="first">the key of the record to delete</param>
    </member>
    <member name="M:devDept.Eyeshot.BiDictionary`2.RemoveBySecond(`1)">
      <summary>
            Remove the record containing second.
            If second is not in the dictionary, throws an Exception.
            </summary>
      <param name="second">the key of the record to delete</param>
    </member>
    <member name="M:devDept.Eyeshot.BiDictionary`2.TryAdd(`0,`1)">
      <summary>
            Tries to add the pair to the dictionary.
            Returns false if either element is already in the dictionary        
            </summary>
      <param name="first">
      </param>
      <param name="second">
      </param>
      <returns>true if successfully added, false if either element are already in the dictionary</returns>
    </member>
    <member name="M:devDept.Eyeshot.BiDictionary`2.TryGetByFirst(`0,`1@)">
      <summary>
            Find the TSecond corresponding to the TFirst first.
            Returns false if first is not in the dictionary.
            </summary>
      <param name="first">the key to search for</param>
      <param name="second">the corresponding value</param>
      <returns>true if first is in the dictionary, false otherwise</returns>
    </member>
    <member name="M:devDept.Eyeshot.BiDictionary`2.TryGetBySecond(`1,`0@)">
      <summary>
            Find the TFirst corresponding to the TSecond second.
            Returns false if second is not in the dictionary.
            </summary>
      <param name="second">the key to search for</param>
      <param name="first">the corresponding value</param>
      <returns>true if second is in the dictionary, false otherwise</returns>
    </member>
    <member name="M:devDept.Eyeshot.BiDictionary`2.TryRemoveByFirst(`0)">
      <summary>
            Remove the record containing first, if there is one.
            </summary>
      <param name="first">
      </param>
      <returns> If first is not in the dictionary, returns false, otherwise true</returns>
    </member>
    <member name="M:devDept.Eyeshot.BiDictionary`2.TryRemoveBySecond(`1)">
      <summary>
            Remove the record containing second, if there is one.
            </summary>
      <param name="second">
      </param>
      <returns> If second is not in the dictionary, returns false, otherwise true</returns>
    </member>
    <member name="P:devDept.Eyeshot.BiDictionary`2.Count">
      <summary>
            The number of pairs stored in the dictionary
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.BiDictionary`2.Clear">
      <summary>
            Removes all items from the dictionary.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.SketchManager">
      <summary>
            Class Manager that handles the synchronization between the eyeshot entities and the Sketch entities.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.SketchManager.zoomFitType">
      <summary>
            Sketch edit zoom fit type.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Workspace.CurrentBlock" />
    </member>
    <member name="F:devDept.Eyeshot.SketchManager.zoomFitType.Face">
      <summary>
            Fits the specified face with a margin.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.SketchManager.zoomFitType.Body">
      <summary>
            Fits the specified object.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.SketchManager.zoomFitType.Block">
      <summary>
            Fits current block entities.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.EqualConstraintImage">
      <summary>
            Gets or sets the equal constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.MirrorConstraintImage">
      <summary>
            Gets or sets the mirror constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.EqualRadiusConstraintImage">
      <summary>
            Gets or sets the equal radius constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.PointOnConstraintImage">
      <summary>
            Gets or sets the point on constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.PointAtConstraintImage">
      <summary>
            Gets or sets the join constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.JoinConstraintImage">
      <summary>
            Gets or sets the join constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.HorizontalConstraintImage">
      <summary>
            Gets or sets the vertical constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.VerticalConstraintImage">
      <summary>
            Gets or sets the vertical constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.PerpendicularConstraintImage">
      <summary>
            Gets or sets the perpendicular constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.FixConstraintImage">
      <summary>
            Gets or sets the fix constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.PolygonConstraintImage">
      <summary>
            Gets or sets the polygon constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.ParallelConstraintImage">
      <summary>
            Gets or sets the parallel constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.TangentConstraintImage">
      <summary>
            Gets or sets the tangent constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.CollinearConstraintImage">
      <summary>
            Gets or sets the collinear constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.MidPointConstraintImage">
      <summary>
            Gets or sets the mid point constraint image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.CurvesThickness">
      <summary>
            Gets or sets the size used to display curves for Sketch.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.PointsThickness">
      <summary>
            Gets or sets the size used to display points during the Sketch editing.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.PointsColor">
      <summary>
            Gets or sets the color used to display points during the Sketch editing.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.DimensionsThickness">
      <summary>
            Gets or sets the size used to display dimensions during the Sketch editing.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.DimensionsColor">
      <summary>
            Gets or sets the color used to display dimensions during the Sketch editing.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.DimensionsReferenceColor">
      <summary>
            Gets or sets the color used to display dimensions with reference during the Sketch editing.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.ConstructionCurvesThickness">
      <summary>
            Gets or sets the size used to display the construction curves during the Sketch editing.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.ConstructionCurvesColor">
      <summary>
            Gets or sets the color used to display construction curves during the Sketch editing.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.ProjectedCurvesColor">
      <summary>
            Gets or sets the color used to display the curve that are been projected from an existing edge.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.HoveringColor">
      <summary>
            Gets or sets the color used to display the entities when the mouse is over a constraint label.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.SketchPlane">
      <summary>
            The Sketch plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.DrawingPlane">
      <summary>
             The plane where the constraint labels and the entities are drawn in overlay during the sketch editing.
             </summary>
      <remarks>It takes in account also the <see cref="P:devDept.Eyeshot.Workspace.CurrentTransformation" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.DOF">
      <summary>
            The degrees of freedom of the constrained entities of the Sketch
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.SketchEntity">
      <summary>
            The Sketch opened for editing. Can be null/Nothing.
            </summary>
      <seealso cref="P:devDept.Eyeshot.SketchManager.Editing" />
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.FilledRegionColor">
      <summary>
            Gets or sets the color of the sketch region.
            <seealso cref="P:devDept.Eyeshot.SketchManager.ShowFilledRegion" /></summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.DimensionsWidthFactor">
      <summary>
            Gets or sets the <see cref="P:devDept.Eyeshot.Entities.Text.WidthFactor" /> for the dimensions constraint.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.Editing">
      <summary>
            True when editing a sketch, otherwise false.
            </summary>
      <seealso cref="P:devDept.Eyeshot.SketchManager.SketchEntity" />
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.TextHeight">
      <summary>
            Gets or sets the text height. 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.AutomaticTextHeight">
      <summary>
            If true, the text height of the dimensions is computed based on the entities boundingbox.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.TextScaleFactor">
      <summary>
            Gets or sets the text height scale factor for the sketch's dimensions.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.Constraints">
      <summary>
            Gets the array of constraints.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.Entities">
      <summary>
            Gets the array of entities related to the sketch.
            </summary>
      <seealso cref="M:devDept.Eyeshot.SketchManager.IsSketchEntity(devDept.Eyeshot.Entities.Entity)" />
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.ShowFilledRegion">
      <summary>
            If true, a semitransparent region that represents the Sketch is displayed. 
            </summary>
      <remarks> The region is drawn only if it is valid.</remarks>
      <seealso cref="P:devDept.Eyeshot.SketchManager.FilledRegionColor" />
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.AnimateCamera">
      <summary>
             When true, animates the camera when the <see cref="M:devDept.Eyeshot.Design.EditSketch(devDept.Eyeshot.Entities.SketchEntity)" /> or <see cref="M:devDept.Eyeshot.SketchManager.EditExit(System.Boolean)" /> methods are called.
             </summary>
      <remarks>Meaningful when <see cref="P:devDept.Eyeshot.SketchManager.RotateToPlane" /> is true.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.RotateToPlane">
      <summary>
            When true, aligns the camera with the sketch plane when a new sketch is created or an existing one is edited.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.Fit">
      <summary>
            When true, fits the current block entities when a new sketch is created or an existing one is edited.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.Margin">
      <summary>
            Zoom fit margin in pixels, if <see cref="P:devDept.Eyeshot.SketchManager.Fit" /> is true.
            </summary>
      <remarks>
            0 by default. In this case the margin is computed internally based on the viewport size. 
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.ZoomFitMode">
      <summary>
            Gets or sets the SketchManager zoom fit mode when a new sketch is created.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.EnableEdgeSelection">
      <summary>
            Enables the edge selection for the current Brep
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.DisableEdgeSelection">
      <summary>
            Disables the edge selection for the current Brep
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.EditExit(System.Boolean)">
      <summary>
            Exits and regenerates and compiles the sketch entity.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.RedundantConstraints">
      <summary>
            Returns the collection of the redundant constraints of the active sketch.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.DisplayConstraintEntities(devDept.Eyeshot.Labels.StackedLabel)">
      <summary>
            Displays the entities involved for the specific constraint.
            </summary>
      <param name="label">The constraint label.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.IsSketchEntity(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Returns true if the given entity is related to the sketch, false otherwise.
            For example, returns false for constraint dimension entities.
            </summary>
      <param name="entity">The entity to evaluate</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.IsConstruction(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Tells if the specified entity is a construction one.
            </summary>
      <param name="entity">The entity</param>
      <returns>True if the specified entity is a construction one, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.SetConstruction(devDept.Eyeshot.Entities.Entity,System.Boolean)">
      <summary>
            Change the entity construction status.
            </summary>
      <param name="entity">The entity</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.GetEntities(devDept.Eyeshot.Labels.StackedLabel)">
      <summary>
            Gets the entities associated with a constraint label.
            </summary>
      <param name="stackedLabel">The constraint label.</param>
      <returns>The array containing the entities associated with the constraint label.</returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.StartPoint(devDept.Eyeshot.Entities.Arc)">
      <summary>
            Returns the start point of the specified arc.
            </summary>
      <param name="arc">The arc</param>
      <returns>
            The <see cref="T:devDept.Eyeshot.Entities.Point" /> entity linked to the start point of the arc.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.StartPoint(devDept.Eyeshot.Entities.Line)">
      <summary>
            Returns the start point of the specified line.
            </summary>
      <param name="line">The line</param>
      <returns>
            The <see cref="T:devDept.Eyeshot.Entities.Point" /> entity linked to the start point of the line.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.StartPoint(devDept.Eyeshot.Entities.Curve)">
      <summary>
            Returns the start point of the specified spline.
            </summary>
      <param name="line">The spline</param>
      <returns>
            The <see cref="T:devDept.Eyeshot.Entities.Point" /> entity linked to the start point of the spline.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.EndPoint(devDept.Eyeshot.Entities.Arc)">
      <summary>
            Returns the end point of the specified arc.
            </summary>
      <param name="arc">The arc</param>
      <returns>
            The <see cref="T:devDept.Eyeshot.Entities.Point" /> entity linked to the end point of the arc.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.EndPoint(devDept.Eyeshot.Entities.Line)">
      <summary>
            Returns the end point of the specified line.
            </summary>
      <param name="line">The line</param>
      <returns>
            The <see cref="T:devDept.Eyeshot.Entities.Point" /> entity linked to the end point of the line.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.EndPoint(devDept.Eyeshot.Entities.Curve)">
      <summary>
            Returns the end point of the specified spline.
            </summary>
      <param name="spline">The spline</param>
      <returns>
            The <see cref="T:devDept.Eyeshot.Entities.Point" /> entity linked to the end point of the spline.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CenterPoint(devDept.Eyeshot.Entities.Circle)">
      <summary>
            Returns the center point of the specified circle.
            </summary>
      <param name="circle">The circle</param>
      <returns>
            The <see cref="T:devDept.Eyeshot.Entities.Point" /> entity linked to the center point of the circle.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CenterPoint(devDept.Eyeshot.Entities.Arc)">
      <summary>
            Returns the center point of the specified arc.
            </summary>
      <param name="arc">The arc</param>
      <returns>
            The <see cref="T:devDept.Eyeshot.Entities.Point" /> entity linked to the center point of the arc.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CenterPoint(devDept.Eyeshot.Entities.Ellipse)">
      <summary>
            Returns the center point of the specified ellipse.
            </summary>
      <param name="ellipse">The ellipse</param>
      <returns>
            The <see cref="T:devDept.Eyeshot.Entities.Point" /> entity linked to the center point of the ellipse.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.GetPoints(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Returns the points of the specified entity. For example,
            for an arc the method will return the center, the start
            point and the end point.
            </summary>
      <param name="entity">The entity to evaluate</param>
      <returns>An array of points linked to the entity.</returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.Move(devDept.Eyeshot.Entities.Point,devDept.Geometry.Point3D)">
      <summary>
            Moves the specified point to the given location (in world coordinates, not plane
            coordinates).
            </summary>
      <param name="p">The point to move</param>
      <param name="newLocation">The new location of the point in world
            coordinates</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.DrawOverlay(devDept.Eyeshot.Workspace.DrawSceneParams)">
      <summary>
            Draws overlaying the filled region.
            </summary>
      <param name="data">The draw data</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddPoint(devDept.Geometry.Point2D)">
      <summary>
            Creates a sketch spline starting from the curve entity and adds it to the sketch.
            </summary>
      <param name="point">The point.</param>
      <returns>A Point entity at the specified location.</returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddSketchSplineFromCurveEntity(devDept.Eyeshot.Entities.Curve)">
      <summary>
            Creates a sketch spline starting from the curve entity and adds it to the sketch.
            </summary>
      <param name="curve">The curve entity.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddSpline(System.Collections.Generic.IList{devDept.Geometry.Point2D})">
      <summary>
            Create a set of sketch spline curves interpolating the given list of 2D points.
            </summary>
      <param name="points">The list of 2D point coordinates relative to the sketch
            plane.</param>
      <returns>
            A list of Bézier curves, with <see cref="P:devDept.Eyeshot.Entities.Curve.Degree">degree</see> equal to 3
            and 4 <see cref="P:devDept.Eyeshot.Entities.Curve.ControlPoints">control points</see>.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddEllipse(devDept.Geometry.Point2D,System.Double,System.Double)">
      <summary>
            Adds an ellipse to the sketch.
            </summary>
      <param name="center">The center.</param>
      <param name="radiusX">The X-radius.</param>
      <param name="radiusY">The Y-radius.</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddEllipse(devDept.Eyeshot.Entities.Ellipse)">
      <summary>
            Adds the ellipse to the sketch.
            </summary>
      <param name="ellipse">The ellipse.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddLine(devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
      <summary>
            Adds a line to the sketch.
            </summary>
      <param name="start">The start point.</param>
      <param name="end">The end point.</param>
      <returns>The newly added line.</returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.ProjectCurve(devDept.Geometry.Entities.IGCurve,System.Boolean)">
      <summary>
            Project the selected edge into the sketch and updates and invalidates the sketch.
            </summary>
      <param name="igcurve">The curve.</param>
      <returns>The projected entities</returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddLine(devDept.Eyeshot.Entities.Line)">
      <summary>
            Adds the line to the sketch.
            </summary>
      <param name="line">The line.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddCircle(devDept.Eyeshot.Entities.Circle)">
      <summary>
            Adds the circle to the sketch.
            </summary>
      <param name="circle">the circle.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddCircle(devDept.Geometry.Point2D,System.Double)">
      <summary>
            Adds a circle to the sketch.
            </summary>
      <param name="center">The center.</param>
      <param name="radius">The radius.</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddCircle(devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
      <summary>
            Adds a circle to the sketch.
            </summary>
      <param name="center">The center.</param>
      <param name="pointOnCircle">The point from which the circle must pass. </param>
      <returns>The newly added circle.</returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddArc(devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
      <summary>
            Adds an arc to the sketch.
            </summary>
      <param name="centerPoint">The center.</param>
      <param name="startPoint">The start point.</param>
      <param name="endPoint">The end point.</param>
      <returns>The newly added arc.</returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.PreparesEntitiesForMirror(System.Collections.Generic.List{devDept.Eyeshot.Entities.Entity})">
      <summary>
            Prepares the input list of entities for the mirror constraint. 
            </summary>
      <param name="selectedEntities">The selected entities.</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddEntity(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Adds the entity to the sketch.
            </summary>
      <param name="ent">The entity.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddPoint(devDept.Eyeshot.Entities.Point)">
      <summary>
            Adds the point to the sketch.
            </summary>
      <param name="point">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddArc(devDept.Eyeshot.Entities.Arc)">
      <summary>
            Adds the arc to the sketch.
            </summary>
      <param name="arc">The arc.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddSlot(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds a slot to the sketch.
            </summary>
      <param name="x">Left arc center X position</param>
      <param name="y">Left arc center Y position</param>
      <param name="length">The distance between arcs centers</param>
      <param name="radius">The arc radius</param>
      <param name="angle">The slot angle in radians from X axis. When zero, the horizontal constraint is added.</param>
      <returns>The array of sketch entities representing the slot: bottom line, right arc, top line, left arc.</returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddRectangle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Adds a rectangle to the sketch.
            </summary>
      <param name="x">The lower-left corner X position</param>
      <param name="y">The lower-left corner Y position</param>
      <param name="width">The rectangle width</param>
      <param name="height">The rectangle height</param>
      <param name="angle">The rectangle angle in radians. When zero the horizontal constraint is added.</param>
      <param name="lengthConstraints">When true, adds the length constraints for the rectangle sides.</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddCircularSlot(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds a circular slot to the sketch.
            </summary>
      <param name="x">The inner arc center X position</param>
      <param name="y">The inner arc center Y position</param>
      <param name="startAngle">The slot start angle in radians</param>
      <param name="deltaAngle">The slot delta angle in radians</param>
      <param name="radius">The arc radius</param>
      <param name="slotRadius">The slot radius</param>
      <returns>The array of sketch entities representing the circular slot: bottom arc, outer arc, top arc, inner arc.</returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddFillet(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Boolean,System.Boolean,System.Double)">
      <summary>
            Add a fillet between the two specified curves. The two curves
            are required to be intersecting and the flip parameters must
            produce a valid arc.
            </summary>
      <param name="c1">First curve</param>
      <param name="c2">Second curve</param>
      <param name="flip1">Flips first curve direction</param>
      <param name="flip2">Flips second curve direction</param>
      <param name="radius">Radius of the fillet arc</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.GetConstraint(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Gets the constraint given a constraint entity (may be a linear dimension,
            an angular dimension, etc.).
            </summary>
      <param name="ent">An entity not related to the sketch</param>
      <returns>The geometrical constraint.</returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.GetVisualConstraint(devDept.Geometry.ConstraintSolver.Constraint)">
      <summary>
            Gets the corresponding visual constraint given a sketch constraint.
            </summary>
      <param name="constraint">the sketch constraint</param>
      <returns>The visual constraint.</returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.GetParentEntity(devDept.Eyeshot.Entities.Point)">
      <summary>
            Gets the parent entity of which the input point is a vertex.
            </summary>
      <param name="point">The point.</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.GetConstrained(devDept.Eyeshot.VisualConstraint)">
      <summary>
            Get all constrained entities.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.GetAllConstraintsFromEntity(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Returns all the constraints in which the entity is involved.
            </summary>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.UpdateAndInvalidate(System.Boolean)">
      <summary>
            Solves the sketch and regens and compiles the entities.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.Solve">
      <summary>
            Solves the system.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.ClearHistory">
      <summary>
            Erase current history (remove all undo/redo records).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.Undo">
      <summary>
            Undo the last operation performed. If no record of previous operations is
            available, an <see cref="T:devDept.Eyeshot.EyeshotException" /> is thrown. To check if this method
            is safe to call, use <see cref="P:devDept.Eyeshot.SketchManager.UndoReady" />.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.Redo">
      <summary>
            Redo the last operation undone. If no record of previous undone operations is
            available, an <see cref="T:devDept.Eyeshot.EyeshotException" /> is thrown. To check if this method
            is safe to call, use <see cref="P:devDept.Eyeshot.SketchManager.RedoReady" />.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.ResetRedoCount">
      <summary>
            Resets the number of available redo operations to zero. Used to make an undo
            operation permanent.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.UndoReady">
      <summary>
            Gets a value indicating whether at least one undo operation can be performed.
            </summary>
      <value>
        <see langword="true" /> if at least one undo operation can be performed;
            otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.RedoReady">
      <summary>
            Gets a value indicating whether at least one redo operation can be performed.
            </summary>
      <value>
        <see langword="true" /> if at least one redo operation can be performed;
            otherwise, <see langword="false" />.
            </value>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.PasteOffset">
      <summary>
            Gets or sets the offset along the X-axis and Y-axis of the sketch plane for the pasted entities.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SketchManager.Dragging">
      <summary>
            Returns true if <see cref="M:devDept.Eyeshot.SketchManager.DragStart(devDept.Geometry.Point2D,devDept.Eyeshot.Entities.Entity[])" /> was invoked and
            <see cref="M:devDept.Eyeshot.SketchManager.DragEnd" /> has not yet been called.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.DragStart(devDept.Geometry.Point2D,devDept.Eyeshot.Entities.Entity[])">
      <summary>
            Starts dragging the specified entities from the specified point. Throws an
            exception if <see cref="P:devDept.Eyeshot.SketchManager.Dragging" /> is true.
            </summary>
      <param name="start">The start point for the dragging process</param>
      <param name="entities">The entities to drag</param>
      <seealso cref="M:devDept.Eyeshot.SketchManager.DragEnd" />
      <seealso cref="M:devDept.Eyeshot.SketchManager.DragTo(devDept.Geometry.Point2D)" />
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when this method is called twice
            without invoking <see cref="M:devDept.Eyeshot.SketchManager.DragEnd" /> before the second call</exception>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.DragTo(devDept.Geometry.Point2D)">
      <summary>
            Drags the entities to the specified point. Throws an exception if <see cref="P:devDept.Eyeshot.SketchManager.Dragging" /> is false.
            </summary>
      <param name="to">New drag destination, relative to the sketch plane</param>
      <seealso cref="M:devDept.Eyeshot.SketchManager.DragStart(devDept.Geometry.Point2D,devDept.Eyeshot.Entities.Entity[])" />
      <seealso cref="M:devDept.Eyeshot.SketchManager.DragEnd" />
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when this method is called without
            calling <see cref="M:devDept.Eyeshot.SketchManager.DragStart(devDept.Geometry.Point2D,devDept.Eyeshot.Entities.Entity[])" /> first</exception>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.DragEnd">
      <summary>
            Stops the dragging process. Throws an exception if <see cref="P:devDept.Eyeshot.SketchManager.Dragging" /> is
            false.
            </summary>
      <seealso cref="M:devDept.Eyeshot.SketchManager.DragStart(devDept.Geometry.Point2D,devDept.Eyeshot.Entities.Entity[])" />
      <seealso cref="M:devDept.Eyeshot.SketchManager.DragTo(devDept.Geometry.Point2D)" />
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when this method is called without
            calling <see cref="M:devDept.Eyeshot.SketchManager.DragStart(devDept.Geometry.Point2D,devDept.Eyeshot.Entities.Entity[])" /> first</exception>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.DeleteEntity(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Deletes the entity and its associated constraints.
            </summary>
      <param name="entity">The entity to delete</param>
      <returns>
            True if the entity has been deleted, false if the
            entity was not present among the entities related
            to the sketch.
            </returns>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.RemoveConstraint(devDept.Eyeshot.VisualConstraint)">
      <summary>
            Removes the specific constraint from the sketch.
            </summary>
      <param name="constraint">The constraint</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.RemoveConstraint(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Removes the constraint given a constraint entity (may be a linear dimension,
            an angular dimension, etc.).
            </summary>
      <param name="entity">The entity representing a specific constraint</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateLengthConstraint(devDept.Eyeshot.Entities.Line,System.Double,System.Boolean,devDept.Geometry.Point2D)">
      <summary>
            Adds a line constraint on the input line.
            </summary>
      <param name="line">the line.</param>
      <param name="value">Optional, the desired length value.</param>
      <param name="reference">Optional, when true the constraint is considered only as reference.</param>
      <param name="dimLinePos">Optional, the dimension line position.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateDiameterConstraint(devDept.Eyeshot.Entities.Circle,System.Double,System.Boolean,devDept.Geometry.Point2D)">
      <summary>
            Adds a diameter/radius constraint on the input circle.
            </summary>
      <param name="circle">the circle.</param>
      <param name="value">Optional, the desired diameter/radius value.</param>
      <param name="reference">Optional, when true the constraint is considered only as reference.</param>
      <param name="dimLinePos">Optional, the dimension line position.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateJoinConstraint(devDept.Eyeshot.Entities.Point,devDept.Eyeshot.Entities.Entity)">
      <summary>
            Adds a point on entity constraint.
            </summary>
      <param name="p">The point.</param>
      <param name="ent">The entity.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreatePointFixedConstraint(devDept.Eyeshot.Entities.Point)">
      <summary>
            Adds a point fixed constraint for the input point.
            </summary>
      <param name="p1">the point.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateHorizontalConstraint(devDept.Eyeshot.Entities.Line)">
      <summary>
            Create an horizontal constraint on the input line.
            </summary>
      <param name="l1">The line.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateHorizontalConstraint(devDept.Eyeshot.Entities.Point,devDept.Eyeshot.Entities.Point)">
      <summary>
            Adds an horizontal constraints between two points.
            </summary>
      <param name="p1">The first point.</param>
      <param name="p2">The second point.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateVerticalConstraint(devDept.Eyeshot.Entities.Point,devDept.Eyeshot.Entities.Point)">
      <summary>
            Adds a vertical constraints between two points.
            </summary>
      <param name="p1">The first point.</param>
      <param name="p2">The second point.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateVerticalConstraint(devDept.Eyeshot.Entities.Line)">
      <summary>
            Adds a vertical constraint for the input line.
            </summary>
      <param name="l1">The line.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateParallelLinesConstraint(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Line)">
      <summary>
            Adds a parallel constraint between two lines.
            </summary>
      <param name="l1">The first line.</param>
      <param name="l2">The second line.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreatePerpendicularConstraint(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Line)">
      <summary>
            Adds a perpendicular constraint between two lines.
            </summary>
      <param name="l1">The first line.</param>
      <param name="l2">The second line.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateEqualConstraint(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity,System.Boolean)">
      <summary>
            Adds an equal-length constraint between two entities.
            </summary>
      <param name="e1">The first entity.</param>
      <param name="e2">The second entity.</param>
      <param name="eqRadius">Optional, if true the radius length is considered.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateCollinearPointsConstraint(devDept.Eyeshot.Entities.Point,devDept.Eyeshot.Entities.Point,devDept.Eyeshot.Entities.Point)">
      <summary>
            Adds a collinear constraint between points.
            </summary>
      <param name="p1">The first point.</param>
      <param name="p2">The second point.</param>
      <param name="p3">The third point.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateTangentConstraint(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity)">
      <summary>
            Adds a tangent constraint between two entities.
            </summary>
      <param name="e1">The first entity.</param>
      <param name="e2">The second entity.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateCollinearConstraint(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Line)">
      <summary>
            Adds a collinear constraint between two lines.
            </summary>
      <param name="l1">The first line.</param>
      <param name="l2">The second line.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateMirrorConstraint(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Line)">
      <summary>
            Adds a mirror constraint between  two entites.
            </summary>
      <param name="e1">The first entity.</param>
      <param name="e2">The second entity.</param>
      <param name="axis">The symmetry axis.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateAngleConstraint(devDept.Eyeshot.Entities.Arc,System.Double,System.Boolean,devDept.Geometry.Point2D)">
      <summary>
            Adds an angle constraint on the input arc.
            </summary>
      <param name="arc">The arc.</param>
      <param name="value">Optional, the desired distance value.</param>
      <param name="reference">Optional, when true the constraint is considered only as reference.</param>
      <param name="dimLinePos">Optional, the dimension line position.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateAngleConstraint(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Line,devDept.Geometry.Point2D,System.Double,System.Boolean,devDept.Geometry.Point2D)">
      <summary>
            Adds an angle constraint between the two specified lines. The quadrant point
            allows to choose where to apply the constraint.
            </summary>
      <param name="l1">First line delimiting the angle</param>
      <param name="l2">Second line delimiting the angle</param>
      <param name="quadrantPoint">A point in one of the four sectors formed by the two
            lines (considering them as infinite). The angle constraint will be applied in
            the quadrant where the point lies.</param>
      <param name="value">Optional, the desired distance value.</param>
      <param name="reference">Optional, when true the constraint is considered only as reference.</param>
      <param name="dimLinePos">Optional, the dimension line position.</param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.SketchManager.CreatePointLineDistanceConstraint(devDept.Eyeshot.Entities.Point,devDept.Eyeshot.Entities.Line,System.Double,System.Boolean,devDept.Geometry.Point2D)" -->
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.SketchManager.CreateAlignedPointsDistanceConstraint(devDept.Eyeshot.Entities.Point,devDept.Eyeshot.Entities.Point,System.Double,System.Boolean,devDept.Geometry.Point2D)" -->
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.SketchManager.CreateHorizontalPointsDistanceConstraint(devDept.Eyeshot.Entities.Point,devDept.Eyeshot.Entities.Point,System.Double,System.Boolean,devDept.Geometry.Point2D)" -->
    <member name="M:devDept.Eyeshot.SketchManager.CreateVerticalPointsDistanceConstraint(devDept.Eyeshot.Entities.Point,devDept.Eyeshot.Entities.Point,System.Double,System.Boolean,devDept.Geometry.Point2D)">
      <summary>
            Adds a vertical points distance constraint.
            </summary>
      <param name="p1">The first point.</param>
      <param name="p2">the second point.</param>
      <param name="value">Optional, the desired distance value.</param>
      <param name="reference">Optional, when true the constraint is considered only as reference.</param>
      <param name="dimLinePos">Optional, the dimension line position.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateLinesDistanceConstraint(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Line,System.Double,System.Boolean,devDept.Geometry.Point2D)">
      <summary>
            Adds a distance constraint between two lines.
            </summary>
      <param name="l1">The first line.</param>
      <param name="l2">The second line.</param>
      <param name="value">Optional, the desired distance value.</param>
      <param name="reference">Optional, when true the constraint is considered only as reference.</param>
      <param name="dimLinePos">Optional, the dimension line position.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateConcentricDistanceConstraint(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,System.Boolean,devDept.Geometry.Point2D)">
      <summary>
            Adds a distance constraint between two concentric circles.
            </summary>
      <param name="c1">The first circle.</param>
      <param name="c2">The second circle.</param>
      <param name="reference">Optional, when true the constraint is considered only as reference.</param>
      <param name="dimLinePos">Optional, the dimension line position.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreatePointOnConstraint(devDept.Eyeshot.Entities.Point,devDept.Eyeshot.Entities.Entity)">
      <summary>
            Adds a point on constraint, forcing the specified point to stay on the given curve.
            </summary>
      <param name="point">The point that should lie on the curve</param>
      <param name="entity">The curve where the point should lie</param>
      <param name="value">Optional, position of the point in the curve domain.</param>
      <param name="reference">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreatePointAtConstraint(devDept.Eyeshot.Entities.Point,devDept.Eyeshot.Entities.Entity,System.Double)">
      <summary>
            Adds a point on constraint, forcing the specified point to stay on the given curve.
            </summary>
      <param name="point">The point that should lie on the curve</param>
      <param name="entity">The curve where the point should lie</param>
      <param name="value">Position of the point in the curve domain.</param>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.CreateMidPointConstraint(devDept.Eyeshot.Entities.Point,devDept.Eyeshot.Entities.Entity)">
      <summary>
            Adds a point on constraint, forcing the specified point to stay on the given curve.
            </summary>
      <param name="point">The point that should lie on the curve</param>
      <param name="entity">The curve where the point should lie</param>
    </member>
    <member name="T:devDept.Eyeshot.SketchManager.SolveEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:devDept.Eyeshot.SketchManager.SystemSolved" /> event.
            </summary>
      <param name="source">The source of the event.</param>
      <param name="e">An object that contains the event data.</param>
    </member>
    <member name="E:devDept.Eyeshot.SketchManager.SystemSolved">
      <summary>
            Occurs every time that the equation system of the sketch is solved.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.SketchManager.EditEndedEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:devDept.Eyeshot.SketchManager.EditEnded" /> event.
            </summary>
      <param name="source">The source of the event.</param>
      <param name="e">An object that contains the event data.</param>
    </member>
    <member name="E:devDept.Eyeshot.SketchManager.EditEnded">
      <summary>
            Occurs when the SketchManager exits from the current editing sketch.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.SketchManager.EditStartedEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:devDept.Eyeshot.SketchManager.EditStarted" /> event.
            </summary>
      <param name="source">The source of the event.</param>
      <param name="e">An object that contains the event data.</param>
    </member>
    <member name="E:devDept.Eyeshot.SketchManager.EditStarted">
      <summary>
            Occurs when the SketchManager enters in the edit mode.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SketchManager.AddPolygon(devDept.Geometry.Point2D,System.Double,System.Int32,devDept.Eyeshot.Entities.Point@,devDept.Eyeshot.Entities.Point@,System.Double)">
      <summary>
            Adds a regular polygon to the sketch.
            </summary>
      <param name="center">The center.</param>
      <param name="radius">The radius of the circle circumscribed to the polygon.</param>
      <param name="numOfVertices">The number of vertices.</param>
      <param name="polygonCenter">The polygon center.</param>
      <param name="angle">The angle of rotation of the polygon with respect its center.</param>
      <returns>The array of lines representing the polygon.</returns>
    </member>
    <member name="T:devDept.Eyeshot.SolveEventArgs">
      <summary>
            Event args for the <see cref="E:devDept.Eyeshot.SketchManager.SystemSolved" /> event.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.SolveEventArgs.Result">
      <summary>
            Result of the solve operation.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.SolveEventArgs.OverConstrained">
      <summary>
            True if the sketch is in an over-constrained state, meaning at least
            one redundant constraint exists.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.SolveEventArgs.Dragging">
      <summary>
            True if the sketch has been solved to perform a mouse dragging operation.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.VisualConstraint">
      <summary>
            Visual constraint class definition.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.VisualConstraint.#ctor">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.VisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Entities.Dimension,devDept.Geometry.ConstraintSolver.Constraint)">
      <summary>
            Dimension constructor.
            </summary>
      <param name="dimensionConstraint">
      </param>
      <param name="ncConstraint">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.VisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Labels.StackedLabel[],devDept.Geometry.ConstraintSolver.Constraint)">
      <summary>
            Label constructor.
            </summary>
      <param name="constraintLabel">
      </param>
      <param name="ncConstraint">
      </param>
    </member>
    <member name="P:devDept.Eyeshot.VisualConstraint.ConstraintDimension">
      <summary>
            The dimension associated to this constraint.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.VisualConstraint.ConstraintLabels">
      <summary>
            The labels representing this constraints.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.VisualConstraint.GConstraint">
      <summary>
            The geometrical constraint
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.VisualConstraint.Destroy">
      <summary>
            Deletes the constraint from sketch
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.VisualConstraint.HasLabel(devDept.Eyeshot.Labels.StackedLabel)">
      <summary>
            Tests if the provided label belongs to this constraint.
            </summary>
      <param name="label">The constraint label to evaluate</param>
      <returns>
            True if the label is related to this constraint, false otherwise.
            </returns>
    </member>
    <member name="T:devDept.Eyeshot.PointsDistanceVisualConstraint">
      <summary>
            The Constraint representing the distance between two points.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.PointLineDistanceVisualConstraint">
      <summary>
            The Constraint representing the distance between a line and a point.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.LinesDistanceVisualConstraint">
      <summary>
            The Constraint representing the distance between two lines.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.AngleVisualConstraint">
      <summary>
            The angle constraint (between lines or of arc)
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ConcentricCirclesDistanceVisualConstraint">
      <summary>
            The constraint representing the distance between two concentric circles.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.TangentVisualConstraint">
      <summary>
            The tangent constraint
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.TangentVisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Labels.StackedLabel[],devDept.Geometry.ConstraintSolver.TangentConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="entities">
      </param>
      <param name="tangentConstrain">
      </param>
    </member>
    <member name="T:devDept.Eyeshot.LengthVisualConstraint">
      <summary>
            The length of a curve constraint
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.PointOnVisualConstraint">
      <summary>
            The point on curve constraint.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.PointAtVisualConstraint">
      <summary>
            The point at curve constraint.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MidPointVisualConstraint">
      <summary>
            The midpoint on curve constrain
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.DiameterVisualConstraint">
      <summary>
            The circle diameter constraint
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.DiameterVisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Entities.Dimension,devDept.Geometry.ConstraintSolver.RadiusConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="viewport">The Viewport.</param>
      <param name="radiusConstraintConstrain">
      </param>
    </member>
    <member name="T:devDept.Eyeshot.CoincidentVisualConstraint">
      <summary>
            The Constraint that represents the coincidence between points 
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.CoincidentVisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Labels.StackedLabel[],devDept.Geometry.ConstraintSolver.Constraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="viewport">The Viewport.</param>
      <param name="gConstraint">
      </param>
    </member>
    <member name="T:devDept.Eyeshot.PointFixedVisualConstraint">
      <summary>
            The point fixed constraint.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.PointFixedVisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Labels.StackedLabel[],devDept.Geometry.ConstraintSolver.PointFixedConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="viewport">The Viewport.</param>
      <param name="pointFixedConstraint">
      </param>
    </member>
    <member name="T:devDept.Eyeshot.PolygonVisualConstraint">
      <summary>
            The polygon constraint.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.PolygonVisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Labels.StackedLabel[],devDept.Geometry.ConstraintSolver.PolygonConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="viewport">The Viewport.</param>
      <param name="polygonConstraint">The polygon constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.HvVisualConstraint">
      <summary>
            The Horizontal(Vertical) constraint
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.HvVisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Labels.StackedLabel[],devDept.Geometry.ConstraintSolver.HVConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="viewport">The Viewport.</param>
      <param name="hvConstraint">
      </param>
    </member>
    <member name="T:devDept.Eyeshot.CollinearPointsVisualConstraint">
      <summary>
            The collinear points constraint
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.CollinearPointsVisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Labels.StackedLabel[],devDept.Geometry.ConstraintSolver.CollinearPointsConstraint)">
      <summary>
            Standard constructor
            </summary>
      <param name="viewport">The Viewport.</param>
      <param name="constraintLabels">the constraint labels.</param>
      <param name="collinearPointsConstraint">The sketch constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.CollinearVisualConstraint">
      <summary>
            The collinear lines constraint
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.CollinearVisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Labels.StackedLabel[],devDept.Geometry.ConstraintSolver.CollinearConstraint)">
      <summary>
            Standard constructor
            </summary>
      <param name="viewport">The Viewport.</param>
      <param name="constraintLabels">the constraint labels.</param>
      <param name="collinearConstraint">The sketch constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.ValueVisualConstraint">
      <summary>
            Generic value constraint class definition.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ValueVisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Entities.Dimension,devDept.Geometry.ConstraintSolver.ValueConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="viewport">The Viewport.</param>
      <param name="valueConstraint">
      </param>
    </member>
    <member name="P:devDept.Eyeshot.ValueVisualConstraint.Reference">
      <summary>
            Gets or sets the reference state of the constraint.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ValueVisualConstraint.Value">
      <summary>
            Gets or sets the constraint value.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.EqualVisualConstraint">
      <summary>
            Equal constraint
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EqualVisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Labels.StackedLabel[],devDept.Geometry.ConstraintSolver.EqualConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="viewport">The Viewport.</param>
      <param name="equalConstraintConstrain">
      </param>
    </member>
    <member name="T:devDept.Eyeshot.PerpendicularVisualConstraint">
      <summary>
            The perpendicular constraint
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.PerpendicularVisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Labels.StackedLabel[],devDept.Geometry.ConstraintSolver.PerpendicularConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="viewport">The Viewport.</param>
      <param name="perpendicularConstraintConstrain">
      </param>
    </member>
    <member name="T:devDept.Eyeshot.MirrorVisualConstraint">
      <summary>
            The mirror constraint
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ParallelLinesVisualConstraint">
      <summary>
            The parallel constraint
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ParallelLinesVisualConstraint.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Labels.StackedLabel[],devDept.Geometry.ConstraintSolver.ParallelConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="viewport">The Viewport.</param>
      <param name="parallelConstraintConstrain">
      </param>
    </member>
    <member name="T:devDept.Eyeshot.Converters.HistogramConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.BoundingBoxConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.MouseButtonConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="M:devDept.Eyeshot.Converters.MouseButtonConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <exclude />
    </member>
    <member name="M:devDept.Eyeshot.Converters.MouseButtonConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <exclude />
    </member>
    <member name="M:devDept.Eyeshot.Converters.MouseButtonConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <exclude />
    </member>
    <member name="M:devDept.Eyeshot.Converters.MouseButtonConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <exclude />
    </member>
    <member name="T:devDept.Eyeshot.Converters.RotateConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.ShortcutKeysSettingsConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.ManufactureShortcutKeysSettingsConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.ZoomConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.PanConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.Mouse3DConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.MultiTouchConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.NavigationSettingsConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.SelectionBoxColorsConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="M:devDept.Eyeshot.Converters.SelectionBoxColorsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <exclude />
    </member>
    <member name="M:devDept.Eyeshot.Converters.SelectionBoxColorsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <exclude />
    </member>
    <member name="T:devDept.Eyeshot.Converters.MagnifyingGlassConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="M:devDept.Eyeshot.Converters.MagnifyingGlassConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <exclude />
    </member>
    <member name="M:devDept.Eyeshot.Converters.MagnifyingGlassConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <exclude />
    </member>
    <member name="T:devDept.Eyeshot.Converters.EnumDescriptionConverter">
      <summary>
            EnumConverter supporting System.ComponentModel.DescriptionAttribute
            </summary>
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.SavedViewsConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.BorderConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.CameraConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.DisplayModeSettingsConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.DisplayModeSettingsFlatConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.DisplayModeSettingsShadedConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.DisplayModeSettingsRenderedConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.HiddenLinesConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="M:devDept.Eyeshot.Converters.HiddenLinesConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <exclude />
    </member>
    <member name="M:devDept.Eyeshot.Converters.HiddenLinesConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <exclude />
    </member>
    <member name="M:devDept.Eyeshot.Converters.HiddenLinesConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <exclude />
    </member>
    <member name="T:devDept.Eyeshot.Converters.GridConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.LegendConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.ObjectManipulatorPartPropertiesConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.ObjectManipulatorConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.CoordinateSystemIconConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="M:devDept.Eyeshot.Converters.CoordinateSystemIconConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <exclude />
    </member>
    <member name="M:devDept.Eyeshot.Converters.CoordinateSystemIconConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <exclude />
    </member>
    <member name="T:devDept.Eyeshot.Converters.OriginSymbolConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.ProgressBarConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.ToolBarConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="M:devDept.Eyeshot.Converters.ToolBarConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <exclude />
    </member>
    <member name="M:devDept.Eyeshot.Converters.ToolBarConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <exclude />
    </member>
    <member name="T:devDept.Eyeshot.Converters.ButtonSettingsConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="M:devDept.Eyeshot.Converters.ButtonSettingsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <exclude />
    </member>
    <member name="M:devDept.Eyeshot.Converters.ButtonSettingsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <exclude />
    </member>
    <member name="M:devDept.Eyeshot.Converters.ButtonSettingsConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <exclude />
    </member>
    <member name="M:devDept.Eyeshot.Converters.ButtonSettingsConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <exclude />
    </member>
    <member name="T:devDept.Eyeshot.Converters.ToolBarButtonConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.DefaultToolBarButtonConverter`1">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.ViewCubeConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="M:devDept.Eyeshot.Converters.ViewCubeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <exclude />
    </member>
    <member name="M:devDept.Eyeshot.Converters.ViewCubeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <exclude />
    </member>
    <member name="T:devDept.Eyeshot.Converters.ViewportConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.ClippingPlaneConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Converters.SimulationTimeLineConverter">
      <exclude />
      <excludetoc />
    </member>
    <member name="T:devDept.Eyeshot.Histogram">
      <summary>
            Histogram user-interface element.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Histogram.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Histogram.#ctor(System.Int32,System.Int32,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.String)">
      <summary>
            Designer constructor.
            </summary>
      <param name="columnWidth">Width of each column in pixels.</param>
      <param name="columnHeight">Height of each column in pixels.</param>
      <param name="title">The title shown on the top-left corner of the diagram.</param>
      <param name="columnColor">The color of the foreground columns.</param>
      <param name="backgroundColor">The color of the background columns.</param>
      <param name="textColor">The color used to draw texts for this diagram. Ignored when <see cref="P:devDept.Eyeshot.Histogram.Lighting" /> is set to false.</param>
      <param name="averageColor">The color of the average mark.</param>
      <param name="highlightColor">The highlighted color of the diagram. A column becomes highlighted when hovering over it.</param>
      <param name="isVisible">Diagram visibility status.</param>
      <param name="showAverage">Average mark visibility status.</param>
      <param name="lighting">Lighting status. Affects the look of the diagram.</param>
      <param name="formatString"> Value's numeric format. Useful to change number format and decimal places.</param>
    </member>
    <member name="M:devDept.Eyeshot.Histogram.#ctor(devDept.Geometry.HistogramData,System.Int32,System.Int32,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="histogramData"> The Histogram that contains the data to be displayed.&gt;</param>
      <param name="columnWidth">Width of each column in pixels.</param>
      <param name="columnHeight">Height of each column in pixels.</param>
      <param name="title">The title shown on the top-left corner of the diagram.</param>
      <param name="columnColor">The color of the foreground columns.</param>
      <param name="backgroundColor">The color of the background columns.</param>
      <param name="textColor">The color used to draw texts for this diagram. Ignored when <see cref="P:devDept.Eyeshot.Histogram.Lighting" /> is set to false.</param>
      <param name="averageColor">The color of the average mark.</param>
      <param name="highlightColor">The highlighted color of the diagram. A column becomes highlighted when hovering over it.</param>
      <param name="isVisible">Diagram visibility status.</param>
      <param name="showAverage">Average mark visibility status.</param>
      <param name="lighting">Lighting status. Affects the look of the diagram.</param>
      <param name="formatString"> Value's numeric format. Useful to change number format and decimal places.</param>
    </member>
    <member name="M:devDept.Eyeshot.Histogram.#ctor(devDept.Eyeshot.Histogram)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other Histogram object</param>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.DefaultHistogram">
      <summary>
            Gets the default <see cref="T:devDept.Eyeshot.Histogram" />.
            </summary>
      <returns>The default <see cref="T:devDept.Eyeshot.Histogram" />.</returns>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.BackgroundColor">
      <summary>
             Gets or sets the color of the background columns.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.ColumnColor">
      <summary>
             Gets or sets the color of the foreground columns.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.HighlightColor">
      <summary>
             Gets or sets the highlighted color of the diagram. A column becomes highlighted when hovering over it.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.Lighting">
      <summary>
             Gets or sets lighting status. Affects the look of the diagram.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.Visible">
      <summary>
             Gets or sets the visibility status.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.ShowAverage">
      <summary>
             Gets or sets the average mark visibility status.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.FormatString">
      <summary>
             Value's numeric format. Useful to change number format and decimal places.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.ColumnWidth">
      <summary>
             Gets or sets the column's width in pixels.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.ColumnHeight">
      <summary>
             Gets or sets the column's height in pixels.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.Title">
      <summary>
             Gets or sets the title's string. The title is shown on the top-left corner of the diagram.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.TextColor">
      <summary>
            Gets or sets the color used to draw texts for this diagram. Ignored when <see cref="P:devDept.Eyeshot.Histogram.Lighting" /> is set to false.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.AverageLineColor">
      <summary>
            Gets or sets the color of the average mark.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Histogram.HistogramData">
      <summary>
            Gets or sets the Histogram that contains the data to be displayed.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Histogram.GetDefaultHistogramUI">
      <summary>
            Gets the default <see cref="T:devDept.Eyeshot.Histogram" />.
            </summary>
      <returns>The default <see cref="T:devDept.Eyeshot.Histogram" />.</returns>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Workspace">
      <summary>
            Base abstract class for Eyeshot controls.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.IsOpenRootLevel">
      <summary>
            True if the OpenBlock is the RootBlock, false otherwise.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.CurrentBlockReference">
      <summary>
            Gets the current BlockReference.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)" />
      <seealso cref="P:devDept.Eyeshot.Workspace.Parents" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.CurrentBlock">
      <summary>
            Gets the current block if a BlockReference is set as current, the <see cref="P:devDept.Eyeshot.Workspace.OpenBlock" /> otherwise.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.OpenCurrentBlock(System.Boolean)" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.OpenBlock">
      <summary>
            Gets the open block.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Workspace.OpenCurrentBlock(System.Boolean)" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.CurrentTransformation">
      <summary>
            Gets the accumulated <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" /> transformation (including its parents transformations).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.OpenCurrentBlock(System.Boolean)">
      <summary>
            Open <see cref="P:devDept.Eyeshot.Workspace.CurrentBlock" />. The <see cref="T:devDept.Eyeshot.OriginSymbol" /> and <see cref="T:devDept.Eyeshot.Grid" /> are in the Block reference system.
            </summary>
      <param name="updateBoundingBox">If true, updates the scene bounding box. Set it to false for better performances in off-screen methods.</param>
      <remarks>
        <para>When a Block is "open" only its entities are shown, the rest of the scene is hidden.</para>
        <para>Entities are shown in the Block reference system, without the parents transformation.</para>
      </remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.CloseOpenBlock(System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.ResetOpenBlocks(System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateBoundingBox" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.CloseOpenBlock(System.Boolean)">
      <summary>
            Close the <see cref="P:devDept.Eyeshot.Workspace.OpenBlock" /> and goes back to the visualization of the previously opened block.
            </summary>
      <param name="updateBoundingBox">If true, updates the scene bounding box. Set it to false for better performances in off-screen methods.</param>
      <seealso cref="M:devDept.Eyeshot.Workspace.OpenCurrentBlock(System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.ResetOpenBlocks(System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateBoundingBox" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ResetOpenBlocks(System.Boolean)">
      <summary>
            Close all opened blocks up to the root one.
            </summary>
      <param name="updateBoundingBox">If true, updates the scene bounding box. Set it to false for better performances in off-screen methods.</param>
      <seealso cref="M:devDept.Eyeshot.Workspace.OpenCurrentBlock(System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.CloseOpenBlock(System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateBoundingBox" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetCurrentStack(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},System.Boolean)">
      <summary>
            Sets a sequence of BlockReferences as current.
            </summary>
      <param name="parents">The stack of BlockReferences to set as current (the bottom-most is the first parent, which must be in the entities of the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlock" />, 
            the top-most is the last parent of the hierarchy). If null or empty, the current BlockReference is unset.</param>
      <param name="updateBoundingBox">If true, updates the scene bounding box. Set it to false for better performances in off-screen methods that call this to just use the <see cref="P:devDept.Eyeshot.Entities.BlockReference.AccumulatedParentsTransform" /></param>
      <seealso cref="M:devDept.Eyeshot.Workspace.SetParentAsCurrent(System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.SetSelectionAsCurrent(System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetStackTransformation(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Gets the cumulative transformation of a blockreference stack.
            </summary>
      <param name="parents">The stack of BlockReferences to evaluate (the one on top of the stack is the last parent of the hierarchy)</param>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.ROOT_SCENE_PREFIX">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)">
      <summary>
            Sets a BlockReference as current.
            </summary>
      <param name="blockReference">The BlockReference to set as current</param>
      <param name="updateBoundingBox">If true, updates the scene bounding box. Set it to false for better performances in off-screen methods that call this to just use the <see cref="P:devDept.Eyeshot.Entities.BlockReference.AccumulatedParentsTransform" /></param>
      <remarks>
        <para>If it is null, the current BlockReference is unset.</para>
        <para>The BlockReference must be a first-level child of the one that is currently set (i.e. it must be in the entities of the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlock" />).</para>
        <para>When a BlockReference is set as current, only the referenced block entities are active on the scene, others are still visible but in a "frozen" state.</para>
      </remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.SetParentAsCurrent(System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.SetSelectionAsCurrent(System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.SetCurrentStack(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},System.Boolean)" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.Parents">
      <summary>
            Gets the stack of the parents of the current BlockReference.
            </summary>
      <remarks>The BlockReference on top of the stack is the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" />.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.SetParentAsCurrent(System.Boolean)" />
      <seealso cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetParentAsCurrent(System.Boolean)">
      <summary>
            Sets the parent of the current BlockReference (if it exists) as current.
            </summary>
      <param name="updateBoundingBox">If true, updates the scene bounding box. Set it to false for better performances in off-screen methods that call this to just use the <see cref="P:devDept.Eyeshot.Entities.BlockReference.AccumulatedParentsTransform" /></param>
      <seealso cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.SetSelectionAsCurrent(System.Boolean)" />
      <seealso cref="P:devDept.Eyeshot.Workspace.Parents" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetSelectionAsCurrent(System.Boolean)">
      <summary>
            Sets the selected BlockReference as current (if there is one).
            </summary>
      <param name="updateBoundingBox">If true, updates the scene bounding box. Set it to false for better performances in off-screen methods that call this to just use the <see cref="P:devDept.Eyeshot.Entities.BlockReference.AccumulatedParentsTransform" /></param>
      <seealso cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.SetParentAsCurrent(System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.IsolateBlocks(System.Collections.Generic.IReadOnlyCollection{devDept.Eyeshot.Block})">
      <summary>
            Isolate a collection of blocks by showing the others in a transparent state.
            Pass null to unset the isolated blocks.
            </summary>
      <remarks>
            This method is useful to focus on a part of the model while still seeing the
            rest of the scene in a transparent state.
            </remarks>
      <param name="blocks">The blocks to isolate</param>
      <seealso cref="M:devDept.Eyeshot.Workspace.IsolateInstances(System.Collections.Generic.IReadOnlyList{System.Tuple{System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},devDept.Eyeshot.Entities.Entity}})" />
      <seealso cref="M:devDept.Eyeshot.Workspace.IsolateSelected(System.Collections.Generic.IReadOnlyList{devDept.Eyeshot.Workspace.SelectedItemBase})" />
      <exception cref="T:devDept.Eyeshot.EyeshotException">Throw when a BlockReference is set as <see cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)">current</see>.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.IsolateInstances(System.Collections.Generic.IReadOnlyList{System.Tuple{System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},devDept.Eyeshot.Entities.Entity}})">
      <summary>
            Isolate a collection of entities by showing the others in a transparent state.
            Pass null to unset the isolated entities.
            </summary>
      <remarks>
            This method is useful to focus on a part of the model while still seeing the
            rest of the scene in a transparent state.
            </remarks>
      <param name="instances">The entities instance to isolate</param>
      <seealso cref="M:devDept.Eyeshot.Workspace.IsolateBlocks(System.Collections.Generic.IReadOnlyCollection{devDept.Eyeshot.Block})" />
      <seealso cref="M:devDept.Eyeshot.Workspace.IsolateSelected(System.Collections.Generic.IReadOnlyList{devDept.Eyeshot.Workspace.SelectedItemBase})" />
      <exception cref="T:devDept.Eyeshot.EyeshotException">Throw when a BlockReference is set as <see cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)">current</see>.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.IsolateSelected(System.Collections.Generic.IReadOnlyList{devDept.Eyeshot.Workspace.SelectedItemBase})">
      <summary>
            Isolate a collection of entities by showing the others in a transparent state.
            Pass null to unset the isolated entities.
            </summary>
      <remarks>
            This method is useful to focus on a part of the model while still seeing the
            rest of the scene in a transparent state.
            </remarks>
      <param name="instances">The entities instance to isolate</param>
      <seealso cref="M:devDept.Eyeshot.Workspace.IsolateBlocks(System.Collections.Generic.IReadOnlyCollection{devDept.Eyeshot.Block})" />
      <seealso cref="M:devDept.Eyeshot.Workspace.IsolateInstances(System.Collections.Generic.IReadOnlyList{System.Tuple{System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},devDept.Eyeshot.Entities.Entity}})" />
      <exception cref="T:devDept.Eyeshot.EyeshotException">Throw when a BlockReference is set as <see cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)">current</see>.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.UpdateBoundingBox">
      <summary>
            Computes the scene bounding box, rebuilds simplified representation and updates some important variables.
            If the bounding box, grid or shadow are visible, it updates them too.
            </summary>
      <remarks>
        <para>Shadow is updated only if it is visible and if the design has the bounding box height bigger than zero.</para>
        <para>It's important to call this method when the visibility status of some entities changes.</para>
        <para>
          <see cref="M:devDept.Eyeshot.Workspace.GetVisualRefinementDeviation">Visual refinement deviation</see> is updated as well but you need to set <see cref="P:devDept.Eyeshot.Entities.Entity.RegenMode" /> as <see cref="F:devDept.Eyeshot.Entities.regenType.RegenAndCompile" /> for all entities and call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)">Workspace.Entities.Regen()</see> method to see objects with new tessellation.</para>
      </remarks>
      <seealso cref="P:devDept.Eyeshot.Workspace.BoundingBox" />
      <seealso cref="M:devDept.Eyeshot.EntityList.UpdateBoundingBox" />
      <seealso cref="P:devDept.Eyeshot.EntityList.BoxMin" />
      <seealso cref="P:devDept.Eyeshot.EntityList.BoxMax" />
      <seealso cref="P:devDept.Eyeshot.EntityList.BoxSize" />
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.Visible" />
      <seealso cref="P:devDept.Eyeshot.Workspace.Turbo" />
      <seealso cref="T:devDept.Eyeshot.Grid" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetVisualRefinementDeviation">
      <summary>
            Gets the visual refinement deviation value used by the <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> method. It's estimated automatically from the root block extents.
            </summary>
      <returns>The estimated deviation</returns>
      <remarks>Can be overridden to return a custom value.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ProcessSemiTransparent">
      <summary>
            Performs semi-transparent entities pre-processing.
            </summary>
      <remarks>It is meaningful only when <see cref="P:devDept.Eyeshot.Workspace.AccurateTransparency" /> is true.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.MultiTouch">
      <summary>
            Gets or sets the Multitouch settings.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.TouchDoubleClick">
      <summary>
            Occurs when the touch surface is double-clicked.
            </summary>
      <remarks>WPF doesn't expose the double touch as an explicit event, so this is a custom event based on the fact that the application can receive a TwoFingerTap Gesture via the StylusSystemGesture event, which typically maps to double-click on a mouse.
            When <see cref="P:devDept.Eyeshot.Workspace.IsImmediateMode" /> or <see cref="F:devDept.Eyeshot.MultiTouchSettings.UseWindowsMessages" /> are true listen to <see cref="E:devDept.Eyeshot.Workspace.MultiTouchDoubleClick" /> event instead.</remarks>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.TouchClick">
      <summary>
            Occurs when a finger touches and holds the touch surface.
            </summary>
      <remarks>When <see cref="P:devDept.Eyeshot.Workspace.IsImmediateMode" /> or <see cref="F:devDept.Eyeshot.MultiTouchSettings.UseWindowsMessages" /> are true listen to <see cref="E:devDept.Eyeshot.Workspace.MultiTouchClick" /> event instead.</remarks>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.MultiTouchDown">
      <remarks>When both <see cref="P:devDept.Eyeshot.Workspace.IsImmediateMode" /> and <see cref="F:devDept.Eyeshot.MultiTouchSettings.UseWindowsMessages" /> are false listen to <see cref="M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)" /> event instead.</remarks>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.MultiTouchUp">
      <summary>
            Occurs when a multitouch surface is released.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.MultiTouchMove">
      <remarks>When both <see cref="P:devDept.Eyeshot.Workspace.IsImmediateMode" /> and <see cref="F:devDept.Eyeshot.MultiTouchSettings.UseWindowsMessages" /> are false listen to <see cref="M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)" /> event instead.</remarks>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.MultiTouchDoubleClick">
      <remarks>When both <see cref="P:devDept.Eyeshot.Workspace.IsImmediateMode" /> and <see cref="F:devDept.Eyeshot.MultiTouchSettings.UseWindowsMessages" /> are false listen to <see cref="E:devDept.Eyeshot.Workspace.TouchDoubleClick" /> event instead.</remarks>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.MultiTouchClick">
      <summary>
            Occurs when a finger touches and holds a multitouch surface.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.OnMultiTouchMove(System.Object,devDept.Eyeshot.MultiTouch.TouchEventArgs)">
      <summary>
            Occurs every <see cref="E:devDept.Eyeshot.Workspace.MultiTouchMove" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.OnMultiTouchDown(System.Object,devDept.Eyeshot.MultiTouch.TouchEventArgs)">
      <summary>
            Occurs every <see cref="E:devDept.Eyeshot.Workspace.MultiTouchDown" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.OnMultiTouchUp(System.Object,devDept.Eyeshot.MultiTouch.TouchEventArgs)">
      <summary>
            Occurs every <see cref="E:devDept.Eyeshot.Workspace.MultiTouchUp" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data</param>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.Mouse3D">
      <summary>
            3D mouse settings.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.OnMouse3DMove(System.Object,devDept.Eyeshot.Mouse3D.MoveEventArgs)">
      <summary>
            Occurs every <see cref="E:devDept.Eyeshot.Workspace.Mouse3DMove" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.OnMouse3DButtonUp(System.Object,devDept.Eyeshot.Mouse3D.ButtonEventArgs)">
      <summary>
            Occurs every <see cref="E:devDept.Eyeshot.Workspace.Mouse3DButtonUp" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.OnMouse3DButtonDown(System.Object,devDept.Eyeshot.Mouse3D.ButtonEventArgs)">
      <summary>
            Occurs every <see cref="E:devDept.Eyeshot.Workspace.Mouse3DButtonDown" /> event.
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data</param>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.Mouse3DButtonDown">
      <summary>
            Occurs when a Mouse3D button is pressed.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.Mouse3DButtonUp">
      <summary>
            Occurs when a Mouse3D button is pressed.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.Mouse3DMove">
      <summary>
            Occurs when a Mouse3D movement operation is performed.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetParentHandle(System.IntPtr)">
      <summary>
            Sets the handle of the parent control.
            </summary>
      <param name="hwnd">The handle of the parent to set.</param>
      <seealso cref="M:devDept.Eyeshot.Workspace.GetParentHandle" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetParentHandle">
      <summary>
            Gets the handle of the parent control.
            </summary>
      <returns>
            The handle of the parent.
            </returns>
      <seealso cref="M:devDept.Eyeshot.Workspace.SetParentHandle(System.IntPtr)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetAssembly(System.String@,System.String@,System.String@,System.Version@,System.String@)">
      <summary>
            Gets the currently loaded assembly.
            </summary>
      <param name="product">Gets assembly product</param>
      <param name="title">Gets assembly title</param>
      <param name="company">Gets assembly company</param>
      <param name="version">Gets assembly version</param>
      <param name="edition">Gets assembly edition</param>
      <returns>The currently loaded assembly.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetInstallFolder">
      <summary>
            Gets the Eyeshot installation folder.
            </summary>
      <returns>The full path where the Eyeshot assemblies are located.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetSamplesFolder">
      <summary>
            Gets the Eyeshot samples path.
            </summary>
      <returns>The full path where Eyeshot's source code samples are located.</returns>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.BoundingBoxChanged">
      <summary>
            Occurs when the scene bounding box has changed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.IsImmediateMode">
      <summary>
            Indicates whether the control is using the immediate mode rendering, according to the <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> value.
            </summary>
      <remarks>More details here: https://devdept.zendesk.com/hc/en-us/articles/115005366108-Immediate-mode-rendering-in-WPF- </remarks>
      <seealso cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" />
      <seealso cref="T:devDept.Eyeshot.rendererType" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.IsHardwareAccelerated">
      <summary>Returns true if OpenGL hardware acceleration is currently in use.</summary>
      <seealso cref="P:devDept.Eyeshot.Workspace.AskForHardwareAcceleration">AskForHardwareAcceleration Property</seealso>
      <seealso cref="P:devDept.Eyeshot.Workspace.ForceHardwareAcceleration">ForceHardwareAcceleration Property</seealso>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.IsAntiAliasingAvailable">
      <summary>Returns true if Full Screen Anti-Aliasing is available.</summary>
      <seealso cref="P:devDept.Eyeshot.Workspace.AntiAliasing" />
      <seealso cref="P:devDept.Eyeshot.Workspace.AskForAntiAliasing" />
      <seealso cref="P:devDept.Eyeshot.Workspace.AntiAliasingSamples" />
      <remarks>This value is written during the control's initialization, so it must be read after the control is correctly loaded.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ForceHardwareAcceleration">
      <summary>Forces accelerated hardware modes. By default, Eyeshot automatically disables hardware acceleration on some embedded
            GPUs to obtain the maximum level of graphical output consistency between all hardware. In these cases, enabling this property 
            will forcibly activate hardware acceleration, though the resulting graphics output may be unpredictable.</summary>
      <seealso cref="P:devDept.Eyeshot.Workspace.AskForAntiAliasing" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.IsBestAdapterAvailable">
      <summary>Indicates whether the best adapter is available for the renderer initialization or not.</summary>
      <remarks>
        <para>This value is written during the control's initialization, so it must be read after the control is correctly loaded.</para>
        <para>This property is not valid when the <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> is <see cref="F:devDept.Eyeshot.rendererType.OpenGL" />.</para>
      </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.Entities">
      <summary>
            Gets the EntityList of the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlock" />. This collection contains the entities displayed in the viewport.
            </summary>
      <remarks>
        <b>Never</b> add a <see cref="T:devDept.Eyeshot.Block">block</see> definition to this collection. Add it to the <see cref="P:devDept.Eyeshot.Workspace.Blocks">blocks</see> collection.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Block.Entities" />
      <seealso cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.OpenCurrentBlock(System.Boolean)" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.TempEntities">
      <summary>Temporary Entity collection. This collection contains the entities displayed in the viewport on top of the others as temporary entities.</summary>
      <remarks>
            Only <see cref="T:devDept.Eyeshot.Entities.IFace">IFace</see> and <see cref="T:devDept.Eyeshot.Entities.ICurve">ICurve</see> types are supported into this collection.
            Each entity added to this list needs to the regenerated first.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.Blocks">
      <summary>Block collection. This collection contains block definitions.</summary>
      <seealso cref="P:devDept.Eyeshot.Workspace.Entities">
      </seealso>
      <seealso cref="T:devDept.Eyeshot.Entities.BlockReference">
      </seealso>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.RootBlock">
      <summary>
            Gets the root block.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RemoveJittering(System.String)">
      <summary>        
            Creates a block with the selected <see cref="P:devDept.Eyeshot.Workspace.Entities" />, computes the center of their bounding box, translates them all of the negative of that quantity and returns a BlockReference to that block.
            </summary>
      <param name="blockName">The name of the block that will contain the selected entities.</param>
      <returns>The blockReference referring to the created block.</returns>
      <remarks>When the entities are very far from the origin their appearance on screen may become very compromised, and the camera may shake badly when moving/rotating the view. To fix this issue you can select these entities and call this method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RemoveJittering(devDept.Eyeshot.Entities.BlockReference)">
      <summary>        
            Gets the blockreference entities, computes the center of their bounding box, translates them all of the negative of that quantity and translates the blockreference back to the original position.
            </summary>
      <param name="blockReference">The blockreference name of the block that will contain the selected entities.</param>
      <remarks>When the entities are very far from the origin their appearance on screen may become very compromised, and the camera may shake badly when moving/rotating the view. To fix this issue you can select these entities and call this method.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.Layers">
      <summary>Layer collection.</summary>
      <remarks>If the collection is empty,  the "Default" layer is added.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.LineTypes">
      <summary>
            Gets or sets the line types collection.       
            </summary>
      <remarks>"ByBlock", "ByLayer", "Continuous" are reserved names and should not be used to avoid issues when exporting.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.HatchPatterns">
      <summary>
            Gets or sets the hatch patterns collection.       
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.TextStyles">
      <summary>
            Gets or sets the text styles collection.
            </summary>
      <remarks>The "Default" text style is added if missing.</remarks>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.hasFocus">
      <summary>
            Hold the focus status.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.ProgressChanged">
      <summary>
            Occurs when the read/write progress has changed.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.IsDesignMode">
      <summary>
            Gets a boolean indicating whether the control is running at design time.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.InstanceId">
      <summary>
            For internal use only. Gets the instance id for the logging.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.AutoRefresh">
      <summary>
            When true the Invalidate() and the CompileUserInterfaceElements() are automatically called after changing the properties that are defined as dependency properties.
            </summary>
      <remarks>Set it to true if you want a real-time refresh in the WPF data binding process.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.Clear">
      <summary>
            Clears all the viewport master collections: entities, tempEntities, blocks, layers, materials, text styles, line types and labels.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.InitializeViewports">
      <summary>
            Ensures that at least one <see cref="T:devDept.Eyeshot.Viewport" /> is present in the <see cref="P:devDept.Eyeshot.Design.Viewports" /> collection.
            </summary>
      <remarks>This method must be called only when creating the <see cref="T:devDept.Eyeshot.Design" /> object at run time. It must not be called when creating the object at design time.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.CompileUserInterfaceElements">
      <summary>
            Compiles 3D user interface elements like the origin symbol, the bitmap background, the FEM restraint and load symbols, etc.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.CompileUserInterfaceElements(devDept.Eyeshot.Viewport)">
      <summary>
            Compiles 3D user interface elements like the origin symbol, the bitmap background, the FEM restraint and load symbols, etc.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.FontFamily">
      <summary>
            Gets or sets viewport font family.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.FontStyle">
      <summary>Gets or sets viewport font.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.FontWeight">
      <summary>Gets or sets viewport font.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.FontSize">
      <summary>Gets or sets viewport font.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ErrorInPaint">
      <summary>
            Gets a value indicating if an error occurred during paint.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.ErrorOccurredEventArgs">
      <summary>Provides data for the <see cref="E:devDept.Eyeshot.Workspace.ErrorOccurred" /> event.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ErrorOccurredEventArgs.Message">
      <summary>
            Gets the error message.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ErrorOccurredEventArgs.StackTrace">
      <summary>
            Gets the stack trace of the error.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ErrorOccurredEventArgs.ObjectNotCompiled">
      <summary>
            Gets the object whose not compiled status caused the error.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.ErrorEventHandler">
      <summary>Represents the method that will handle the <see cref="E:devDept.Eyeshot.Workspace.ErrorOccurred" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="E:devDept.Eyeshot.Workspace.ErrorOccurred" /> that contains the event data.</param>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.ErrorOccurred">
      <summary>
            Occurs when an error happens during the drawing.
            </summary>
      <remarks>When an error occurs during the drawing, to make the control usable again it's necessary to call the <see cref="M:devDept.Eyeshot.Workspace.Clear" /></remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.UpdateDesignModeScene">
      <summary>
            Used by the designer to update the graphics.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ResizeBegin">
      <remarks>You need to call this method just before the parent's resize operation begins.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ApplyOpacityMask">
      <summary>
            Computes the opacity mask that makes the viewports opaque and leaves a transparent space between them.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateViewportsSizeAndLocationInternal" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ResizeViewports">
      <summary>
            Resizes the Viewports.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetFocus(System.Windows.Input.KeyEventArgs)">
      <summary>
            Sets the focus to the control.
            </summary>
      <param name="keyEventArgs">Optional. The <see cref="T:System.Windows.Input.KeyEventArgs" /> to simulate the <see cref="M:devDept.Eyeshot.Workspace.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> event after the control getting the focus.</param>
      <remarks>When using <see cref="T:System.Windows.Media.Renderer" /> different from <see cref="F:devDept.Eyeshot.rendererType.Native" />, use this method to set the focus to the control.</remarks>
      <seealso cref="M:System.Windows.UIElement.Focus" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.OnLostFocus(System.EventArgs)">
      <summary>
            Synchronize <paramref name="hasFocus" /> parameter, reset <paramref name="action" />, redraw the control.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FireProgressChanged(devDept.WorkUnit.ProgressChangedEventArgs)">
      <summary>
            Raises the <see cref="T:System.ComponentModel.ProgressChangedEventHandler">ProgressChanged</see> event.
            </summary>
      <param name="e">A <see cref="T:devDept.WorkUnit.ProgressChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SaveScene(System.String)">
      <summary>
            Saves the current scene on disk, including entities, textures, blocks and
            layouts.
            </summary>
      <remarks>
        <para>This command can be very attractive to save and load models in you program
                but has a serious pitfall: it is based on standard .NET Serialization. This means
                that any change on the Eyeshot binaries (dll versions, dll names, type names, etc.) will
                invalidate all your existing files. 
                <strong>We strongly recommend</strong> to use the Eyeshot proprietary file format or to
                implement your own file format (simply writing entities properties and recreating
                entities during file loading) if you need continuity between different Eyeshot DLL
                versions. Another option can be to use one of the standard format supported
                (DWG/DXF/IGES) where applicable.</para>
      </remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.LoadScene(System.String)">LoadScene Method</seealso>
      <param name="fileName">File name</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SaveScene(System.IO.Stream)">
      <summary>
            Saves the current scene on disk, including entities, textures, blocks and
            layouts.
            </summary>
      <remarks>
        <para>This command can be very attractive to save and load models in you program
                but has a serious pitfall: it is based on standard .NET Serialization. This means
                that any change on the Eyeshot binaries (dll versions, dll names, type names, etc.) will
                invalidate all your existing files.
                <strong>We strongly recommend</strong> to use the Eyeshot proprietary file format or to
                implement your own file format (simply writing entities properties and recreating
                entities during file loading) if you need continuity between different Eyeshot DLL
                versions. Another option can be to use one of the standard format supported
                (DWG/DXF/IGES) where applicable.</para>
        <para>The closing of the stream is delegated to you.</para>
      </remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.LoadScene(System.IO.Stream)">LoadScene Method</seealso>
      <param name="stream">The file stream</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.LoadScene(System.String)">
      <summary>
        <para>Restores the current scene from disk, including entities, textures, blocks
                and labels.</para>
      </summary>
      <remarks>
        <para>This command can be very attractive to save and load models in you program
                but has a serious pitfall: it is based on standard .NET Serialization. This means
                that any change on the Eyeshot binaries (dll versions, dll names, type names, etc.) will
                invalidate all your existing files. 
                <strong>We strongly recommend</strong> to use the Eyeshot proprietary file format or to
                implement your own file format (simply writing entities properties and recreating
                entities during file loading) if you need continuity between different Eyeshot DLL
                versions. Another option can be to use one of the standard format supported
                (DWG/DXF/IGES) where applicable.</para>
      </remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.SaveScene(System.String)">SaveScene Method</seealso>
      <param name="fileName">File name</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.LoadScene(System.IO.Stream)">
      <summary>
        <para>Restores the current scene from disk, including entities, textures, blocks
                and labels.</para>
      </summary>
      <remarks>
        <para>This command can be very attractive to save and load models in you program
                but has a serious pitfall: it is based on standard .NET Serialization. This means
                that any change on the Eyeshot binaries (dll versions, dll names, type names, etc.) will
                invalidate all your existing files. 
                <strong>We strongly recommend</strong> to use the Eyeshot proprietary file format or to
                implement your own file format (simply writing entities properties and recreating
                entities during file loading) if you need continuity between different Eyeshot DLL
                versions. Another option can be to use one of the standard format supported
                (DWG/DXF/IGES) where applicable.</para>
        <para>The closing of the stream is delegated to you.</para>
      </remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.SaveScene(System.IO.Stream)">SaveScene Method</seealso>
      <param name="stream">The file stream</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.EvaluateBoundingBox(System.Collections.Generic.ICollection{devDept.Eyeshot.Entities.Entity},devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Evaluates the bounding box of a collection of entities without taking care of entity visibility.
            </summary>
      <param name="entList">The collection of entities</param>
      <param name="globalMin">Output the min corner</param>
      <param name="globalMax">Output the max corner</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SuspendDesigner(System.Boolean)">
      <summary>
            Suspends the events of Workspace control for the designer.
            </summary>
      <param name="suspend">If true suspends the events for the designer, else resumes them</param>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SelectionBoxColors">
      <summary>
            Gets or sets the colors used to draw the selection box and polygon.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.MagnifyingGlass">
      <summary>
            Gets or sets the settings for the magnifying glass displayed under the mouse cursor.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.UseFrameBufferObject">
      <summary>
            When true the frame buffer objects are used. Affects the quality of Realistic shadows. For debugging purpose only.
            </summary>
      <remarks>When using Direct3D renderer, disabling this will disable also the realistic shadows.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.UseShaders">
      <summary>
            If true, the <see cref="F:devDept.Eyeshot.rendererType.OpenGL" /> renderer uses Phong shading for better lighting, has the <see cref="P:devDept.Eyeshot.DisplayModeSettingsRendered.PlanarReflections" /> with a fading out effect and better performances for the <see cref="F:devDept.Graphics.shadowType.Realistic" /> shadows.
            </summary>
      <remarks>With the <see cref="F:devDept.Eyeshot.rendererType.Direct3D" /> renderer it doesn't have any effect.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.AttributeReferenceVisibilityMode">
      <summary>
            Gets or sets the AttributeReferences visibility mode.
            </summary>
      <seealso cref="T:devDept.Eyeshot.AttributeReference" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.DoWork(devDept.WorkUnit)">
      <summary>Accomplishes the work and call <see cref="M:devDept.WorkUnit.WorkCompleted(System.Object)" /> method.</summary>
      <seealso cref="M:devDept.Eyeshot.Workspace.CancelWork">CancelWork() method.</seealso>
      <seealso cref="M:devDept.Eyeshot.Workspace.StartWork(devDept.WorkUnit)">StartWork() method.</seealso>
      <seealso cref="T:devDept.WorkUnit">WorkUnit class.</seealso>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.IsBusy">
      <summary>
            Gets background worker thread status.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.StartWork(devDept.WorkUnit)">
      <summary>
            Starts the work asynchronously.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Workspace.CancelWork">CancelWork() method.</seealso>
      <seealso cref="M:devDept.Eyeshot.Workspace.DoWork(devDept.WorkUnit)">DoWork() method.</seealso>
      <seealso cref="T:devDept.WorkUnit">WorkUnit class.</seealso>
      <remarks>
        <para>It can handle just one WorkUnit at the time. Every additional call when the first thread is not completed will raise an Exception.</para>
        <para>For handling a queue of WorkUnits, use <see cref="T:devDept.WorkManager`1" /> instead.</para>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.CancelWork">
      <summary>
            Stops the asynchronous background work.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Workspace.StartWork(devDept.WorkUnit)">StartWork() method.</seealso>
      <seealso cref="M:devDept.Eyeshot.Workspace.DoWork(devDept.WorkUnit)">DoWork() method.</seealso>
      <seealso cref="T:devDept.WorkUnit">WorkUnit class.</seealso>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.WorkCompleted">
      <summary>
            Occurs when the background work has completed.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.WorkCancelled">
      <summary>
            Occurs when the background work is cancelled.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.WorkFailed">
      <summary>
            Occurs when the background work has failed.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FireWorkCompleted(devDept.WorkCompletedEventArgs)">
      <summary>
            Raises the <see cref="T:devDept.WorkUnit.WorkCompletedEventHandler">WorkCompleted</see> event.
            </summary>
      <param name="e">A <see cref="T:devDept.WorkCompletedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FireWorkCancelled(devDept.WorkUnitEventArgs)">
      <summary>
            Raises the <see cref="T:devDept.WorkUnit.WorkCancelledEventHandler">WorkCancelled</see> event.
            </summary>
      <param name="e">A <see cref="T:devDept.WorkUnitEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FireWorkFailed(devDept.WorkFailedEventArgs)">
      <summary>
            Raises the <see cref="T:devDept.WorkUnit.WorkCancelledEventHandler">WorkCancelled</see> event.
            </summary>
      <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.PickBoxSize">
      <summary>Gets or sets the pick box size in pixel units.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.MultipleSelection">
      <summary>
            If true, the selection ActionModes work as if the Control key was pressed, selecting multiple entities.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.CursorTypes">
      <summary>
            The cursor types dictionary.
            </summary>
      <remarks>If <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> is different from <see cref="F:devDept.Eyeshot.rendererType.Native" />, use the <see cref="M:devDept.Eyeshot.WorkspaceBase.SetCursor(devDept.Eyeshot.cursorType,System.IO.Stream)" /> instead (WPF Eyeshot control only)</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ActionMode">
      <summary>
            Gets or sets the active viewport action. 
            </summary>
      <seealso cref="P:devDept.Eyeshot.Workspace.SelectionFilterMode" />
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateVisibleSelection" />
    </member>
    <member name="T:devDept.Eyeshot.Workspace.assemblySelectionType">
      <summary>
            The assembly selection type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.assemblySelectionType.Branch">
      <summary>
            Selects the entities at the current BlockReference level
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.assemblySelectionType.Leaf">
      <summary>
            Selects the entities at the deepest level of the BlockReference hierarchy
            </summary>
      <remarks>Not supported by <see cref="P:devDept.Eyeshot.Workspace.AccurateTransparency" /> and all geometry selection types.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetCursor(System.Windows.Input.Cursor)">
      <summary>
            Sets the cursor.
            </summary>
      <param name="cursor">The cursor</param>
      <remarks>If <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> is different from <see cref="F:devDept.Eyeshot.rendererType.Native" />, use <see cref="M:devDept.Eyeshot.WorkspaceBase.SetCursor(System.IO.Stream)" /> (WPF only)</remarks>
      <seealso cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" />
      <seealso cref="M:devDept.Eyeshot.WorkspaceBase.SetCursor(System.IO.Stream)" />
    </member>
    <member name="T:devDept.Eyeshot.Workspace.CursorContainer">
      <summary>
            Structure that holds the Cursor (or Cursors) used by the control.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.CursorContainer.Cursor">
      <summary>
            Main control Cursor.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.CursorContainer.CursorWF">
      <summary>
            Internal Cursor used in WPF, if <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> is not <see cref="F:devDept.Eyeshot.rendererType.Native" />.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetDefaultCursor(System.Windows.Input.Cursor)">
      <summary>
            Sets the default cursor for the viewport control.
            </summary>
      <param name="cursor">The cursor to set as default</param>
      <remarks>If <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> is different from <see cref="F:devDept.Eyeshot.rendererType.Native" />, to set
            cursors different from the ones specified in <see cref="T:devDept.Eyeshot.cursorType" /> use the <see cref="M:devDept.Eyeshot.WorkspaceBase.SetDefaultCursor(System.IO.Stream)" /> instead (WPF only)</remarks>
      <seealso cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" />
      <seealso cref="M:devDept.Eyeshot.WorkspaceBase.SetDefaultCursor(System.IO.Stream)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetDefaultCursor">
      <summary>
            Gets the default cursor for the viewport control.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.LoadPickCursor">
      <summary>
            Gets the Pick Cursor stream.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.IsDragAction">
      <summary>
            Tells if the current <see cref="P:devDept.Eyeshot.Workspace.ActionMode" /> requires dragging.
            </summary>
      <returns>True if the current <see cref="P:devDept.Eyeshot.Workspace.ActionMode" /> requires dragging.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.StartZoomPanRotate(System.Windows.Forms.MouseEventArgs,devDept.Eyeshot.Viewport)">
      <summary>
            Starts a sequence of Zoom-Pan-Rotate movements if the proper keys/mouse buttons are pressed.
            </summary>
      <param name="e">The mouse event args</param>
      <param name="viewport">The viewport</param>
      <seealso cref="M:devDept.Eyeshot.Workspace.EndZoomPanRotate(devDept.Eyeshot.Viewport)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetViewportUnderMouse(System.Drawing.Point)">
      <summary>
            Returns the viewport under the given mouse position.
            </summary>
      <param name="mousePos">The mouse position</param>
      <returns>The viewport under the mouse.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetTemporarySelectionFaceData(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},devDept.Eyeshot.Entities.Entity,System.Collections.Generic.List{devDept.Eyeshot.Workspace.SelectionInfoSubItems},devDept.Eyeshot.selectionStatusType)">
      <summary>
            Gives the chance to overriders to get temporary face selection data and optionally to skip temporary face selection drawing.
            </summary>
      <param name="parents">The stack of parents</param>
      <param name="ent">The entity</param>
      <param name="faceSelInfo">The list of <see cref="T:devDept.Eyeshot.Workspace.SelectionInfoSubItems" /></param>
      <param name="selStatus">The selection status</param>
      <returns>True to skip standard drawing, false otherwise.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.Moving">
      <summary>
            Tells if the viewport is performing a zoom-pan-rotate operation.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.CameraMoveEventArgs">
      <summary>Provides data for the <see cref="E:devDept.Eyeshot.Workspace.CameraMoveBegin" /> and <see cref="E:devDept.Eyeshot.Workspace.CameraMoveEnd" /> events.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.CameraMoveEventArgs.ViewportIndex">
      <summary>
            Gets the index of the Viewport on which the Camera movement is performed.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.CameraMoveEventHandler">
      <summary>
             Represents the method that will handle the <see cref="E:devDept.Eyeshot.Workspace.CameraMoveBegin" /> and <see cref="E:devDept.Eyeshot.Workspace.CameraMoveEnd" /> events. 
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:devDept.Eyeshot.Workspace.CameraMoveEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.CameraMoveBegin">
      <summary>
            Occurs when a camera Zoom/Pan/Rotate camera movement begins.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.CameraMoveEnd">
      <summary>
            Occurs when a Zoom/Pan/Rotate camera movement ends.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.CameraChanged">
      <summary>
            Occurs when camera changes its position.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.CameraChangedFrequency">
      <summary>
            The interval, in milliseconds, of CameraChanged events firing. 
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomCamera(System.Int32)">
      <summary>
            Zooms the view of the specified amount.
            </summary>
      <param name="dy">Zoom amount</param>
      <seealso cref="!:RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomCamera(System.Int32,System.Boolean)">
      <summary>
            Zooms the view of the specified amount.
            </summary>
      <param name="dy">Zoom amount</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <seealso cref="!:RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomCamera(System.Drawing.Point,System.Int32)">
      <summary>
            Zooms the view of the specified amount.
            </summary>
      <param name="mousePos">The screen point to keep fixed</param>
      <param name="dy">The zoom amount</param>
      <seealso cref="!:RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomCamera(System.Drawing.Point,System.Int32,System.Boolean)">
      <summary>
            Zooms the view of the specified amount.
            </summary>
      <param name="mousePos">The screen point to keep fixed</param>
      <param name="dy">The zoom amount</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <seealso cref="!:RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomCamera(System.Int32,System.Double)">
      <summary>
            Zooms the view of the specified amount.
            </summary>
      <param name="dy">Zoom amount</param>
      <param name="zoomSpeed">Zoom speed</param>
      <seealso cref="!:RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomCamera(System.Int32,System.Double,System.Boolean)">
      <summary>
            Zooms the view of the specified amount.
            </summary>
      <param name="dy">Zoom amount</param>
      <param name="zoomSpeed">Zoom speed</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <seealso cref="!:RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.PanCamera(System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Pans the view from one screen point to the other.
            </summary>
      <param name="from">StartPoint point</param>
      <param name="to">End point</param>
      <seealso cref="M:devDept.Eyeshot.Workspace.ZoomCamera(System.Int32)" />
      <seealso cref="P:devDept.Eyeshot.Workspace.AnimateCamera" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.PanCamera(System.Drawing.Point,System.Drawing.Point,System.Boolean)">
      <summary>
            Pans the view from one screen point to the other.
            </summary>
      <param name="from">StartPoint point</param>
      <param name="to">End point</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <seealso cref="M:devDept.Eyeshot.Workspace.ZoomCamera(System.Int32)" />
      <seealso cref="P:devDept.Eyeshot.Workspace.AnimateCamera" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.EndZoomPanRotate(devDept.Eyeshot.Viewport)">
      <summary>
            Ends a sequence of Zoom-Pan-Rotate movements.
            </summary>
      <viewport>The viewport</viewport>
      <seealso cref="M:devDept.Eyeshot.Workspace.StartZoomPanRotate(System.Windows.Forms.MouseEventArgs,devDept.Eyeshot.Viewport)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.IsSelectAction">
      <summary>
            Tells if the current <see cref="P:devDept.Eyeshot.Workspace.ActionMode" /> is one of the selection ones.
            </summary>
      <returns>True if the current <see cref="P:devDept.Eyeshot.Workspace.ActionMode" /> is one of the selection ones.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.IsSelectByPickAction">
      <summary>
            Tells if the current <see cref="P:devDept.Eyeshot.Workspace.ActionMode" /> is one of the ByPick ones.
            </summary>
      <returns>True if the current <see cref="P:devDept.Eyeshot.Workspace.ActionMode" /> is one of the ByPick ones.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.IsSelectByBoxAction">
      <summary>
            Tells if the current <see cref="P:devDept.Eyeshot.Workspace.ActionMode" /> is one of the ByBox ones.
            </summary>
      <returns>True if the current <see cref="P:devDept.Eyeshot.Workspace.ActionMode" /> is one of the ByBox ones.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.IsSelectByPolygonAction">
      <summary>
            Tells if the current <see cref="P:devDept.Eyeshot.Workspace.ActionMode" /> is one of the ByPolygon ones.
            </summary>
      <returns>True if the current <see cref="P:devDept.Eyeshot.Workspace.ActionMode" /> is one of the ByPolygon ones.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SaveView(devDept.Eyeshot.Camera@)">
      <summary>
            Stores the current view in the active viewport. 
            </summary>
      <param name="saved">Will hold a copy of the active <see cref="T:devDept.Eyeshot.Camera" /> object</param>
      <seealso cref="M:devDept.Eyeshot.Workspace.RestoreView(devDept.Eyeshot.Camera)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RestoreView(devDept.Eyeshot.Camera)">
      <summary>
            Restores the previously saved view in the active viewport.
            </summary>
      <param name="saved">The <see cref="T:devDept.Eyeshot.Camera" /> object previously initializiated by <see cref="M:devDept.Eyeshot.Workspace.SaveView(devDept.Eyeshot.Camera@)" /></param>
      <seealso cref="M:devDept.Eyeshot.Workspace.SaveView(devDept.Eyeshot.Camera@)" />
      <remarks>If <see cref="P:devDept.Eyeshot.Workspace.AnimateCamera" /> is true, the operation animates the Camera using the time interval specified by <see cref="P:devDept.Eyeshot.Workspace.AnimateCameraDuration" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.AdjustNearAndFarPlanes">
      <summary>
            Adjusts camera near and far planes based on design extents and on origin symbol, grid and shadow visibility status.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SuspendUpdate(System.Boolean)">
      <summary>
            Suspends the updates of Workspace control.
            </summary>
      <param name="suspend">If true suspends the updates, else resumes them</param>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.UpdateWorkspace">
      <summary>
            Updates the workspace control in both desing-time and run-time mode.
            If necessary adjust near and far planes to accomodate origin
            symbols of various sizes.            
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ButtonStyle">
      <summary>
            Gets or sets the style used by the <see cref="T:devDept.Eyeshot.ToolBar" /> and <see cref="P:devDept.Eyeshot.Workspace.ProgressBar" /> buttons.
            </summary>
      <remarks>You need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ShowCurveDirection">
      <summary>
            If true, curve direction is displayed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.Selection">
      <summary>
            Gets or sets the selection settings, shared by all viewports.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SelectionColor">
      <summary>
            Gets or sets the color of selected entities, shared by all viewports.
            </summary>
      <remarks>The <see cref="P:devDept.Graphics.Material.Ambient" />, <see cref="P:devDept.Graphics.Material.Specular" /> and <see cref="P:devDept.Graphics.Material.Shininess" /> components are taken from the <see cref="P:devDept.Eyeshot.Design.DefaultMaterial" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SelectionColorDynamic">
      <summary>
            Gets or sets the color for the dynamic selection, shared by all viewports.
            </summary>
      <remarks>The <see cref="P:devDept.Graphics.Material.Ambient" />, <see cref="P:devDept.Graphics.Material.Specular" /> and <see cref="P:devDept.Graphics.Material.Shininess" /> components are taken from the <see cref="P:devDept.Eyeshot.Design.DefaultMaterial" />.</remarks>
      <see cref="F:devDept.Eyeshot.actionType.SelectVisibleByPickDynamic" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SelectionLineWeightScaleFactor">
      <summary>
            Gets or sets the factor applied to the line weight for the selected wireframe entities or <see cref="P:devDept.Eyeshot.Entities.Brep.Edges" />.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.LineWeight" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ShowFps">
      <summary>
            Gets or sets the frame per second rate text visibility status.
            </summary>
      <remarks>"WF" stands for WindowsForms</remarks>
      <remarks>"D3D" stands <see cref="F:devDept.Eyeshot.rendererType.Direct3D" /></remarks>
      <remarks>"OGL" stands <see cref="F:devDept.Eyeshot.rendererType.OpenGL" /></remarks>
      <remarks>"WPF Native" stands for <see cref="F:devDept.Eyeshot.rendererType.Native" /></remarks>
      <remarks>HW stands for Hardware accelerated rendering (OpenGL only)</remarks>
      <remarks>SW stands for Sotware rendering (OpenGL only)</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.WaitCursorMode">
      <summary>
            Gets or sets the wait cursor mode. Controls if and when the wait cursor is displayed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.AskForHardwareAcceleration">
      <summary>
            If true, OpenGL accelerated hardware modes are requested during viewport initialization.
            </summary>
      <remarks>Has no effect at runtime.</remarks>
      <remarks>Applies to <see cref="F:devDept.Eyeshot.rendererType.OpenGL" /> renderer only.</remarks>
      <seealso cref="P:devDept.Eyeshot.Workspace.IsHardwareAccelerated" />
      <seealso cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.AskForDirect3DLevel9_3">
      <summary>
            If true, The Direct3D feature level 9_3 is requested during viewport initialization instead of the highest feature level available.
            </summary>
      <remarks>Used for compatibility problems with old cards.</remarks>
      <remarks>Has no effect at runtime.</remarks>
      <remarks>Direct3D feature level 9_3 has some limitations and does not support all the features of higher profiles</remarks>
      <remarks>Applies only to <see cref="F:devDept.Eyeshot.rendererType.Direct3D" /> renderer.</remarks>
      <seealso cref="!:Workspace.Renderer" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.AskForAntiAliasing">
      <summary>
            If true, Full Screen Anti-Aliasing modes are requested during viewport initialization. 
            The number of samples can be set with the <see cref="P:devDept.Eyeshot.Workspace.AntiAliasingSamples" /> property.
            </summary>
      <remarks>Has no effect at runtime for the OpenGL renderer.</remarks>
      <seealso cref="P:devDept.Eyeshot.Workspace.IsAntiAliasingAvailable" />
      <seealso cref="P:devDept.Eyeshot.Workspace.AntiAliasingSamples" />
      <seealso cref="P:devDept.Eyeshot.Workspace.AntiAliasing" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.AntiAliasing">
      <summary>
            Gets or sets a value indicating if full screen anti-aliasing is enabled.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Workspace.IsAntiAliasingAvailable">IsAntiAliasingAvailable Property</seealso>
      <seealso cref="P:devDept.Eyeshot.Workspace.AskForAntiAliasing">AskForAntiAliasing Property</seealso>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.AntiAliasingSamples">
      <summary>
            Gets or sets the number of desired samples for Full Screen Anti-Aliasing.
            The Full Screen Anti-alasing can be set with the <see cref="P:devDept.Eyeshot.Workspace.AskForAntiAliasing" /> property.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Workspace.IsAntiAliasingAvailable" />
      <seealso cref="P:devDept.Eyeshot.Workspace.AskForAntiAliasing" />
      <seealso cref="P:devDept.Eyeshot.Workspace.AntiAliasing" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.RendererVendor">
      <summary>
            Gets the company responsible for this GL implementation. This name does not change from release to release.
            </summary>
      <remarks>OpenGL only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ShadingLanguageVersion">
      <summary>
            Gets OpenGL Shading Language version.
            </summary>
      <remarks>OpenGL only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.OpenglExtensions">
      <summary>
            Gets a space-separated list of supported extensions to OpenGL.
            </summary>
      <remarks>OpenGL only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.MaxTextureSize">
      <summary>
            Gets the maximum texture size allowed on current OpenGL implementation (in pixel).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.RendererName">
      <summary>
            Gets the name of the renderer. This name is typically specific to a particular configuration of a hardware platform. It does not change from release to release. 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.RendererVersion">
      <summary>
            Gets graphics API version.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.MaxPatternRepetitions">
      <summary>
            Gets or sets the maximum number of pattern repetitions allowed between two vertices of a curve.
            </summary>
      <remarks>Over this bias the line is drawn continuous without pattern. <seealso cref="P:devDept.Eyeshot.Entities.Entity.LineTypeName" /></remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.MaxHatchPatternLines">
      <summary>
            Gets or sets the maximum number of hatch pattern lines allowed for each <see cref="T:devDept.Eyeshot.Entities.Hatch" />.
            </summary>
      <remarks>
            Over this bias the Hatch is drawn with solid pattern.
            </remarks>
      <seealso cref="!:HatchPattens" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.IsInFrustumMode">
      <summary>
            Gets or sets the modality used by IsInFrustum() method.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ProgressBar">
      <summary>
            Gets or sets the progress bar settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ShowNormals">
      <summary>
            Gets or sets the normals visibility status.
            </summary>
      <seealso cref="!:NormalLength" />
    </member>
    <member name="F:devDept.Eyeshot.Workspace.fps">
      <summary>
            Framerate per second counter.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.FramesPerSecond">
      <summary>
            Gets current frames per second rate.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.CompileWires">
      <summary>
            If true, wireframe entities are compiled, otherwise they are drawn on the fly
            using a buffered approach.
            </summary>
      <remarks>
            Set false to reduce memory usage with <see cref="F:devDept.Eyeshot.rendererType.Direct3D" /> renderer and a huge numbers of wireframe
            entities.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.ContentAlignment)">
      <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.Workspace" />'s client area.
            </summary>
      <param name="x">The text's x coordinate</param>
      <param name="y">The text's y coordinate (from the bottom of the viewport)</param>
      <param name="text">The text string to draw</param>
      <param name="textFont">The text font</param>
      <param name="textColor">The text color</param>
      <param name="textAlign">The text alignment</param>
      <returns>The size of the text bitmap</returns>
      <seealso cref="M:devDept.Eyeshot.Workspace.DrawTextOutlined(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.ContentAlignment)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.DrawImage(System.Int32,System.Int32,System.Drawing.Bitmap,System.Drawing.ContentAlignment,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment)">
      <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.Workspace" />'s client area.
            </summary>
      <param name="x">The text's x coordinate</param>
      <param name="y">The text's y coordinate (from the bottom of the viewport)</param>
      <param name="text">The text string to draw</param>
      <param name="textFont">The text font</param>
      <param name="textColor">The text color</param>
      <param name="fillColor">The background color (can be semi-transparent)</param>
      <param name="textAlign">The text alignment</param>
      <returns>The size of the text bitmap</returns>
      <seealso cref="M:devDept.Eyeshot.Workspace.DrawTextOutlined(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.ContentAlignment)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.DrawImage(System.Int32,System.Int32,System.Drawing.Bitmap,System.Drawing.ContentAlignment,System.Boolean,System.Boolean)" />
      <remarks>For better performances use the <see cref="M:devDept.Eyeshot.Workspace.GetTextImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment,System.Drawing.RotateFlipType,System.Boolean)" /> to get the text image, then create a texture and draw the texture directly</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment,System.Drawing.RotateFlipType)">
      <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.Workspace" />'s client area.
            </summary>
      <param name="x">The text x coordinate</param>
      <param name="y">The text y coordinate (from the bottom of the viewport)</param>
      <param name="text">The text string to draw</param>
      <param name="textFont">The text font</param>
      <param name="textColor">The text color</param>
      <param name="fillColor">The background color (can be semi-transparent)</param>
      <param name="textAlign">The text alignment</param>
      <param name="rotateFlip">The text rotation</param>
      <returns>The size of the text bitmap</returns>
      <seealso cref="M:devDept.Eyeshot.Workspace.DrawTextOutlined(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.ContentAlignment)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.DrawImage(System.Int32,System.Int32,System.Drawing.Bitmap,System.Drawing.ContentAlignment,System.Boolean,System.Boolean)" />
      <remarks>For better performances use <see cref="M:devDept.Eyeshot.Workspace.GetTextImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment,System.Drawing.RotateFlipType,System.Boolean)" />, create the texture and draw it directly.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetTextImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment,System.Drawing.RotateFlipType,System.Boolean)">
      <summary>
            Gets the text bitmap.
            </summary>
      <param name="text">The text</param>
      <param name="font">The text font</param>
      <param name="color">The text color</param>
      <param name="fillColor">The background color</param>
      <param name="textAlign">The text alignment (used to clip the image when the background is transparent)</param>
      <param name="rotateFlip">The rotation and flip to apply to the bitmap</param>
      <param name="antialias">If true, the text is antialiased</param>
      <returns>The text bitmap</returns>
      <seealso cref="M:devDept.Eyeshot.Workspace.GetTextOutlinedImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.RotateFlipType,System.Single)" />
      <example>
            The following code demonstrates how to efficiently draw a text on screen
            <code lang="CS" title="[New Example]">
            private TextureBase texture1;
            private bool firstTime = false;
            protected override void DrawOverlay(DrawSceneParams data)
            {
                base.DrawOverlay(data);
            
                if (!firstTime)
                {
                    firstTime = true;
            
                    Font font = new Font("Tahoma", 50, FontStyle.Italic);
            
                    Image image1 = GetTextImage("My Text", font, Color.Red, Color.Transparent, ContentAlignment.TopRight, RotateFlipType.RotateNoneFlipY);
                    texture1 = renderContext.CreateTexture2D(image1, textureFilteringFunctionType.Nearest, textureFilteringFunctionType.Nearest, true, true);        
                    image1.Dispose();
                    font.Dispose();
                }
            
                DrawTexture(texture1, 100, 100, ContentAlignment.BottomLeft);        
                // Remember to Dispose the texture when it is no more needed, or before quitting the application
            }
            </code><code lang="VB" title="[New Example]">
            Private texture1 As TextureBase
            Private firstTime As Boolean = False
            Protected Overrides Sub DrawOverlay(data As DrawSceneParams)
            	MyBase.DrawOverlay(data)
            
            	If Not firstTime Then
            		firstTime = True
            
            		Dim font As New Font("Tahoma", 50, FontStyle.Italic)
            
            		Dim image1 As Image = GetTextImage("My Text", font, Color.Red, Color.Transparent, ContentAlignment.TopRight, RotateFlipType.RotateNoneFlipY)
            		texture1 = renderContext.CreateTexture2D(image1, textureFilteringFunctionType.Nearest, textureFilteringFunctionType.Nearest, True, True)
                    image1.Dispose()
            		font.Dispose()
            	End If
            
            	DrawTexture(texture1, 100, 100, ContentAlignment.BottomLeft)
                ' Remember to Dispose the texture when it is no more needed, or before quitting the application
            End Sub
            
            </code></example>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.DrawTexture(devDept.Graphics.TextureBase,System.Int32,System.Int32,System.Drawing.ContentAlignment,System.Boolean)">
      <summary>
            Draws a texture.
            </summary>
      <param name="texture">The texture to draw</param>
      <param name="x">The texture x position</param>
      <param name="y">The texture y position</param>
      <param name="align">The texture alignment</param>
      <param name="flipY">If true, flips the image in the Y direction</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.DrawTextOutlined(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.ContentAlignment)">
      <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.Workspace" />'s client area.
            </summary>
      <param name="x">The text's x coordinate</param>
      <param name="y">The text's y coordinate (from the bottom of the viewport)</param>
      <param name="text">The text string to draw</param>
      <param name="textFont">The text font</param>
      <param name="textColor">The text color</param>
      <param name="outlineColor">The outline color</param>
      <param name="outlineThickness">The outline thickness</param>
      <param name="textAlign">The text alignment</param>
      <seealso cref="M:devDept.Eyeshot.Workspace.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.ContentAlignment)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.DrawImage(System.Int32,System.Int32,System.Drawing.Bitmap,System.Drawing.ContentAlignment,System.Boolean,System.Boolean)" />
            /// <remarks>For better performances use <see cref="M:devDept.Eyeshot.Workspace.GetTextOutlinedImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.RotateFlipType,System.Single)" />, create the texture and draw it directly.</remarks></member>
    <member name="M:devDept.Eyeshot.Workspace.DrawImage(System.Int32,System.Int32,System.Drawing.Bitmap)">
      <summary>
            Draws an image on the <see cref="T:devDept.Eyeshot.Workspace" />'s client area.
            </summary>
      <param name="x">The image's x corrdinate</param>
      <param name="y">The image's y coordinate (from the bottom of the viewport)</param>
      <param name="image">The image to draw</param>
      <remarks>Alpha channel is supported. Use the <see cref="M:System.Drawing.Image.RotateFlip(System.Drawing.RotateFlipType)" /> method to flip the image upside down.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.ContentAlignment)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.DrawTextOutlined(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Single,System.Drawing.ContentAlignment)" />
      <remarks>For better performances create a texture and call <see cref="M:devDept.Eyeshot.Workspace.DrawTexture(devDept.Graphics.TextureBase,System.Int32,System.Int32,System.Drawing.ContentAlignment,System.Boolean)" /> (see code below)</remarks>
      <example>
            The following code demonstrates how to efficiently draw an image on screen
            <code lang="CS" title="[New Example]">
                    
            private TextureBase texture1;
            private bool firstTime = false;
            protected override void DrawOverlay(DrawSceneParams data)
            {
                base.DrawOverlay(data);
            
                if (!firstTime)
                {
                    firstTime = true;
                    texture1 = renderContext.CreateTexture2D(Properties.Resources.Smiley, textureFilteringFunctionType.Nearest, textureFilteringFunctionType.Nearest, true, true);        
                    font.Dispose();
                }
            
                DrawTexture(texture1, 100, 100, ContentAlignment.BottomLeft);        
                // Remember to Dispose the texture when it is no more needed, or before quitting the application
            }
            </code><code lang="VB" title="[New Example]">
            Private texture1 As TextureBase
            Private firstTime As Boolean = False
            Protected Overrides Sub DrawOverlay(data As DrawSceneParams)
            	MyBase.DrawOverlay(data)
            
            	If Not firstTime Then
            		firstTime = True
            		texture1 = renderContext.CreateTexture2D(Properties.Resources.Smiley, textureFilteringFunctionType.Nearest, textureFilteringFunctionType.Nearest, True, True)
            		font.Dispose()
            	End If
            
            	DrawTexture(texture1, 100, 100, ContentAlignment.BottomLeft)
                ' Remember to Dispose the texture when it is no more needed, or before quitting the application
            End Sub
            
            </code></example>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetTextOutlinedImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.RotateFlipType,System.Single)">
      <summary>
            Gets the outlined text image.
            </summary>
      <param name="text">The text</param>
      <param name="font">The text font</param>
      <param name="color">The text color</param>
      <param name="outlineColor">The outline color</param>
      <param name="rotateFlip">The rotation and flip to apply to the bitmap</param>
      <param name="thickness">The outline thickness</param>
      <returns>The text bitmap</returns>
      <seealso cref="M:devDept.Eyeshot.Workspace.GetTextImage(System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment,System.Drawing.RotateFlipType,System.Boolean)" />
      <example>
            The following code demonstrates how to efficiently draw an outlined text on screen
            <code lang="CS" title="[New Example]">
                    
            private TextureBase texture1;
            private bool firstTime = false;
            protected override void DrawOverlay(DrawSceneParams data)
            {
                base.DrawOverlay(data);
            
                if (!firstTime)
                {
                    firstTime = true;
            
                    Font font = new Font("Tahoma", 50, FontStyle.Italic);
            
                    Image image1 = GetTextOutlinedImage("My Text", font, Color.Red, Color.Black, RotateFlipType.RotateNoneFlipY, 1);
                    texture1 = renderContext.CreateTexture2D(image1, textureFilteringFunctionType.Nearest, textureFilteringFunctionType.Nearest, true, true);        
                    image1.Dispose();
                    font.Dispose();
                }
            
                DrawTexture(texture1, 100, 100, ContentAlignment.BottomLeft);   
                // Remember to Dispose the texture when it is no more needed, or before quitting the application
            }
            </code><code lang="VB" title="[New Example]">
            Private texture1 As TextureBase
            Private firstTime As Boolean = False
            Protected Overrides Sub DrawOverlay(data As DrawSceneParams)
            	MyBase.DrawOverlay(data)
            
            	If Not firstTime Then
            		firstTime = True
            
            		Dim font As New Font("Tahoma", 50, FontStyle.Italic)
            
            		Dim image1 As Image = GetTextOutlinedImage("My Text", font, Color.Red, Color.Black, RotateFlipType.RotateNoneFlipY, 1)
            		texture1 = renderContext.CreateTexture2D(image1, textureFilteringFunctionType.Nearest, textureFilteringFunctionType.Nearest, True, True)
                    image1.Dispose()
            		font.Dispose()
            	End If
            
            	DrawTexture(texture1, 100, 100, ContentAlignment.BottomLeft)
                ' Remember to Dispose the texture when it is no more needed, or before quitting the application
            End Sub
            
            </code></example>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.AllocatedCharDefs">
      <summary>
            Gets the number of loaded character definitions.
            </summary>
      <returns>The character definitons count.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.DrawSceneParams">
      <summary>
            Class that holds the parameters used to draw the viewport.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.DrawSceneParams.Entities">
      <summary>
            Gets or sets the list of entities to draw.
            </summary>
      <remarks>They can be sorted with the <see cref="M:devDept.Eyeshot.Workspace.SortEntitiesForTransparency(devDept.Eyeshot.Viewport,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})" /></remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.DrawSceneParams.Blocks">
      <summary>
            Gets the Blocks dictionary used by the drawing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.DrawSceneParams.UserInterfaceElement">
      <summary>
            If it's not null, then I'm drawing just this user interface element.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.DrawSceneParams.startZoomPt">
      <summary>
            Starting point for DrawOnTextureOrBitmap commands
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.DrawSceneParams.Simplify">
      <summary>
            True during dynamic movements (Zoom/Pan/Rotate/Mouse Wheel) or when viewport is touched (multi-touch).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.DrawSceneParams.PlanarReflections">
      <summary>
            Tells if the planar reflections are being drawn.
            </summary>
      <remarks>Can be used to skip the drawing of some entities in the planar reflections.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.DrawSceneParams.PlanarReflectionsPlane">
      <summary>
            Gets or sets the planar reflections plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.DrawSceneParams.ObjectManipulatorDrawPreview">
      <summary>
            When true, the drawing pass was requested by ObjectManipulator.DrawPreview() method.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.DrawSceneParams.Bpp">
      <summary>
            Bytes per pixel. Used by the <see cref="M:devDept.Eyeshot.Workspace.RenderToBitmap(System.Drawing.Size)" /></summary>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.ComputeEntitiesVisibilityParams">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.DrawEntitiesParams.entList">
      <summary>
            The list of entities to draw.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.DrawEntitiesParams.CompileParamsForAttributes">
      <summary>
            for the compilation and regen of the attributes.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.DrawEntitiesParams.RegenParamsForAttributes">
      <summary>
            for the compilation and regen of the attributes.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.DrawEntitiesParams.SelectableOnly">
      <summary>
            When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> property, otherwise no.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.Invalidate">
      <remarks>Beware when the <see cref="!:Renderer" /> is set to <see cref="F:devDept.Eyeshot.rendererType.NativeExperimental" />, this method performs the same operations than the <see cref="!:Refresh" />() method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.DrawScene(devDept.Eyeshot.Viewport,System.Single,System.Single,System.Drawing.RectangleF,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Main drawing method.
            </summary>
      <param name="viewport">The viewport to draw</param>
      <param name="drawScale">Image resolution scale</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="zoomRect">Zoom rectangle</param>
      <param name="drawOverlay">If true, the overlaying UI elements are drawn</param>
      <param name="swapBuffer">If true, front and back OpenGL buffers will be swapped</param>
      <param name="designTime">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.DrawBackground(devDept.Eyeshot.Workspace.DrawSceneParams)">
      <summary>
            Draws the Background of the Workspace control.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.AccurateTransparency">
      <summary>
            When true, the Accurate Transparency mode is activated. Accurate Transparency provides slower but more accurate semi-transparent object drawing
            with support for non-concave objects and for objects intersection.
            </summary>
      <remarks>For better rendering of transparent entities with <see cref="P:devDept.Eyeshot.Workspace.AccurateTransparency" /> turned off, override the <see cref="M:devDept.Eyeshot.Workspace.DrawViewport(devDept.Eyeshot.Workspace.DrawSceneParams)" /> and call the <see cref="M:devDept.Eyeshot.Workspace.SortEntitiesForTransparency(devDept.Eyeshot.Viewport,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})" />.
            It does not works with selection inside components or of the faces.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.SortEntitiesForTransparency(devDept.Eyeshot.Viewport,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})" />
      <seealso cref="P:devDept.Eyeshot.Workspace.AssemblySelectionMode" />
      <seealso cref="P:devDept.Eyeshot.Workspace.SelectionFilterMode" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.DrawVertices(devDept.Eyeshot.Workspace.DrawEntitiesParams)">
      <summary>
            Draws the vertices of the entities.
            </summary>
      <remarks>When <see cref="P:devDept.Eyeshot.Viewport.ShowVertices" /> is true.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.DrawForSelectionEntityDelegate">
      <summary>
            Draw for selection delegate.
            </summary>
      <param name="ent">The entity</param>
      <param name="data">The draw parameters</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ComputeNonCurrentEntityColor(devDept.Eyeshot.Entities.Entity,System.Drawing.Color,System.Boolean,System.Boolean)">
      <summary>
            Gets the color used to draw the given non-current entity.
            </summary>
      <param name="entity">The entity being processed</param>
      <param name="color">The color of the entity</param>
      <returns>The color used to draw the entity not belonging to the current BlockReference.</returns>
      <remarks>See <see cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)" /></remarks>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.DrawTransparentEntityRenderedDelegate">
      <summary>
            Callback for drawing the transparent entities.
            </summary>
      <param name="gfxData">
      </param>
      <param name="ent">
      </param>
      <param name="attributes">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetEntityLineType(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.LineTypeKeyedCollection,System.String,devDept.Eyeshot.LayerKeyedCollection)">
      <summary>
            Returns the entity's line type.
            </summary>
      <param name="ent">The entity</param>
      <param name="lineTypes">Line types collection</param>
      <param name="parentTypeName">The line type name of the parent entity (if it exists)</param>
      <param name="layers">The layers list</param>
      <returns>The <see cref="T:devDept.Eyeshot.LineType" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetEntityLineWeight(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.LayerKeyedCollection)">
      <summary>
            Gets the entity line weight.
            </summary>
      <param name="ent">The entity</param>
      <param name="parent">The parent BlockReference</param>
      <param name="layers">The layers list</param>
      <returns>The line entity.</returns>
      <remarks>If the parent is not null and the <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeightMethod" /> is <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> it recursively computes the LineWeight of the parent.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.DrawOverlay(devDept.Eyeshot.Workspace.DrawSceneParams)">
      <summary>
            Draws overlaying UI elements.
            </summary>
      <param name="data">The draw data</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.Draw3D(devDept.Eyeshot.Workspace.DrawSceneParams)">
      <summary>
            Draws design, shadow and bounding box.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SortEntitiesForTransparency(devDept.Eyeshot.Viewport,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
      <summary>
            Sorts the transparent entities from the farthest to the nearest to the camera for better rendering. Don't use if <see cref="P:devDept.Eyeshot.Design.MinimumFramerate" /> is enabled.
            </summary>
      <param name="viewport">The viewport</param>
      <returns>The sorted list of entities.</returns>
      <remarks>It can be called in an Workspace derived class in the <see cref="M:devDept.Eyeshot.Workspace.DrawViewport(devDept.Eyeshot.Workspace.DrawSceneParams)" /> method when <see cref="P:devDept.Eyeshot.Workspace.AccurateTransparency" /> is false.</remarks>
      <example>
            Usage Sample.
            	<code lang="CS" title="[Ordered Transparency]">
            public class MyDesign : Design
            {
                protected override void DrawViewport(DrawSceneParams myParams)
                {
                    myParams.Entities = SortEntitiesForTransparency(myParams.Viewport);
                    base.DrawViewport(myParams);
                }
            }
            </code><code lang="VB" title="[Ordered Transparency]">
            Public Class MyDesign
            Inherits Design
                Protected Overrides Sub DrawViewport(myParams As DrawSceneParams)
                    myParams.Entities = SortEntitiesForTransparency(myParams.Viewport)
                    MyBase.DrawViewport(myParams)
                End Sub
            End Class
            </code></example>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.CameraEyePosType">
      <summary>
            Defines the position of the 3D camera.
            </summary>
      <remarks>Used for anaglyphic 3D.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.DrawShadow(System.Single)">
      <summary>
            Draws the design shadow
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.PaintBackBuffer">
      <summary>
            Paints the viewport surface without redrawing the whole scene.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SwapBuffers">
      <summary>
            Swaps the front and back buffers.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.DrawViewport(devDept.Eyeshot.Workspace.DrawSceneParams)">
      <summary>
            Draws the viewport.
            </summary>
      <param name="myParams">The parameters</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.DrawViewportBackground(devDept.Eyeshot.Workspace.DrawSceneParams)">
      <summary>
            Draws the viewport background and reflections.
            </summary>
      <param name="data">The drawing parameters</param>
      <remarks>Override this to draw some custom graphics before the scene is drawn.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.CreateShaderParams(devDept.Eyeshot.Workspace.DrawSceneParams)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetPresetManagerThumbnail(System.Int32)">
      <summary>
            Returns a thumbnail bitmap of the whole Workspace control. The maximum size is 256x256.
            </summary>
      <param name="thumbnailSize">Desired size of the biggest dimension of the Workspace control.</param>
      <returns>The bitmap of the current Workspace control with viewports' borders included.</returns>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.Turbo">
      <summary>
            Gets or sets the FastZPR settings. When FastZPR is active a simplified representation of the current geometry is drawn during dynamic movements (Zoom/Pan/Rotate).
            </summary>
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateBoundingBox" />
    </member>
    <member name="T:devDept.Eyeshot.Workspace.GfxAttributes">
      <summary>
            Base class for attributes propagation.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.GfxAttributes.LineTypeName">
      <summary>
            The line type name.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.GfxAttributesColor">
      <summary>
            Class that propagates the color attribute.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GfxAttributesColor.Init(System.Drawing.Color,devDept.Eyeshot.LayerKeyedCollection)">
      <summary>
            Initializes the Layer color.
            </summary>
      <param name="layers">
      </param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.GfxAttributesWire">
      <summary>
            Class that propagates Color, LineWeight, LineTypePattern and LineTypePatternLength.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.GfxAttributesRendered">
      <summary>
            Class that propagates also the Material.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.GfxAttributesMaterialFlat">
      <summary>
            Class that propagates the attributes for flat display mode with <see cref="F:devDept.Eyeshot.flatColorMethodType.EntityMaterial" /> ColorMethod.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.PrintDocumentName">
      <summary>Print document name. It also appears during print preview preparation.</summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RenderToBitmap(System.Drawing.Size)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Workspace" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RenderToBitmap(System.Drawing.Size,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Workspace" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RenderToBitmap(System.Drawing.Size,System.Double,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Workspace" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RenderToBitmap(System.Drawing.RectangleF,System.Drawing.Size,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Workspace" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="rectangle">The rectangle of the viewport to capture in screen coordinates (zero on top)</param>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RenderToBitmap(System.Drawing.RectangleF,System.Drawing.Size,System.Double,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Workspace" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="rectangle">The rectangle of the viewport to capture in screen coordinates (zero on top)</param>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RenderToBitmap(System.Double)">
      <summary>Returns an image of the current viewport scene. The image can be scaled even to a poster size one.</summary>
      <param name="drawScaleFactor">The bitmap scale</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RenderToBitmap(System.Double,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Workspace" /> scene of the active viewport. The image can be scaled even to a poster size one.</summary>
      <param name="drawScaleFactor">The bitmap scale</param>
      <param name="drawBackground">If false, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RenderToBitmap(System.Double,System.Double,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Workspace" /> scene of the active viewport. The image can be scaled even to a poster size one.</summary>
      <param name="drawScaleFactor">The bitmap scale</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="drawBackground">If false, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RenderToBitmap(System.Drawing.Rectangle,System.Double,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Workspace" /> scene of the active viewport. The image can be scaled even to a poster size one.</summary>
      <param name="rectangle">The rectangle of the viewport to capture in screen coordinates (zero on top)</param>
      <param name="drawScaleFactor">The bitmap scale factor</param>
      <param name="drawBackground">If false, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RenderToBitmap(System.Drawing.Rectangle,System.Double,System.Double,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Workspace" /> scene of the active viewport. The image can be scaled even to a poster size one.</summary>
      <param name="rectangle">The rectangle of the viewport to capture in screen coordinates (zero on top)</param>
      <param name="drawScaleFactor">The bitmap scale factor</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="drawBackground">If false, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.WriteToFileRaster(System.Single,System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>Saves a raster image of the current viewport scene on disk.</summary>
      <param name="drawScaleFactor">The image scale factor</param>
      <param name="fileName">A string that contains the name of the file to which to save the raster image</param>
      <param name="format">The file format of the raster image</param>
      <remarks>The saved file will contain a 24-bit image.</remarks>
      <remarks>If the file exists, it's overwritten.</remarks>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.WriteToFileRaster(System.Single,System.String,System.Drawing.Imaging.ImageFormat,System.Boolean,System.Boolean)">
      <summary>Saves a raster image of the current viewport scene on disk.</summary>
      <param name="drawScaleFactor">The image scale</param>
      <param name="fileName">A string that contains the name of the file to which to save the raster image</param>
      <param name="format">The file format of the raster image</param>
      <param name="drawBackground">If false, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <remarks>The saved file will contain a 24-bit image.</remarks>
      <remarks>If the file exists, it's overwritten.</remarks>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.WriteToFileRaster(System.Single,System.Double,System.String,System.Drawing.Imaging.ImageFormat,System.Boolean,System.Boolean)">
      <summary>Saves a raster image of the current viewport scene on disk.</summary>
      <param name="drawScaleFactor">The image scale</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="fileName">A string that contains the name of the file to which to save the raster image</param>
      <param name="format">The file format of the raster image</param>
      <param name="drawBackground">If false, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <remarks>The saved file will contain a 24-bit image.</remarks>
      <remarks>If the file exists, it's overwritten.</remarks>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.WriteToFileVector(System.Boolean,System.String)">
      <summary>
            Saves a vectorial image of the current scene of the active viewport on disk in EMF format.
            </summary>
      <param name="fit">If true captures the whole design control, else the current viewport</param>
      <param name="fileName">The name of the file to save</param>
      <seealso cref="T:devDept.Eyeshot.HiddenLinesViewOnFile" />
      <remarks>If the file exists, it's overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.OnAnimationTimerTick(System.Object)">
      <summary>Occurs every timer tick. Call base class method when overriding.</summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.PageSetup(System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Drawing.Printing.PaperSize,System.Nullable{System.Boolean})">
      <summary>
            Defines the Page Setup.
            </summary>
      <param name="allowMargins">When true, the margins section of the dialog box is
            enabled.</param>
      <param name="showDialog">When true, the PageSetup dialog is shown.</param>
      <param name="defaultMargins">The default margins</param>
      <param name="paperSize">The paper size</param>
      <param name="landscape">The orientation mode</param>
      <returns>
            True if the user has confirmed the settings.
            </returns>
      <example>
        <code lang="C#"><![CDATA[ PrinterSettings printerSettings = new PrinterSettings();
             IEnumerable<PaperSize> paperSizes = printerSettings.PaperSizes.Cast<PaperSize>();
             PaperSize sizeA4 = paperSizes.FirstOrDefault<PaperSize>(size => size.Kind == PaperKind.A4);]]></code>
        <code lang="VB"><![CDATA[ Dim printerSettings As PrinterSettings = New PrinterSettings()
            Dim paperSizes As IEnumerable(Of PaperSize) = printerSettings.PaperSizes.Cast(Of PaperSize)()
            Dim sizeA4 As PaperSize = paperSizes.FirstOrDefault(Of PaperSize)(Function(size) size.Kind = PaperKind.A4)]]></code>
      </example>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetPrinterSettings(System.Drawing.Printing.PrinterSettings,System.Boolean)">
      <summary>
            Set the printer settings.
            </summary>
      <param name="printerSettings">The printer settings.</param>
      <param name="showDialog">When true the print dialog is shown before printing, otherwise no.</param>
      <remarks>If you also need to use the PageSetup() method, then this method should be called first.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.PageSetup(System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Drawing.Printing.PaperSize,System.Nullable{System.Boolean})" />
      <seealso cref="!:Print(bool)">
      </seealso>
      <seealso cref="!:PrintPreview(Size, bool)">
      </seealso>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.CopyToClipboardRaster(System.Drawing.Size)">
      <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <remarks>The copied image will be a 24-bit bitmap.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.CopyToClipboardRaster(System.Drawing.Size)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.CopyToClipboardRaster(System.Drawing.Size,System.Boolean,System.Boolean)">
      <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (openGL only)</param>
      <remarks>The copied image will be a 24-bit bitmap.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.CopyToClipboardRaster(System.Drawing.Size)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.CopyToClipboardRaster(System.Drawing.Size,System.Double,System.Boolean,System.Boolean)">
      <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (openGL only)</param>
      <remarks>The copied image will be a 24-bit bitmap.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.CopyToClipboardRaster(System.Drawing.Size)" />/// 
        </member>
    <member name="M:devDept.Eyeshot.Workspace.CopyToClipboardRaster">
      <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Workspace.CopyToClipboardRaster(System.Single)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.CopyToClipboardRaster(System.Single)">
      <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
      <param name="drawScale">The image scale</param>
      <remarks>The copied image will be a 24-bit bitmap.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.CopyToClipboardRaster(System.Drawing.Size)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.CopyToClipboardRaster(System.Single,System.Double)">
      <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
      <param name="drawScale">The image scale</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <remarks>The copied image will be a 24-bit bitmap.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.CopyToClipboardRaster(System.Drawing.Size)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.CopyToClipboardVector(System.Boolean)">
      <summary>
            Copies a vectorial image of the current scene of the active viewport on the clipboard.
            </summary>
      <param name="fit">If true captures the whole design control, else the current viewport</param>
      <seealso cref="T:devDept.Eyeshot.HiddenLinesViewOnClipboard" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.MakeLoop(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Int32,System.Double,System.Boolean)">
      <summary>
                Analyzes a number of entities and returns a closed loop of points starting from the
                entity at <paramref name="startIndex" />. You can provide an array of 100
                entities an get a 3D loop of a square made up of 4 lines. Entities connection is
                checked using <paramref name="chordalError" /> parameter, if the end
                points of two entities are farther of this value they will not be connected.
            </summary>
      <returns>The resulting loop of points.</returns>
      <param name="curveList">A list of curves</param>
      <param name="startIndex">The first entity to analyze</param>
      <param name="chordalError">The chordal error</param>
      <param name="reverse">If true, reverses the loop orientation.</param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.ViewChangedEventArgs">
      <summary>
            Class that holds the arguments for <see cref="E:devDept.Eyeshot.Workspace.ViewChanged" /> event.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ViewChangedEventArgs.#ctor(devDept.Eyeshot.viewType)">
      <summary>
            Standard constructor.
            </summary>
      <param name="viewType">One of the <see cref="T:devDept.Eyeshot.viewType" /> values that indicates which view was set</param>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ViewChangedEventArgs.ViewType">
      <summary>
            Gets which view was set.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.ViewChangedEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:devDept.Eyeshot.Workspace.ViewChanged" /> event.
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">A <see cref="T:devDept.Eyeshot.Workspace.ViewChangedEventArgs" /> object that contains the event data</param>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.ViewChanged">
      <summary>
            Occurs when the <see cref="M:devDept.Eyeshot.Workspace.SetView(devDept.Eyeshot.viewType)" /> is called.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectionChangedEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:devDept.Eyeshot.Workspace.SelectionChanged" /> and  <see cref="E:devDept.Eyeshot.Viewport.LabelSelectionChanged" />event. 
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:devDept.Eyeshot.Workspace.SelectionChangedEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.SelectionChanged">
      <summary>
            Occurs when entity selection has changed.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomFit">
      <summary>
            Fits the entire scene in the viewport control's client area.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomFit(System.Int32)">
      <summary>
            Fits the entire scene in the viewport control's client area.
            </summary>
      <param name="margin">Pixels margin from the border</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomFit(System.Boolean)">
      <summary>
            Fits the entire scene in the viewport control's client area.
            </summary>
      <param name="selectedOnly">If true, fits only selected entities.</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomFit(System.Boolean,System.Int32)">
      <summary>
            Fits the entire scene in the viewport control's client area.
            </summary>
      <param name="selectedOnly">If true, fits only selected entities.</param>
      <param name="margin">Pixels margin from the border</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Boolean)">
      <summary>
            Fits the entire scene in the viewport control's client area.
            </summary>
      <param name="entList">The list of entities to fit</param>
      <param name="selectedOnly">If true, fits only selected entities.</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Boolean,System.Int32)">
      <summary>
            Fits the entire scene in the viewport control's client area.
            </summary>
      <param name="entList">The list of entities to fit</param>
      <param name="selectedOnly">If true, fits only selected entities.</param>
      <param name="margin">Pixels margin from the border</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomFitSelectedLeaves">
      <summary>
            Fits the selected entities, including the ones inside BlockReferences.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomFitSelectedLeaves(System.Int32)">
      <summary>
            Fits the selected entities, including the ones inside BlockReferences.
            </summary>
      <param name="margin">Pixels margin from the border</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomFitSelectedLeaves(System.Int32,devDept.Eyeshot.Camera.perspectiveFitType)">
      <summary>
            Fits the selected entities, including the ones inside BlockReferences.
            </summary>
      <param name="margin">Pixels margin from the border</param>
      <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Workspace.SelectedItem})">
      <summary>
            Fits the selected items.
            </summary>
      <param name="items">The collection of entities to fit</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Workspace.SelectedItem},System.Int32)">
      <summary>
            Fits the selected items.
            </summary>
      <param name="items">The collection of entities to fit</param>
      <param name="margin">Pixels margin from the border</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Workspace.SelectedItem},System.Int32,devDept.Eyeshot.Camera.perspectiveFitType)">
      <summary>
            Fits the selected items.
            </summary>
      <param name="items">The collection of entities to fit</param>
      <param name="margin">Pixels margin from the border</param>
      <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomWindow(System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Zooms to the specified window.
            </summary>
      <param name="p1">Window's diagonal start point in screen coordinates</param>
      <param name="p2">Window's diagonal end point in screen coordinates</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetView(devDept.Eyeshot.viewType)">
      <summary>
            Sets the specified view in the active viewport.
            </summary>
      <param name="view">View type</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetView(devDept.Eyeshot.viewType,System.Boolean,System.Boolean)">
      <summary>
            Sets the specified view in the active viewport.
            </summary>
      <param name="view">View type</param>
      <param name="fit">If true fits the view</param>
      <param name="animate">If true performs an animation when changing the view</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetView(devDept.Eyeshot.viewType,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
      <summary>
            Sets the specified view in the active viewport.
            </summary>
      <param name="view">View type</param>
      <param name="fit">If true fits the view</param>
      <param name="margin">Pixels margin from the border, if <paramref name="fit" /> is true</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <param name="selectedOnly">If <paramref name="fit" /> is true, fits only the selected entities</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetView(devDept.Geometry.Quaternion,devDept.Geometry.Point3D,System.Double,System.Double)">
      <summary>
            Sets the specified view in the active viewport by doing an animation.
            </summary>
      <param name="rotation">The new camera rotation</param>
      <param name="target">The new cameratarget</param>
      <param name="distance">The new cameradistance</param>
      <param name="zoomFactor">The new camera zoomFactor</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetView(devDept.Geometry.Quaternion,devDept.Geometry.Point3D,System.Double,System.Double,System.Boolean)">
      <summary>
            Sets the specified view in the active viewport.
            </summary>
      <param name="rotation">The new camera rotation</param>
      <param name="target">The new cameratarget</param>
      <param name="distance">The new cameradistance</param>
      <param name="zoomFactor">The new camera zoomFactor</param>
      <param name="animate">If true performs an animation when changing the view</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SaveView">
      <summary>
            Saves the current view on the <see cref="P:devDept.Eyeshot.Viewport.SavedViews" /> stack.
            </summary>
      <remarks>
        <see cref="P:devDept.Eyeshot.Viewport.SavedViews" />
      </remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.PreviousView" />
      <seealso cref="M:devDept.Eyeshot.Workspace.NextView" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.PreviousView">
      <summary>
            Restores the previous view on the <see cref="P:devDept.Eyeshot.Viewport.SavedViews" /> stack.
            </summary>
      <remarks>
        <see cref="P:devDept.Eyeshot.Viewport.SavedViews" />
      </remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.SaveView" />
      <seealso cref="M:devDept.Eyeshot.Workspace.NextView" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.NextView">
      <summary>
            Restores the next view previously saved on the <see cref="P:devDept.Eyeshot.Viewport.SavedViews" /> stack.
            </summary>
      <remarks>
        <see cref="P:devDept.Eyeshot.Viewport.SavedViews" />
      </remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.PreviousView" />
      <seealso cref="M:devDept.Eyeshot.Workspace.NextView" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.AnimateCamera">
      <summary>
            If true, animates the camera in the commands that change its position or orientation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.AnimateCameraDuration">
      <summary>
            Gets or sets the duration in milliseconds of the camera animations.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Viewport.SetView(devDept.Eyeshot.viewType,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Int32)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.StopCameraAnimation" />
      <seealso cref="M:devDept.Eyeshot.Viewport.IsCameraAnimating" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ProcessSelectionByPolygon(System.Collections.Generic.List{devDept.Geometry.Point2D},System.Boolean,System.Int32[]@,System.Collections.Generic.List{System.Int32})">
      <summary>
        <para>Selects each entity crossing the specified selection polygon.</para>
        <para>This method is deprecated. Use the overload with the <see cref="T:devDept.Eyeshot.Workspace.SelectionChangedEventArgs" /> parameter.</para>
      </summary>
      <param name="selectionPolygon">Selection polygon in camera screen coordinates</param>
      <param name="invert">If true, inverts current selection status</param>
      <param name="added">The list of entity indices of entities added to selection</param>
      <param name="removed">The list of entity indices of entities removed from selection</param>
      <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" /> to see the effect of this function.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ProcessSelectionByPolygon(System.Collections.Generic.List{devDept.Geometry.Point2D},System.Boolean,devDept.Eyeshot.Workspace.SelectionChangedEventArgs)">
      <summary>
            Selects each entity crossing the specified selection polygon.
            </summary>
      <param name="selectionPolygon">Selection polygon in camera screen coordinates</param>
      <param name="invert">If true, inverts current selection status</param>
      <param name="eventArgs">The selection changed data</param>
      <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" /> to see the effect of this function.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ProcessSelectionByPolygonEnclosed(System.Collections.Generic.List{devDept.Geometry.Point2D},System.Boolean,System.Int32[]@,System.Collections.Generic.List{System.Int32})">
      <summary>
        <para>Selects each entity completely enclosed in the specified selection rectangle.</para>
        <para>This method is deprecated. Use the overload with the <see cref="T:devDept.Eyeshot.Workspace.SelectionChangedEventArgs" /> parameter.</para>
      </summary>
      <param name="selectionPolygon">Selection polygon in screen coordinates</param>
      <param name="added">The list of entity indices of entities added to selection</param>
      <param name="removed">The list of entity indices of entities removed from selection</param>
      <param name="invert">If true, inverts current selection status</param>
      <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" /> to see the effect of this function.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ProcessSelectionByPolygonEnclosed(System.Collections.Generic.List{devDept.Geometry.Point2D},System.Boolean,devDept.Eyeshot.Workspace.SelectionChangedEventArgs)">
      <summary>
            Selects each entity completely enclosed in the specified selection rectangle.
            </summary>
      <param name="selectionPolygon">Selection polygon in screen coordinates</param>
      <param name="eventArgs">The selection changed data</param>
      <param name="invert">If true, inverts current selection status</param>
      <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" /> to see the effect of this function.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ProcessSelectionByPolygonVisibleOnly(System.Collections.Generic.List{devDept.Geometry.Point2D},System.Boolean,System.Int32[]@,System.Collections.Generic.List{System.Int32})">
      <summary>
        <para>Selects each visible entity in the specified selection polygon.</para>
        <para>This method is deprecated. Use the overload with the <see cref="T:devDept.Eyeshot.Workspace.SelectionChangedEventArgs" /> parameter.</para>
      </summary>
      <param name="selectionPolygon">Selection polygon in screen coordinates</param>
      <param name="added">The list of entity indices of entities added to selection</param>
      <param name="removed">The list of entity indices of entities removed from selection</param>
      <param name="invert">If true, inverts current selection status</param>
      <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" /> to see the effect of this function.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ProcessSelectionByPolygonVisibleOnly(System.Collections.Generic.List{devDept.Geometry.Point2D},System.Boolean,devDept.Eyeshot.Workspace.SelectionChangedEventArgs)">
      <summary>
            Selects each visible entity in the specified selection polygon.
            </summary>
      <param name="selectionPolygon">Selection polygon in screen coordinates</param>
      <param name="eventArgs">The selection changed data</param>
      <param name="invert">If true, inverts current selection status</param>
      <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" /> to see the effect of this function.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ProcessSelectionVisibleOnly(System.Drawing.Rectangle,System.Boolean,System.Boolean,devDept.Eyeshot.Workspace.SelectionChangedEventArgs,System.Boolean,System.Boolean)">
      <summary>
            Selects only visible entities in the specified rectangle.
            </summary>
      <remarks>
            Call <see cref="M:System.Windows.Forms.Control.Invalidate" /> to see the effect of this function.
            </remarks>
      <param name="selectionBox">Selection rectangle in screen coordinates</param>
      <param name="firstOnly">When true, returns immediately after selecting the first
            entity</param>
      <param name="invert">If true, inverts current selection status</param>
      <param name="eventArgs">The selection changed data</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> property, otherwise no.</param>
      <param name="temporarySelection">Tells if the selection is part of a dynamic
            selection session (see <see cref="F:devDept.Eyeshot.actionType.SelectVisibleByPickDynamic" />)</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ProcessSelectionVisibleOnlyLabels(System.Drawing.Rectangle,System.Boolean,System.Boolean,devDept.Eyeshot.Workspace.SelectionChangedEventArgs,System.Boolean)">
      <summary>
            Selects only visible labels in the specified rectangle.
            </summary>
      <param name="selectionBox">Selection rectangle in screen coordinates</param>
      <param name="firstOnly">When true, returns immediately after selecting the first entity</param>
      <param name="invert">When true, inverts current selection status</param>
      <param name="eventArgs">The data where the added and removed labels are written</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> property, otherwise no.</param>
      <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" /> to see the effect of this function.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ProcessSelection(System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Int32[]@,System.Collections.Generic.List{System.Int32},System.Boolean)">
      <summary>
        <para>Selects each entity crossing the specified selection rectangle.</para>
        <para>This method is deprecated. Use the overload with the <see cref="T:devDept.Eyeshot.Workspace.SelectionChangedEventArgs" /> parameter.</para>
      </summary>
      <param name="selectionBox">Selection rectangle in screen coordinates</param>
      <param name="added">The list of entity indices of entities added to selection</param>
      <param name="removed">The list of entity indices of entities removed from selection</param>
      <param name="firstOnly">When true, returns immediately after selecting the first entity</param>
      <param name="invert">When true, inverts current selection status</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> property, otherwise no.</param>
      <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" /> to see the effect of this function.</remarks>
      <remarks>All entities in the selectionBox are considered, even the ones covered by others.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ProcessSelection(System.Drawing.Rectangle,System.Boolean,System.Boolean,devDept.Eyeshot.Workspace.SelectionChangedEventArgs,System.Boolean)">
      <summary>
            Selects each entity crossing the specified selection rectangle.
            </summary>
      <param name="selectionBox">Selection rectangle in screen coordinates</param>
      <param name="eventArgs">The selection changed data</param>
      <param name="firstOnly">When true, returns immediately after selecting the first entity</param>
      <param name="invert">When true, inverts current selection status</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> property, otherwise no.</param>
      <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" /> to see the effect of this function.</remarks>
      <remarks>All entities in the selectionBox are considered, even the ones covered by others.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetAllCrossingEntities(System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Returns the list of all the visible and selectable entities geometrically crossing the selection box, regardless of their actual visibility on screen.
            </summary>
      <param name="selectionBox">Selection rectangle's in screen coordinates</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> property, otherwise no.</param>
      <returns>The list of entity indices.</returns>
      <remarks>All entities in the selectionBox are considered, even the ones covered by others.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllEntitiesUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetCrossingEntities(System.Drawing.Rectangle,System.Boolean,System.Boolean)">
      <summary>
            Returns the list of all the visible and selectable entities crossing the specified selection box.
            </summary>
      <param name="selectionBox">Selection Rectangle box in screen coordinates</param>
      <param name="firstOnly">When true, returns immediately after selecting the first entity</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> property, otherwise no.</param>
      <returns>An array of indices representing the selected entity position.</returns>
      <remarks>
        <para>All entities in the selectionBox are considered, even the ones covered by others.</para>
        <para>Affected by selection scope (<see cref="!:Design.SetSelectionScope()" />).</para>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetCrossingEntities(System.Drawing.Rectangle,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Boolean,System.Boolean,devDept.Geometry.Transformation)">
      <summary>
            Returns the list of all the visible and selectable entities crossing the specified selection box.
            </summary>
      <param name="selectionBox">Selection Rectangle box in screen coordinates</param>
      <param name="entList">A custom list of entities</param>
      <param name="firstOnly">When true, returns immediately after selecting the first entity</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> property, otherwise no.</param>
      <param name="accParentTransform">Accumulated parent transformation or null/Nothing</param>
      <returns>An array of indices representing the selected entity position.</returns>
      <remarks>All entities in the selectionBox are considered, even the ones covered by others.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ProcessSelectionEnclosed(System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Int32[]@,System.Collections.Generic.List{System.Int32})">
      <summary>
        <para>Selects each entity completely enclosed in the specified selection rectangle.</para>
        <para>This method is deprecated. Use the overload with the <see cref="T:devDept.Eyeshot.Workspace.SelectionChangedEventArgs" /> parameter.</para>
      </summary>
      <param name="selectionBox">Selection rectangle's in screen coordinates</param>
      <param name="added">The list of entity indices of entities added to selection</param>
      <param name="removed">The list of entity indices of entities removed from selection</param>
      <param name="firstOnly">If true, returns immediately after selecting the first entity</param>
      <param name="invert">If true, inverts current selection status</param>
      <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" /> to see the effect of this function.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ProcessSelectionEnclosed(System.Drawing.Rectangle,System.Boolean,System.Boolean,devDept.Eyeshot.Workspace.SelectionChangedEventArgs)">
      <summary>
            Selects each entity completely enclosed in the specified selection rectangle.
            </summary>
      <param name="selectionBox">Selection rectangle's in screen coordinates</param>
      <param name="eventArgs">The selection changed data</param>
      <param name="firstOnly">If true, returns immediately after selecting the first entity</param>
      <param name="invert">If true, inverts current selection status</param>
      <remarks>Call <see cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" /> to see the effect of this function.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetAllEnclosedEntities(System.Drawing.Rectangle)">
      <summary>
            Selects all entities completely enclosed in the specified selection rectangle.
            </summary>
      <param name="selectionBox">Selection rectangle's in screen coordinates</param>
      <returns>The list of entity indices.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetComputeEntitiesVisibilityParams(System.Int32,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.drawForSelectionCallback">
      <summary>
            Delegate method for DrawForSelection.
            </summary>
      <typeparam name="T">Entity</typeparam>
      <param name="myParams">Drawing parameters</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetColorDrawForSelectionAndUpdateIdItemsMap``1(devDept.Eyeshot.GfxDrawForSelectionParams,devDept.Eyeshot.ISelectableItem,System.Int32,System.Int32)">
      <summary>
            Sets a coded color depending on the entity id.
            </summary>
      <param name="data">The selection parameters</param>
      <param name="item">The item corresponding to the <see cref="F:devDept.Eyeshot.GfxDrawForSelectionParams.FalseColorIndex" />. If null there is no conversion to perform on the falseColorIndex.</param>
      <param name="partIndex">Index of the part (edge, face, vertex). If -1, the item is not a subPart</param>
      <param name="shellIndex">Index of the shell (Brep only)</param>
      <remarks>Used by visible selection methods.</remarks>
      <seealso cref="P:devDept.Eyeshot.Workspace.SuspendSetColorForSelection" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetColorDrawForSelection(System.Int32)">
      <summary>
            Sets a coded color depending on the entity id.
            </summary>
      <param name="currentEntityId">The id of the entity</param>
      <remarks>Used by visible selection methods.</remarks>
      <seealso cref="P:devDept.Eyeshot.Workspace.SuspendSetColorForSelection" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SuspendSetColorForSelection">
      <summary>
            Suspends the set of the color by the <see cref="M:devDept.Eyeshot.Workspace.SetColorDrawForSelectionAndUpdateIdItemsMap``1(devDept.Eyeshot.GfxDrawForSelectionParams,devDept.Eyeshot.ISelectableItem,System.Int32,System.Int32)" />.
            </summary>
      <remarks>Used to perform custom selection techniques, like the selection of the triangles inside a Mesh.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.SetColorDrawForSelectionAndUpdateIdItemsMap``1(devDept.Eyeshot.GfxDrawForSelectionParams,devDept.Eyeshot.ISelectableItem,System.Int32,System.Int32)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ScreenToPlane(System.Drawing.Point,devDept.Geometry.Plane,devDept.Geometry.Point3D@)">
      <summary>
            Maps screen coordinates to world coordinates in the active viewport. 
            </summary>
      <param name="mousePos">Mouse cursor position (zero on top)</param>
      <param name="plane">The plane</param>
      <param name="intPoint">The intersection point. null/Nothing if the plane perpendicular to the screen.</param>
      <returns>True if the mapping succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ScreenToPlane(System.Drawing.Point,devDept.Geometry.PlaneEquation,devDept.Geometry.Point3D@)">
      <summary>
            Maps screen coordinates to world coordinates in the active viewport. 
            </summary>
      <param name="mousePos">Mouse cursor position (zero on top)</param>
      <param name="pe">The plane equation</param>
      <param name="intPoint">The intersection point. null/Nothing if the plane perpendicular to the screen.</param>
      <returns>True if the mapping succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ScreenToPlane(System.Collections.Generic.IList{System.Drawing.Point},devDept.Geometry.Plane)">
      <summary>
            Maps screen coordinates to world coordinates in the active viewport. 
            </summary>
      <param name="mousePointList">2D mouse point list (zero on top)</param>
      <param name="plane">The plane</param>
      <returns>The associated 3D world point list.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ScreenToPlane(System.Collections.Generic.IList{System.Drawing.Point},devDept.Geometry.PlaneEquation)">
      <summary>
            Maps screen coordinates to world coordinates in the active viewport. 
            </summary>
      <param name="mousePointList">2D mouse point list (zero on top)</param>
      <param name="pe">The plane equation</param>
      <returns>The associated 3D world point list.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ScreenToWorld(System.Collections.Generic.IList{System.Drawing.Point})">
      <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
      <param name="mousePointList">2D mouse point list (zero on top)</param>
      <returns>The associated 3D world point list.</returns>
      <remarks>Positions that don't have geometry underneath will return null.</remarks>
      <remarks>The depth is read from the depth buffer, so its precision affects accuracy.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ScreenToWorld(System.Drawing.Point)">
      <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
      <param name="mousePos">Mouse cursor position (zero on top)</param>
      <returns>The associated 3D world point if there is geometry in the point position, null otherwise.</returns>
      <remarks>The depth is read from the depth buffer, so its precision affects accuracy.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.WorldToScreen(devDept.Geometry.Point3D)">
      <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
      <param name="point">The 3D point to project on screen</param>
      <returns>The associated projected screen point (zero on bottom)</returns>
      <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.WorldToScreen(System.Double,System.Double,System.Double)">
      <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
      <param name="x">3D point's x-coordinate</param>
      <param name="y">3D point's y-coordinate</param>
      <param name="z">3D point's z-coordinate</param>
      <returns>The associated projected screen point (zero on bottom).</returns>
      <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.WorldToScreen(System.Collections.Generic.IList{devDept.Geometry.Point3D})">
      <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
      <param name="pointList">3D point list</param>
      <returns>The associated projected screen point list (zero on bottom).</returns>
      <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FindClosestVertex(System.Drawing.Point,System.Double,devDept.Geometry.Point3D@)">
      <summary>
            Looks for the model vertex whose 2D screen projection is closer to the mouse cursor.
            </summary>
      <param name="mousePos">Mouse position (zero on top)</param>
      <param name="maxDistance">Limit the search to points at this distance in pixels from mouse cursor position</param>
      <param name="closest">The closest vertex as a 3D point</param>
      <returns>The entity index if the closest vertex is nearer than <paramref name="maxDistance" />, -1 otherwise.</returns>
      <remarks>The <paramref name="closest" /> point is in the coordinate space of the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" /> so, if there is a current BlockReference, to get the 3D world coordinates
            of the <paramref name="closest" /> point you need to transform it by the <see cref="P:devDept.Eyeshot.Workspace.CurrentTransformation" />.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.IsCloserVertex(devDept.Geometry.Point3D,System.Double,System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FindClosestVertex(System.Drawing.Point,System.Double,System.Type,devDept.Geometry.Point3D@)">
      <summary>
            Looks for the model vertex whose 2D screen projection is closer to the mouse cursor skipping entities different from <paramref name="entType" />.
            </summary>
      <param name="mousePos">Mouse position (zero on top)</param>
      <param name="maxDistance">Limit the search to points at this distance in pixels from mouse cursor position</param>
      <param name="entType">The type of entities to process</param>
      <param name="closest">The closest vertex as a 3D point</param>
      <returns>The entity index if the closest vertex is nearer than <paramref name="maxDistance" /> and the entity type is <paramref name="entType" />, -1 otherwise.</returns>
      <remarks>The returned entity index refers to the <see cref="P:devDept.Eyeshot.Workspace.Entities" /> if there is no current BlockReference, else it refers to the <see cref="P:devDept.Eyeshot.Block.Entities" />
            of the Block referred by the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" />.
            Also, the <paramref name="closest" /> point is in the coordinate space of the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" /> so, if there is a current BlockReference, to get the 3D world coordinates
            of the <paramref name="closest" /> point you need to transform it by the <see cref="P:devDept.Eyeshot.Workspace.CurrentTransformation" />.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.IsCloserVertex(devDept.Geometry.Point3D,System.Double,System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FindClosestVertex(System.Drawing.Point,System.Double,System.Int32@)">
      <summary>
            Looks for the model vertex whose 2D screen projection is closer to the mouse cursor.
            </summary>
      <param name="mousePos">Mouse position (zero on top)</param>
      <param name="maxDistance">Limit the search to points at this distance in pixels from mouse cursor position</param>
      <param name="closestIndex">The closest vertex index</param>
      <returns>The entity index if the closest vertex is nearer than <paramref name="maxDistance" />, -1 otherwise.</returns>
      <remarks>The returned entity index refers to the <see cref="P:devDept.Eyeshot.Workspace.Entities" /> if there is no current BlockReference, else it refers to the <see cref="P:devDept.Eyeshot.Block.Entities" />
            of the Block referred by the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" />.
            Also, the <paramref name="closestIndex" /> point is in the coordinate space of the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" /> so, if there is a current BlockReference, to get the 3D world coordinates
            of the <paramref name="closestIndex" /> point you need to transform it by the <see cref="P:devDept.Eyeshot.Workspace.CurrentTransformation" />.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.IsCloserVertex(devDept.Geometry.Point3D,System.Double,System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FindClosestVertex(devDept.Eyeshot.Entities.Entity,System.Drawing.Point,System.Double)">
      <summary>
            Looks for the vertex of the specified <paramref name="entity" /> whose 2D screen projection is closer to the mouse cursor.
            </summary>
      <param name="entity">The entity to process</param>
      <param name="mousePos">Mouse position (zero on top)</param>
      <param name="maxDistance">Limit the search to points at this distance in pixels from mouse cursor position</param>
      <returns>The closest vertex, if any is found.</returns>
      <remarks>The returned point is in the coordinate space of the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" /> so, if there is a current BlockReference, to get the 3D world coordinates
            of the point you need to transform it by the <see cref="P:devDept.Eyeshot.Workspace.CurrentTransformation" />.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.IsCloserVertex(devDept.Geometry.Point3D,System.Double,System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FindClosestVertex(System.Drawing.Point,System.Double,devDept.Eyeshot.Entities.HitVertex@)">
      <summary>
            Looks for the model vertex whose 2D screen projection is closer to the mouse cursor.
            </summary>
      <param name="mousePos">Mouse position (zero on top)</param>
      <param name="maxDistance">Limit the search to points at this distance in pixels from mouse cursor position</param>
      <param name="closestVertex">The closest vertex</param>
      <returns>The entity index if the closest vertex is nearer than <paramref name="maxDistance" />, -1 otherwise.</returns>
      <remarks>The <paramref name="closestVertex" /> point is in the coordinate space of the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" /> so, if there is a current BlockReference, to get the 3D world coordinates
            of the <paramref name="closestVertex" /> point you need to transform it by the <see cref="P:devDept.Eyeshot.Workspace.CurrentTransformation" />.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.IsCloserVertex(devDept.Geometry.Point3D,System.Double,System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FindClosestVertex(System.Drawing.Point,System.Double,System.Type,devDept.Eyeshot.Entities.HitVertex@)">
      <summary>
            Looks for the model vertex whose 2D screen projection is closer to the mouse cursor skipping entities different from <paramref name="entType" />.
            </summary>
      <param name="mousePos">Mouse position (zero on top)</param>
      <param name="maxDistance">Limit the search to points at this distance in pixels from mouse cursor position</param>
      <param name="entType">The type of entities to process</param>
      <param name="closestVertex">The closest vertex, with the full information to retrieve the vertex from a <see cref="T:devDept.Eyeshot.Entities.Brep" /> or <see cref="T:devDept.Eyeshot.Entities.Solid" /></param>
      <returns>The entity index if the closest vertex is nearer than <paramref name="maxDistance" /> and the entity type is <paramref name="entType" />, -1 otherwise.</returns>
      <remarks>The <paramref name="closestVertex" /> point is in the coordinate space of the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" /> so, if there is a current BlockReference, to get the 3D world coordinates
            of the <paramref name="closestVertex" /> point you need to transform it by the <see cref="P:devDept.Eyeshot.Workspace.CurrentTransformation" />.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.IsCloserVertex(devDept.Geometry.Point3D,System.Double,System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FindClosestVertices(System.Drawing.Point,System.Double)">
      <summary>
            Looks for the model vertices whose 2D screen projections are closer to the mouse than the <paramref name="maxDistance" />.
            </summary>
      <param name="mousePos">Mouse position (zero on top)</param>
      <param name="maxDistance">Limit the search to points at this distance in pixels from mouse cursor position</param>
      <returns>The list of vertices nearer than <paramref name="maxDistance" />.</returns>
      <remarks>The returned points are in the coordinate space of the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" /> so, if there is a current BlockReference, to get the 3D world coordinates
            of the points you need to transform them by the <see cref="P:devDept.Eyeshot.Workspace.CurrentTransformation" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FindClosestVertices(System.Drawing.Point,System.Double,System.Type)">
      <summary>
            Looks for the model vertices whose 2D screen projections are closer to the mouse cursor skipping entities different from <paramref name="entType" />.
            </summary>
      <param name="mousePos">Mouse position (zero on top)</param>
      <param name="maxDistance">Limit the search to points at this distance in pixels from mouse cursor position</param>
      <param name="entType">The type of entities to process</param>
      <returns>The list of vertices nearer than <paramref name="maxDistance" /> and belonging to entities of type <paramref name="entType" />.</returns>
      <remarks>The returned points are in the coordinate space of the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" /> so, if there is a current BlockReference, to get the 3D world coordinates
            of the points you need to transform them by the <see cref="P:devDept.Eyeshot.Workspace.CurrentTransformation" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FindClosestVertices(devDept.Eyeshot.Entities.Entity,System.Drawing.Point,System.Double)">
      <summary>
            Looks for the model vertices of the specified <paramref name="entity" /> whose 2D screen projections are closer to the mouse cursor.
            </summary>
      <param name="entity">The entity to process</param>
      <param name="mousePos">Mouse position (zero on top)</param>
      <param name="maxDistance">Limit the search to points at this distance in pixels from mouse cursor position</param>
      <returns>The list of vertices of the specified <paramref name="entity" /> nearer than <paramref name="maxDistance" />.</returns>
      <remarks>The returned points are in the coordinate space of the <see cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" /> so, if there is a current BlockReference, to get the 3D world coordinates
            of the points you need to transform them by the <see cref="P:devDept.Eyeshot.Workspace.CurrentTransformation" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.FindClosestVertex(System.Drawing.Point,System.Double,System.Type,System.Int32@)">
      <summary>
            Looks for the model vertex whose 2D screen projection is closer to the mouse cursor skipping entities different from entType.
            </summary>
      <param name="mousePos">Mouse position (zero on top)</param>
      <param name="maxDistance">Limit the search to points at this distance from mouse cursor position</param>
      <param name="entType">Entity type</param>
      <param name="closestIndex">The closest vertex index</param>
      <returns>The entity index if the closest vertex is nearer than <paramref name="maxDistance" /> and the entity type is <paramref name="entType" />, -1 otherwise.</returns>
      <seealso cref="M:devDept.Eyeshot.Workspace.IsCloserVertex(devDept.Geometry.Point3D,System.Double,System.Double)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.IsCloserVertex(devDept.Geometry.Point3D,System.Double,System.Double)">
      <summary>
            Tells if the projected point, whose square distance from the mouse cursor is <paramref name="squareDistance" />, is closer than the <paramref name="currentMinimumSquareDistance" />.
            </summary>
      <param name="projectedPt">The point in projected Camera coordinates</param>
      <param name="squareDistance">The 2D square distance from the mouse position</param>
      <param name="currentMinimumSquareDistance">The current minimum 2D square distance from the mouse position</param>
      <returns>True if the point is closer, false otherwise.</returns>
      <remarks>This method is used by the <see cref="M:devDept.Eyeshot.Workspace.FindClosestVertex(System.Drawing.Point,System.Double,devDept.Geometry.Point3D@)" /> to compute the closest vertex to the mouse in 2D. Override this method to consider also the Z of the <paramref name="projectedPt" />.</remarks>
      <seealso cref="M:devDept.Eyeshot.Workspace.FindClosestVertex(System.Drawing.Point,System.Double,devDept.Geometry.Point3D@)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.FindClosestVertex(System.Drawing.Point,System.Double,System.Type,devDept.Geometry.Point3D@)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.FindClosestVertex(System.Drawing.Point,System.Double,System.Int32@)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.FindClosestVertex(System.Drawing.Point,System.Double,System.Type,System.Int32@)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.UpdateVisibleSelection">
      <summary>
            This method needs to be called before using one of the visible selection action modes or one of the methods that get the entities (or labels) under the mouse cursor if 
            the <see cref="P:devDept.Eyeshot.Entities.Entity.Visible" /> or the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> (or <see cref="P:devDept.Eyeshot.Labels.Label.Visible" /> or <see cref="P:devDept.Eyeshot.Labels.Label.Selectable" /> in case of labels selection) changed and the camera was not moved.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Workspace.ActionMode" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetEntityUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetItemUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllEntitiesUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllItemsUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllLabelsUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetLabelUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.Visible" />
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.Selectable" />
      <seealso cref="P:devDept.Eyeshot.Labels.Label.Visible" />
      <seealso cref="P:devDept.Eyeshot.Labels.Label.Selectable" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetEntityUnderMouseCursor(System.Drawing.Point,System.Boolean)">
      <summary>
            Returns the index of the first top level entity under the mouse cursor.
            </summary>
      <param name="mousePos">Mouse position in screen coordinates</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> property, otherwise no.</param>
      <seealso cref="M:devDept.Eyeshot.Workspace.GetItemUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetLabelUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateVisibleSelection" />
      <remarks>The sensitivity is affected by the <see cref="P:devDept.Eyeshot.Workspace.PickBoxSize" /> parameter.</remarks>
      <returns>The index of the entity, -1 otherwise.</returns>
      <example>
                The following code fragment demonstrate how to highlight the entity under the mouse
                cursor.
                <code lang="CS" title="[New Example]">
            private void viewportProfessional1_MouseMove(
                     object sender, MouseEventArgs e)
            {
             
               viewportProfessional1.ClearSelection();
             
               int id = viewportProfessional1.GetEntityUnderMouseCursor(e.Location);
             
               if (id != -1)
               {
             
                  Entity ent = viewportProfessional1.Entities[id] as Entity;
             
                  ent.Selected = true;
             
               }
                        
               viewportProfessional1.Invalidate();
             
            }
                </code><code lang="VB" title="[New Example]">
            Private Sub ViewportProfessional1_Move( _
                      ByVal sender As System.Object, _
                      ByVal e As System.EventArgs) _
                      Handles ViewportProfessional1.Move
                              
               ViewportProfessional1.ClearSelection()
             
               Dim id As Integer = ViewportProfessional1.GetEntityUnderMouseCursor( _ 
                     e.Location)
             
               If id &lt;&gt; -1 Then
               
                  Dim ent As Entity = ViewportProfessional1.Entities(id)
                      
                  ent.Selected = True
             
               End If
                        
               ViewportProfessional1.Invalidate()
             
            End Sub
                </code></example>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetItemUnderMouseCursor(System.Drawing.Point,System.Boolean)">
      <summary>
            Gets the first item under the mouse cursor (which may include the parents stack for nested entities).
            </summary>
      <returns>The item</returns>
      <remarks>The <see cref="P:devDept.Eyeshot.Design.AssemblySelectionMode" /> determines whether the top level entities or nested entities are returned.</remarks>
      <seealso cref="P:devDept.Eyeshot.Design.SelectionFilterMode" />
      <seealso cref="P:devDept.Eyeshot.Design.AssemblySelectionMode" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetEntityUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetLabelUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateVisibleSelection" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetLabelUnderMouseCursor(System.Drawing.Point,System.Boolean)">
      <summary>
            Returns the index of the first label under the mouse cursor.
            </summary>
      <param name="mousePos">Mouse position in screen coordinates</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Labels.Label.Selectable" /> property, otherwise no.</param>
      <remarks>The sensitivity is affected by the <see cref="P:devDept.Eyeshot.Workspace.PickBoxSize" /> parameter.</remarks>
      <returns>The index of the label, -1 otherwise.</returns>
      <seealso cref="M:devDept.Eyeshot.Workspace.GetEntityUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetItemUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateVisibleSelection" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.RotateCamera(System.Drawing.Point)">
      <summary>Sets the view direction as the normal of the plane under the mouse cursor.</summary>
      <param name="mouseLocation">Location of the mouse</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetView(devDept.Geometry.Vector3D,System.Boolean,System.Int32,System.Boolean)">
      <summary>Sets the view direction of the camera to the specified direction.</summary>
      <param name="direction">The new camera direction.</param>
      <param name="fit">if true fits the scene in the viewport</param>
      <param name="margin">Pixels margin from the border, if <paramref name="fit" /> is true</param>
      <param name="selectedOnly">If <paramref name="fit" /> is true, fits only the selected entities</param>
      <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.Workspace.AnimateCamera" /> is true.
             The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetView(devDept.Geometry.Vector3D,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
      <summary>Sets the view direction of the camera to the specified direction.</summary>
      <param name="direction">The new camera direction.</param>
      <param name="fit">if true fits the scene in the viewport</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <param name="margin">Pixels margin from the border, if <paramref name="fit" /> is true</param>
      <param name="selectedOnly">If <paramref name="fit" /> is true, fits only the selected entities</param>
      <remarks>The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetView(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Boolean,System.Int32,System.Boolean)">
      <summary>Sets the view direction of the camera to the specified direction.</summary>
      <param name="direction">The new camera direction.</param>
      <param name="upVector">The camera up vector</param>
      <param name="fit">if true fits the scene in the viewport</param>
      <param name="margin">Pixels margin from the border, if <paramref name="fit" /> is true</param>
      <param name="selectedOnly">If <paramref name="fit" /> is true, fits only the selected entities</param>
      <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.Workspace.AnimateCamera" /> is true
             The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SetView(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
      <summary>Sets the view direction of the camera to the specified direction.</summary>
      <param name="direction">The new camera direction.</param>
      <param name="upVector">The camera up vector</param>
      <param name="fit">if true fits the scene in the viewport</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <param name="margin">Pixels margin from the border, if <paramref name="fit" /> is true</param>
      <param name="selectedOnly">If <paramref name="fit" /> is true, fits only the selected entities</param>
      <remarks>The orientation of the camera is performed with an animation if <see cref="P:devDept.Eyeshot.Workspace.AnimateCamera" /> is true
             The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetAllEntitiesUnderMouseCursor(System.Drawing.Point,System.Boolean)">
      <summary>
            Returns all the visible (on screen) top level and selectable entities (which may include the parents stack for nested entities) under the mouse cursor in the active viewport.
            </summary>
      <param name="mousePos">Mouse position in screen coordinates</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> property, otherwise no.</param>
      <remarks>The sensitivity is affected by the <see cref="P:devDept.Eyeshot.Workspace.PickBoxSize" /> parameter.
            Only the entities that are visible on screen and in the selectionBox are considered, the ones covered by other entities are not considered. </remarks>
      <returns>The list of entity indices.</returns>
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateVisibleSelection" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllCrossingEntities(System.Drawing.Rectangle,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllItemsUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllLabelsUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="P:devDept.Eyeshot.Design.AssemblySelectionMode" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetAllItemsUnderMouseCursor(System.Drawing.Point,System.Boolean)">
      <summary>
            Returns all the visible (on screen) and selectable items (which may include the parents stack for nested entities) under the mouse cursor in the active viewport.
            </summary>
      <param name="mousePos">Mouse position in screen coordinates</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> property, otherwise no.</param>
      <remarks>The sensitivity is affected by the <see cref="P:devDept.Eyeshot.Workspace.PickBoxSize" /> parameter.</remarks>
      <remarks> Only the items that are visible on screen and in the selectionBox are considered, the ones covered by other entities are not considered.
            The <see cref="P:devDept.Eyeshot.Design.AssemblySelectionMode" /> determines whether the top level entities or nested entities are returned. </remarks>
      <returns>The list of entity indices.</returns>
      <seealso cref="P:devDept.Eyeshot.Design.AssemblySelectionMode" />
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateVisibleSelection" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllCrossingEntities(System.Drawing.Rectangle,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllEntitiesUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllLabelsUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetAllLabelsUnderMouseCursor(System.Drawing.Point,System.Boolean)">
      <summary>
            Returns all the visible labels under the mouse cursor in the active viewport.
            </summary>
      <param name="mousePos">Mouse position in screen coordinates</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Labels.Label.Selectable" /> property, otherwise no.</param>
      <remarks>The sensitivity is affected by the <see cref="P:devDept.Eyeshot.Workspace.PickBoxSize" /> parameter.
            Only the labels that are visible on screen and in the selectionBox are considered, the ones covered by other labels are not considered.</remarks>
      <returns>The list of label indices.</returns>
      <seealso cref="M:devDept.Eyeshot.Workspace.UpdateVisibleSelection" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllEntitiesUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllItemsUnderMouseCursor(System.Drawing.Point,System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetAllVisibleEntities(System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Returns the list of all visible entities in the specified selection box in the active viewport.
            </summary>
      <param name="selectionBox">Selection rectangle in screen coordinates</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> property, otherwise no.</param>
      <returns>The list of entity indices.</returns>
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllVisibleItems(System.Drawing.Rectangle,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllVisibleLabels(System.Drawing.Rectangle,System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetAllVisibleItems(System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Returns the list of all visible items (which may include the parents stack for
            nested entities) in the specified selection box in the active viewport.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>The <see cref="P:devDept.Eyeshot.Design.SelectionFilterMode" /> determines the type of the
            item selected.</description>
          </item>
          <item>
            <description>The <see cref="P:devDept.Eyeshot.Design.AssemblySelectionMode" /> determines whether the
            top level entities or nested entities are returned.</description>
          </item>
        </list>
      </remarks>
      <param name="selectionBox">Selection rectangle in screen coordinates</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" /> property, otherwise no.</param>
      <returns>
            The selected items array.
            </returns>
      <seealso cref="P:devDept.Eyeshot.Design.SelectionFilterMode" />
      <seealso cref="P:devDept.Eyeshot.Design.AssemblySelectionMode" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllVisibleEntities(System.Drawing.Rectangle,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllVisibleLabels(System.Drawing.Rectangle,System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetAllVisibleLabels(System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Returns the list of all visible labels in the specified selection box.
            </summary>
      <param name="selectionBox">Selection rectangle in screen coordinates</param>
      <param name="selectableOnly">When true, checks the <see cref="P:devDept.Eyeshot.Labels.Label.Selectable" /> property, otherwise no.</param>
      <returns>The list of label indices in the selection box.</returns>
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllVisibleEntities(System.Drawing.Rectangle,System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.GetAllVisibleItems(System.Drawing.Rectangle,System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetVisibleEntitiesFromBackBuffer(devDept.Eyeshot.Viewport,System.Byte[],System.Int32,System.Int32,System.Drawing.Rectangle,System.Boolean)">
      <summary>
            Returns the indices of the entities read from the back buffer in the selectionBox.
            </summary>
      <param name="viewport">The viewport</param>
      <param name="stride">The number of bytes per image row</param>
      <param name="bpp">Bytes per pixel</param>
      <param name="selectionBox">Selection rectangle in screen coordinates</param>
      <param name="firstOnly">If true, returns the first entity that is found in the selectionBox</param>
      <param name="rgbValues">The array of pixels drawn in false colors</param>
      <returns>The array of the indices of the visible entities found in the selection box.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.GetPixel(System.Int32,System.Int32)">
      <summary>
            Gets the color of the specified pixel in this viewport
            </summary>
      <param name="x">The x window coordinate of the pixel to retrieve</param>
      <param name="y">The y window coordinate of the pixel to retrieve (0 on bottom)</param>
      <returns>The color of the pixel</returns>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectionChangedEventArgs">
      <summary>Provides data for the <see cref="E:devDept.Eyeshot.Workspace.SelectionChanged" /> event.</summary>
      <seealso cref="T:devDept.Eyeshot.Workspace.SelectionInfoItem" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SelectionChangedEventArgs.Added">
      <summary>
        <para>Gets the list of entity indices added to selection.</para>
        <para>This property is deprecated. Use <see cref="P:devDept.Eyeshot.Workspace.SelectionChangedEventArgs.AddedItems" /> instead.</para>
      </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SelectionChangedEventArgs.Removed">
      <summary>
        <para>Gets the list of entity indices removed from selection.</para>
        <para>This property is deprecated. Use <see cref="P:devDept.Eyeshot.Workspace.SelectionChangedEventArgs.RemovedItems" /> instead.</para>
      </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionChangedEventArgs.#ctor(System.Int32[],System.Int32[],devDept.Eyeshot.Workspace)">
      <summary>
            Constructor for top-level entities.
            </summary>
      <param name="added">The indices of the top-level entities added to the selection.</param>
      <param name="removed">The indices of the top-level entities removed from the selection.</param>
      <param name="ws">The Workspace control.</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionChangedEventArgs.#ctor(devDept.Eyeshot.Workspace.SelectedItem[],devDept.Eyeshot.Workspace.SelectedItem[],devDept.Eyeshot.Workspace)">
      <summary>
            Standard constructor.
            </summary>
      <param name="added">The items added to the selection.</param>
      <param name="removed">The items removed from the selection.</param>
      <param name="ws">The Workspace control.</param>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SelectionChangedEventArgs.AddedItems">
      <summary>
            Gets or sets the collection of items added to selection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SelectionChangedEventArgs.RemovedItems">
      <summary>
            Gets or sets the collection of items removed from selection.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectedItemBase">
      <summary>
            Base class for selected items.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedItemBase.#ctor(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Parents constructor.
            </summary>
      <param name="parents">The stack of parents (the top of the stack must be the innermost BlockReference)</param>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SelectedItemBase.Parents">
      <summary>
            Gets or sets the stack of parents of the item (the top of the stack must be the innermost BlockReference).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SelectedItemBase.Item">
      <summary>
            Gets or sets the item (<see cref="T:devDept.Eyeshot.Labels.Label" /> or <see cref="T:devDept.Eyeshot.Entities.Entity" />).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedItemBase.Init(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},devDept.Eyeshot.ISelectableItem,System.Int32,System.Int32,System.Int32,System.Object[][])">
      <summary>
            Initializes the data.
            </summary>
      <param name="parents">The parents stack that identifies the component instance (the top of the stack must be the innermost BlockReference)</param>
      <param name="item">The item</param>
      <param name="subItemIndex">Used by derived classes</param>
      <param name="shellIndex">Used by derived classes</param>
      <param name="nSubItems">Used by derived classes</param>
      <param name="subItemsArray">Used by derived classes</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedItemBase.#ctor(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},devDept.Eyeshot.ISelectableItem)">
      <summary>
            Constructor.
            </summary>
      <param name="parents">The parents stack (the top of the stack must be the innermost BlockReference)</param>
      <param name="item">The item</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedItemBase.Equals(System.Object)">
      <summary>
            Compares two instances of the class.
            </summary>
      <param name="other">The other object</param>
      <returns>True if they are equal, false otherwise.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectedItem">
      <summary>
            Class that holds information of the selected entity with its parents.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedItem.Select(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Selects or un-selects the item instance.
            </summary>
      <param name="workspace">The workspace.</param>
      <param name="select">The selection status.</param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectedSubItem">
      <summary>
            Class used for selection of faces, vertices and edges.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SelectedSubItem.Index">
      <summary>
            The index of the selected part (for sub-item selection of vertices, edges, faces, region contours, composite curve segments, sketch elements).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedSubItem.Init(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},devDept.Eyeshot.ISelectableItem,System.Int32,System.Int32,System.Int32,System.Object[][])">
      <summary>
            Initializes the data.
            </summary>
      <param name="parents">The parents stack that identifies the component instance</param>
      <param name="item">The item</param>
      <param name="subItemIndex">The sub item index</param>
      <param name="shellIndex">Used by derived classes</param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectedFace">
      <summary>
            Class that represents a selected face.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SelectedFace.ShellIndex">
      <summary>
            0 for the outer faces, &gt;0 for inners.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedFace.Init(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},devDept.Eyeshot.ISelectableItem,System.Int32,System.Int32,System.Int32,System.Object[][])">
      <summary>
            Initializes the data.
            </summary>
      <param name="parents">The parents stack that identifies the component instance</param>
      <param name="item">The item</param>
      <param name="subItemIndex">The sub item index</param>
      <param name="shellIndex">The shell index</param>
      <param name="nSubItems">Used by derived classes</param>
      <param name="subItemsArray">Used by derived classes</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedFace.Select(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Selects or unselects the item face.
            </summary>
      <param name="workspace">The workspace.</param>
      <param name="select">The selection status.</param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectedSubCurve">
      <summary>
            Class that represents a selected subCurve of a CompositeCurve.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedSubCurve.Select(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Selects or unselects the item subCurve.
            </summary>
      <param name="workspace">The workspace.</param>
      <param name="select">The selection status.</param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectedContour">
      <summary>
            Class that represents a selected contour of a Region.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedContour.Select(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Selects or unselects the item subCurve.
            </summary>
      <param name="workspace">The workspace.</param>
      <param name="select">The selection status.</param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectedSketchPoint">
      <summary>
            Class that represents a selected point of a Sketch.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedSketchPoint.Select(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Selects or unselects the item sketch point.
            </summary>
      <param name="workspace">The workspace.</param>
      <param name="select">The selection status.</param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectedSketchCurve">
      <summary>
            Class that represents a selected curve of a Sketch.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedSketchCurve.Select(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Selects or unselects the item sketch curve.
            </summary>
      <param name="workspace">The workspace.</param>
      <param name="select">The selection status.</param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectedEdge">
      <summary>
            Class that represents a selected edge.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedEdge.Select(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Selects or unselects the item edge.
            </summary>
      <param name="workspace">The workspace.</param>
      <param name="select">The selection status.</param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectedVertex">
      <summary>
            Class that represents a selected vertex.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectedVertex.Select(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Selects or unselects the item vertex.
            </summary>
      <param name="workspace">The workspace.</param>
      <param name="select">The selection status.</param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectionInfoItemBase">
      <summary>
            Base class for selection info items.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionInfoItemBase.FindInstance``1(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},devDept.Eyeshot.ISelectableItem,``0,System.Collections.Generic.List{``0})">
      <summary>
            Gets the instance of <see cref="T:devDept.Eyeshot.Workspace.SelectedItem" /> with the given parents.
            </summary>
      <param name="parents">The parents</param>
      <param name="selectionItem">The item at top level</param>
      <param name="selectionItemsInstances">The instances items to search</param>
      <returns>The instance if found, null elsewise.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectionInfoItem">
      <summary>
            Class that holds the information of the selected item.
            </summary>
      <seealso cref="E:devDept.Eyeshot.Workspace.SelectionChanged" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionInfoItem.#ctor(devDept.Eyeshot.ISelectableItem)">
      <summary>
            Root level item constructor.
            </summary>
      <param name="item">The item at root level</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionInfoItem.#ctor(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},devDept.Eyeshot.ISelectableItem)">
      <summary>
            Parents and item constructor.
            </summary>
      <param name="parents">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectionInfoSubItems">
      <summary>
            Class that holds the information of the selected sub-items.
            </summary>
      <seealso cref="E:devDept.Eyeshot.Workspace.SelectionChanged" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionInfoSubItems.#ctor(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Root level item constructor.
            </summary>
      <param name="entity">The item at root level</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionInfoSubItems.#ctor(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference},devDept.Eyeshot.Entities.Entity)">
      <summary>
            Parents and item constructor.
            </summary>
      <param name="parents">
      </param>
      <param name="item">
      </param>
    </member>
    <member name="F:devDept.Eyeshot.Workspace.SelectionInfoSubItems.SubItems">
      <summary>
            Gets or sets the selection data for the subitems of the item (faces, vertices, edges).
            </summary>
      <remarks>The type of subitem depends on the value of <see cref="P:devDept.Eyeshot.Design.SelectionFilterMode" /></remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionInfoSubItems.InitSubItems(System.Int32)">
      <summary>
            Initializes the <see cref="F:devDept.Eyeshot.Workspace.SelectionInfoSubItems.SubItems" /> array with the given size.
            </summary>
      <param name="nSubItems">The number of subItems</param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectionInfoSubItemsArray">
      <summary>
            Class that holds the information of the selected sub items (Brep inners).
            </summary>
      <seealso cref="E:devDept.Eyeshot.Workspace.SelectionChanged" />
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionInfoSubItemsArray.InitSubItemsArray(System.Object[][])">
      <summary>
            Initializes the internal sub items with the same size of the given <param name="inners"></param></summary>
      <param name="inners">The Brep inners.</param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.SelectionInfo">
      <summary>
            Element selection information class definition.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionInfo.SetFlag(devDept.Eyeshot.selectionStatusType)">
      <summary>
            Sets the flag.
            </summary>
      <param name="flag">The flag</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionInfo.InvertFlag(devDept.Eyeshot.selectionStatusType)">
      <summary>
            Inverts the flag.
            </summary>
      <param name="flag">The flag</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionInfo.IsFlagSet(devDept.Eyeshot.selectionStatusType)">
      <summary>
            Checks the the flag status.
            </summary>
      <param name="flag">The flag</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionInfo.UnsetFlag(devDept.Eyeshot.selectionStatusType)">
      <summary>
            Unsets the flag.
            </summary>
      <param name="flag">The flag</param>
    </member>
    <member name="P:devDept.Eyeshot.Workspace.SelectionInfo.Selected">
      <summary>
            Gets or sets the selection status.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.SelectionInfo.IsSelected">
      <summary>
            Tells if the selection status is different from None.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.CopyTo(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Copies all items inside control master collections (<see cref="P:devDept.Eyeshot.Viewport.Labels" />, <see cref="P:devDept.Eyeshot.Workspace.Blocks" />, <see cref="P:devDept.Eyeshot.Workspace.Layers" />, <see cref="P:devDept.Eyeshot.Design.Materials" />, <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />, <see cref="P:devDept.Eyeshot.Workspace.LineTypes" />, <see cref="P:devDept.Eyeshot.Workspace.HatchPatterns" />)) to the specified Workspace control.
            </summary>
      <param name="destination">The Workspace control that is the destination of the elements copied.</param>
      <param name="replaceRootBlock">&gt;When true the root block of the destination Workspace is replaced.</param>
      <remarks>
            If the <see cref="P:devDept.Eyeshot.Design.Viewports" /> collection is empty then a new <see cref="T:devDept.Eyeshot.Viewport" /> is added to it.
            You need to call <see cref="M:devDept.Eyeshot.Workspace.Invalidate" /> to see the effect of this command in the destination Workspace control.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.Purge">
      <summary>
            Removes unused items from the Workspace master collections (Layers, Blocks, Materials, etc.).
            </summary>
      <remarks> The original order of the items is kept inside each collection and the removed items are disposed. Any BlockReference set as current will be unset.</remarks>
      <seealso cref="P:devDept.Eyeshot.Workspace.CurrentBlockReference" />
      <seealso cref="M:devDept.Eyeshot.Workspace.SetCurrent(devDept.Eyeshot.Entities.BlockReference,System.Boolean)" />
    </member>
    <member name="P:devDept.Eyeshot.Workspace.ShortcutKeys">
      <summary>
            Gets or sets the keyboard shortcuts.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomIn(System.Int32)">
      <summary>
            Zooms the view in.
            </summary>
      <param name="amount">Amount of zoom (in pixels)</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.ZoomOut(System.Int32)">
      <summary>
            Zooms the view out.
            </summary>
      <param name="amount">Amount of zoom (in pixels)</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.PanLeft(System.Int32)">
      <summary>
            Pans the view to the left.
            </summary>
      <param name="amount">Amount of pan (in pixels)</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.PanRight(System.Int32)">
      <summary>
            Pans the view to the right.
            </summary>
      <param name="amount">Amount of pan (in pixels)</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.PanDown(System.Int32)">
      <summary>
            Pans the view downwards.
            </summary>
      <param name="amount">Amount of pan (in pixels)</param>
    </member>
    <member name="M:devDept.Eyeshot.Workspace.PanUp(System.Int32)">
      <summary>
            Pans the view upwards.
            </summary>
      <param name="amount">Amount of pan (in pixels)</param>
    </member>
    <member name="T:devDept.Eyeshot.Workspace.NavigationTimerHandler">
      <summary>Represents the method that will handle the <see cref="E:devDept.Eyeshot.Workspace.NavigationTimerTick" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The event data.</param>
    </member>
    <member name="E:devDept.Eyeshot.Workspace.NavigationTimerTick">
      <summary>
            Occurs during the scene navigation with the keyboard.
            </summary>
      <remarks>Each key press of the navigation keys starts a small animation to move the camera. Subscribe to this event do something each time the camera is moved.</remarks>
      <seealso cref="P:devDept.Eyeshot.Workspace.ShortcutKeys" />
    </member>
    <member name="M:devDept.Eyeshot.TrialPopup.Dispose(System.Boolean)">
      <summary>
            Clean up any resources being used.
            </summary>
      <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
    </member>
    <member name="T:devDept.Eyeshot.Manufacture">
      <summary>
            Manufacture control definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.ShortcutKeys">
      <summary>
            Gets or sets the keyboard shortcuts.
            </summary>
      <remarks>
            For the manufacture workspace they include also the Start, Pause, Next and Previous shortcut. 
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.SimulationTimeLine">
      <summary>
            The simulation timeline.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.SimulationToolpath">
      <summary>
            Gets or set the simulation toolpath entity. When set, the toolpath is added to the scene.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.CanSimulate">
      <summary>
            Returns true if the tool and simulation toolpath are defined, false otherwise.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.ToolBlockRef">
      <summary>
            Gets the simulation tool block reference.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.SimulationTool">
      <summary>
            Gets or set the simulation tool. When set, the <see cref="P:devDept.Eyeshot.Manufacture.ToolBlockRef" /> is reset.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.SimulationStock">
      <summary>
            Gets or set the simulation stock entity. When set, the stock is added to the scene.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.StopOnCollision">
      <summary>
            When true, the simulation is paused if the tool collides with the simulation stock.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Milling.Tool.CollisionRadius" />
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.#ctor">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Manufacture.PositionChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:devDept.Eyeshot.Manufacture.PositionChanged" /> event.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.PositionChangedEventArgs.#ctor(devDept.Eyeshot.Entities.PointCL,System.Int32)">
      <summary>
            Standard constructor.
            </summary>
      <param name="cl">The cutter location point</param>
      <param name="direction">The simulation direction</param>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.PositionChangedEventArgs.CutterLocation">
      <summary>
            Gets the simulation tool position.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.PositionChangedEventArgs.Direction">
      <summary>
            Gets the simulation direction: +1 for forward, -1 for backward, 0 for undetermined.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Manufacture.PositionChangedEventHandler">
      <summary>
             Represents the method that will handle the <see cref="E:devDept.Eyeshot.Manufacture.PositionChanged" /> event. 
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:devDept.Eyeshot.Manufacture.PositionChangedEventArgs" /> object that contains the event data.</param>
    </member>
    <member name="E:devDept.Eyeshot.Manufacture.PositionChanged">
      <summary>
            Occurs when the simulation tool position changes.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Manufacture.SimulationEndedEventHandler">
      <summary>
             Represents the method that will handle the <see cref="E:devDept.Eyeshot.Manufacture.SimulationEnded" /> event. 
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="E:devDept.Eyeshot.Manufacture.SimulationEnded">
      <summary>
            Occurs when the when the simulation is ended.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Manufacture.SimulationStartedEventHandler">
      <summary>
             Represents the method that will handle the <see cref="E:devDept.Eyeshot.Manufacture.SimulationStarted" /> event. 
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="E:devDept.Eyeshot.Manufacture.SimulationStarted">
      <summary>
            Occurs when the when the simulation is started. The event is fired both
            when the 'play' button is pressed and when the 'go to end' button is pressed. 
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Manufacture.SimulationPausedEventHandler">
      <summary>
             Represents the method that will handle the <see cref="E:devDept.Eyeshot.Manufacture.SimulationPaused" /> event. 
            </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.EventArgs" /> object that contains the event data.</param>
    </member>
    <member name="E:devDept.Eyeshot.Manufacture.SimulationPaused">
      <summary>
            Occurs when the when the simulation is paused.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.ResetSimulation">
      <summary>
            Resets the simulation.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.PauseSimulation">
      <summary>
            Pauses the simulation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.SimulationSpeed">
      <summary>
            Gets or sets the simulation speed, in <see cref="P:devDept.Eyeshot.Block.Units" /> per second.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Block.Units" />
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.AutoSpeed(System.Int32)">
      <summary>
            Automatically set the speed (the speed is computed based on
            the current end mill diameter). To set the accurate speed of
            the end mill, use <see cref="P:devDept.Eyeshot.Manufacture.SimulationSpeed" />.
            </summary>
      <param name="factor">Positive factor multiplying the initial speed.</param>
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.GoToBeginning">
      <summary>
            Moves the tool to the first <see cref="P:devDept.Eyeshot.Manufacture.SimulationToolpath" /> motion.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.GoToPrevious">
      <summary>
            Moves the tool to the previous <see cref="P:devDept.Eyeshot.Manufacture.SimulationToolpath" /> motion.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.Start">
      <summary>
            Starts simulation execution.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.Pause">
      <summary>
            Pauses simulation execution.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.GoToNext">
      <summary>
            Moves the tool to the next <see cref="P:devDept.Eyeshot.Manufacture.SimulationToolpath" /> motion.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.GoToMotion(System.Int32)">
      <summary>
            Moves the tool at the beginning of the <see cref="P:devDept.Eyeshot.Manufacture.SimulationToolpath" />.
            </summary>
      <param name="index">The motion index</param>
      <seealso cref="M:devDept.Eyeshot.Workspace.Invalidate" />
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.GoToEnd">
      <summary>
            Moves the tool at the end of the <see cref="P:devDept.Eyeshot.Manufacture.SimulationToolpath" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.SimulationSetup">
      <summary>
            Gets or sets simulation setup.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.CuttingStockText">
      <summary>
            Gets or sets the "Cutting stock..." text string.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Manufacture.ResetTimeLine">
      <summary>
            Resets the simulation timeline.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.ClearancePlane">
      <summary>
            Gets or sets the machining clearance plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.RetractPlane">
      <summary>
            Gets or sets the machining retract plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.TopPlane">
      <summary>
            Gets or sets the machining top plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.BottomPlane">
      <summary>
            Gets or sets the machining bottom plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Manufacture.SimulationGeometry">
      <summary>
            Gets or sets the machining geometry. When set, the machining geometry is added to the scene.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Clearing3D">
      <summary>
        <para>3D clearing class definition.</para>
        <para>Bulk material is removed in layers or levels from the raw stock. Typical tools used for this kind of operation are Flat or Corner Radius end mills.</para>
      </summary>
      <remarks>If the <see cref="P:devDept.Eyeshot.Milling.Setup.Stock">stock</see> is defined, the computation takes it in account.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Clearing3D.FlatAreaDetection">
      <summary>
            If enabled, the strategy attempts to detect the heights of flat areas and machine at these levels.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Clearing3D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry3D,devDept.Geometry.Interval,System.Double,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="zRange">The machining Z range</param>
      <param name="stepDown">The step down</param>
      <param name="stepOver">The step over</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Clearing3D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry3D,devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,System.Double,System.Double)">
      <summary>
            Boundary region constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="boundary">Tool containment boundary, can be null/nothing.</param>
      <param name="zRange">The machining Z range</param>
      <param name="stepDown">The step down</param>
      <param name="stepOver">The step over</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Pocket3D">
      <summary>
        <para>3D pocket class definition.</para>
        <para>Bulk material is removed in layers or levels from the raw stock. Typical tools used for this kind of operation are Flat or Corner Radius end mills.</para>
      </summary>
      <remarks>If the <see cref="P:devDept.Eyeshot.Milling.Setup.Stock">stock</see> is defined, the computation takes it in account.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Pocket3D.FlatAreaDetection">
      <summary>
            If enabled, the strategy attempts to detect the heights of flat areas and machine at these levels.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Pocket3D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry3D,devDept.Geometry.Interval,System.Double,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="zRange">The machining Z range</param>
      <param name="stepDown">The step down</param>
      <param name="stepOver">The step over</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Pocket3D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry3D,devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,System.Double,System.Double)">
      <summary>
            Boundary region constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="boundary">Tool containment boundary, can be null/nothing.</param>
      <param name="zRange">The machining Z range</param>
      <param name="stepDown">The step down</param>
      <param name="stepOver">The step over</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Pocket3D.GetRawPasses(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
      <summary>
            Computes the polygonal regions representing the area to be pocketed for each level.
            </summary>
      <param name="worker">The work unit background worker</param>
      <param name="doWorkEventArgs">The work unit even arguments</param>
      <returns>The resulting array of tuples.</returns>
      <seealso cref="T:devDept.WorkUnit" />
    </member>
    <member name="T:devDept.Eyeshot.Milling.Contour3D">
      <summary>
        <para>Z-Level finishing class definition.</para>
        <para>Can be used either as a pre-finishing or a finishing operation and is
            similar to <see cref="T:devDept.Eyeshot.Milling.Parallel3D" />. The major difference is the type of cutting that
            is performed. Here, the cutter finishes in constant Z planes.</para>
      </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Contour3D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry3D,devDept.Geometry.Interval,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="zRange">The machining Z range</param>
      <param name="stepDown">The step down amount</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Contour3D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry3D,devDept.Eyeshot.Entities.Region,devDept.Geometry.Interval,System.Double)">
      <summary>
            Boundary region constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="boundary">The tool containment region</param>
      <param name="zAxis">The machining Z range</param>
      <param name="stepDown">The step down amount</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Contour3D.GetRawPasses(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
      <summary>
            Computes the polygonal loops representing the contours.
            </summary>
      <param name="worker">The work unit background worker</param>
      <param name="doWorkEventArgs">The work unit even arguments</param>
      <returns>The resulting array of tuples.</returns>
      <seealso cref="T:devDept.WorkUnit" />
    </member>
    <member name="T:devDept.Eyeshot.Milling.EndMill">
      <summary>
            Milling cutter definition. 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.EndMill.Diameter">
      <summary>
            Gets end mill diameter.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.EndMill.CornerRadius">
      <summary>
            Gets end mill corner radius.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.EndMill.TipAngle">
      <summary>
            Gets the tip angle in radians.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.EndMill.TaperAngle">
      <summary>
            Gets the taper angle in radians.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.EndMill.ShaftLength">
      <summary>
            Gets the end mill shaft length.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.EndMill.FluteLength">
      <summary>
            Gets the flute length.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.EndMill.Number">
      <summary>
            Gets CNC machine tool number.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.EndMill.Speed">
      <summary>
            Gets or sets the spindle speed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.EndMill.Feed">
      <summary>
            Gets or sets the feed rate.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.EndMill.CornerColor">
      <summary>
            Gets or sets the color of the corner radius.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.EndMill.FluteColor">
      <summary>
            Gets or sets the color of the flute.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.EndMill.ShaftColor">
      <summary>
            Gets or sets the color of the body.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.EndMill.SimulationColor">
      <summary>
            Gets or sets the dynamic simulation color.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.#ctor(System.Double,System.Double,System.Int32)">
      <summary>
            Standard constructor.
            </summary>
      <param name="diameter">The cutting diameter</param>
      <param name="cornerRadius">The corner radius</param>
      <param name="number">The CNC machine tool number</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Lengths constructor.
            </summary>
      <param name="diameter">The cutting diameter</param>
      <param name="cornerRadius">The corner radius</param>
      <param name="fluteLength">The flute length</param>
      <param name="shaftLength">The shaft length</param>
      <param name="number">Then CNC machine tool number</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.CreateDrill(System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Creates a drill end mill.
            </summary>
      <param name="diameter">The cutting diameter</param>
      <param name="tipAngle">The tip angle in radians</param>
      <param name="fluteLength">The flute length</param>
      <param name="shaftLength">The shaft length</param>
      <param name="number">Then CNC machine tool number</param>
      <returns>The newly created end mill.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.CreateChamfer(System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Creates a chamfer end mill.
            </summary>
      <param name="diameter">The cutting diameter</param>
      <param name="tipDiameter">The tip diameter</param>
      <param name="fluteLength">The flute length</param>
      <param name="shaftLength">The shaft length</param>
      <param name="number">Then CNC machine tool number</param>
      <returns>The newly created end mill.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.CreateTapered(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Creates a tapered end mill.
            </summary>
      <param name="diameter">The cutting diameter</param>
      <param name="cornerRadius">The corner radius</param>
      <param name="taperAngle">The taper angle in radians</param>
      <param name="fluteLength">The flute length</param>
      <param name="shaftLength">The shaft length</param>
      <param name="number">Then CNC machine tool number</param>
      <returns>The newly created end mill.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Generic APT-like cutter constructor.
            <para><img src="apt.png" /></para></summary>
      <param name="d">The cutting diameter</param>
      <param name="alpha">The alpha angle in radians</param>
      <param name="r">The corner radius</param>
      <param name="beta">The taper angle in radians</param>
      <param name="h">The flute length</param>
      <param name="shaftLength">The shaft length</param>
      <param name="number">The CNC machine tool number</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.Clone">
      <summary>
            Creates a deep copy of this end mill.
            </summary>
      <returns>The new end mill object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.IsFlat">
      <summary>
            Tells if the end mill is of flat type.
            </summary>
      <returns>True if the end mill is flat, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.IsBall">
      <summary>
            Tells if the end mill is of ball type.
            </summary>
      <returns>True if the end mill is ball, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.IsBull">
      <summary>
            Tells if the end mill is of bull nose type.
            </summary>
      <returns>True if the end mill is bull, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.IsDrill">
      <summary>
            Tells if the end mill is of drill type.
            </summary>
      <returns>True if the end mill is drill, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.IsChamfer">
      <summary>
            Tells if the end mill is of chamfer type.
            </summary>
      <returns>True if the end mill is chamfer, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.IsTapered">
      <summary>
            Tells if the end mill is of tapered type.
            </summary>
      <returns>True if the end mill is tapered, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.AddToScene(devDept.Eyeshot.Design)">
      <summary>
            Adds a visual representation of this end mill to the scene.
            </summary>
      <param name="design">The design object</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.EndMill.GetVisualRep">
      <summary>
            Returns a <see cref="T:devDept.Eyeshot.Entities.Mesh" /> representing this end mill.
            </summary>
      <returns>A Mesh object.</returns>
    </member>
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Milling.EndMill.IsInsideSweep(devDept.Eyeshot.Milling.SimulationStock.SweepParams@,System.Double,System.Double,System.Double,System.Double@,System.Boolean@)" -->
    <member name="T:devDept.Eyeshot.Milling.Tool">
      <summary>
            Tool (end mill + holder) class definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Tool.CollisionRadius">
      <summary>
            Gets or sets the radius of the collision cylinder. Zero to disable. 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Tool.HolderProfile">
      <summary>
            Gets or sets the holder profile, an array of 2D points that represent the end mill holder profile without the points on the rotating (Y) axis.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Tool.HolderColor">
      <summary>
            Gets or sets the color of the end mill holder.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Tool.#ctor(System.Double,System.Double,System.Int32)">
      <summary>
            Default holder profile (in mm) constructor.
            </summary>
      <param name="diameter">The end mill cutting diameter</param>
      <param name="cornerRadius">The end mill corner radius</param>
      <param name="number">The CNC machine tool number</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Tool.#ctor(System.Double,System.Double,devDept.Geometry.Point2D[],System.Int32)">
      <summary>
            Standard constructor.
            </summary>
      <param name="diameter">The end mill cutting diameter</param>
      <param name="cornerRadius">The end mill corner radius</param>
      <param name="holderProfile">An array of 2D points that represent the end mill holder profile</param>
      <param name="number">The CNC machine tool number</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Tool.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Default holder profile (in mm) and lengths constructor.
            </summary>
      <param name="diameter">The end mill cutting diameter</param>
      <param name="cornerRadius">The end mill corner radius</param>
      <param name="fluteLength">The end mill flute length</param>
      <param name="shaftLength">The end mill shaft length</param>
      <param name="number">Then CNC machine tool number</param>
      <param name="holderProfile">An array of 2D points that represent the end mill holder profile</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Tool.#ctor(System.Double,System.Double,System.Double,System.Double,devDept.Geometry.Point2D[],System.Int32)">
      <summary>
            End mill lengths constructor.
            </summary>
      <param name="diameter">The end mill cutting diameter</param>
      <param name="cornerRadius">The end mill corner radius</param>
      <param name="fluteLength">The end mill flute length</param>
      <param name="shaftLength">The end mill shaft length</param>
      <param name="holderProfile">An array of 2D points that represent the end mill holder profile</param>
      <param name="number">Then CNC machine tool number</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Tool.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
      <summary>
            Generic APT-like, default holder profile (in mm) and lengths constructor.
            <para><img src="apt.png" /></para></summary>
      <param name="d">The cutting diameter</param>
      <param name="alpha">The alpha angle in radians</param>
      <param name="r">The corner radius</param>
      <param name="beta">The taper angle in radians</param>
      <param name="h">The flute length</param>
      <param name="shaftLength">The end mill shaft length</param>
      <param name="number">Then CNC machine tool number</param>
      <param name="holderProfile">An array of 2D points that represent the end mill holder profile</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Tool.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,devDept.Geometry.Point2D[],System.Int32)">
      <summary>
            Generic APT-like lengths constructor.
            <para><img src="apt.png" /></para></summary>
      <param name="d">The cutting diameter</param>
      <param name="alpha">The alpha angle in radians</param>
      <param name="r">The corner radius</param>
      <param name="beta">The taper angle in radians</param>
      <param name="h">The flute length</param>
      <param name="shaftLength">The end mill shaft length</param>
      <param name="holderProfile">An array of 2D points that represent the end mill holder profile</param>
      <param name="number">Then CNC machine tool number</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Tool.Clone">
      <summary>
            Creates a deep copy of this tool.
            </summary>
      <returns>The new tool object.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Clearing2D">
      <summary>
            2D clearing class definition.
            </summary>
      <remarks>If the <see cref="P:devDept.Eyeshot.Milling.Setup.Stock">stock</see> is defined, the computation takes it in account.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Clearing2D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry2D,devDept.Geometry.Interval,System.Double,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="zRange">The machining Z range</param>
      <param name="stepOver">The step over</param>
      <param name="stepDown">The step down</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Face2D">
      <summary>
            2D facing (to prepare raw stock for machining) class definition.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Face2D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.GeometryBase,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="zHeight">The Z height</param>
      <param name="stepOver">The step over</param>
      <param name="angleInRadians">The pass angle in radians</param>
      <param name="verticalLeadAmount">The vertical lead distance</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Face2D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.GeometryBase,System.Double,System.Double,System.Double)">
      <summary>
            Max geometry Z constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="stepOver">The step over</param>
      <param name="angleInRadians">The pass angle in radians</param>
      <param name="verticalLeadAmount">The vertical lead distance</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Contour2D">
      <summary>
            2D contour class definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Contour2D.OrderByDepth">
      <summary>
            When true, the passes are ordered top down.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Contour2D.EntryPoints">
      <summary>
            Gets or sets the array of entry points.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Contour2D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry2D,devDept.Geometry.Interval,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="zRange">The machining Z range</param>
      <param name="stepDown">The step down</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Pocket2D">
      <summary>
            2D pocket class definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Pocket2D.OrderByDepth">
      <summary>
            When true, the passes are ordered top down.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Pocket2D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry2D,devDept.Geometry.Interval,System.Double,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="zRange">The machining Z range</param>
      <param name="stepDown">The step down</param>
      <param name="stepOver">The step over</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Pocket2D.GetRawPass(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
      <summary>
            Computes the polygonal regions representing the area to be pocketed.
            </summary>
      <param name="worker">
      </param>
      <param name="doWorkEventArgs">
      </param>
      <returns>The resulting array of polygonal regions.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Parallel2D">
      <summary>
            2D parallel class definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Parallel2D.OrderByDepth">
      <summary>
            When true, the passes are ordered top down.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Parallel2D.angle">
      <summary>
            Pass angle in radians, zero means along X axis.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Parallel2D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry2D,System.Double,System.Double,devDept.Geometry.Interval,System.Double)">
      <summary>
            Range Z constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="stepOver">The step over</param>
      <param name="angleInRad">The passes angle in radians</param>
      <param name="zRange">The machining Z range</param>
      <param name="stepDown">The step down</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Parallel2D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry2D,System.Double,System.Double,System.Double)">
      <summary>
            Height Z constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="stepOver">The step over</param>
      <param name="angleInRad">The passes angle in radians</param>
      <param name="zHeight">The Z height</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Stock">
      <summary>
            Machining stock class definition.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.#ctor(devDept.Geometry.Entities.GRegion)">
      <summary>
            Constructor with primitive.
            </summary>
      <param name="primitive">The primitive object.</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.#ctor(devDept.Geometry.Entities.GRegion,devDept.Geometry.Interval)">
      <summary>
            Primitive and Z range constructor.
            </summary>
      <param name="primitive">The primitive object.</param>
      <param name="zRange">The stock Z range</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.#ctor(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Interval)">
      <summary>
            Contour and Z range constructor.
            </summary>
      <param name="outer">The outer contour</param>
      <param name="zRange">The stock Z range</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.#ctor(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Plane,devDept.Geometry.Interval)">
      <summary>
            Contour, plane and Z range constructor.
            </summary>
      <param name="outer">The outer contour</param>
      <param name="pln">The plane</param>
      <param name="zRange">The stock Z range</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.Clone">
      <summary>
            Creates a deep copy of this stock.
            </summary>
      <returns>The new stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Interval)">
      <summary>
            List of nested contours and Z range constructor.
            </summary>
      <param name="outer">The list of nested contours</param>
      <param name="zRange">The stock Z range</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Plane,devDept.Geometry.Interval)">
      <summary>
            List of nested contours, plane and Z range constructor.
            </summary>
      <param name="outer">The list of nested contours</param>
      <param name="pln">The plane</param>
      <param name="zRange">The stock Z range</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Geometry.Plane,System.Double,System.Double)">
      <summary>
            Entity list constructor.
            </summary>
      <param name="entList">A list of entities implementing <see cref="T:devDept.Eyeshot.Entities.IFace" /></param>
      <param name="pln">The plane</param>
      <param name="deviation">The maximum deviation, zero for current tessellation.</param>
      <param name="angleInRadians">The maximum angular deflection, ignored when zero.</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.#ctor(devDept.Eyeshot.Workspace,devDept.Geometry.Plane,System.Double,System.Double)">
      <summary>
            Workspace constructor. A value of 0 for deviation and angleInRadians preserves the current tessellation (must be available).
            </summary>
      <param name="workspace">The workspace</param>
      <param name="pln">The plane</param>
      <param name="deviation">The maximum deviation, zero for current tessellation.</param>
      <param name="angleInRadians">The maximum angular deflection, ignored when zero.</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.#ctor(devDept.Eyeshot.Entities.BlockReference,devDept.Eyeshot.BlockKeyedCollection,devDept.Geometry.Plane,System.Double,System.Double)">
      <summary>
            BlockReference constructor.
            </summary>
      <param name="deviation">The tessellation tolerance, zero for existing tessellation (may not be available).</param>
      <param name="angleInRadians">The tessellation maximum angular deflection, ignored when zero.</param>
      <param name="br">The block reference</param>
      <param name="pln">The plane</param>
      <param name="blocks">The blocks collection</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.#ctor(devDept.Eyeshot.Entities.Mesh,devDept.Geometry.Plane)">
      <summary>
            Mesh constructor.
            </summary>
      <param name="mesh">The mesh.</param>
      <param name="pln">The plane.</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateBox(System.Double,System.Double,System.Double)">
      <summary>
            Creates a stock with the shape of a box.
            </summary>
      <param name="width">The box width</param>
      <param name="depth">The box depth</param>
      <param name="height">The box height</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateBox(devDept.Geometry.Plane,System.Double,System.Double,System.Double)">
      <summary>
            Creates a stock with the shape of a box.
            </summary>
      <param name="pln">The sketch plane</param>
      <param name="width">The box width</param>
      <param name="depth">The box depth</param>
      <param name="height">The box height</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateBox(System.Double,System.Double,devDept.Geometry.Interval)">
      <summary>
            Creates a stock with the shape of a box.
            </summary>
      <param name="width">The box width</param>
      <param name="depth">The box depth</param>
      <param name="zRange">The stock Z range</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateBox(devDept.Geometry.Plane,System.Double,System.Double,devDept.Geometry.Interval)">
      <summary>
            Creates a stock with the shape of a box.
            </summary>
      <param name="pln">The sketch plane</param>
      <param name="width">The box width</param>
      <param name="depth">The box depth</param>
      <param name="zRange">The stock Z range</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateBox(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a stock with the shape of a box.
            </summary>
      <param name="x">Position along the X axis</param>
      <param name="y">Position along the Y axis</param>
      <param name="width">The box width</param>
      <param name="depth">The box depth</param>
      <param name="height">The box height, zero on top</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateBox(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a stock with the shape of a box.
            </summary>
      <param name="pln">The sketch plane</param>
      <param name="x">Position along the X axis</param>
      <param name="y">Position along the Y axis</param>
      <param name="width">The box width</param>
      <param name="depth">The box depth</param>
      <param name="height">The box height, zero on top</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateBox(System.Double,System.Double,System.Double,System.Double,devDept.Geometry.Interval)">
      <summary>
            Creates a stock with the shape of a box.
            </summary>
      <param name="x">Position along the X axis</param>
      <param name="y">Position along the Y axis</param>
      <param name="width">The box width</param>
      <param name="depth">The box depth</param>
      <param name="zRange">The stock Z range</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateBox(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double,devDept.Geometry.Interval)">
      <summary>
            Creates a stock with the shape of a box.
            </summary>
      <param name="pln">The sketch plane</param>
      <param name="x">Position along the X axis</param>
      <param name="y">Position along the Y axis</param>
      <param name="width">The box width</param>
      <param name="depth">The box depth</param>
      <param name="zRange">The stock Z range</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateCylinder(System.Double,System.Double)">
      <summary>
            Creates a stock with the shape of a vertical cylinder.
            </summary>
      <param name="radius">The cylinder radius</param>
      <param name="zRange">The cylinder height, zero on top</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateCylinder(devDept.Geometry.Plane,System.Double,System.Double)">
      <summary>
            Creates a stock with the shape of a vertical cylinder.
            </summary>
      <param name="pln">The sketch plane</param>
      <param name="radius">The cylinder radius</param>
      <param name="zRange">The cylinder height, zero on top</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateCylinder(System.Double,devDept.Geometry.Interval)">
      <summary>
            Creates a stock with the shape of a vertical cylinder.
            </summary>
      <param name="radius">The cylinder radius</param>
      <param name="zRange">The cylinder Z range</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateCylinder(devDept.Geometry.Plane,System.Double,devDept.Geometry.Interval)">
      <summary>
            Creates a stock with the shape of a vertical cylinder.
            </summary>
      <param name="pln">The sketch plane</param>
      <param name="radius">The cylinder radius</param>
      <param name="zRange">The cylinder Z range</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateCylinder(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a stock with the shape of a vertical cylinder.
            </summary>
      <param name="x">Position along the X axis</param>
      <param name="y">Position along the Y axis</param>
      <param name="radius">The cylinder radius</param>
      <param name="zRange">The cylinder height, zero on top</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateCylinder(devDept.Geometry.Plane,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Creates a stock with the shape of a vertical cylinder.
            </summary>
      <param name="pln">The sketch plane</param>
      <param name="x">Position along the X axis</param>
      <param name="y">Position along the Y axis</param>
      <param name="radius">The cylinder radius</param>
      <param name="zRange">The cylinder height, zero on top</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateCylinder(System.Double,System.Double,System.Double,devDept.Geometry.Interval)">
      <summary>
            Creates a stock with the shape of a vertical cylinder.
            </summary>
      <param name="x">Position along the X axis</param>
      <param name="y">Position along the Y axis</param>
      <param name="radius">The cylinder radius</param>
      <param name="zRange">The cylinder Z range</param>
      <returns>A stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.CreateCylinder(devDept.Geometry.Plane,System.Double,System.Double,System.Double,devDept.Geometry.Interval)">
      <summary>
            Creates a stock with the shape of a vertical cylinder.
            </summary>
      <param name="pln">The sketch plane</param>
      <param name="x">Position along the X axis</param>
      <param name="y">Position along the Y axis</param>
      <param name="radius">The cylinder radius</param>
      <param name="zRange">The cylinder Z range</param>
      <returns>A stock object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Stock.RangeZ">
      <summary>
            Gets or sets the stock Z range.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Stock.Normals">
      <summary>
            Gets the stock normals.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.GetSizeOnPlane(devDept.Geometry.Plane,devDept.Geometry.Point2D@,devDept.Geometry.Point2D@)">
      <summary>
            Computes exact bounding rectangle for piecewise linear or full circle outer contours, approximated bounding rectangle on tessellation for all other shapes.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.GetSimulationStock(System.Int32)">
      <summary>
            Creates a simulation stock entity based on this stock.
            </summary>
      <param name="gridStep">The z-map grid vertex count</param>
      <returns>A simulation stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.GetSimulationStock(System.Double)">
      <summary>
            Creates a simulation stock entity based on this stock.
            </summary>
      <param name="gridStep">The z-map grid step</param>
      <returns>A simulation stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.HasBoundary">
      <summary>
            Returns true if the stock is not a simple box. Currently supports CompositeCurve of 4 lines and rectangular LinearPath.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.#ctor(devDept.Serialization.StockSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.StockSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.StockSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Stock.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.SimulationStock">
      <summary>
            Simulation stock class definition. 
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.SimulationStock.Clone">
      <summary>
            Creates a deep copy of this simulation stock.
            </summary>
      <returns>The new simulation stock object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.SimulationStock.Cut(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.CompileParams)">
      <summary>
            Cuts a linear motion in the stock.
            </summary>
      <param name="startPos">Cutter start position</param>
      <param name="endPos">Cutter end position</param>
      <param name="endMill">The cutter</param>
      <param name="data">The <see cref="T:devDept.Eyeshot.CompileParams" /> data structure. When null, no optimization or compilation is done in real time.</param>
      <seealso cref="M:devDept.Eyeshot.Milling.SimulationStock.Optimize(devDept.Eyeshot.CompileParams)" />
    </member>
    <member name="M:devDept.Eyeshot.Milling.SimulationStock.Cut(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Eyeshot.Milling.EndMill,System.Boolean,System.Boolean,devDept.Eyeshot.CompileParams)">
      <summary>
            Cuts a linear motion in the stock.
            </summary>
      <param name="startPos">Cutter start position</param>
      <param name="endPos">Cutter end position</param>
      <param name="endMill">The cutter</param>
      <param name="computeDiagonals">If true, update the face diagonals direction to suit the geometry</param>
      <param name="computeNormals">If true, update normals in real time</param>
      <param name="data">The <see cref="T:devDept.Eyeshot.CompileParams" /> data structure. When null, no compilation is done in real time.</param>
      <seealso cref="M:devDept.Eyeshot.Milling.SimulationStock.Optimize(devDept.Eyeshot.CompileParams)" />
    </member>
    <member name="M:devDept.Eyeshot.Milling.SimulationStock.Cut(devDept.Geometry.Point3D[],devDept.Eyeshot.Milling.EndMill,System.Int32,System.Int32)">
      <summary>
            Cut the stock based on the specified tool path.
            </summary>
      <param name="points">Tool path points (polygonal chain)</param>
      <param name="tool">The cutter</param>
      <param name="from">Index of the start point, inclusive (by default the first in the array)</param>
      <param name="to">Index of the last point, exclusive (by default the last in the array)</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.SimulationStock.UpdateNormals">
      <summary>
            Updates top face normals.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.SimulationStock.Optimize(devDept.Eyeshot.CompileParams)">
      <summary>
            Improves the visual aspect of the simulation stock after many cut operations.
            </summary>
      <param name="cp">Compile parameters. When defined, <see cref="M:devDept.Eyeshot.Entities.Entity.Compile(devDept.Eyeshot.CompileParams)">compilation</see> is performed as well.</param>
      <seealso cref="M:devDept.Eyeshot.Milling.SimulationStock.Cut(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.CompileParams)" />
    </member>
    <member name="M:devDept.Eyeshot.Milling.SimulationStock.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.SimulationStock.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.MachiningPlane">
      <summary>
            Machining plane entity definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.MachiningPlane.Units">
      <summary>
            Gets or sets the machining plane units.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.MachiningPlane.#ctor(System.Double,System.String,devDept.Eyeshot.Entities.Region,System.Drawing.Color,System.Drawing.Font,System.Drawing.ContentAlignment)">
      <summary>
            Region constructor.
            </summary>
      <param name="zHeight">The machining plane Z height</param>
      <param name="name">The machining plane name</param>
      <param name="reg">The entity from which the box min and box max properties are derived</param>
      <param name="color">The plane color</param>
      <param name="font">The text font</param>
      <param name="alignment">The label's tab alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.MachiningPlane.#ctor(System.Double,System.String,devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Drawing.Color,System.Drawing.Font,System.Drawing.ContentAlignment)">
      <summary>
            Bounding box constructor.
            </summary>
      <param name="zHeight">The machining plane Z height</param>
      <param name="name">The machining plane name</param>
      <param name="min">The bounding box min value</param>
      <param name="max">The bounding box max value</param>
      <param name="color">The plane color</param>
      <param name="font">The text font</param>
      <param name="alignment">The label's tab alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.MachiningPlane.Clone">
      <summary>
            Creates a deep copy of this machining plane entity.
            </summary>
      <returns>The new machining plane object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.MachiningPlane.ConvertToMesh">
      <summary>
            Convert this machining plane into a Mesh object.
            </summary>
      <returns>The resulting <see cref="T:devDept.Eyeshot.Milling.MachiningPlane" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.MachiningPlane.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.MachiningPlane.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.LeadBase">
      <summary>
            Base class for lead and ramp. Holds a set of
            points which can be rotated and translated to be
            tangent to a given stroke.
            </summary>
      <seealso cref="T:devDept.Eyeshot.Milling.Ramp" />
      <seealso cref="T:devDept.Eyeshot.Milling.Lead" />
    </member>
    <member name="F:devDept.Eyeshot.Milling.LeadBase.Feed">
      <summary>
            The feed rate for lead motions, i.e. the velocity at which the cutter is
            advanced against the workpiece. Please note that when this field is not valid
            (null), one tenth of the machining feed will be used by default. The feed
            specified in the <see cref="F:devDept.Eyeshot.Milling.LeadBase.Motions" /> array will in any case be overwritten.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.LeadBase.Motions">
      <summary>
            List ot lead motions (see <see cref="T:devDept.Eyeshot.Entities.Toolpath.Motion" />). The shape of the lead
            (i.e., the path followed by the tool to approach the stroke) is defined by this
            list of motions. All motions in the list are considered as a chain, and they
            are added to the toolpath one after the other: therefore, the end point of one
            motions should be (approximately) equal to the start point of the following
            motion.
            </summary>
      <remarks>
        <para>All motions are defined in the XY plane, where the origin corresponds to
            the lead point and the X-axis corresponds to the stroke tangent at the lead
            point. A lead-in or a ramp will therefore start from a generic point in the
            plane and end up in the origin, while a lead-out motion will start from the
            origin and end up somewhere else in the plane. For example, if we wanted to
            define a straight lead-in of length 10 that is always perpendicular to the
            stroke, we would use a linear motion that goes from (0, 10) to (0, 0). If we
            wanted a similar lead-out, we would do the same but swapping start and end
            points: from (0,0) to (0, 10).</para>
        <para>When inheriting from <see cref="T:devDept.Eyeshot.Milling.LeadBase" />, one should always set the
            list of motions. This can be done either in the constructor or in the <see cref="M:devDept.Eyeshot.Milling.LeadBase.Init(System.Double)" />
            method. Initializing the motions in the constructor will result in
            a static lead, that never changes shape: it is either a lead-in or a lead-out,
            or a ramp that always has the same height. On the contrary, initializing the
            motions in the <see cref="M:devDept.Eyeshot.Milling.LeadBase.Init(System.Double)" /> method permits to change the lead based on the
            required parameters (e.g., lead-in or lead-out, ramp layer height).</para>
        <para>Please note that the properties <see cref="P:devDept.Eyeshot.Entities.Toolpath.Motion.Feed" /> and
            <see cref="P:devDept.Eyeshot.Entities.Toolpath.Motion.Speed" /> of motions will be ignored and overwritten. To set these
            properties, please use <see cref="F:devDept.Eyeshot.Milling.LeadBase.Feed">LeadBase.Feed</see> or
            <see cref="P:devDept.Eyeshot.Milling.Machining.Feed">Machining.Feed</see> for the feed rate,
            <see cref="P:devDept.Eyeshot.Milling.Machining.Speed">Machining.Speed</see> for the speed. </para>
      </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Milling.LeadBase.InterPoints">
      <summary>
            Points used internally to compute intersections between the lead and the
            strokes. An intelligent choice of <see cref="P:devDept.Eyeshot.Milling.LeadBase.InterPoints" /> can greatly reduce
            the computation time required to attach the leads to the strokes. In general:
            the less points the faster the process is, the more points the more precise the
            algorithm is in attaching the leads. In most cases, a lollipop approximation
            (that can be achieved by invoking <see cref="M:devDept.Eyeshot.Milling.LeadBase.BuildAsLollipop(System.Double,System.Double)" />) is enough to
            obtain satisfactory results.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.LeadBase.Init(System.Double)">
      <summary>
            Initializes the lead. Child classes may override this method to initialize
            the <see cref="F:devDept.Eyeshot.Milling.LeadBase.Motions" /> array and/or the <see cref="P:devDept.Eyeshot.Milling.LeadBase.InterPoints" /> array.
            </summary>
      <param name="tolerance">Tolerance used to approximate the lead.</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.LeadBase.BuildAsLollipop(System.Double,System.Double)">
      <summary>
            Approximate the lead as a lollipop, generating the intersection points using the
            specified radius and distance. A lollipop is a segment connected to a circle,
            which can be used to compute intersections more quickly. For example, a helix
            ramp can be approximated to a circle of the same radius. The lollipop circle is
            made up of 16 segments.
            </summary>
      <param name="radius">Radius of the lollipop.</param>
      <param name="distance">Distance from the contour to the lower point of the
            circle.</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Ramp">
      <summary>
            Base class for ramp movements, vertical movements between Z levels, defining how the 
            end mill should ramp into the stock. A ramp is a movement that the end mill has to perform 
            while descending into the stock, before leading in and cutting the material. A ramp 
            movement (if present) always comes before the cut, and never after.
            </summary>
      <seealso cref="T:devDept.Eyeshot.Milling.PlungeRamp" />
      <seealso cref="T:devDept.Eyeshot.Milling.HelixRamp" />
    </member>
    <member name="F:devDept.Eyeshot.Milling.Ramp.RadialClearance">
      <summary>
            Not yet supported.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Ramp.ClearanceHeight">
      <summary>
            The clearance height is the height reached by the tool with rapid movements.
            The ramp will be built ensuring that a distance in Z equal to the clearance height is
            kept between the start point of the ramp and the top of the remaining material.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Ramp.#ctor(System.Double)">
      <summary>
            Ramp standard constructor.
            </summary>
      <param name="clearanceHeight">The height of ramp over the current stock level</param>
      <seealso cref="F:devDept.Eyeshot.Milling.Ramp.ClearanceHeight" />
    </member>
    <member name="M:devDept.Eyeshot.Milling.Ramp.Init(System.Double,System.Double)">
      <summary>
            Update the ramp based on the current cut direction and layer height (height of the material which has to be
            milled). The ramp will be updated by calling this method multiple times during the ramp addition process,
            after the toolpath has been computed. Child classes should override this method to update the <see cref="F:devDept.Eyeshot.Milling.LeadBase.Motions" />
            array and (when needed) the InterPoints arrays based on the tolerance and the layer height.
            </summary>
      <param name="tolerance">
            Tolerance to build the ramp; see <see cref="P:devDept.Eyeshot.Milling.Machining.Tolerance" />.
            </param>
      <param name="layerHeight">
            Height of the current level (part of the stock which has to be cut). The total height of the
            ramp should be equal to layerHeight + clearanceHeight.
            </param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.PlungeRamp">
      <summary>
            Plunge ramp movement definition. A plunge ramp is a vertical
            straight movement which digs into the stock directly.
            </summary>
      <seealso cref="T:devDept.Eyeshot.Milling.Ramp" />
    </member>
    <member name="M:devDept.Eyeshot.Milling.PlungeRamp.#ctor(System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="clearanceHeight">The height of ramp over the current stock level.</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.HelixRamp">
      <summary>
            Helix ramp movement definition. A helix ramp is a helical movement
            which digs into the stock gradually with circular motions.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.HelixRamp.#ctor(System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="radius">The helix radius</param>
      <param name="angleInRad">The helix angle in radians</param>
      <param name="clearanceHeight">The height of ramp over the current stock level</param>
      <param name="reverseTwist">Twist direction</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Lead">
      <summary>
            Represents a lead (lead-in or lead-out), defining the movement
            of the tool as it approaches or leaves the stock. A lead-in
            is the motion of the tool before beginning a cutting move, while
            a lead-out is the motion of the tool as it ends the cut and leaves
            the material.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Lead.#ctor">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Lead.Init(System.Double,System.Boolean)">
      <summary>
            Invoked internally during the lead adding process to update the lead. The Init
            method should be overridden by child classes to update <see cref="F:devDept.Eyeshot.Milling.LeadBase.Motions" /> and (when needed) <see cref="P:devDept.Eyeshot.Milling.LeadBase.InterPoints" />
            arrays based on the tolerance and the lead type (lead-in or lead-out).
            </summary>
      <param name="tolerance">Tolerance to generate the lead, see <see cref="P:devDept.Eyeshot.Milling.Machining.Tolerance" />.</param>
      <param name="leadIn">True if the lead is a lead-in and will be used to approach
            the path, false if the lead is a lead-out and will serve to exit the
            path.</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.StraightLead">
      <summary>
            Straight lead (perpendicular or tangent). Defines a lead
            with a single segment, which can be perpendicular or
            tangent to the cutting motion.
            </summary>
      <seealso cref="T:devDept.Eyeshot.Milling.Lead" />
    </member>
    <member name="M:devDept.Eyeshot.Milling.StraightLead.#ctor(System.Double,System.Boolean)">
      <summary>
            Straight lead standard constructor.
            </summary>
      <param name="length">Length of the lead</param>
      <param name="perp">
            When true, the lead will be perpendicular to the stroke,
            when false it will be tangent.
            </param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.CircularLead">
      <summary>
            Circular lead. Defines a circular motion with a specified
            radius to approach or leave the stock.
            </summary>
      <seealso cref="T:devDept.Eyeshot.Milling.Lead" />
    </member>
    <member name="M:devDept.Eyeshot.Milling.CircularLead.#ctor(System.Double)">
      <summary>
            Circular lead standard constructor.
            </summary>
      <param name="radius">Lead radius.</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.cutDirectionType">
      <summary>
            Cut direction type definition.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.cutDirectionType.Climb">
      <summary>
            Climb milling.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.cutDirectionType.Conventional">
      <summary>
            Conventional milling.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.cutDirectionType.Mixed">
      <summary>
            A combination of the two milling directions within the same toolpath.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Setup">
      <summary>
            Machining setup class definition. Covers 2-axis and 3-axis milling.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Setup.Transformation">
      <summary>
            Gets work plane transformation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Setup.Units">
      <summary>
            Gets or sets setup units. Affect <see cref="P:devDept.Eyeshot.Milling.Machining.Tolerance" /> default values.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Setup.Stock">
      <summary>
            Gets or sets the setup stock.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Setup.Name">
      <summary>
            Gets or sets the setup name.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Setup.#ctor(System.String,devDept.Geometry.linearUnitsType,devDept.Geometry.Plane)">
      <summary>
            Geometry only constructor.
            </summary>
      <param name="name">The setup name</param>
      <param name="units">The setup units (Affects <see cref="P:devDept.Eyeshot.Milling.Machining.Tolerance" /> default values)</param>
      <param name="workPln">The setup work plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Setup.#ctor(System.String,devDept.Geometry.linearUnitsType,devDept.Geometry.Plane,devDept.Eyeshot.Milling.Stock)">
      <summary>
            Stock constructor.
            </summary>
      <param name="name">The setup name</param>
      <param name="units">The setup units (Affects <see cref="P:devDept.Eyeshot.Milling.Machining.Tolerance" /> default values)</param>
      <param name="workPln">The setup work plane</param>
      <param name="stock">The setup stock</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Setup.AddUserInterfaceElementTo(devDept.Eyeshot.Workspace,System.Int32)">
      <summary>
            Adds a <see cref="T:devDept.Eyeshot.OriginSymbol" /> representing the work plane of this setup to the specified workspace.
            </summary>
      <param name="ws">The manufacture workspace</param>
      <param name="size">The symbol ball size in pixels</param>
      <returns>The element index in the <see cref="P:devDept.Eyeshot.Viewport.OriginSymbols" /> array.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Setup.WorldToWork(System.Double)">
      <summary>
            Converts a Z height from the World frame to Work one.
            </summary>
      <param name="zh">The input Z value</param>
      <returns>The output Z value.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Setup.WorkToWorld(System.Double)">
      <summary>
            Converts a Z height from the Work frame to World one.
            </summary>
      <param name="zh">The input Z value</param>
      <returns>The output Z value.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Machining">
      <summary>
            Machining class definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.CutDirectionMode">
      <summary>
            Gets or sets direction mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.ComputingPassesText">
      <summary>
            Gets or sets the "Computing passes..." text string.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining.cutter">
      <summary>
            End mill definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.Tool">
      <summary>
            Gets the machining tool.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining.tessellationColor">
      <summary>
            The geometry tessellation color.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining.geometry">
      <summary>
            The machining geometry (whether 2D or 3D).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.Tessellation">
      <summary>
            Gets the machining tessellated geometry.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.ClearancePlane">
      <summary>
            Gets the machining clearance plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.RetractPlane">
      <summary>
            Gets the machining retract plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.TopPlane">
      <summary>
            Gets the machining top plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.BottomPlane">
      <summary>
            Gets the machining bottom plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.Result">
      <summary>
            Gets resulting toolpath.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.RadialStockToLeave">
      <summary>
            Gets or sets the radial (wall) stock to leave.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining.stepOver">
      <summary>
            Step over.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.StepOver">
      <summary>
            Gets step over value.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.StepDown">
      <summary>
            Gets step down value.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining.stepDown">
      <summary>
            Step down.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining.zRange">
      <summary>
            Z axis range.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.RetractHeight">
      <summary>
            Gets or sets the Retract height.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.ClearanceHeight">
      <summary>
            Gets or sets the clearance height.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.Speed">
      <summary>
            Gets or sets the spindle speed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.Feed">
      <summary>
            Gets or sets the feed rate.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.LeadIn">
      <summary>
            Gets or sets the lead-in.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.LeadOut">
      <summary>
            Gets or sets the lead-out.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.LeadInOpen">
      <summary>
            Gets or sets the lead-in for open contours.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.LeadOutOpen">
      <summary>
            Gets or sets the lead-out for open contours.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.Ramp">
      <summary>
            Gets or sets the ramp type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining.tolerance">
      <summary>
            Machining tolerance. Affects the final toolpath accuracy.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining.Tolerance">
      <summary>
        <para>Get or set machining tolerance. Affects the final toolpath accuracy.
            </para>
        <para>Reasonable values can be 0.1 mm for roughing and 0.01 mm for finishing for
            a design with metric units.</para>
      </summary>
      <remarks>
            In 2D machining, affects only the <see cref="P:devDept.Eyeshot.Milling.Machining.Ramp" /> accuracy.
            </remarks>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining.pocketRamp">
      <summary>
            Ramp-in for closed pocket contours. If null, the user-defined
            ramp will be used instead.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining.openContoursRamp">
      <summary>
            Ramp-in for open contours.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining.fallbackRamp">
      <summary>
            Default fallback ramp. The fallback ramp is used when the appropriate
            ramp fails to be placed due to stroke intersections.
            </summary>
      <seealso cref="!:AddLeads" />
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining.ComputingOffsetsText">
      <summary>
            Gets or sets the "Computing offsets..." text string.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.GeometryBase)">
      <summary>
            Standard constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.GeometryBase,devDept.Geometry.Interval,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="zRange">The machining Z range</param>
      <param name="stepDown">The step down</param>
      <param name="geometry">The machining geometry</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetOuterRegion(devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Entities.Region,devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,System.Boolean)">
      <summary>
            Returns a regenerated stock region or the geometry bounding rectangle (with offset by cutter radius if requested).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetOuterRegion(devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Entities.Region,devDept.Eyeshot.Entities.Region,devDept.Eyeshot.Milling.GeometryBase,devDept.Eyeshot.Milling.Setup)">
      <summary>
            Gets the outer region following this order boundary, stock, geometry bounding rectangle.
            </summary>
      <param name="cutter">The cutter</param>
      <param name="boundary">The boundary, can be null/Nothing</param>
      <param name="stock">The boundary, can be null/Nothing</param>
      <param name="geometry">The machining geometry</param>
      <returns>The resulting region.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetRetractPlane(devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String)">
      <summary>
            Gets a visual representation of the Retract machining plane.
            </summary>
      <param name="units">The Z value units</param>
      <param name="name">The plane name</param>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningPlane" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetClearancePlane(devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String)">
      <summary>
            Gets a visual representation of the Clearance machining plane.
            </summary>
      <param name="units">The Z value units</param>
      <param name="name">The plane name</param>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningPlane" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetBottomPlane(devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String)">
      <summary>
            Gets a visual representation of the Bottom machining plane.
            </summary>
      <param name="name">The plane name</param>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningPlane" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetTopPlane(devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String)">
      <summary>
            Gets a visual representation of the Top machining plane.
            </summary>
      <param name="name">The plane name</param>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningPlane" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetRetractPlane(System.String)">
      <summary>
            Gets a visual representation of the Retract machining plane.
            </summary>
      <param name="name">The plane name</param>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningPlane" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetRetractPlane(System.Drawing.Color,System.String)">
      <summary>
            Gets a visual representation of the Retract machining plane.
            </summary>
      <param name="color">The plane color</param>
      <param name="name">The plane name</param>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningPlane" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetClearancePlane(System.String)">
      <summary>
            Gets a visual representation of the Clearance machining plane.
            </summary>
      <param name="name">The plane name</param>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningPlane" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetClearancePlane(System.Drawing.Color,System.String)">
      <summary>
            Gets a visual representation of the Clearance machining plane.
            </summary>
      <param name="color">The plane color</param>
      <param name="name">The plane name</param>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningPlane" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetBottomPlane(System.String)">
      <summary>
            Gets a visual representation of the Bottom machining plane.
            </summary>
      <param name="name">The plane name</param>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningPlane" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetBottomPlane(System.Drawing.Color,System.String)">
      <summary>
            Gets a visual representation of the Bottom machining plane.
            </summary>
      <param name="color">The plane color</param>
      <param name="name">The plane name</param>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningPlane" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetTopPlane(System.String)">
      <summary>
            Gets a visual representation of the Top machining plane.
            </summary>
      <param name="name">The plane name</param>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningPlane" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetTopPlane(System.Drawing.Color,System.String)">
      <summary>
            Gets a visual representation of the Top machining plane.
            </summary>
      <param name="color">The plane color</param>
      <param name="name">The plane name</param>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningPlane" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetDefaultHelixRampRadius(devDept.Eyeshot.Milling.EndMill)">
      <summary>
            Computes the default helix ramp radius based on tool diameter.
            </summary>
      <param name="cutter">The cutter in use</param>
      <returns>The helix radius.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetDefaultRampClearanceHeight(devDept.Eyeshot.Milling.EndMill)">
      <summary>
            Computes the default ramp clearance height.
            </summary>
      <param name="cutter">The cutter in use</param>
      <returns>The resulting height.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetDefaultCircularLeadRadius(devDept.Eyeshot.Milling.EndMill)">
      <summary>
            Computes the default circular lead radius on tool diameter.
            </summary>
      <param name="cutter">The cutter in use</param>
      <returns>The helix center distance.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetDefaultStraightTangentLeadLength(devDept.Eyeshot.Milling.EndMill)">
      <summary>
            Computes the default ramp clearance height.
            </summary>
      <param name="cutter">The cutter in use</param>
      <returns>The clearance height.</returns>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining.DefaultHelixRampAngle">
      <summary>
            Default helix ramp angle.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.InitLeads">
      <summary>
            Update the leads (in and out) based on the current
            tolerance. Leads must be updated once before 
            computing the positions.
            </summary>
      <seealso cref="!:AddLeads" />
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.InitRamps(System.Double)">
      <summary>
            Update the ramps based on the current tolerance.
            Ramps should be updated once before
            computing the positions.
            </summary>
      <seealso cref="!:AddLeads" />
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetUnitsAbbreviation(devDept.Geometry.linearUnitsType)">
      <summary>
            Returns "mm" if the parameters is Millimeters, "in" otherwise.
            </summary>
      <returns>A string object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.AreEqualZ(System.Double,System.Double,System.Double)">
      <summary>
            Checks if two Z values are equal within a tolerance.
            </summary>
      <param name="a">First Z value</param>
      <param name="b">Second Z value</param>
      <param name="tol">The maximum acceptable difference between the two values</param>
      <returns>True if the two numbers can be considered equal, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining.GetTransformedBoundary(devDept.Eyeshot.Entities.Region,devDept.Eyeshot.Milling.Setup)">
      <summary>
            Returns a copy of the specified <see cref="T:devDept.Eyeshot.Entities.Region" /> transformed by setup inverse matrix.
            </summary>
      <param name="reg">The region</param>
      <returns>The transformed region object.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Machining3D">
      <summary>
            Base class for 3D machining operations.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining3D.ANG_THRESHOLD">
      <summary>
            If the angle between two segments is bigger than this, they are not considered collinear.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Machining3D.boundary">
      <summary>
            Tool containment region.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining3D.BoundaryOffset">
      <summary>
            Gets or sets tool containment region offset.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining3D.PreparingGeometryText">
      <summary>
            Gets or sets the "Preparing geometry..." text.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining3D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry3D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="endMill">The end mill</param>
      <param name="geometry">The machining geometry</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining3D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry3D,devDept.Geometry.Interval,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="endMill">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="zRange">The machining Z range</param>
      <param name="stepDown">The step down</param>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Machining3D.AxialStockToLeave">
      <summary>
            Gets or sets the axial (floor) stock to leave.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining3D.GetBoundary">
      <summary>
            Gets a visual representation of the machining boundary.
            </summary>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningBoundary" /> object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Machining3D.GetBoundary(System.Drawing.Color)">
      <summary>
            Gets a visual representation of the machining boundary.
            </summary>
      <param name="color">The boundary color</param>
      <returns>A <see cref="T:devDept.Eyeshot.Milling.MachiningBoundary" /> object.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Milling.MachiningBoundary">
      <summary>
            Machining boundary entity definition. A <see cref="T:devDept.Eyeshot.Entities.Region" /> with a thick and always on top edge drawing.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.MachiningBoundary.#ctor(devDept.Eyeshot.Entities.ICurve[])">
      <summary>
            Contours constructor.
            </summary>
      <param name="contours">The contours list</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.MachiningBoundary.#ctor(devDept.Geometry.Entities.IGCurve[])">
      <summary>
            Contours constructor.
            </summary>
      <param name="contours">The contours list</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.MachiningBoundary.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Plane)">
      <summary>
            Contours and plane constructor.
            </summary>
      <param name="contours">The array of nested contours</param>
      <param name="pln">The plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.MachiningBoundary.#ctor(System.Collections.Generic.IList{devDept.Geometry.Entities.IGCurve},devDept.Geometry.Plane)">
      <summary>
            Contours and plane constructor.
            </summary>
      <param name="contours">The array of nested contours</param>
      <param name="pln">The plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.MachiningBoundary.#ctor(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Plane)">
      <summary>
            Single contour and plane constructor.
            </summary>
      <param name="contours">The contour</param>
      <param name="pln">The plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.MachiningBoundary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.MachiningBoundary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Milling.GeometryBase">
      <summary>
            Base class for machining geometry.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.GeometryBase.GetBoxMin(devDept.Eyeshot.Milling.Setup)">
      <summary>
            Gets geometry bounding box minimum 2D point.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.GeometryBase.GetBoxMax(devDept.Eyeshot.Milling.Setup)">
      <summary>
            Gets geometry bounding box maximum 2D point.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.GeometryBase.GetBoxSize(devDept.Eyeshot.Milling.Setup)">
      <summary>
            Gets geometry bounding box size.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.GeometryBase.GetTessellation(devDept.Eyeshot.Milling.Setup,System.Drawing.Color)">
      <summary>
            Gets the actual machining geometry.
            </summary>
      <returns>An array of Entity objects.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Geometry2D">
      <summary>
            2D machining geometry definition.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry2D.#ctor(devDept.Eyeshot.Entities.ICurve,System.Double,System.Double)">
      <summary>
            Single curve constructor.
            </summary>
      <param name="geometry">The curve</param>
      <param name="deviation">The tessellation tolerance, zero for existing tessellation (may not be available).</param>
      <param name="angleInRadians">The tessellation maximum angular deflection. Ignored when zero.</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry2D.#ctor(devDept.Geometry.Entities.IGCurve,System.Double,System.Double)">
      <summary>
            Single primitive constructor.
            </summary>
      <param name="geometry">The primitive</param>
      <param name="deviation">The tessellation tolerance, zero for existing tessellation (may not be available).</param>
      <param name="angleInRadians">The tessellation maximum angular deflection. Ignored when zero.</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry2D.GetPolylines(devDept.Eyeshot.Milling.Setup)">
      <summary>
            Gets transformed polylines.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry2D.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Double,System.Double)">
      <summary>
            Multiple curve constructor.
            </summary>
      <param name="entList">A list of entities implementing <see cref="T:devDept.Eyeshot.Entities.ICurve" /></param>
      <param name="deviation">The tessellation tolerance, zero for existing tessellation (may not be available).</param>
      <param name="angleInRadians">The tessellation maximum angular deflection. Ignored when zero.</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry2D.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,System.Double)">
      <summary>
            Multiple curve constructor.
            </summary>
      <param name="curveList">The curve list</param>
      <param name="deviation">The tessellation tolerance, zero for existing tessellation (may not be available).</param>
      <param name="angleInRadians">The tessellation maximum angular deflection. Ignored when zero.</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry2D.#ctor(System.Collections.Generic.IList{devDept.Geometry.Entities.IGCurve},System.Double,System.Double)">
      <summary>
            Multiple primitive constructor.
            </summary>
      <param name="curveList">The primitive list</param>
      <param name="deviation">The tessellation tolerance, zero for existing tessellation (may not be available).</param>
      <param name="angleInRadians">The tessellation maximum angular deflection. Ignored when zero.</param>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Geometry2D.Flip">
      <summary>
            Gets or sets the curves flip direction status.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Geometry3D">
      <summary>
            3D machining geometry definition.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry3D.#ctor(devDept.Eyeshot.Entities.IFace,System.Double,System.Double)">
      <summary>
            IFace constructor.
            </summary>
      <param name="deviation">The tessellation tolerance, zero for existing tessellation (may not be available).</param>
      <param name="angleInRadians">The tessellation maximum angular deflection. Ignored when zero.</param>
      <param name="geometry">The IFace object</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry3D.#ctor(devDept.Eyeshot.Entities.IFace[],System.Double,System.Double)">
      <summary>
            Variable number of IFace objects constructor.
            </summary>
      <param name="deviation">The tessellation tolerance, zero for existing tessellation (may not be available).</param>
      <param name="angleInRadians">The tessellation maximum angular deflection. Ignored when zero.</param>
      <param name="geometry">The variable number of IFace objects</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry3D.#ctor(devDept.Eyeshot.Entities.Entity,System.Double,System.Double)">
      <summary>
            Single entity constructor.
            </summary>
      <param name="deviation">The tessellation tolerance, zero for existing tessellation (may not be available).</param>
      <param name="angleInRadians">The tessellation maximum angular deflection. Ignored when zero.</param>
      <param name="ent">A single entity implementing <see cref="T:devDept.Eyeshot.Entities.IFace" /></param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry3D.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Double,System.Double)">
      <summary>
            Entity list constructor.
            </summary>
      <param name="deviation">The tessellation tolerance, zero for existing tessellation (may not be available).</param>
      <param name="angleInRadians">The tessellation maximum angular deflection. Ignored when zero.</param>
      <param name="entList">A list of entities implementing <see cref="T:devDept.Eyeshot.Entities.IFace" /></param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry3D.#ctor(devDept.Eyeshot.Workspace,System.Double,System.Double)">
      <summary>
            Workspace constructor.
            </summary>
      <param name="deviation">The tessellation tolerance, zero for existing tessellation (may not be available).</param>
      <param name="angleInRadians">The tessellation maximum angular deflection. Ignored when zero.</param>
      <param name="entList">The workspace.</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry3D.#ctor(devDept.Eyeshot.Entities.BlockReference,devDept.Eyeshot.BlockKeyedCollection,System.Double,System.Double)">
      <summary>
            BlockReference constructor.
            </summary>
      <param name="deviation">The tessellation tolerance, zero for existing tessellation (may not be available).</param>
      <param name="angleInRadians">The tessellation maximum angular deflection. Ignored when zero.</param>
      <param name="br">The block reference</param>
      <param name="blocks">The blocks collection</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry3D.GetFlatZ(devDept.Eyeshot.Milling.Setup)">
      <summary>
            Gets Z heights for all flat areas.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry3D.GetInsideFlatZ(devDept.Eyeshot.Milling.Setup,devDept.Geometry.PolyRegion2D,System.Double,devDept.Eyeshot.Design)">
      <summary>
            Computes Z heights for flat areas overlapping with the specified boundary.
            </summary>
      <param name="boundary">The boundary region</param>
      <param name="tol">The Z values comparison tolerance</param>
      <returns>The array of Z values.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry3D.GetVertices(devDept.Eyeshot.Milling.Setup)">
      <summary>
            Gets transformed vertices.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry3D.IsReadyParallel(devDept.Eyeshot.Milling.Setup)">
      <summary>
            Tells if the geometry for parallel machining still needs to be prepared.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry3D.IsReadyWaterline(devDept.Eyeshot.Milling.Setup)">
      <summary>
            Tells if the geometry for waterline machining still needs to be prepared.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry3D.PreProcessParallel(devDept.Eyeshot.Milling.Setup)">
      <summary>
            Prepares geometry for <see cref="T:devDept.Eyeshot.Milling.Machining3D">3D machining</see> operations.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Geometry3D.PreProcessWaterline(devDept.Eyeshot.Milling.Setup)">
      <summary>
            Prepares geometry for <see cref="T:devDept.Eyeshot.Milling.Machining3D">3D machining</see> operations.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Milling.Parallel3D">
      <summary>
        <para>Parallel finish class definition.</para>
        <para>Can be used either as a pre-finishing or a finishing operation. The
            cutter is restricted to follow the contours of the geometry in the Z direction while
            being locked to a series of parallel vertical planes.</para>
      </summary>
    </member>
    <member name="F:devDept.Eyeshot.Milling.Parallel3D.angle">
      <summary>
            Pass angle in radians, zero means along X axis.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Parallel3D.ContactOnly">
      <summary>
            Controls whether or not toolpaths are generated where the tool is not in contact with the machining surface. When disabled, toolpaths are extended to the limits of the containment boundary and across openings in the workpiece.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Parallel3D.StayDownDistance">
      <summary>
            Gets or sets the maximum stay down distance.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Parallel3D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry3D,System.Double,System.Double,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="stepOver">The step over amount</param>
      <param name="angleInRadians">The passes angle in radians</param>
      <param name="verticalLeadAmount">The vertical lead distance</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Parallel3D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry3D,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Bottom plane constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="stepOver">The step over amount</param>
      <param name="angleInRadians">The passes angle in radians</param>
      <param name="verticalLeadAmount">The vertical lead distance</param>
      <param name="zLow">The bottom plane Z height</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Parallel3D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry3D,devDept.Eyeshot.Entities.Region,System.Double,System.Double,System.Double)">
      <summary>
            Boundary region constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="boundary">The tool containment region</param>
      <param name="stepOver">The step over amount</param>
      <param name="angleInRadians">The passes angle in radians</param>
      <param name="verticalLeadAmount">The vertical lead distance</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Parallel3D.#ctor(devDept.Eyeshot.Milling.Setup,devDept.Eyeshot.Milling.EndMill,devDept.Eyeshot.Milling.Geometry3D,devDept.Eyeshot.Entities.Region,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Boundary region and bottom plane constructor.
            </summary>
      <param name="setup">The machining setup</param>
      <param name="cutter">The end mill</param>
      <param name="geometry">The machining geometry</param>
      <param name="boundary">The tool containment region</param>
      <param name="stepOver">The step over amount</param>
      <param name="angleInRadians">The passes angle in radians</param>
      <param name="verticalLeadAmount">The vertical lead distance</param>
      <param name="zLow">The bottom plane Z height</param>
    </member>
    <member name="M:devDept.Eyeshot.Milling.Parallel3D.GetRawPasses(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs,System.Int32[]@,devDept.Eyeshot.Entities.Region[]@)">
      <summary>
            Gives the chance to overriders to get raw passes data.
            </summary>
      <param name="worker">
      </param>
      <param name="doWorkEventArgs">
      </param>
      <param name="startIndices">
      </param>
      <param name="actualRegions">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:devDept.Eyeshot.Milling.Parallel3D.ProjectingLinksText">
      <summary>
            Gets or sets the "Projecting links..." text string.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadGCode">
      <summary>
            Utility class for loading CNC files asynchronously.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadGCode.#ctor(System.String,System.Boolean)">
      <summary>
            Constructor with file name.
            </summary>
      <param name="dogLeg">When true, rapid movements are drawn with dog leg style.</param>
      <param name="fileName">The file name</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadGCode.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Constructor with stream.
            </summary>
      <param name="stream">The file stream</param>
      <param name="dogLeg">When true, rapid movements are drawn with dog leg style.</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadGCode.Blocks">
      <summary>
            Gets all the file blocks.
            </summary>
      <remarks>A G-code program is made up of one or more lines of code. Each line of code is called a block, and can include commands to the machine. Blocks are collected into a file, which makes a program.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadJT">
      <summary>
             Utility class for loading JT files asynchronously.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadPDF">
      <summary>
            Utility class for loading PDF files asynchronously.
            </summary>
      <remarks>
            It does not support images or other embedded resources
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadPDF.TextStyles">
      <summary>
            Gets the design collection of text styles read from the file.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.ReadPDF.Pages">
      <summary>
            Gets the pages read from file.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadPDF.PagesToLoad">
      <summary>
            Gets or sets the indices of the pages to load. If null, all pages are loaded.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadPDF.FillTextStyles(devDept.Eyeshot.Workspace)">
      <summary>
            Automatically merges text styles with existing ones.
            </summary>
      <param name="workspace"> The workspace control.</param>
      <remarks>Text styles with the same name of the ones in the workspace will be skipped.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadPDF.AddToScene(System.Int32,devDept.Eyeshot.Workspace,devDept.Eyeshot.RegenOptions)">
      <summary>
            Adds the entities of the specified page to the scene.
            </summary>
      <param name="pageIndex">The index of the page to add.</param>
      <param name="workspace">The Workspace used to add the entities.</param>
      <param name="ro">Asynchronous regeneration settings.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadPDF.AddToScene(devDept.Eyeshot.Workspace,devDept.Eyeshot.RegenOptions)">
      <summary>
            Adds the entities of the first page to the scene.
            </summary>
      <param name="workspace">The Workspace used to add the entities.</param>
      <param name="ro">Asynchronous regeneration settings.</param>
    </member>
    <member name="T:devDept.Eyeshot.Translators.PdfPage">
      <summary>
            This class represent a page of the PDF document. It contains all the entities in the page, as well as its viewports and their relative scale factor.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.PdfPage.Size">
      <summary>
            Gets or sets the size of the page in millimeters.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.PdfPage.Entities">
      <summary>
            Gets the list of the entities contained in the page.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.PdfPage.Viewports">
      <summary>
            Gets the list of the extents of the PDF viewports in millimeters contained in the page, as well as their custom scale factor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteFileParams">
      <summary>
            Class with parameter for <see cref="T:devDept.Eyeshot.Translators.WriteFile" /></summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileParams.#ctor(devDept.Eyeshot.Design,devDept.Serialization.contentType,devDept.Serialization.serializationType,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Constructor with the <see cref="T:devDept.Eyeshot.Design" />.
            </summary>
      <param name="design">The Design control.</param>
      <param name="contentType">The content type.</param>
      <param name="serializationType">The serialization type.</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <param name="saveThumbnail">When true, a thumbnail picture is stored.</param>
      <param name="openBlockOnly">If true, only the open block is written with the <see cref="P:devDept.Eyeshot.Translators.WriteFileParams.Purge" /> forced to true.</param>
      <remarks>Use this constructor to save both Thumbnail and Camera for the Design control.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileParams.#ctor(devDept.Eyeshot.Design,devDept.Eyeshot.Drawing,devDept.Serialization.contentType,devDept.Serialization.serializationType,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Constructor with the <see cref="T:devDept.Eyeshot.Design" /> and the <see cref="T:devDept.Eyeshot.Drawing" />.
            </summary>
      <param name="design">The Design control.</param>
      <param name="drawing">The Drawing control.</param>
      <param name="contentType">The content type.</param>
      <param name="serializationType">The serialization type.</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <param name="saveThumbnail">When true, a thumbnail picture is stored.</param>
      <param name="openBlockOnly">If true, only the open block is written with the <see cref="P:devDept.Eyeshot.Translators.WriteFileParams.Purge" /> forced to true.</param>
      <remarks>Use this constructor to save both Thumbnail and Camera for the Design control.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileParams.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.BlockKeyedCollection,devDept.Eyeshot.MaterialKeyedCollection,devDept.Eyeshot.TextStyleKeyedCollection,devDept.Eyeshot.LineTypeKeyedCollection,devDept.Serialization.contentType,devDept.Serialization.serializationType,devDept.Geometry.linearUnitsType,System.Boolean,devDept.Eyeshot.Drawing,devDept.Eyeshot.HatchPatternKeyedCollection)">
      <summary>
            Constructor with the collections.
            </summary>
      <param name="entities">The entities collection. If it's null or empty, the entities of the root block, if it exists, will be exported.</param>
      <param name="layers">The layers collection.</param>
      <param name="blocks">The blocks collection.</param>
      <param name="materials">The materials collection.</param>
      <param name="textStyles">The text styles collection.</param>
      <param name="lineTypes">The line types collection.</param>
      <param name="contentType">The content type.</param>
      <param name="serializationType">The serialization type.</param>
      <param name="units">The units.</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <param name="drawing">The Drawing control.</param>
      <param name="hatchPatterns">The hatch patterns collection.</param>
      <remarks>Using this constructor both Thumbnail and Camera will be not stored.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileParams.Version">
      <summary>
            Gets the Eyeshot file version.
            </summary>
      <remarks>You can use only the latest version for writing the file.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileParams.SerializationMode">
      <summary>
            Gets or sets the <see cref="T:devDept.Serialization.serializationType" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileParams.FileMode">
      <summary>
            Gets the <see cref="T:devDept.Serialization.fileType" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileParams.Content">
      <summary>
            Gets or sets the content type.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileParams.Tag">
      <summary>
            Gets or sets the tag to add to the file header.
            </summary>
      <seealso cref="P:devDept.Serialization.FileHeader.Tag" />.
        </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileParams.Purge">
      <summary>
            When true unused items of master collections, such as block definitions, layers, etc. are not written.
            </summary>
      <remarks>This is useless writing a Multi-file because every file already contains only the master collection's items related to the Block's entities.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileParams.SaveThumbnail">
      <summary>
            When true and the Design constructor is used, a thumbnail of 256x256 is stored in the file.
            </summary>
      <remarks>
            To save the thumbnail the graphics rendering context must have already been initialized.
            </remarks>
      <seealso cref="!:WriteFileParams.WriteFileParams(Design, contentType, serializationType, bool, bool)" />
      <seealso cref="P:devDept.Eyeshot.Translators.WriteFileParams.ThumbnailBackgroundColor" />
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when trying to set the property equal true without using the constructor that accepts the Workspace as parameter.</exception>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileParams.ThumbnailBackgroundColor">
      <summary>
            Gets or sets the background color for the thumbnail.
            </summary>
      <remarks>If empty, the thumbnail will be saved with a white background.</remarks>
      <seealso cref="P:devDept.Eyeshot.Translators.WriteFileParams.SaveThumbnail" />.
        </member>
    <member name="T:devDept.Eyeshot.Translators.WriteMultiFileParams">
      <summary>
            Class with parameter for <see cref="T:devDept.Eyeshot.Translators.WriteFile" /></summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteMultiFileParams.#ctor(devDept.Eyeshot.Design,devDept.Serialization.contentType,devDept.Serialization.serializationType,System.Boolean,System.Boolean)">
      <summary>
            Constructor with the <see cref="T:devDept.Eyeshot.Design" />.
            </summary>
      <param name="design">The Design control.</param>
      <param name="contentType">The content type.</param>
      <param name="serializationType">The serialization type.</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <param name="saveThumbnail">When true, a thumbnail picture is stored.</param>
      <remarks>Design's thumbnail and camera data are store only on the main file. If you want to update thumbnail for the other files you need to set <see cref="P:devDept.Eyeshot.Translators.WriteMultiFileParams.UpdateThumbnails" /> to true.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteMultiFileParams.#ctor(devDept.Eyeshot.BlockKeyedCollection,devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.MaterialKeyedCollection,devDept.Eyeshot.TextStyleKeyedCollection,devDept.Eyeshot.LineTypeKeyedCollection,devDept.Eyeshot.HatchPatternKeyedCollection,devDept.Serialization.contentType,devDept.Serialization.serializationType)">
      <summary>
            Constructor with the collections.
            </summary>
      <param name="blocks">The blocks collection.</param>
      <param name="layers">The layers collection.</param>
      <param name="materials">The materials collection.</param>
      <param name="textStyles">The text styles collection.</param>
      <param name="lineTypes">The line types collection.</param>
      <param name="hatchPatterns">The hatch patterns collection.</param>
      <param name="contentType">The content type.</param>
      <param name="serializationType">The serialization type.</param>
      <remarks>Using this constructor both Thumbnail and Camera will be not stored.</remarks>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown if the blocks collection is null/Nothing or its root block is not defined.</exception>
      <seealso cref="M:devDept.Eyeshot.BlockKeyedCollection`1.SetRootBlock(System.String)" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteMultiFileParams.UpdateThumbnails">
      <summary>
            Indicates whether the thumbnail must be updated for all the written files or not. Default value is false and the thumbnail is stored only for the main file according to <see cref="P:devDept.Eyeshot.Translators.WriteFileParams.SaveThumbnail" /> param.
            </summary>
      <remarks>When true and <see cref="P:devDept.Eyeshot.Translators.WriteFileParams.SaveThumbnail" /> is true too, the thumbnail is updated for all files. This operation cannot be run in parallel and can increase a lot the working time for this work unit.</remarks>
      <seealso cref="!:SaveThumbnail" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteMultiFileParams.Parallel">
      <summary>
            Indicates whether the writing of the files is performed in parallel or not (Default is True).
            </summary>
      <remarks>The updating of thumbnails is excluded from parallel process.</remarks>
      <seealso cref="P:devDept.Eyeshot.Translators.WriteMultiFileParams.UpdateThumbnails" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteMultiFileParams.BlockName">
      <summary>
            Gets or sets the name of the single block for which the file must be updated.
            </summary>
      <remarks>This can be used to update a single file inside a chain of multi-file.</remarks>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when the value does not represent a valid name of the workspace blocks collection.</exception>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteParams">
      <summary>
            Base class for <see cref="T:devDept.Eyeshot.Translators.WriteFileAsync" /> classes.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteParams.#ctor(devDept.Eyeshot.Workspace,System.Boolean,System.Boolean)">
      <summary>
            Constructor with the <see cref="T:devDept.Eyeshot.Workspace" />.
            </summary>
      <param name="workspace">The Workspace control.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="openBlockOnly">If true, only the open block is written.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteParams.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.BlockKeyedCollection,System.Boolean)">
      <summary>
            Constructor with the collections
            </summary>
      <param name="entities">The entities collection. If it's null or empty, the entities of the root block, if it exists, will be exported.</param>
      <param name="layers">The layers collection.</param>
      <param name="blocks">The blocks collection.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParams.Entities">
      <summary>
            Gets or sets the entities collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParams.Blocks">
      <summary>
            Gets or sets the blocks collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParams.Layers">
      <summary>
            Gets or sets the layers collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParams.SelectedOnly">
      <summary>
            Gets or sets the selected only option.
            </summary>
      <remarks>When true, only selected entities at root level are written.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParams.OpenBlockName">
      <summary>
            Indicates the name of the current open block whether it must be considered as the root block for the export.
            </summary>
      <remarks>This property is internally initialized only by constructors accepting a workspace as a parameter with an opened block.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteParamsWithMaterials">
      <summary>
            Class for <see cref="T:devDept.Eyeshot.Translators.WriteFileAsync" /> classes that use also <see cref="T:devDept.Graphics.Material" />s.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteParamsWithMaterials.#ctor(devDept.Eyeshot.Workspace,System.Boolean,System.Boolean)">
      <summary>
            Constructor with the <see cref="T:devDept.Eyeshot.Workspace" />.
            </summary>
      <param name="workspace">The Workspace.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="openBlockOnly">If true, only the open block is written.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteParamsWithMaterials.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.BlockKeyedCollection,devDept.Eyeshot.MaterialKeyedCollection,devDept.Geometry.linearUnitsType,System.Boolean)">
      <summary>
            Constructor with the collections
            </summary>
      <param name="entities">The entities collection. If it's null or empty, the entities of the root block, if it exists, will be exported.</param>
      <param name="layers">The layers collection.</param>
      <param name="blocks">The blocks collection.</param>
      <param name="materials">The materials collection.</param>
      <param name="units">The units.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParamsWithMaterials.Materials">
      <summary>
            Gets or sets the materials collection.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteParamsWithTextStyles">
      <summary>
            Class for <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithMaterials" /> classes that use all the Workspace master collections.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteParamsWithTextStyles.#ctor(devDept.Eyeshot.Workspace,System.Boolean,System.Boolean)">
      <summary>
            Constructor with the <see cref="T:devDept.Eyeshot.Workspace" /> control.
            </summary>
      <param name="workspace">The Workspace.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="openBlockOnly">If true, only the open block is written.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteParamsWithTextStyles.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.BlockKeyedCollection,devDept.Eyeshot.MaterialKeyedCollection,devDept.Eyeshot.TextStyleKeyedCollection,devDept.Eyeshot.LineTypeKeyedCollection,devDept.Geometry.linearUnitsType,System.Boolean,devDept.Eyeshot.HatchPatternKeyedCollection)">
      <summary>
            Constructor with the collections
            </summary>
      <param name="entities">The entities collection. If it's null or empty, the entities of the root block, if it exists, will be exported.</param>
      <param name="layers">The layers collection.</param>
      <param name="blocks">The blocks collection.</param>
      <param name="materials">The materials collection.</param>
      <param name="textStyles">The text styles collection.</param>
      <param name="lineTypes">The line types collection.</param>
      <param name="units">The units.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="hatchPatterns">The hatch patterns collection.</param>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParamsWithTextStyles.LineTypes">
      <summary>
            Gets or sets the line types collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParamsWithTextStyles.HatchPatterns">
      <summary>
            Gets or sets the hatch patterns collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParamsWithTextStyles.TextStyles">
      <summary>
            Gets or sets the text styles collection.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteParamsWithDrawing">
      <summary>
            Class for <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithTextStyles" /> classes that use drawing control.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteParamsWithDrawing.#ctor(devDept.Eyeshot.Workspace,devDept.Eyeshot.Drawing,System.Boolean,System.Boolean)">
      <summary>
            Constructor with the Design.
            </summary>
      <param name="design">The Design control.</param>
      <param name="drawing">The Drawing control.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="openBlockOnly">If true, only the open block is written.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteParamsWithDrawing.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.BlockKeyedCollection,devDept.Eyeshot.MaterialKeyedCollection,devDept.Eyeshot.TextStyleKeyedCollection,devDept.Eyeshot.LineTypeKeyedCollection,devDept.Geometry.linearUnitsType,System.Boolean,devDept.Eyeshot.Drawing,devDept.Eyeshot.HatchPatternKeyedCollection)">
      <summary>
            Constructor with the collections
            </summary>
      <param name="entities">The entities collection. If it's null or empty, the entities of the root block, if it exists, will be exported.</param>
      <param name="layers">The layers collection.</param>
      <param name="blocks">The blocks collection.</param>
      <param name="materials">The materials collection.</param>
      <param name="textStyles">The text styles collection.</param>
      <param name="lineTypes">The line types collection.</param>
      <param name="units">The units.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="drawing">The Drawing control.</param>
      <param name="hatchPatterns">The hatch patterns collection.</param>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParamsWithDrawing.Drawing">
      <summary>
            Gets or sets the drawing control.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteParamsWithUnits">
      <summary>
            Class for <see cref="T:devDept.Eyeshot.Translators.WriteFileAsyncWithUnits" /> classes.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteParamsWithUnits.#ctor(devDept.Eyeshot.Workspace,System.Boolean,System.Boolean)">
      <summary>
            Constructor with the <see cref="T:devDept.Eyeshot.Workspace" />.
            </summary>
      <param name="workspace">The Workspace control.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="openBlockOnly">If true, only the open block is written.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteParamsWithUnits.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.BlockKeyedCollection,devDept.Geometry.linearUnitsType,System.Boolean)">
      <summary>
            Constructor with the collections
            </summary>
      <param name="entities">The entities collection. If it's null or empty, the entities of the root block, if it exists, will be exported.</param>
      <param name="layers">The layers collection.</param>
      <param name="blocks">The blocks collection.</param>
      <param name="units">The units.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParamsWithUnits.Units">
      <summary>
            Gets or sets the units.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParamsWithUnits.Author">
      <summary>
            Gets or sets the author.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParamsWithUnits.Organization">
      <summary>
            Gets or sets the organization.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteParamsWithUnits.OriginatingSystem">
      <summary>
            Gets or sets the originating system.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadIFC">
      <summary>
            Utility class for loading IFC files asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadIFC.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadIFC.#ctor(System.String,System.Double)">
      <summary>
            Constructor with file name.
            </summary>
      <param name="fileName">The file name</param>
      <param name="deviation">The deviation used to build the geometry. If zero it's computed based on the elements size.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadIFC.#ctor(System.IO.Stream,System.Double)">
      <summary>
            Constructor with stream.
            </summary>
      <param name="stream">The file stream</param>
      <param name="deviation">The deviation used to build the geometry. If zero it's computed based on the elements size.</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadIFC.DefaultColors">
      <summary>
            Gets a dictionary with the default color for each ifc element type.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadIFC.Project">
      <summary>
            Gets or sets the Project.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadIFC.Containers">
      <summary>
            Gets or sets the spatial element collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadIFC.Systems">
      <summary>
            Gets or sets the systems loaded from the file.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadIFC.Deviation">
      <summary>
            Gets or sets the deviation used to build the geometry.
            </summary>
      <remarks>If zero the deviation is computed based on the elements size.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadIFC.OpeningsDeviation">
      <summary>
            Gets or sets the deviation used for openings.
            </summary>
      <remarks>If zero the deviation is computed based on the <see cref="P:devDept.Eyeshot.Translators.ReadIFC.Deviation" /> property.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadIFC.ImportGrids">
      <summary>
            Gets or sets if to import the grids.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadIFC.ImportAnnotations">
      <summary>
            Gets or sets if to import the annotations.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.IEyeIfcObject">
      <summary>
            IEyeIfcObject interface. Common properties of objects created when reading IFC file.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IEyeIfcObject.GUID">
      <summary>
            Gets or sets the Global Unique ID.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IEyeIfcObject.Parent">
      <summary>
            Gets or sets the parent's GUID.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IEyeIfcObject.Identification">
      <summary>
            Gets or sets the identification properties.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IEyeIfcObject.Properties">
      <summary>
            Gets or sets the object properties.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IEyeIfcObject.LocalTransformation">
      <summary>
            Gets or sets the the entity local transformation, from Parent frame to entity frame.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IEyeIfcObject.GlobalTransformation">
      <summary>
            Gets or sets the the entity global transformation.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.IIfcEntity">
      <summary>
            IIfcEntity interface. Common properties of entities with geometry created when reading IFC file.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IIfcEntity.Materials">
      <summary>
            Gets or sets the entity materials.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IIfcEntity.Axes">
      <summary>
            Gets or Sets the entity axes representation.
            </summary>
      <remarks>Axis identifier of IfcShapeRepresentation.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IIfcEntity.Openings">
      <summary>
            Gets o sets the entity openings.
            </summary>
      <remarks>IfcElement.HasOpenings property.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IIfcEntity.Systems">
      <summary>
            Gets or sets the system in which an entity is organized.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.IfcContainer">
      <summary>
            Class to represent a container in the Ifc hierarchical space structure.
            </summary>
      <remarks>IFC classes: IfcProject or IfcSpatialElement.
            Optional geometric representation is saved as added element in ContainedElements list.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcContainer.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcContainer.Identification">
      <summary>
            Gets or sets the identification properties.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcContainer.Properties">
      <summary>
            Gets or sets the object properties.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcContainer.LocalTransformation">
      <summary>
            Gets or sets the the entity local transformation, from Parent frame to entity frame.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcContainer.GlobalTransformation">
      <summary>
            Gets or sets the the entity global transformation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcContainer.GUID">
      <summary>
            Gets or sets the Global Unique ID.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcContainer.Parent">
      <summary>
            Gets or sets the parent's GUID in spatial structure.
            </summary>
      <remarks>IFC relationship: IfcRelAggregates</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcContainer.Childs">
      <summary>
            Gets or sets the child's GUID in spatial structure.
            </summary>
      <remarks>IFC relationship: IfcRelAggregates</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcContainer.Systems">
      <summary>
            Gets or sets the list of systems of the container.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcContainer.ContainedElements">
      <summary>
            Gets or sets the contained elements GUID.
            </summary>
      <remarks>IFC relationship: IfcRelContainedInSpatialStructure</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcContainer.ConvertToSurrogate">
      <summary>
            Converts the class to its surrogate, for serialization purpose.
            </summary>
      <returns>The surrogate.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcContainer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcContainer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcContainer.Clone">
      <summary>
            Creates a deep copy of this ifc container.
            </summary>
      <returns>The new ifc container object.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Translators.IfcMesh">
      <summary>    
            Extended <see cref="T:devDept.Eyeshot.Entities.Mesh" /> class with Ifc elements properties.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcMesh.GUID">
      <summary>
            Gets or sets the Global Unique ID.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcMesh.Parent">
      <summary>
            Gets or sets the container GUID.
            </summary>
      <remarks>IFC relationship: IfcRelContainedInSpatialStructure</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcMesh.Systems">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcMesh.#ctor">
      <summary>
            Empty constructor. For internal use only. <see cref="T:devDept.Eyeshot.Entities.entityNatureType">Mesh nature</see> is set to Plain.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcMesh.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.IndexTriangle})">
      <summary>
            Vertices and triangles constructor.
            </summary>
      <param name="vertices">The vertices list</param>
      <param name="triangles">The triangles list</param>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcMesh.Identification">
      <summary>
            Gets or sets the identification properties.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcMesh.Materials">
      <summary>
            Gets or sets the entity materials.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcMesh.LocalTransformation">
      <summary>
            Gets or sets the the entity local transformation, from Parent frame to entity frame.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcMesh.GlobalTransformation">
      <summary>
            Gets or sets the the entity global transformation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcMesh.Properties">
      <summary>
            Gets or sets the object properties.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcMesh.Axes">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcMesh.Openings">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcMesh.#ctor(devDept.Serialization.IfcMeshSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.IfcMeshSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.IfcMeshSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcMesh.ConvertToSurrogate">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcMesh.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcMesh.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcMesh.Clone">
      <summary>
            Creates a deep copy of this ifc mesh entity.
            </summary>
      <returns>The new ifc mesh object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcMesh.Dump(devDept.Geometry.linearUnitsType,devDept.Geometry.massUnitsType,devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.MaterialKeyedCollection,devDept.Eyeshot.BlockKeyedCollection)">
      <inheritdoc />
    </member>
    <member name="T:devDept.Eyeshot.Translators.IfcLinearPath">
      <summary>    
            Extended <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> class with Ifc elements properties.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcLinearPath.GUID">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcLinearPath.Parent">
      <summary>
            Gets or sets the container GUID.
            </summary>
      <remarks>IFC relationship: IfcRelContainedInSpatialStructure</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcLinearPath.Systems">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcLinearPath.Identification">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcLinearPath.Materials">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcLinearPath.LocalTransformation">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcLinearPath.GlobalTransformation">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcLinearPath.Properties">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcLinearPath.Axes">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcLinearPath.Openings">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcLinearPath.#ctor(devDept.Serialization.IfcLinearPathSurrogate)">
      <summary>
            Proprietary file format constructor.
            </summary>
      <param name="surrogate">The <see cref="T:devDept.Serialization.IfcLinearPathSurrogate" />.</param>
      <remarks>This constructor is used by <see cref="M:devDept.Serialization.IfcLinearPathSurrogate.ConvertToObject" /> method.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcLinearPath.ConvertToSurrogate">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcLinearPath.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcLinearPath.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcLinearPath.Clone">
      <summary>
            Creates a deep copy of this ifc linear path entity.
            </summary>
      <returns>The new ifc linear path object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcLinearPath.Dump(devDept.Geometry.linearUnitsType,devDept.Geometry.massUnitsType,devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.MaterialKeyedCollection,devDept.Eyeshot.BlockKeyedCollection)">
      <inheritdoc />
    </member>
    <member name="T:devDept.Eyeshot.Translators.IfcBlockReference">
      <summary>
            Extended <see cref="T:devDept.Eyeshot.Entities.BlockReference" /> class with Ifc elements properties.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcBlockReference.GUID">
      <summary>
            Gets or sets the Global Unique ID.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcBlockReference.Parent">
      <summary>
            Gets or sets the container GUID.
            </summary>
      <remarks>IFC relationship: IfcRelContainedInSpatialStructure</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcBlockReference.Systems">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcBlockReference.#ctor(System.String)">
      <summary>
            Block name constructor.
            </summary>
      <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block" /> to be inserted</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcBlockReference.#ctor(devDept.Geometry.Transformation,System.String)">
      <summary>
            Transformation constructor.
            </summary>
      <param name="t">The transformation</param>
      <param name="blockName">The name of the <see cref="T:devDept.Eyeshot.Block" /> to be inserted</param>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcBlockReference.Identification">
      <summary>
            Gets or sets the identification properties.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcBlockReference.Materials">
      <summary>
            Gets or sets the entity materials.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcBlockReference.LocalTransformation">
      <summary>
            Gets or sets the the entity local transformation, from Parent frame to entity frame.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcBlockReference.GlobalTransformation">
      <summary>
            Gets or sets the the entity global transformation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcBlockReference.Properties">
      <summary>
            Gets or sets the object properties.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcBlockReference.Axes">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcBlockReference.Openings">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcBlockReference.ConvertToSurrogate">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcBlockReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcBlockReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcBlockReference.Clone">
      <summary>
            Creates a deep copy of this ifc block reference.
            </summary>
      <returns>The new ifc block reference object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcBlockReference.Dump(devDept.Geometry.linearUnitsType,devDept.Geometry.massUnitsType,devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.MaterialKeyedCollection,devDept.Eyeshot.BlockKeyedCollection)">
      <inheritdoc />
    </member>
    <member name="T:devDept.Eyeshot.Translators.IfcLayer">
      <summary>
            Extended <see cref="T:devDept.Eyeshot.Layer" /> class with Ifc layers properties.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcLayer.#ctor(System.String)">
      <summary>
            Name only constructor.
            </summary>
      <param name="name">Layer name</param>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcLayer.Description">
      <summary>
            Gets or sets the layer description.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.IfcLayer.Identifier">
      <summary>
            Gets or sets the layer Identifier.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcLayer.ConvertToSurrogate">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcLayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcLayer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Translators.IfcLayer.Clone">
      <summary>
            Creates a deep copy of this ifc layer.
            </summary>
      <returns>The new ifc layer object.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadLAS">
      <summary>
            Utility class for loading LAS files asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadLAS.Classifications">
      <summary>
            Array of the “class” attribute for each point.
            </summary>
      <remarks>It's filled only when <see cref="P:devDept.Eyeshot.Translators.ReadLAS.FillClassifications" /> is true or the class is initialized with the <see cref="T:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType" /> equals to <see cref="F:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType.Classification" />.</remarks>
      <seealso cref="P:devDept.Eyeshot.Translators.ReadLAS.FillClassifications" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadLAS.FillClassifications">
      <summary>
            When true the <see cref="P:devDept.Eyeshot.Translators.ReadLAS.Classifications" /> array is filled.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Translators.ReadLAS.Classifications" />
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadLAS.#ctor(System.String,devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType)">
      <summary>
            File name constructor.
            </summary>
      <param name="fileName">The file name</param>
      <param name="formatType">The format type. See <see cref="T:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType" /> enum.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadLAS.#ctor(System.IO.Stream,devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType)">
      <summary>
            Stream constructor.
            </summary>
      <param name="stream">The file stream</param>
      <param name="formatType">The format type. See <see cref="T:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType" /> enum.</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadLAS.GetFastPointCloud(devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType)">
      <summary>
            Gets the FastPointCloud read from the file.
            </summary>
      <param name="formatType">The <see cref="T:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType" /> that must be used to create the resulting FastPointCloud.</param>
      <returns>The FastPointCloud read from the file according to the <see cref="T:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType" />.</returns>
      <remarks>If you need to get the FastPointCloud in a different format type than the one used in the constructor, please ensure to have set <see cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillColors" />, <see cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillIntensities" /> and <see cref="P:devDept.Eyeshot.Translators.ReadLAS.FillClassifications" /> to true before reading the file.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadLAS.GetFastPointCloudAsBlock(devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType,devDept.Geometry.Point3D@,System.String)">
      <summary>
            Gets the FastPointCloud read from the file as Block.
            </summary>
      <param name="formatType">The <see cref="T:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType" /> that must be used to create the resulting FastPointCloud.</param>
      <param name="insertionPoint">The <see cref="T:devDept.Geometry.Point3D" /> to use as insertion point for the creation of the related <see cref="T:devDept.Eyeshot.Entities.BlockReference" />.</param>
      <param name="blockName">The name of the block. If null/Nothing the name is assigned internally.</param>
      <returns>The block containing the FastPointCloud read from the file.</returns>
      <remarks>
            Uses a block reference to avoid floating point precision problems.
            i.e. When files use the UTM 32 North projection with northing values &gt; 5,000,000 and easting values &gt; 435,000, the northing values are larger than the easting values and the limited precision of the floats leads to the points arranged in the lines.
            To get more accurated result, you can use double precision coordinates by setting <see cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillCoordinates" /> to true before starting the reading process.
            If you need to get the FastPointCloud in a different format type than the one used in the constructor, please ensure to have set <see cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillColors" />, <see cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillIntensities" /> and <see cref="P:devDept.Eyeshot.Translators.ReadLAS.FillClassifications" /> to true before reading the file.
            </remarks>
      <seealso cref="!:AddToSceneAsSingleObject(Workspace, string, string)" />.
            <seealso cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillCoordinates" /><seealso cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.Coordinates" /></member>
    <member name="T:devDept.Eyeshot.Translators.ReadASC">
      <summary>
            Utility class for loading ASC files asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadASC.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadASC.SkipInvalidLines">
      <summary>
             When true invalid lines are skipped and written into the log.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadASC.PointSize">
      <summary>
            If not equal to zero this is used to set the point size of the FastPointCloud.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadASC.#ctor(System.String,System.Char[])">
      <summary>
            Constructor with file name and separators specifications.
            </summary>
      <param name="fileName">The file name.</param>
      <param name="separators">Separators to use between coordinates values.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadASC.#ctor(System.String)">
      <summary>
            Constructor with file name (default separators used: space or tabulator character).
            </summary>
      <param name="fileName">The file name.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadASC.#ctor(System.IO.Stream,System.Char[])">
      <summary>
            Constructor with stream and separators specifications.
            </summary>
      <param name="stream">The file stream</param>
      <param name="separators">Separators to use between coordinates values</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadASC.#ctor(System.IO.Stream)">
      <summary>
            Constructor with stream (default separators used: space or tabulator character).
            </summary>
      <param name="stream">The file stream</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadFileAsync">
      <summary>
            Base class for asynchronous file reading.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsync.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsync.Path">
      <summary>
            Gets input file path.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsync.ReadingText">
      <summary>
            Gets or sets the "Reading..." text string.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsync.ParsingText">
      <summary>
            Gets or sets the "Parsing..." text string.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsync.ParsingEntitiesText">
      <summary>
            Gets or sets the "Parsing entities..." text string.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsync.#ctor(System.String)">
      <summary>
            File name constructor.
            </summary>
      <param name="fileName">The file name</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsync.#ctor(System.IO.Stream)">
      <summary>
            Stream constructor.
            </summary>
      <param name="s">The stream</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsync.Entities">
      <summary>
            Gets the entities resulting from file reading.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsync.FileName">
      <summary>
            Gets the file name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsync.Result">
      <summary>
            Gets the result of reading operation (true if the operation succeeded).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsync.Stream">
      <summary>
            Gets current stream.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsync.RotateEverythingAroundX(System.Double)">
      <summary>
            Rotates geometry around world X axis. If the file was created in a system that orients with Y Axis Up, the models would by default be brought into Eyeshot (a Z axis up system) with a flipped coordinate system. This method is designed to fix the problem.
            </summary>
      <param name="angleInRadians">Rotation angle in radians</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsync.FillAllCollectionsData(devDept.Eyeshot.Workspace)">
      <summary>
            Automatically merges all master collections with existing ones.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsync.AddToScene(devDept.Eyeshot.Workspace,devDept.Eyeshot.RegenOptions)">
      <summary>
            Adds the entities loaded from the file to the scene.
            </summary>
      <param name="workspace">The Workspace used to add the entities.</param>
      <param name="ro">Asynchronous regeneration settings.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsync.CloseStream">
      <summary>
            Closes the stream. Must be called by all derived classes.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocks">
      <summary>
            Adds support for block definitions to the file loading.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocks.#ctor(System.IO.Stream)">
      <summary>
            File stream constructor.
            </summary>
      <param name="stream">The file stream</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocks.#ctor(System.String)">
      <summary>
            File name constructor.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocks.Blocks">
      <summary>
            Gets or sets the blocks resulting from file reading.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocks.ParsingBlocksText">
      <summary>
            Gets or sets the "Parsing blocks..." text string.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocks.Units">
      <summary>
            Gets or sets imported geometry linear units.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocks.FillBlocks(devDept.Eyeshot.Workspace,System.Boolean,devDept.Eyeshot.RegenOptions,System.Boolean)">
      <summary>
            Automatically merges block definitions with existing ones.
            </summary>
      <remarks>
            If the replaceRootBlock flag is true but the loaded file doesn't contain a
            root block, only the units of the workspace root block are set with the loaded
            units.
            </remarks>
      <param name="workspace">The workspace control.</param>
      <param name="replaceRootBlock">When true, the root block of the Workspace is replaced with the imported root block, if it exists.</param>
      <param name="ro">Asynchronous regeneration options used for entities of the root
            block if it's replaced.</param>
      <param name="addBlockReference">When true and the root block of the Workspace is
            not replaced, add a new BlockReference on the origin that refers the
            imported root block.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocks.AddToScene(devDept.Eyeshot.Workspace,devDept.Eyeshot.RegenOptions)">
      <summary>
            Adds to the Workspace control the entities loaded from the file, along with the other master collections.
            Items contained previously in the Workspace are merged, except the root block that is replaced with the one loaded from the file, if it exists.
            </summary>
      <param name="workspace">The Workspace control used to add entities and other collections.</param>
      <param name="ro">Asynchronous regeneration options</param>
      <remarks>The default behaviour is to replace the workspace root block with the one loaded from the file, if you don't want to replace it use <see cref="M:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocks.AddToScene(devDept.Eyeshot.Workspace,System.Boolean,devDept.Eyeshot.RegenOptions)" /></remarks>
      <seealso cref="!:ReadFileAsync.FillBlocks" />
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when trying to add to the Workspace a file with a root block but that also contains <see cref="P:devDept.Eyeshot.Translators.ReadFileAsync.Entities" /> not belonging to any block.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocks.AddToScene(devDept.Eyeshot.Workspace,System.Boolean,devDept.Eyeshot.RegenOptions)">
      <summary>
            Adds to the Workspace control the entities loaded from the file, along with the other master collections.
            Items contained previously in the Workspace are merged.
            </summary>
      <param name="workspace">The Workspace control used to add entities and other collections.</param>
      <param name="replaceRootBlock">When true, the root block is replaced with the one loaded from the file, if it exists. The same for Default layer and Default text style as well.</param>
      <param name="ro">Asynchronous regeneration options.</param>
      <seealso cref="!:ReadFileAsync.FillBlocks" />
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when trying to add to the Workspace a file with a root block but that also contains <see cref="P:devDept.Eyeshot.Translators.ReadFileAsync.Entities" /> not belonging to any block.</exception>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocksAndLayers">
      <summary>
            Adds support for layer definitions to the file loading.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocksAndLayers.#ctor(System.IO.Stream)">
      <summary>
            File stream constructor.
            </summary>
      <param name="stream">The file stream</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="F:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocksAndLayers.Layers">
      <summary>
            Gets or sets the list of layers resulting from file reading.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithBlocksAndLayers.FillLayers(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Automatically merges layers with existing ones.
            </summary>
      <param name="workspace">The workspace control.</param>
      <param name="replaceDefaultLayer">When true, the Default layer of the Workspace is replaced with the imported one, if present.</param>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing">
      <summary>
            Adds support for line types, text styles and drawing properties to the file loading.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.#ctor(System.IO.Stream)">
      <summary>
            File stream constructor.
            </summary>
      <param name="stream">The file stream.</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.#ctor(System.String)">
      <summary>
            File name constructor.
            </summary>
      <param name="fileName">The file name.</param>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.Materials">
      <summary>
            Gets the collection of materials read from the file.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.LineTypes">
      <summary>
            Gets the design collection of the line types read from the file.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.HatchPatterns">
      <summary>
            Gets the design collection of the hatch patterns read from the file.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.TextStyles">
      <summary>
            Gets the design collection of text styles read from the file.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.DrawingLayers">
      <summary>
            Gets the drawing layers referenced by layouts resulting from file reading.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.DrawingBlocks">
      <summary>
            Gets the drawing blocks referenced by layouts resulting from file reading.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.DrawingSheets">
      <summary>
            Gets the drawing sheets read from the file.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.DrawingLineTypes">
      <summary>
            Gets the drawing line types referenced by layouts resulting from file reading.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.DrawingHatchPatterns">
      <summary>
            Gets the drawing hatch patterns referenced by layouts resulting from file reading.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.DrawingTextStyles">
      <summary>
            Gets the drawing text styles referenced by layouts resulting from file reading.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.FillMaterials(devDept.Eyeshot.Design)">
      <summary>
            Automatically merges materials with existing ones.
            </summary>
      <param name="design">The Design control</param>
      <remarks>Materials with the same name of the ones in the workspace will be skipped.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.FillTextStyles(devDept.Eyeshot.Workspace,System.Boolean)">
      <summary>
            Automatically merges text styles with existing ones.
            </summary>
      <param name="workspace">The workspace control.</param>
      <param name="replaceDefaultTextStyle">When true, the Default text style of the Workspace is replaced with the imported one, if present.</param>
      <remarks>Text styles with the same name of the ones in the workspace will be skipped.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.FillLineTypes(devDept.Eyeshot.Workspace)">
      <summary>
            Automatically merges line types with existing ones.
            </summary>
      <param name="workspace">The Workspace control.</param>
      <remarks>Line types with the same name of the ones in the workspace will be skipped.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.FillHatchPatterns(devDept.Eyeshot.Workspace)">
      <summary>
            Automatically merges hatch patterns with existing ones.
            </summary>
      <param name="workspace">The Workspace control.</param>
      <remarks>Hatch patterns with the same name of the ones in the workspace will be skipped.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.AddToDrawing(devDept.Eyeshot.Drawing)">
      <summary>
            Adds sheets, blocks, layers, text styles, line types read from the file to the drawing control.
            </summary>
      <param name="drawing">The drawing control.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.FillAllDrawingCollectionsData(devDept.Eyeshot.Drawing,System.Boolean)">
      <summary>
            Automatically merges all the drawing collections with existing ones.
            </summary>
      <param name="drawing">The drawing control.</param>
      <param name="replaceDefaultItems">When true, the default layers and line types of the Drawing are replaced with the imported one, if present.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.FillDrawingSheets(devDept.Eyeshot.Drawing)">
      <summary>
            Automatically merges sheets with existing ones.
            </summary>
      <param name="drawing">The drawing control.</param>
      <remarks>Sheets with the same name of the ones in the drawing will be skipped.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.FillDrawingBlocks(devDept.Eyeshot.Drawing)">
      <summary>
            Automatically merges drawing blocks with existing ones.
            </summary>
      <param name="drawing">The Drawing control.</param>
      <remarks>Blocks with the same name of the ones in the drawing will be skipped.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.FillDrawingLayers(devDept.Eyeshot.Drawing,System.Boolean)">
      <summary>
            Automatically merges drawing layers with existing ones.
            </summary>
      <param name="drawing">The Drawing control.</param>
      <param name="replaceDefaultLayers">When true, the default layers of the Drawing are replaced with the imported one, if present.</param>
      <remarks>Layers with the same name of the ones in the drawing will be skipped.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.FillDrawingTextStyles(devDept.Eyeshot.Drawing)">
      <summary>
            Automatically merges drawing text styles with existing ones.
            </summary>
      <param name="drawing">The Drawing control.</param>
      <remarks>Text styles with the same name of the ones in the drawing will be skipped.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.FillDrawingLineTypes(devDept.Eyeshot.Drawing,System.Boolean)">
      <summary>
            Automatically merges drawing line types with existing ones.
            </summary>
      <param name="drawing">The Drawing control.</param>
      <param name="replaceDefaultLineTypes">When true, the default line types of the Drawing are replaced with the imported one, if present.</param>
      <remarks>Line types with the same name of the ones in the drawing will be skipped.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithDrawing.FillDrawingHatchPatterns(devDept.Eyeshot.Drawing)">
      <summary>
            Automatically merges drawing hatch patterns with existing ones.
            </summary>
      <param name="drawing">The Drawing control.</param>
      <remarks>Hatch patterns with the same name of the ones in the drawing will be skipped.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadFileAsyncWithMaterials">
      <summary>
            Adds support for materials to the file loading.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFileAsyncWithMaterials.Materials">
      <summary>
            Gets or sets the materials defined in the attached MTL files.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFileAsyncWithMaterials.FillMaterials(devDept.Eyeshot.Workspace)">
      <summary>
            Automatically merges Material definitions with existing ones.
            </summary>
      <param name="workspace">The workspace control.</param>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadFastPointCloudBase">
      <summary>
            Adds FastPointCloud properties.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.Coordinates">
      <summary>
             Array with the x, y, z coordinates of the points.
            </summary>
      <remarks>It's filled only when <see cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillCoordinates" /> is true</remarks>
      <seealso cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillCoordinates" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.Colors">
      <summary>
            RGB color array (3 bytes for each point)
            </summary>
      <remarks>It's filled only when <see cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillColors" /> is true or the class is initialized with the <see cref="T:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType" /> equals to <see cref="F:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType.Colors" />.</remarks>
      <seealso cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillColors" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.Intensities">
      <summary>
            Array of the “intensity” attribute for each point.
            </summary>
      <remarks>It's filled only when <see cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillIntensities" /> is true or the class is initialized with the <see cref="T:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType" /> equals to <see cref="F:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType.Intensity" />.</remarks>
      <seealso cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillIntensities" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillCoordinates">
      <summary>
            When true the <see cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.Coordinates" /> array is filled.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.Coordinates" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillColors">
      <summary>
            When true the <see cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.Colors" /> array is filled.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.Colors" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.FillIntensities">
      <summary>
            When true the <see cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.Intensities" /> array is filled.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Translators.ReadFastPointCloudBase.Intensities" />
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType">
      <summary>
            FastPointCloud format type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType.Plain">
      <summary>
            All the points have the same color.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType.Colors">
      <summary>
            Each point has its own color.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType.Intensity">
      <summary>
            Each point has its own intensity.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.ReadFastPointCloudBase.formatType.Classification">
      <summary>
            Each point has its own color related to its own classification.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadOBJ">
      <summary>
             Utility class for loading OBJ files asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadOBJ.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.String,System.String,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>
            Missing MTL and preserve UV constructor. When the MTL file is missing, the <paramref name="matName" /> material is used
            for all objects on existing UV map.
            </summary>
      <param name="fileName">The file to read</param>
      <param name="matName">Material name</param>
      <param name="edgeStyle">The edge style type of the resulting meshes</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.String,System.Boolean,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>
            Constructor with file name, plain and edge style specifications.
            </summary>
      <param name="fileName">The file to read</param>
      <param name="plain">If true colors and textures are skipped</param>
      <param name="edgeStyle">The edge style type of the resulting meshes</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.IO.Stream,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>
            Constructor with stream and edge style specifications.
            </summary>
      <param name="stream">The file stream</param>
      <param name="edgeStyle">The edge style type of the resulting meshes</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.IO.Stream,System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.IO.Stream},devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>
            Constructor with streams and edge style specifications.
            </summary>
      <param name="objStream">The file stream</param>
      <param name="materialStream">The stream of the material file</param>
      <param name="texturesStream">The stream of the texture files. The key must be the filename of the texture without the path (e.g. myTexture1.bmp).</param>
      <param name="edgeStyle">The edge style type of the resulting meshes</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.String,System.Boolean)">
      <summary>
            Constructor with file name and plain specifications.
            </summary>
      <param name="fileName">The file to read</param>
      <param name="plain">If true colors and textures are skipped</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.String,devDept.Geometry.Entities.GMesh.edgeStyleType)">
      <summary>
            Constructor with file name and edge style specifications.
            </summary>
      <param name="fileName">The file to read</param>
      <param name="edgeStyle">The edge style type of the resulting meshes</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadOBJ.#ctor(System.String)">
      <summary>
            Constructor with file name specification.
            </summary>
      <param name="fileName">The file to read</param>
    </member>
    <member name="T:devDept.Eyeshot.Translators.Read3DS">
      <summary>
            Utility class for loading 3DS files asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.Read3DS.SmoothingAngle">
      <summary> 
            Gets or sets the resulting meshes smoothing angle (in radians).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.Read3DS.#ctor(System.String)">
      <summary>
            File name constructor.
            </summary>
      <param name="fileName">The file name.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.Read3DS.#ctor(System.String,System.Double)">
      <summary>
            File name and smoothing angle constructor.
            </summary>
      <param name="fileName">The file name.</param>
      <param name="smoothingAngle">The angular value (in radians) used by normal averaging and sharp edges calculation of loaded mesh.</param>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadSTL">
      <summary>
            Utility class for loading STL files asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadSTL.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.String,System.Boolean,System.Boolean,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            File name, light weight and mesh nature settings constructor.
            </summary>
      <param name="fileName">The file name</param>
      <param name="lightWeight">When true the mesh is loaded in light weight mode.</param>
      <param name="splitDisjoint">Divides into separate objects meshes that do not connect</param>
      <param name="meshNature">The mesh nature type of the resulting meshes.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.String,System.Boolean,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            File name, light weight and mesh nature settings constructor.
            </summary>
      <param name="fileName">The file name</param>
      <param name="lightWeight">When true the mesh is loaded in light weight mode.</param>
      <param name="meshNature">The mesh nature type of the resulting meshes.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.String,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            File name and mesh nature settings constructor.
            </summary>
      <param name="fileName">The file name</param>
      <param name="meshNature">The mesh nature type of the resulting meshes.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.String,System.Boolean)">
      <summary>
            File name and light weight settings constructor.
            </summary>
      <param name="fileName">The file name</param>
      <param name="lightWeight">When true the mesh is loaded in light weight mode.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.String)">
      <summary>
            File name constructor.
            </summary>
      <param name="fileName">The file name</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.IO.Stream)">
      <summary>
            Stream constructor.
            </summary>
      <param name="stream">The file stream</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Constructor with stream and lightWeight specifications.
            </summary>
      <param name="stream">The file stream</param>
      <param name="lightWeight">When true the mesh is loaded in light weight mode</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.IO.Stream,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Constructor with stream and mesh nature specifications.
            </summary>
      <param name="stream">The file stream</param>
      <param name="meshNature">The mesh nature type of the resulting meshes</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.IO.Stream,System.Boolean,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Constructor with stream, light weight and mesh nature specifications.
            </summary>
      <param name="stream">The file stream</param>
      <param name="lightWeight">When true the mesh is loaded in light weight mode</param>
      <param name="meshNature">The mesh nature type of the resulting meshes</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadSTL.#ctor(System.IO.Stream,System.Boolean,System.Boolean,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Constructor with stream, light weight and mesh nature specifications.
            </summary>
      <param name="stream">The file stream</param>
      <param name="lightWeight">When true the mesh is loaded in light weight mode</param>
      <param name="splitDisjoint">Divides into separate objects meshes that do not connect</param>
      <param name="meshNature">The mesh nature type of the resulting meshes</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadFile">
      <summary>
            Utility class for loading Eyeshot files asynchronously.    
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.FileSerializer">
      <summary>
            Gets the <see cref="T:devDept.Serialization.FileSerializer" /> used to read the file.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.HeaderOnly">
      <summary>
            When true, only the file header is read.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.Camera">
      <summary>
            The Camera definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.RestoreCamera">
      <summary>
            Indicates whether the <see cref="P:devDept.Eyeshot.Translators.ReadFile.Camera" /> will be restored when calling <see cref="M:devDept.Eyeshot.Translators.ReadFile.AddToScene(devDept.Eyeshot.Workspace,devDept.Eyeshot.RegenOptions)" /> method. Default value is true.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.FileHeader">
      <summary>
            Gets the file header.
            </summary>
      <remarks>
            This property is filled after reading data or after calling <see cref="M:devDept.Eyeshot.Translators.ReadFile.GetFileInfo" />() or <see cref="M:devDept.Eyeshot.Translators.ReadFile.GetHeader" />() or <see cref="M:devDept.Eyeshot.Translators.ReadFile.GetThumbnail(System.Int32)" />() methods.
            </remarks>
      <seealso cref="M:devDept.Eyeshot.Translators.ReadFile.GetFileInfo" />
      <seealso cref="M:devDept.Eyeshot.Translators.ReadFile.GetHeader" />
      <seealso cref="M:devDept.Eyeshot.Translators.ReadFile.GetThumbnail(System.Int32)" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.DrawingsSilhouettesLayerName">
      <summary>
            Gets or sets the drawing silhouettes layer name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.DrawingsEdgesLayerName">
      <summary>
            Gets or sets the drawing edges layer name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.DrawingsWiresLayerName">
      <summary>
            Gets or sets the drawing wires layer name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.DrawingsHiddenSilhouettesLayerName">
      <summary>
            Gets or sets the drawing hidden silhouettes layer name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.DrawingsHiddenEdgesLayerName">
      <summary>
            Gets or sets the drawing hidden edges layer name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.DrawingsHiddenWiresLayerName">
      <summary>
            Gets or sets the drawing hidden wires layer name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.DrawingsGhostCirclesLayerName">
      <summary>
            Gets or sets the drawing ghost circles layer name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.DrawingsCenterlinesLayerName">
      <summary>
            Gets or sets the drawing centerlines layer name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.DrawingsHiddenSegmentsLineTypeName">
      <summary>
            Gets or sets the drawing hidden segments linetype name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadFile.DrawingsCenterlinesLineTypeName">
      <summary>
            Gets or sets the drawing centerlines line type name.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFile.GetFileInfo">
      <summary>
            Gets the file header info.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Translators.ReadFile.FileHeader" />
      <remarks>
            If you need to read the file header only, you can call the static method <see cref="M:devDept.Eyeshot.Translators.ReadFile.GetFileInfo(System.String)" /> instead.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFile.GetHeader">
      <summary>
            Gets the file header.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Translators.ReadFile.FileHeader" />
      <remarks>
            If you need to read the file header only, you can call the static method <see cref="M:devDept.Eyeshot.Translators.ReadFile.GetHeader(System.String)" /> instead.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFile.GetThumbnail(System.Int32)">
      <summary>
            Gets the thumbnail.
            </summary>
      <param name="thumbnailSize">Desired size of the biggest dimension of the thumbnail (The maximum is 256).</param>
      <remarks>
            Returns null/Nothing if the thumbnail was not stored in the file.
            If you need to read the file header only, you can call the static method <see cref="M:devDept.Eyeshot.Translators.ReadFile.GetThumbnail(System.String,System.Int32)" /> instead.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFile.GetFileInfo(System.String)">
      <summary>
            Gets the file header info.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFile.GetHeader(System.String)">
      <summary>
            Gets the file header.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFile.GetThumbnail(System.String,System.Int32)">
      <summary>
            Gets the thumbnail.
            </summary>
      <param name="thumbnailSize">Desired size of the biggest dimension of the thumbnail (The maximum is 256).</param>
      <remarks>Returns null/Nothing if the thumbnail was not stored in the file.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFile.#ctor(System.String,System.Boolean,devDept.Serialization.contentType)">
      <summary>
            File name constructor.
            </summary>
      <param name="fileName">The file name</param>
      <param name="headerOnly">When true only the file header is read.</param>
      <param name="deserializationType">The <see cref="T:devDept.Serialization.contentType" /> that must be read. If not specified, it will be used the one specified inside the file.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFile.#ctor(System.String,devDept.Serialization.contentType)">
      <summary>
            File name and content constructor.
            </summary>
      <param name="fileName">The file name</param>
      <param name="deserializationType">The <see cref="T:devDept.Serialization.contentType" /> that must be read. If not specified, it will be used the one specified inside the file.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFile.#ctor(System.String,devDept.Serialization.FileSerializer,System.Boolean)">
      <summary>
            File name and fileSerializer constructor.
            </summary>
      <param name="fileName">The file name</param>
      <param name="fileSerializer">The file serializer that must be used to read the file. Use this when you need to include additional fields definition for reading custom entities.</param>
      <param name="headerOnly">When true only the file header is read.</param>
      <remarks>
            If you want to include special Autodesk objects like LayerEx, LinearPathEx, PictureEx, etc. you need to pass a new FileSerializerEx() as fileSerializer parameter.
            Use the <see cref="M:devDept.Serialization.FileSerializer.#ctor(devDept.Serialization.contentType)" /> constructor to initialize it.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFile.#ctor(System.IO.Stream,System.Boolean,devDept.Serialization.contentType)">
      <summary>
            File stream constructor.
            </summary>
      <param name="stream">The file stream</param>
      <param name="headerOnly">When true only the file header is read.</param>
      <param name="deserializationType">The <see cref="T:devDept.Serialization.contentType" /> that must be read. If not specified, it will be used the one specified inside the file.</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFile.#ctor(System.IO.Stream,devDept.Serialization.contentType)">
      <summary>
            File stream and content constructor.
            </summary>
      <param name="stream">The file stream</param>
      <param name="deserializationType">The <see cref="T:devDept.Serialization.contentType" /> that must be read. If not specified, it will be used the one specified inside the file.</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadFile.#ctor(System.IO.Stream,devDept.Serialization.FileSerializer,System.Boolean)">
      <summary>
            File stream and fileSerializer constructor.
            </summary>
      <param name="stream">The file stream</param>
      <param name="fileSerializer">The file serializer that must be used to read the file. Use this when you need to include additional fields definition for reading custom entities.</param>
      <param name="headerOnly">When true only the file header is read.</param>
      <remarks>
            If you want to include special Autodesk objects like LayerEx, LinearPathEx, PictureEx, etc. you need to pass a new FileSerializerEx() as fileSerializer parameter.
            Use the <see cref="M:devDept.Serialization.FileSerializer.#ctor(devDept.Serialization.contentType)" /> constructor to initialize it.
            The closing of the stream is delegated to you.
            </remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteFile">
      <summary>
            Helper class to export geometry in Eyeshot file format.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFile.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.WriteFile.materials">
      <summary>
            The materials collection.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.WriteFile.content">
      <summary>
            The content type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.WriteFile.serializationMode">
      <summary>
            The serialization type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.WriteFile.version">
      <summary>
            The Eyeshot proprietary file format version
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.WriteFile.FileSerializer">
      <summary>
            The file serializer used to write the file.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.WriteFile.tag">
      <summary>
            The tag to add to the file header.
            </summary>
      <seealso cref="P:devDept.Serialization.FileHeader.Tag" />.
        </member>
    <member name="F:devDept.Eyeshot.Translators.WriteFile.purge">
      <summary>
            When true unused items, such as block definitions, layers, etc. are not written.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.WriteFile.saveThumbnail">
      <summary>
            When true a thumbnail of 256x256 is stored in the file.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Translators.WriteFileParams.SaveThumbnail" />.
        </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFile.#ctor(devDept.Eyeshot.Translators.WriteFileParams,System.String,devDept.Serialization.FileSerializer)">
      <summary>
            Write params and file name constructor.
            </summary>
      <param name="writeFileParams">The <see cref="T:devDept.Eyeshot.Translators.WriteFileParams" /></param>
      <param name="fileName">The file name (it must include the extension)</param>
      <param name="fileSerializer">The file serializer that must be used to write the file. Use this when you need to include additional fields definition for writing custom entities.</param>
      <remarks>
            If you want to include special Autodesk objects like LayerEx, LinearPathEx, PictureEx, etc. you need to pass a new FileSerializerEx() as fileSerializer parameter.        
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFile.#ctor(devDept.Eyeshot.Translators.WriteFileParams,System.IO.Stream,devDept.Serialization.FileSerializer)">
      <summary>
            Write params and stream constructor.
            </summary>
      <param name="writeFileParams">The <see cref="T:devDept.Eyeshot.Translators.WriteFileParams" /></param>
      <param name="stream">The file stream</param>
      <param name="fileSerializer">The file serializer that must be used to write the file. Use this when you need to include additional fields definition for writing custom entities or custom data.</param>
      <remarks>
            If you want to include special Autodesk objects like LayerEx, LinearPathEx, PictureEx, etc. you need to pass a new FileSerializerEx() as fileSerializer parameter.        
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFile.InitLayers(devDept.Eyeshot.LayerKeyedCollection)">
      <summary>
            Initializes the layers collection, including those with Exportable to false
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.MultiFileItem">
      <summary>
            Helper class representing a single file for the Eyeshot MultiFile usages.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.MultiFileItem.#ctor(System.String,devDept.Serialization.fileType)">
      <summary>
            Standard constructor.
            </summary>
      <param name="fullPath">The full path including file name and extension.</param>
      <param name="fileType">The <see cref="T:devDept.Serialization.fileType" />.</param>
    </member>
    <member name="F:devDept.Eyeshot.Translators.MultiFileItem.FullPath">
      <summary>
            The full path including file name and extension.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.MultiFileItem.FileType">
      <summary>
            The <see cref="T:devDept.Serialization.fileType" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.MultiFileItem.BlockName">
      <summary>
            Gets the file name without extension that should be the root block's name of the file
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.MultiFileData">
      <summary>
            Helper class representing a single assembly file for the Eyeshot MultiFile usages.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.MultiFileData.#ctor(System.String,devDept.Serialization.fileType,devDept.Eyeshot.Translators.MultiFileItem[])">
      <summary>
            Standard constructor.
            </summary>
      <param name="fullPath">The full path including file name and extension.</param>
      <param name="fileType">The <see cref="T:devDept.Serialization.fileType" />.</param>
      <param name="items">The array of the files included in the assembly.</param>
    </member>
    <member name="F:devDept.Eyeshot.Translators.MultiFileData.FullPath">
      <summary>
            The full path including file name and extension.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.MultiFileData.FileType">
      <summary>
            The <see cref="T:devDept.Serialization.fileType" />.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.MultiFileData.Items">
      <summary>
            The array of the files included in the assembly.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.MultiFileData.BlockName">
      <summary>
            Gets the file name without extension representing the block's name.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadMultiFile">
      <summary>
            Utility class for loading Eyeshot MultiFile asynchronously.
            </summary>
      <seealso cref="T:devDept.Eyeshot.Translators.LazyLoading" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadMultiFile.SubItems">
      <summary>
            Gets the array containing info about files composing the root level of the assembly.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadMultiFile.TreeItems">
      <summary>
            Gets the array containing info about all the files composing the whole assembly.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.ReadMultiFile.StructureOnly">
      <summary>
            Indicates whether the reader is run for loading structure only or not (Default is False).
            </summary>
      <remarks>When true, geometric files are not loaded. All the logic for reading other files and adding the content to the scene is delegated to <see cref="T:devDept.Eyeshot.Translators.LazyLoading" /> work unit.</remarks>
      <seealso cref="P:devDept.Eyeshot.Translators.ReadMultiFile.TreeItems" />
      <seealso cref="T:devDept.Eyeshot.Translators.LazyLoading" />
    </member>
    <member name="F:devDept.Eyeshot.Translators.ReadMultiFile.Parallel">
      <summary>
            Indicates whether the loading of the files is performed in parallel or not (Default is True).
            </summary>
      <remarks>This option does not affect <see cref="F:devDept.Eyeshot.Translators.ReadMultiFile.StructureOnly" /> loading.</remarks>
      <seealso cref="F:devDept.Eyeshot.Translators.ReadMultiFile.StructureOnly" />
    </member>
    <member name="T:devDept.Eyeshot.Translators.LazyLoading">
      <summary>
            Helper class used for lazy loading.
            </summary>
      <remarks>Used in conjunction with <see cref="T:devDept.Eyeshot.Translators.ReadMultiFile" /> class when <see cref="F:devDept.Eyeshot.Translators.ReadMultiFile.StructureOnly" /> is set to true.</remarks>
      <seealso cref="T:devDept.Eyeshot.Translators.ReadMultiFile" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.LazyLoading.Result">
      <summary>
            Gets the result of reading operation (true if the operation succeeded).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.LazyLoading.TreeItems">
      <summary>
            Gets the array containing info about all the files composing the whole assembly.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.LazyLoading.LoadedBlockNames">
      <summary>
            Gets the array of blocks' names read after the latest run.
            </summary>
      <remarks>This list becomes empty at the begin of  <see cref="M:devDept.Eyeshot.Translators.LazyLoading.DoWork(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)" />() call.</remarks>
      <seealso cref="P:devDept.Eyeshot.Translators.LazyLoading.BlockName" />
      <seealso cref="P:devDept.Eyeshot.Translators.LazyLoading.AllLoadedBlockNames" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.LazyLoading.SkipLoadedBlocks">
      <summary>
            Indicates whether the already loaded blocks must be re-read or not. Default value is true.
            </summary>
      <remarks>Can be helpful for handling cases where a sub-assembly file is updated elsewhere and you want to reload it.</remarks>
      <seealso cref="P:devDept.Eyeshot.Translators.LazyLoading.AllLoadedBlockNames" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.LazyLoading.Parallel">
      <summary>
            Indicates whether the loading of the files is performed in parallel or not (Default is True).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.LazyLoading.AllLoadedBlockNames">
      <summary>
            Gets the blocks' names already read.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Translators.LazyLoading.SkipLoadedBlocks" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.LazyLoading.BlockName">
      <summary>
            Gets the name of the block representing the base assembly from which the loading started.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Translators.LazyLoading.LoadedBlockNames" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.LazyLoading.Camera">
      <summary>
            Gets <see cref="P:devDept.Eyeshot.Translators.LazyLoading.Camera" /> read from the base assembly file. Can be null/Nothing if the base assembly is a sub-assembly of another one.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.LazyLoading.#ctor(devDept.Eyeshot.Translators.MultiFileData[],devDept.Serialization.FileSerializer)">
      <summary>
            Standard constructor.
            </summary>
      <param name="treeItems">The array containing info about all the files composing the whole assembly.</param>
      <param name="fileSerializer">The <see cref="T:devDept.Serialization.FileSerializer" /> that will be used for loading each single file.</param>
      <seealso cref="M:devDept.Eyeshot.Translators.LazyLoading.SetBlockName(System.String)" />
    </member>
    <member name="M:devDept.Eyeshot.Translators.LazyLoading.SetBlockName(System.String)">
      <summary>
            Sets the name of the block representing the assembly and all its sub-assemblies that will be loaded by this work unit.
            </summary>
      <param name="blockName">The name of the block representing the base assembly.</param>
      <param name="fileType">The <see cref="T:devDept.Serialization.fileType" /> of the file containing base assembly data.</param>
      <param name="fullPath">The absolute full path (including file name and extension) of the file containing base assembly data.</param>
      <remarks>Call this method before starting the work of this work unit.</remarks>
      <seealso cref="M:devDept.Eyeshot.Translators.LazyLoading.AddToScene(devDept.Eyeshot.Design)" />
    </member>
    <member name="M:devDept.Eyeshot.Translators.LazyLoading.AddToScene(devDept.Eyeshot.Design)">
      <summary>
            Adds the loaded data to the scene.
            </summary>
      <param name="design">The Design control where adding the loaded data.</param>
      <seealso cref="M:devDept.Eyeshot.Translators.LazyLoading.SetBlockName(System.String)" />
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when this method is called before calling DoWork() method or when it is called before using a ReadMultiFile work unit to prepare the scene for lazy loading.</exception>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteMultiFile">
      <summary>
            Helper class to export geometry in Eyeshot MultiFile format.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteMultiFile.AsmSuffix">
      <summary>
            Gets or sets the suffix that identify the file extension for the assembly files. Default value is "asm".
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteMultiFile.WrittenFiles">
      <summary>
            Gets the array containing written files' full paths.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteMultiFile.#ctor(devDept.Eyeshot.Translators.WriteMultiFileParams,System.String,devDept.Serialization.FileSerializer)">
      <summary>
            Write params and file name constructor.
            </summary>
      <param name="writeMultiFileParams"> The <see cref="T:devDept.Eyeshot.Translators.WriteMultiFileParams" />.</param>
      <param name="fileName">The file name (it must include the extension)</param>
      <param name="fileSerializer">The file serializer that must be used to write the file. Use this when you need to include additional fields definition for writing custom entities.</param>
      <remarks>
            If you want to include special Autodesk objects like LayerEx, LinearPathEx, PictureEx, etc. you need to pass a new FileSerializerEx() as fileSerializer parameter.
            Drawing is not supported.
            </remarks>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Throw when <see cref="T:devDept.Eyeshot.Translators.WriteFileParams" /> was created using a constructor accepting the Drawing control.</exception>
    </member>
    <member name="F:devDept.Eyeshot.Translators.WriteMultiFile.updateThubmnails">
      <summary>
            When true and <see cref="P:devDept.Eyeshot.Translators.WriteFileParams.SaveThumbnail" /> is true too, a thumbnail of 256x256 is stored in the file.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Translators.WriteMultiFileParams.UpdateThumbnails" />.
        </member>
    <member name="P:devDept.Eyeshot.Translators.WriteMultiFile.UpdatingThumbnailsText">
      <summary>
            Gets or sets the "Updating thumbnail..." text string.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.WriteMultiFile.parallel">
      <summary>
            Indicates whether the writing of the files is performed in parallel or not.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Translators.WriteMultiFileParams.Parallel" />.
        </member>
    <member name="T:devDept.Eyeshot.Translators.ReadIGES">
      <summary>
            Utility class for loading IGES files asynchronously.
            <para>The list of supported entities follows:</para><table><tbody><tr><td height="13"><strong>Type</strong></td><td height="13"><strong>Form</strong></td><td height="13"><strong>Entity Name</strong></td></tr><tr><td align="right">100</td><td></td><td>Arc</td></tr><tr><td align="right">102</td><td></td><td>Composite Curve</td></tr><tr><td align="right">104</td><td align="right">1</td><td>Conic Arc</td></tr><tr><td align="right">106</td><td align="right">1, 2, 12</td><td>Copious Data</td></tr><tr><td align="right">108</td><td></td><td>Plane</td></tr><tr><td align="right">110</td><td></td><td>Line</td></tr><tr><td align="right">112</td><td></td><td>Parametric spline</td></tr><tr><td align="right">114</td><td></td><td>Parametric spline surface</td></tr><tr><td align="right">116</td><td></td><td>Point</td></tr><tr><td align="right">118</td><td></td><td>Ruled Surface</td></tr><tr><td align="right">120</td><td></td><td>Surface of Revolution</td></tr><tr><td align="right">122</td><td></td><td>Tabulated Surface</td></tr><tr><td align="right">124</td><td></td><td>Transformation Matrix</td></tr><tr><td align="right">126</td><td></td><td>Rational B-Spline Curve</td></tr><tr><td align="right">128</td><td></td><td>Rational B-Spline Surface</td></tr><tr><td align="right">140</td><td></td><td>Offset surface</td></tr><tr><td align="right">141</td><td></td><td>Boundary Entity</td></tr><tr><td align="right">142</td><td></td><td>Curve on Parametric Surface</td></tr><tr><td align="right">143</td><td></td><td>Bounded Surface</td></tr><tr><td align="right">144</td><td></td><td>Trimmed Parametric Surface</td></tr><tr><td align="right">186</td><td></td><td>Manifold Solid BRep</td></tr><tr><td align="right">190</td><td></td><td>Planar Surface</td></tr><tr><td align="right">192</td><td></td><td>Right Circular Cylindrical Surface</td></tr><tr><td align="right">194</td><td></td><td>Right Circular Conical Surface</td></tr><tr><td align="right">196</td><td></td><td>Spherical Surface</td></tr><tr><td align="right">198</td><td></td><td>Torical Surface</td></tr><tr><td align="right">212</td><td></td><td>General Note</td></tr><tr><td align="right">308</td><td></td><td>Subfigure Definition</td></tr><tr><td align="right">314</td><td></td><td>Color Definition</td></tr><tr><td align="right">402</td><td align="right">15</td><td>Ordered Group</td></tr><tr><td align="right">406</td><td align="right">3</td><td>Level Function Property</td></tr><tr><td align="right">408</td><td></td><td>Singular Subfigure Instance</td></tr><tr><td align="right">502</td><td></td><td>Vertex</td></tr><tr><td align="right">504</td><td></td><td>Edge</td></tr><tr><td align="right">508</td><td></td><td>Loop</td></tr><tr><td align="right">510</td><td></td><td>Face</td></tr><tr><td align="right">514</td><td></td><td>Shell</td></tr></tbody></table></summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadIGES.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadIGES.ModelSpaceScale">
      <summary>
            Gets IGES design space scale. The ratio of design space to real-world space.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadIGES.Simplify">
      <summary>
            Controls if generic surfaces are converted to <see cref="T:devDept.Eyeshot.Entities.PlanarSurface" />, <see cref="T:devDept.Eyeshot.Entities.TabulatedSurface" /> or <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface" /> to improve import speed.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadIGES.#ctor(System.String,System.Boolean)">
      <summary>
            File name constructor.
            </summary>
      <param name="fileName">The file name</param>
      <param name="applyScaling">Applies IGES design space scale</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadIGES.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            File stream constructor.
            </summary>
      <param name="stream">The file stream</param>
      <param name="applyScaling">Applies IGES design space scale</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteIGES">
      <summary>
            Helper class to export geometry in IGES file format.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteIGES.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(devDept.Eyeshot.Workspace,System.String,System.Boolean)">
      <summary>
            Workspace and file name constructor.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="fileName">The file name (with *.igs extension)</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the file already exists, it will be overwritten.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(devDept.Eyeshot.Workspace,System.IO.Stream,System.Boolean)">
      <summary>
            Workspace and stream constructor.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="stream">The file stream</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The closing of the stream is delegated to you.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(devDept.Eyeshot.Workspace,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Workspace and file name constructor.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="fileName">The file name (with *.igs extension)</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="author">Author name</param>
      <param name="organization">Organization name</param>
      <param name="originatingSystem">Originating system name</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the file already exists, it will be overwritten.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(devDept.Eyeshot.Workspace,System.IO.Stream,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Workspace and stream constructor.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="stream">The file stream</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="author">Author name</param>
      <param name="organization">Organization name</param>
      <param name="originatingSystem">Originating system name</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The closing of the stream is delegated to you.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(devDept.Eyeshot.Translators.WriteParamsWithUnits,System.String)">
      <summary>
            Document and file name constructor.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithUnits" /></param>
      <param name="fileName">The file name (with *.igs extension)</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the file already exists, it will be overwritten.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(devDept.Eyeshot.Translators.WriteParamsWithUnits,System.IO.Stream)">
      <summary>
            Document and stream constructor.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithUnits" /></param>
      <param name="stream">The file stream</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The closing of the stream is delegated to you.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,devDept.Geometry.linearUnitsType,System.Boolean)">
      <summary>
            Collections and file name constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="units">The design units</param>
      <param name="blockDict">The block dictionary</param>
      <param name="fileName">The file name (with the *.igs extension)</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the file already exists, it will be overwritten.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,devDept.Geometry.linearUnitsType,System.Boolean)">
      <summary>
            Collections and stream constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="units">The design units</param>
      <param name="blockDict">The block dictionary</param>
      <param name="stream">The file stream</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The closing of the stream is delegated to you.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,devDept.Geometry.linearUnitsType,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Collections and file name constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="fileName">The file name (with the *.igs extension)</param>
      <param name="units">The design units</param>
      <param name="author">Author name</param>
      <param name="organization">Organization name</param>
      <param name="originatingSystem">Originating system name</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the file already exists, it will be overwritten.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteIGES.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,devDept.Geometry.linearUnitsType,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Collections and stream constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="stream">The file stream</param>
      <param name="units">The design units</param>
      <param name="author">Author name</param>
      <param name="organization">Organization name</param>
      <param name="originatingSystem">Originating system name</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The closing of the stream is delegated to you.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.ReadSTEP">
      <summary>
            Utility class for loading STEP files asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadSTEP.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadSTEP.Simplify">
      <summary>
            Controls if generic surfaces are converted to <see cref="T:devDept.Eyeshot.Entities.PlanarSurface" />, <see cref="T:devDept.Eyeshot.Entities.TabulatedSurface" /> or <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface" /> to improve import speed.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadSTEP.#ctor(System.IO.Stream)">
      <summary>
            File stream constructor.
            </summary>
      <param name="stream">The file stream</param>
      <param name="includeWires">Include free point/curves entities</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.ReadSTEP.#ctor(System.String)">
      <summary>
            File name constructor.
            </summary>
      <param name="fileName">The file name</param>
    </member>
    <member name="P:devDept.Eyeshot.Translators.ReadSTEP.EncapsulateSiblings">
      <summary>
        <para>When true, entities at the same level of BlockReferences are encapsulated
            inside a new block.</para>
        <para>Many CAD systems have difficulties to handle individual entities at the
            same level of BlockReferences. Using this flag, all individual entities at the
            same level of BlockReferences are replaced by a BlockReference with a name at
            random.</para>
      </summary>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteSTEP">
      <summary>
            Helper class to export geometry in STEP file format.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteSTEP.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(devDept.Eyeshot.Workspace,System.String,System.Boolean)">
      <summary>
            Workspace, header and file name constructor.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="fileName">The file name (with *.stp extension)</param>
      <param name="selectedOnly">When true, only selected entities are exported.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the file already exists, it will be overwritten.</description>
          </item>
          <item>
            <description>If <see cref="P:devDept.Eyeshot.Workspace.Blocks" /> count is bigger than zero, the STEP file is written in assembly mode. In the opposite case it is written in individual entity mode.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
          <item>
            <description>
              <paramref name="selectedOnly" /> is supported only in individual entity mode.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(devDept.Eyeshot.Workspace,System.IO.Stream,System.Boolean)">
      <summary>
            Workspace, header and stream constructor.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="stream">The file stream</param>
      <param name="selectedOnly">When true, only selected entities are exported.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The closing of the stream is delegated to you.</description>
          </item>
          <item>
            <description>If <see cref="P:devDept.Eyeshot.Workspace.Blocks" /> count is bigger than zero, the STEP file is written in assembly mode. In the opposite case it is written in individual entity mode.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
          <item>
            <description>
              <paramref name="selectedOnly" /> is supported only in individual entity mode.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(devDept.Eyeshot.Workspace,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Workspace and file name constructor.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="fileName">The file name (with *.stp extension)</param>
      <param name="author">The author name</param>
      <param name="organization">The organization name</param>
      <param name="originatingSystem">The originating system name</param>
      <param name="selectedOnly">When true, only selected entities are exported.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the file already exists, it will be overwritten.</description>
          </item>
          <item>
            <description>If <see cref="P:devDept.Eyeshot.Workspace.Blocks" /> count is bigger than zero, the STEP file is written in assembly mode. In the opposite case it is written in individual entity mode.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
          <item>
            <description>
              <paramref name="selectedOnly" /> is supported only in individual entity mode.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(devDept.Eyeshot.Workspace,System.IO.Stream,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Workspace and stream constructor.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="stream">The file stream</param>
      <param name="author">The author name</param>
      <param name="organization">The organization name</param>
      <param name="originatingSystem">The originating system name</param>
      <param name="selectedOnly">When true, only selected entities are exported.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The closing of the stream is delegated to you.</description>
          </item>
          <item>
            <description>If <see cref="P:devDept.Eyeshot.Workspace.Blocks" /> count is bigger than zero, the STEP file is written in assembly mode. In the opposite case it is written in individual entity mode.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
          <item>
            <description>
              <paramref name="selectedOnly" /> is supported only in individual entity mode.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(devDept.Eyeshot.Translators.WriteParamsWithUnits,System.String)">
      <summary>
            Document and file name constructor.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithUnits" /></param>
      <param name="fileName">The file name (with *.stp extension)</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the file already exists, it will be overwritten.</description>
          </item>
          <item>
            <description>If <see cref="P:devDept.Eyeshot.Translators.WriteParams.Blocks" /> count is bigger than zero, the STEP file is written in assembly mode. In the opposite case it is written in individual entity mode.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(devDept.Eyeshot.Translators.WriteParamsWithUnits,System.IO.Stream)">
      <summary>
            Document and stream constructor.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithUnits" /></param>
      <param name="stream">The file stream</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The closing of the stream is delegated to you.</description>
          </item>
          <item>
            <description>If <see cref="P:devDept.Eyeshot.Translators.WriteParams.Blocks" /> count is bigger than zero, the STEP file is written in assembly mode. In the opposite case it is written in individual entity mode.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,devDept.Geometry.linearUnitsType,System.Boolean)">
      <summary>
            Collections and file name constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="units">The design units</param>
      <param name="blockDict">The block dictionary</param>
      <param name="fileName">The file name (with the *.stl extension)</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the file already exists, it will be overwritten.</description>
          </item>
          <item>
            <description>If <paramref name="blockDict" /> count is bigger than zero, the STEP file is written in assembly mode. In the opposite case it is written in individual entity mode.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,devDept.Geometry.linearUnitsType,System.Boolean)">
      <summary>
            Collections and stream constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="units">The design units</param>
      <param name="blockDict">The block dictionary</param>
      <param name="stream">The file stream</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The closing of the stream is delegated to you.</description>
          </item>
          <item>
            <description>If <paramref name="blockDict" /> count is bigger than zero, the STEP file is written in assembly mode. In the opposite case it is written in individual entity mode.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,devDept.Geometry.linearUnitsType,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Collections and file name constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="fileName">The file name (with the *.stl extension)</param>
      <param name="units">The design units</param>
      <param name="author">Author name</param>
      <param name="organization">Organization name</param>
      <param name="originatingSystem">Originating system name</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>If the file already exists, it will be overwritten.</description>
          </item>
          <item>
            <description>If <paramref name="blockDict" /> count is bigger than zero, the STEP file is written in assembly mode. In the opposite case it is written in individual entity mode.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTEP.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,devDept.Geometry.linearUnitsType,System.String,System.String,System.String,System.Boolean)">
      <summary>
            Collections and stream constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="stream">The file stream</param>
      <param name="units">The design units</param>
      <param name="author">Author name</param>
      <param name="organization">Organization name</param>
      <param name="originatingSystem">Originating system name</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>
        <list type="bullet">
          <item>
            <description>The closing of the stream is delegated to you.</description>
          </item>
          <item>
            <description>If <paramref name="blockDict" /> count is bigger than zero, the STEP file is written in assembly mode. In the opposite case it is written in individual entity mode.</description>
          </item>
          <item>
            <description>
              <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" /> as <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> is not supported.</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteFileAsync">
      <summary>
            Base class for asynchronous file writing.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileAsync.FileName">
      <summary>
            The name of the file that will be created.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileAsync.Stream">
      <summary>
            The stream for writing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.WriteFileAsync.writeFileCloseStream">
      <summary>
            True when the constructors with filename is used, otherwise false.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Translators.WriteFileAsync.selectedOnly">
      <summary>
            When true only the selected entities will be written.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileAsync.OpenBlockName">
      <summary>
            Indicates the name of the current open block whether it must be considered as the root block for the export.
            </summary>
      <remarks>This property is internally initialized by <see cref="P:devDept.Eyeshot.Translators.WriteParams.OpenBlockName" />.</remarks>
      <seealso cref="M:devDept.Eyeshot.Translators.WriteFileAsync.PurgeCollectionsForOpenBlock(devDept.Eyeshot.MaterialKeyedCollection@,devDept.Eyeshot.TextStyleKeyedCollection@,devDept.Eyeshot.LineTypeKeyedCollection@,devDept.Eyeshot.HatchPatternKeyedCollection@)" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileAsync.Deviation">
      <summary>
            Gets or sets the maximum deviation, zero for current tessellation.
            </summary>
      <remarks>Zero means current tessellation or crash if tessellation is missing.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileAsync.Angle">
      <summary>
            Gets or sets the maximum angular deflection in radians, ignored when zero.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileAsync.WritingText">
      <summary>
            Gets or sets the "Writing..." text string.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileAsync.ComposingText">
      <summary>
            Gets or sets the "Composing..." text string.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileAsync.ComposingBlocksText">
      <summary>
            Gets or sets the "Composing blocks..." text string.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteFileAsync.ComposingEntitiesText">
      <summary>
            Gets or sets the "Composing entities..." text string.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.#ctor(System.String,System.Boolean)">
      <summary>
            For internal use only.
            </summary>
      <param name="fileName">The file name (it must include the extension)</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.#ctor(devDept.Eyeshot.Workspace,System.String,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="fileName">The file name (it must include the extension)</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.#ctor(devDept.Eyeshot.Workspace,System.IO.Stream,System.Boolean)">
      <summary>
            Standard constructor with stream.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="stream">The file stream</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.#ctor(devDept.Eyeshot.Translators.WriteParams,System.String)">
      <summary>
            Standard constructor with Document and filename.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParams" /></param>
      <param name="fileName">The file name (it must include the extension)</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.#ctor(devDept.Eyeshot.Translators.WriteParams,System.IO.Stream)">
      <summary>
            Standard constructor with Document and stream.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParams" /></param>
      <param name="stream">The file stream</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.PurgeCollectionsForOpenBlock(devDept.Eyeshot.MaterialKeyedCollection@,devDept.Eyeshot.TextStyleKeyedCollection@,devDept.Eyeshot.LineTypeKeyedCollection@,devDept.Eyeshot.HatchPatternKeyedCollection@)">
      <summary>
            Common method to call for exporting the open block only.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Translators.WriteFileAsync.OpenBlockName" />
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.SynchronizeAttributeReference(devDept.Eyeshot.Workspace)">
      <summary>
            Helper method to synchronize all the attribute reference before writing the file.
            </summary>
      <param name="workspace">The workspace control.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.SynchronizeAttributeReference(devDept.Eyeshot.BlockKeyedCollection,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
      <summary>
            Helper method to synchronize all the attribute reference before writing the file.
            </summary>
      <param name="blocks">The blocks collection.</param>
      <param name="entities">The entities collection.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.RemoveInvalidChars(System.String)">
      <summary>
            Removes forbidden chars from a string representing a file path.
            </summary>
      <param name="dirtyFileName">The file name (full path) to check.</param>
      <returns>The file name cleaned.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.InitLayers(devDept.Eyeshot.LayerKeyedCollection)">
      <summary>
            Initializes the layers collection with only the exportable ones.
            </summary>
      <param name="layerCollection">The layer collection to write.</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.GetEntities">
      <summary>
            For internal use only.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String)">
      <summary>
            Entity list constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="fileName">The file name</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream)">
      <summary>
            To stream with entity list constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="stream">The file stream</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsync.ComputeBoundingBox(devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Compute scene extents.
            </summary>
      <param name="min">Lower left front corner</param>
      <param name="max">Upper right rear corner</param>
      <returns>The 3D size.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteASC">
      <summary>
            Helper class to export a <see cref="T:devDept.Eyeshot.Entities.FastPointCloud" /> in ASC file format.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteASC.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteASC.#ctor(devDept.Eyeshot.Entities.FastPointCloud,System.String,System.Char)">
      <summary>
            Standard constructor.
            </summary>
      <param name="fastPointCloud">The <see cref="T:devDept.Eyeshot.Entities.FastPointCloud" /></param>
      <param name="fileName">The file name</param>
      <param name="separator">The separator between coordinates values character</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteASC.#ctor(devDept.Eyeshot.Entities.FastPointCloud,System.IO.Stream,System.Char)">
      <summary>
            Standard constructor.
            </summary>
      <param name="fastPointCloud">The <see cref="T:devDept.Eyeshot.Entities.FastPointCloud" /></param>
      <param name="stream">The file stream</param>
      <param name="separator">The separator between coordinates values character</param>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteLAS">
      <summary>
            Helper class to export a <see cref="T:devDept.Eyeshot.Entities.FastPointCloud" /> in LAS file format (version 1.2 only).
            </summary>
      <remarks>
            No waveform or other data is stored, just point, classification, intensity and color data if present.
            The optional scaling factors override the optimal settings (for georeferenced data fixed factors of 0.01 are sometimes used).
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteLAS.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteLAS.Coordinates">
      <summary>
             Array with the x, y, z coordinates of the points with double precision.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteLAS.Intensities">
      <summary>
            Array of the “intensity” attribute for each point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteLAS.Classifications">
      <summary>
            Array of the “class” attribute for each point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteLAS.CustomScalingFactorX">
      <summary>
            Optional scaling factor in X to override the optimal settings (for georeferenced data fixed factors of 0.01 are sometimes used).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteLAS.CustomScalingFactorY">
      <summary>
            Optional scaling factor in Y to override the optimal settings (for georeferenced data fixed factors of 0.01 are sometimes used).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteLAS.CustomScalingFactorZ">
      <summary>
            Optional scaling factor in Z to override the optimal settings (for georeferenced data fixed factors of 0.01 are sometimes used).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteLAS.#ctor(devDept.Eyeshot.Entities.FastPointCloud,System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="fastPointCloud">The <see cref="T:devDept.Eyeshot.Entities.FastPointCloud" /></param>
      <param name="fileName">The file name</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteLAS.#ctor(devDept.Eyeshot.Entities.FastPointCloud,System.IO.Stream)">
      <summary>
            Standard constructor.
            </summary>
      <param name="fastPointCloud">The <see cref="T:devDept.Eyeshot.Entities.FastPointCloud" /></param>
      <param name="stream">The file stream</param>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteOBJ">
      <summary>
            Helper class to export geometry in OBJ file format.
            </summary>
      <remarks>If a string is stored in the <see cref="P:devDept.Eyeshot.Entities.Entity.EntityData" /> property, it will be appended to the object name.</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.EntityData" />
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteOBJ.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(devDept.Eyeshot.Workspace,System.String,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="fileName">The file name (with the *.obj extension)</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(devDept.Eyeshot.Workspace,System.IO.Stream,System.Boolean)">
      <summary>
            Standard constructor with stream.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="stream">The file stream</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>The material file will be NOT written.</remarks>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(devDept.Eyeshot.Workspace,System.String,System.Double,System.Boolean)">
      <summary>
            Deviation constructor. The exported model will be regenerated with specified deviation.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="fileName">The file name (with the *.obj extension)</param>
      <param name="deviation">The maximum deviation</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(devDept.Eyeshot.Workspace,System.IO.Stream,System.Double,System.Boolean)">
      <summary>
            To stream with deviation constructor. The exported model will be regenerated with specified deviation.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="stream">The file stream</param>
      <param name="deviation">The maximum deviation</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>The material file will be NOT written.</remarks>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(devDept.Eyeshot.Translators.WriteParamsWithMaterials,System.String)">
      <summary>
            Standard constructor with document and filename.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithMaterials" /></param>
      <param name="fileName">The file name (it must include the extension)</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(devDept.Eyeshot.Translators.WriteParamsWithMaterials,System.IO.Stream)">
      <summary>
            Standard constructor with document and stream.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithMaterials" /></param>
      <param name="stream">The file stream</param>
      <remarks>The material file will be NOT written.</remarks>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(devDept.Eyeshot.Translators.WriteParamsWithMaterials,System.String,System.Double)">
      <summary>
            Document and deviation constructor. The exported model will be regenerated with specified deviation.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithMaterials" /></param>
      <param name="fileName">The file name (with the *.obj extension)</param>
      <param name="deviation">The maximum deviation</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(devDept.Eyeshot.Translators.WriteParamsWithMaterials,System.IO.Stream,System.Double)">
      <summary>
            To stream with document and deviation constructor. The exported model will be regenerated with specified deviation.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithMaterials" /></param>
      <param name="stream">The file stream</param>
      <param name="deviation">The maximum deviation</param>
      <remarks>The material file will be NOT written.</remarks>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.IDictionary{System.String,devDept.Graphics.Material},System.String,devDept.Geometry.linearUnitsType,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="matDict">The material dictionary</param>
      <param name="fileName">The file name (with the *.obj extension)</param>
      <param name="units">The design workspace units</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.IDictionary{System.String,devDept.Graphics.Material},System.IO.Stream,devDept.Geometry.linearUnitsType,System.Boolean)">
      <summary>
            Standard constructor with stream.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="matDict">The material dictionary</param>
      <param name="stream">The file stream</param>
      <param name="units">The design workspace units</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>The material file will be NOT written.</remarks>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.IDictionary{System.String,devDept.Graphics.Material},System.String,System.Double,devDept.Geometry.linearUnitsType,System.Boolean)">
      <summary>
            Deviation constructor. The exported model will be regenerated with specified deviation.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="matDict">The material dictionary</param>
      <param name="fileName">The file name (with the *.obj extension)</param>
      <param name="deviation">The maximum deviation</param>
      <param name="units">The design workspace units</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteOBJ.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.IDictionary{System.String,devDept.Graphics.Material},System.IO.Stream,System.Double,devDept.Geometry.linearUnitsType,System.Boolean)">
      <summary>
            To stream with deviation constructor. The exported model will be regenerated with specified deviation.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="matDict">The material dictionary</param>
      <param name="stream">The file stream</param>
      <param name="deviation">The maximum deviation</param>
      <param name="units">The design workspace units</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>The material file will be NOT written.</remarks>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteSTL">
      <summary>
            Helper class to export geometry in STL file format. It supports both binary and ascii file formats.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteSTL.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(devDept.Eyeshot.Workspace,System.String,System.Boolean,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="fileName">The file name (with *.stl extension)</param>
      <param name="ascii">ASCII file format. This file format supports multiple parts.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(devDept.Eyeshot.Workspace,System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
            Standard constructor with stream.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="stream">The file stream</param>
      <param name="ascii">ASCII file format. This file format supports multiple parts.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(devDept.Eyeshot.Workspace,System.String,System.Double,System.Boolean,System.Boolean)">
      <summary>
            Deviation constructor. The exported model will be regenerated with specified deviation.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="fileName">The file name (with *.stl extension)</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="ascii">ASCII file format. This file format supports multiple parts.</param>
      <param name="deviation">The maximum deviation</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(devDept.Eyeshot.Workspace,System.IO.Stream,System.Double,System.Boolean,System.Boolean)">
      <summary>
            To stream with deviation constructor. The exported model will be regenerated with specified deviation.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="stream">The file stream</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="ascii">ASCII file format. This file format supports multiple parts.</param>
      <param name="deviation">The maximum deviation</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(devDept.Eyeshot.Translators.WriteParams,System.String,System.Boolean)">
      <summary>
            Standard constructor with document.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParams" /></param>
      <param name="fileName">The file name (with *.stl extension)</param>
      <param name="ascii">ASCII file format. This file format supports multiple parts.</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(devDept.Eyeshot.Translators.WriteParams,System.IO.Stream,System.Boolean)">
      <summary>
            Standard constructor with document and stream.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParams" /></param>
      <param name="stream">The file stream</param>
      <param name="ascii">ASCII file format. This file format supports multiple parts.</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(devDept.Eyeshot.Translators.WriteParams,System.String,System.Double,System.Boolean)">
      <summary>
            Deviation constructor. The exported model will be regenerated with specified deviation.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParams" /></param>
      <param name="fileName">The file name (with *.stl extension)</param>
      <param name="ascii">ASCII file format. This file format supports multiple parts.</param>
      <param name="deviation">The maximum deviation</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(devDept.Eyeshot.Translators.WriteParams,System.IO.Stream,System.Double,System.Boolean)">
      <summary>
            To stream with document and deviation constructor. The exported model will be regenerated with specified deviation.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParams" /></param>
      <param name="stream">The file stream</param>
      <param name="ascii">ASCII file format. This file format supports multiple parts.</param>
      <param name="deviation">The maximum deviation</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="fileName">The file name (with the *.stl extension)</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,System.Boolean)">
      <summary>
            Standard constructor with stream.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="stream">The file stream</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,System.Double,System.Boolean,System.Boolean)">
      <summary>
            Deviation constructor. The exported model will be regenerated with specified deviation.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="fileName">The file name (with the *.stl extension)</param>
      <param name="deviation">The maximum deviation</param>
      <param name="ascii">ASCII file format. This file format supports multiple parts.</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteSTL.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,System.Double,System.Boolean,System.Boolean)">
      <summary>
            To stream with deviation constructor. The exported model will be regenerated with specified deviation.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="stream">The file stream</param>
      <param name="deviation">The maximum deviation</param>
      <param name="ascii">ASCII file format. This file format supports multiple parts.</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteWebGL">
      <summary>
            Helper class to export current design in WebGL file format.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteWebGL.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteWebGL.#ctor(devDept.Eyeshot.Workspace,System.String,System.Boolean,System.Nullable{System.Drawing.Color},System.String)">
      <summary>
             Standard constructor.
             </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control.</param>
      <param name="fileName">The file name (with html extension).</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="htmlBodyColor">The <see cref="T:System.Drawing.Color" /> for the HTML body. It can be null/Nothing.</param>
      <param name="htmlTemplate">A string representing the HTML template for the output. It must contain both EyeshotGeometry and EyeshotScripts html comment tags to work properly.</param>
      <remarks>The <paramref name="htmlBodyColor" /> will add the bgcolor attribute but it may not work when you use a custom <paramref name="htmlTemplate" />.</remarks>
      <remarks>If the file already exists, it will be overwritten.</remarks>
      <example>
        <code><![CDATA[         <html>
                     
                         <script>
                           ...
                           <!-- EyeshotScripts -->
                           ...
                         </script>
                         <body>
                           ...
                           <!-- EyeshotGeometry -->
                           ...
                         </body>
                             
               </html>]]></code>
      </example>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteWebGL.#ctor(devDept.Eyeshot.Workspace,System.IO.Stream,System.Boolean,System.Nullable{System.Drawing.Color},System.String)">
      <summary>
             Standard constructor with stream.
             </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control.</param>
      <param name="stream">The file stream.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="htmlBodyColor">The <see cref="T:System.Drawing.Color" /> for the HTML body. It can be null/Nothing.</param>
      <param name="htmlTemplate">A string representing the HTML template for the output. It must contain both EyeshotGeometry and EyeshotScripts html comment tags to work properly.</param>
      <remarks>The <paramref name="htmlBodyColor" /> will add the bgcolor attribute but it may not work when you use a custom <paramref name="htmlTemplate" />.</remarks>
      <remarks>The closing of the stream is delegated to you.</remarks>
      <example>
        <code><![CDATA[         <html>
                     
                         <script>
                           ...
                           <!-- EyeshotScripts -->
                           ...
                         </script>
                         <body>
                           ...
                           <!-- EyeshotGeometry -->
                           ...
                         </body>
                             
               </html>]]></code>
      </example>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteWebGL.#ctor(devDept.Eyeshot.Workspace,System.String,System.Double,System.Boolean,System.Nullable{System.Drawing.Color},System.String)">
      <summary>
             Deviation constructor. The exported model will be regenerated with specified deviation.
             </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control.</param>
      <param name="fileName">The file name (with html extension).</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="deviation">The maximum deviation</param>
      <param name="htmlBodyColor">The <see cref="T:System.Drawing.Color" /> for the HTML body. It can be null/Nothing.</param>
      <param name="htmlTemplate">A string representing the HTML template for the output. It must contain both EyeshotGeometry and EyeshotScripts html comment tags to work properly.</param>
      <remarks>The <paramref name="htmlBodyColor" /> will add the bgcolor attribute but it may not work when you use a custom <paramref name="htmlTemplate" />.</remarks>
      <remarks>If the file already exists, it will be overwritten.</remarks>
      <example>
        <code><![CDATA[         <html>
                     
                         <script>
                           ...
                           <!-- EyeshotScripts -->
                           ...
                         </script>
                         <body>
                           ...
                           <!-- EyeshotGeometry -->
                           ...
                         </body>
                             
               </html>]]></code>
      </example>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteWebGL.#ctor(devDept.Eyeshot.Workspace,System.IO.Stream,System.Double,System.Boolean,System.Nullable{System.Drawing.Color},System.String)">
      <summary>
             To stream with deviation constructor. The exported model will be regenerated with specified deviation.
             </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control.</param>
      <param name="stream">The file stream.</param>
      <param name="selectedOnly">If true, only selected entities at root level are written.</param>
      <param name="deviation">The maximum deviation</param>
      <param name="htmlBodyColor">The <see cref="T:System.Drawing.Color" /> for the HTML body. It can be null/Nothing.</param>
      <param name="htmlTemplate">A string representing the HTML template for the output. It must contain both EyeshotGeometry and EyeshotScripts html comment tags to work properly.</param>
      <remarks>The <paramref name="htmlBodyColor" /> will add the bgcolor attribute but it may not work when you use a custom <paramref name="htmlTemplate" />.</remarks>
      <remarks>The closing of the stream is delegated to you.</remarks>
      <example>
        <code><![CDATA[         <html>
                     
                         <script>
                           ...
                           <!-- EyeshotScripts -->
                           ...
                         </script>
                         <body>
                           ...
                           <!-- EyeshotGeometry -->
                           ...
                         </body>
                             
               </html>]]></code>
      </example>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteWebGL.#ctor(devDept.Eyeshot.Translators.WriteParamsWithMaterials,devDept.Graphics.Material,System.String,System.Nullable{System.Drawing.Color},System.String)">
      <summary>
             Standard constructor with document and default material.
             </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithMaterials" /></param>
      <param name="defaultMaterial">The default material.</param>
      <param name="fileName">The file name (with html extension).</param>
      <param name="htmlBodyColor">The <see cref="T:System.Drawing.Color" /> for the HTML body. It can be null/Nothing.</param>
      <param name="htmlTemplate">A string representing the HTML template for the output. It must contain both EyeshotGeometry and EyeshotScripts html comment tags to work properly.</param>
      <remarks>The <paramref name="htmlBodyColor" /> will add the bgcolor attribute but it may not work when you use a custom <paramref name="htmlTemplate" />.</remarks>
      <remarks>If the file already exists, it will be overwritten.</remarks>
      <example>
        <code><![CDATA[         <html>
                     
                         <script>
                           ...
                           <!-- EyeshotScripts -->
                           ...
                         </script>
                         <body>
                           ...
                           <!-- EyeshotGeometry -->
                           ...
                         </body>
                             
               </html>]]></code>
      </example>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteWebGL.#ctor(devDept.Eyeshot.Translators.WriteParamsWithMaterials,devDept.Graphics.Material,System.IO.Stream,System.Nullable{System.Drawing.Color},System.String)">
      <summary>
             Standard constructor with document, default material and stream.
             </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithMaterials" /></param>
      <param name="defaultMaterial">The default material.</param>
      <param name="stream">The file stream.</param>
      <param name="htmlBodyColor">The <see cref="T:System.Drawing.Color" /> for the HTML body. It can be null/Nothing.</param>
      <param name="htmlTemplate">A string representing the HTML template for the output. It must contain both EyeshotGeometry and EyeshotScripts html comment tags to work properly.</param>
      <remarks>The <paramref name="htmlBodyColor" /> will add the bgcolor attribute but it may not work when you use a custom <paramref name="htmlTemplate" />.</remarks>
      <remarks>The closing of the stream is delegated to you.</remarks>
      <example>
        <code><![CDATA[         <html>
                     
                         <script>
                           ...
                           <!-- EyeshotScripts -->
                           ...
                         </script>
                         <body>
                           ...
                           <!-- EyeshotGeometry -->
                           ...
                         </body>
                             
               </html>]]></code>
      </example>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteWebGL.#ctor(devDept.Eyeshot.Translators.WriteParamsWithMaterials,devDept.Graphics.Material,System.String,System.Double,System.Nullable{System.Drawing.Color},System.String)">
      <summary>
             Deviation, document and default material constructor. The exported model will be regenerated with specified deviation.
             </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithMaterials" /></param>
      <param name="defaultMaterial">The default material.</param>
      <param name="fileName">The file name (with html extension).</param>
      <param name="deviation">The maximum deviation</param>
      <param name="htmlBodyColor">The <see cref="T:System.Drawing.Color" /> for the HTML body. It can be null/Nothing.</param>
      <param name="htmlTemplate">A string representing the HTML template for the output. It must contain both EyeshotGeometry and EyeshotScripts html comment tags to work properly.</param>
      <remarks>The <paramref name="htmlBodyColor" /> will add the bgcolor attribute but it may not work when you use a custom <paramref name="htmlTemplate" />.</remarks>
      <remarks>If the file already exists, it will be overwritten.</remarks>
      <example>
        <code><![CDATA[         <html>
                     
                         <script>
                           ...
                           <!-- EyeshotScripts -->
                           ...
                         </script>
                         <body>
                           ...
                           <!-- EyeshotGeometry -->
                           ...
                         </body>
                             
               </html>]]></code>
      </example>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteWebGL.#ctor(devDept.Eyeshot.Translators.WriteParamsWithMaterials,devDept.Graphics.Material,System.IO.Stream,System.Double,System.Nullable{System.Drawing.Color},System.String)">
      <summary>
            To stream with deviation, document and default material constructor. The exported model will be regenerated with specified deviation.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithMaterials" /></param>
      <param name="defaultMaterial">The default material.</param>
      <param name="stream">The file stream.</param>
      <param name="deviation">The maximum deviation</param>
      <param name="htmlBodyColor">The <see cref="T:System.Drawing.Color" /> for the HTML body. It can be null/Nothing.</param>
      <param name="htmlTemplate">A string representing the HTML template for the output. It must contain both EyeshotGeometry and EyeshotScripts html comment tags to work properly.</param>
      <remarks>The <paramref name="htmlBodyColor" /> will add the bgcolor attribute but it may not work when you use a custom <paramref name="htmlTemplate" />.</remarks>
      <remarks>The closing of the stream is delegated to you.</remarks>
      <example>
        <code><![CDATA[         <html>
                    
                        <script>
                          ...
                          <!-- EyeshotScripts -->
                          ...
                        </script>
                        <body>
                          ...
                          <!-- EyeshotGeometry -->
                          ...
                        </body>
                            
              </html>]]></code>
      </example>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteWebGL.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.IDictionary{System.String,devDept.Graphics.Material},devDept.Graphics.Material,System.String,System.Boolean,System.Nullable{System.Drawing.Color},System.String)">
      <summary>
             Standard constructor.
             </summary>
      <param name="entList">The entity list.</param>
      <param name="layerList">The layer list.</param>
      <param name="blockDict">The block dictionary.</param>
      <param name="matDict">The material dictionary.</param>
      <param name="defaultMaterial">The default material.</param>
      <param name="fileName">The file name (with the html extension).</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <param name="htmlBodyColor">The <see cref="T:System.Drawing.Color" /> for the HTML body. It can be null/Nothing.</param>
      <param name="htmlTemplate">A string representing the HTML template for the output. It must contain both EyeshotGeometry and EyeshotScripts html comment tags to work properly.</param>
      <remarks>The <paramref name="htmlBodyColor" /> will add the bgcolor attribute but it may not work when you use a custom <paramref name="htmlTemplate" />.</remarks>
      <remarks>If the file already exists, it will be overwritten.</remarks>
      <example>
        <code><![CDATA[         <html>
                     
                         <script>
                           ...
                           <!-- EyeshotScripts -->
                           ...
                         </script>
                         <body>
                           ...
                           <!-- EyeshotGeometry -->
                           ...
                         </body>
                             
               </html>]]></code>
      </example>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteWebGL.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.IDictionary{System.String,devDept.Graphics.Material},devDept.Graphics.Material,System.IO.Stream,System.Boolean,System.Nullable{System.Drawing.Color},System.String)">
      <summary>
             Standard constructor with stream.
             </summary>
      <param name="entList">The entity list.</param>
      <param name="layerList">The layer list.</param>
      <param name="blockDict">The block dictionary.</param>
      <param name="matDict">The material dictionary.</param>
      <param name="defaultMaterial">The default material.</param>
      <param name="stream">The file stream.</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <param name="htmlBodyColor">The <see cref="T:System.Drawing.Color" /> for the HTML body. It can be null/Nothing.</param>
      <param name="htmlTemplate">A string representing the HTML template for the output. It must contain both EyeshotGeometry and EyeshotScripts html comment tags to work properly.</param>
      <remarks>The <paramref name="htmlBodyColor" /> will add the bgcolor attribute but it may not work when you use a custom <paramref name="htmlTemplate" />.</remarks>
      <remarks>The closing of the stream is delegated to you.</remarks>
      <example>
        <code><![CDATA[         <html>
                     
                         <script>
                           ...
                           <!-- EyeshotScripts -->
                           ...
                         </script>
                         <body>
                           ...
                           <!-- EyeshotGeometry -->
                           ...
                         </body>
                             
               </html>]]></code>
      </example>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteWebGL.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.IDictionary{System.String,devDept.Graphics.Material},devDept.Graphics.Material,System.String,System.Double,System.Boolean,System.Nullable{System.Drawing.Color},System.String)">
      <summary>
             Tolerance constructor. The exported model will be regenerated with specified tolerance.
             </summary>
      <param name="entList">The entity list.</param>
      <param name="layerList">The layer list.</param>
      <param name="blockDict">The block dictionary.</param>
      <param name="matDict">The material dictionary.</param>
      <param name="defaultMaterial">The default material.</param>
      <param name="fileName">The file name (with the html extension).</param>
      <param name="deviation">The maximum deviation</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <param name="htmlBodyColor">The <see cref="T:System.Drawing.Color" /> for the HTML body. It can be null/Nothing.</param>
      <param name="htmlTemplate">A string representing the HTML template for the output. It must contain both EyeshotGeometry and EyeshotScripts html comment tags to work properly.</param>
      <remarks>The <paramref name="htmlBodyColor" /> will add the bgcolor attribute but it may not work when you use a custom <paramref name="htmlTemplate" />.</remarks>
      <remarks>If the file already exists, it will be overwritten.</remarks>
      <example>
        <code><![CDATA[         <html>
                     
                         <script>
                           ...
                           <!-- EyeshotScripts -->
                           ...
                         </script>
                         <body>
                           ...
                           <!-- EyeshotGeometry -->
                           ...
                         </body>
                             
               </html>]]></code>
      </example>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteWebGL.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.IDictionary{System.String,devDept.Graphics.Material},devDept.Graphics.Material,System.IO.Stream,System.Double,System.Boolean,System.Nullable{System.Drawing.Color},System.String)">
      <summary>
             To stream with tolerance constructor. The exported model will be regenerated with specified tolerance.
             </summary>
      <param name="entList">The entity list.</param>
      <param name="layerList">The layer list.</param>
      <param name="blockDict">The block dictionary.</param>
      <param name="matDict">The material dictionary.</param>
      <param name="defaultMaterial">The default material.</param>
      <param name="stream">The file stream.</param>
      <param name="deviation">Tolerance used to tessellate surface entities.</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <param name="htmlBodyColor">The <see cref="T:System.Drawing.Color" /> for the HTML body. It can be null/Nothing.</param>
      <param name="htmlTemplate">A string representing the HTML template for the output. It must contain both EyeshotGeometry and EyeshotScripts html comment tags to work properly.</param>
      <remarks>The <paramref name="htmlBodyColor" /> will add the bgcolor attribute but it may not work when you use a custom <paramref name="htmlTemplate" />.</remarks>
      <remarks>The closing of the stream is delegated to you.</remarks>
      <example>
        <code><![CDATA[         <html>
                     
                         <script>
                           ...
                           <!-- EyeshotScripts -->
                           ...
                         </script>
                         <body>
                           ...
                           <!-- EyeshotGeometry -->
                           ...
                         </body>
                             
               </html>]]></code>
      </example>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteFileAsyncWithUnits">
      <summary>
            Base class for file asynchronous writing supporting units, author, organization and originating system attributes.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsyncWithUnits.#ctor(System.String,System.Boolean)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsyncWithUnits.#ctor(devDept.Eyeshot.Workspace,System.String,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="fileName">The file name (it must include the extension)</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>Units is got from Workspace control when not null.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsyncWithUnits.#ctor(devDept.Eyeshot.Workspace,System.IO.Stream,System.Boolean)">
      <summary>
            Standard constructor with stream.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="stream">The file stream</param>
      <param name="selectedOnly">When true, only selected entities at root level are written.</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsyncWithUnits.#ctor(devDept.Eyeshot.Translators.WriteParamsWithUnits,System.String)">
      <summary>
            Standard constructor with document, header and filename.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithUnits" /></param>
      <param name="fileName">The file name (it must include the extension)</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsyncWithUnits.#ctor(devDept.Eyeshot.Translators.WriteParamsWithUnits,System.IO.Stream)">
      <summary>
            Standard constructor with Document, header and filename.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithUnits" /></param>
      <param name="stream">The file stream</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsyncWithUnits.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.String,devDept.Geometry.linearUnitsType)">
      <summary>
            Entity list constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="fileName">The file name</param>
      <param name="units">The design workspace units</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsyncWithUnits.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IEnumerable{devDept.Eyeshot.Layer},System.Collections.Generic.IDictionary{System.String,devDept.Eyeshot.Block},System.IO.Stream,devDept.Geometry.linearUnitsType)">
      <summary>
            To stream with entity list constructor.
            </summary>
      <param name="entList">The entity list</param>
      <param name="layerList">The layer list</param>
      <param name="blockDict">The block dictionary</param>
      <param name="stream">The file stream</param>
      <param name="units">The design workspace units</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteFileAsyncWithTextStyles">
      <summary>
            Base class for file asynchronous writing supporting units, author, organization, originating system attributes, line types, hatch patterns and text styles.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsyncWithTextStyles.#ctor(devDept.Eyeshot.Translators.WriteParamsWithTextStyles,System.String)">
      <summary>
            Standard constructor with document, header and filename.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithTextStyles" /></param>
      <param name="fileName">The file name (it must include the extension)</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsyncWithTextStyles.#ctor(devDept.Eyeshot.Translators.WriteParamsWithTextStyles,System.IO.Stream)">
      <summary>
            Standard constructor with Document, header and filename.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithTextStyles" /></param>
      <param name="stream">The file stream</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteFileAsyncWithDrawings">
      <summary>
            Base class for file asynchronous writing supporting units, author, organization, originating system attributes, line types, hatch patterns, text styles and Drawing control data.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsyncWithDrawings.#ctor(devDept.Eyeshot.Translators.WriteParamsWithDrawing,System.String)">
      <summary>
            Standard constructor with document, header and filename.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithDrawing" /></param>
      <param name="fileName">The file name (it must include the extension)</param>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteFileAsyncWithDrawings.#ctor(devDept.Eyeshot.Translators.WriteParamsWithDrawing,System.IO.Stream)">
      <summary>
            Standard constructor with Document, header and filename.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithDrawing" /></param>
      <param name="stream">The file stream</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Translators.WriteXML">
      <summary>
            Helper class to export geometry in XML file format.
            </summary>
      <remarks>There is no correspondence between Eyeshot types and XML node names, different Eyeshot types can generate the same node name. Annotations and line types are not supported by design. 
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.Translators.WriteXML.SupportedLinearUnitsType">
      <summary>
            Gets the supported linear units
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteXML.#ctor(devDept.Eyeshot.Workspace,System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="fileName">The file name (with *.stl extension)</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteXML.#ctor(devDept.Eyeshot.Workspace,System.IO.Stream)">
      <summary>
            Standard constructor with stream.
            </summary>
      <param name="workspace">The <see cref="T:devDept.Eyeshot.Workspace" /> control</param>
      <param name="stream">The file stream</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteXML.#ctor(devDept.Eyeshot.Translators.WriteParamsWithUnits,System.String)">
      <summary>
            Standard constructor with document.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithUnits" /></param>
      <param name="fileName">The file name (with *.stl extension)</param>
      <remarks>If the file already exists, it will be overwritten.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Translators.WriteXML.#ctor(devDept.Eyeshot.Translators.WriteParamsWithUnits,System.IO.Stream)">
      <summary>
            Standard constructor with document and stream.
            </summary>
      <param name="writeParams">The <see cref="T:devDept.Eyeshot.Translators.WriteParamsWithUnits" /></param>
      <param name="stream">The file stream</param>
      <remarks>The closing of the stream is delegated to you.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Drawing">
      <summary>
            Drawing control definition.
            </summary>
      <remarks>The line weight factor set to the entities or to the layers are always considered as millimeters. Use the <see cref="P:devDept.Eyeshot.Drawing.LineWeightFactor" /> to change the scale factor used to display the entities line weight.</remarks>
      <seealso cref="P:devDept.Eyeshot.Drawing.LineWeightFactor" />
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.LineWeight" />
      <seealso cref="P:devDept.Eyeshot.Layer.LineWeight" />
    </member>
    <member name="P:devDept.Eyeshot.Drawing.ZoomFactor">
      <summary>
            Gets the camera zoom factor.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Drawing.Zoom">
      <summary>
            Gets or sets the Zoom settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Drawing.Pan">
      <summary>
            Gets or sets the Pan settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Drawing.LineWeightFactor">
      <summary>
            Gets or sets the scale factor used to display the <see cref="T:devDept.Eyeshot.Entities.ICurve" /> line weight.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Drawing.Background">
      <summary>
            Gets Background settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Drawing.ToolBar">
      <summary>
            Gets ToolBar settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Drawing.ToolBars">
      <summary>
            Gets the ToolBars settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Drawing.PaperColor">
      <summary>
            Gets or sets paper color.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Drawing.SilhouettesLayerName">
      <summary>
            Gets or sets the layer name for silhouettes.
            </summary>
      <remarks>When a block related to a <see cref="T:devDept.Eyeshot.Entities.VectorView" /> is built, the entities created for silhouettes are assigned to the layer with this name.</remarks>
      <seealso cref="T:devDept.Eyeshot.ViewBuilder" />
      <seealso cref="M:devDept.Eyeshot.Drawing.Rebuild(devDept.Eyeshot.Design,System.Boolean,System.Boolean)" />
    </member>
    <member name="P:devDept.Eyeshot.Drawing.EdgesLayerName">
      <summary>
            Gets or sets the layer name for edges.
            </summary>
      <remarks>When a block related to a <see cref="T:devDept.Eyeshot.Entities.VectorView" /> is built, the entities created for edges are assigned to the layer with this name.</remarks>
      <seealso cref="T:devDept.Eyeshot.ViewBuilder" />
      <seealso cref="M:devDept.Eyeshot.Drawing.Rebuild(devDept.Eyeshot.Design,System.Boolean,System.Boolean)" />
    </member>
    <member name="P:devDept.Eyeshot.Drawing.WiresLayerName">
      <summary>
            Gets or sets the layer name for wires.
            </summary>
      <remarks>When a block related to a <see cref="T:devDept.Eyeshot.Entities.VectorView" /> is built, the entities created for wires are assigned to the layer with this name.</remarks>
      <seealso cref="T:devDept.Eyeshot.ViewBuilder" />
      <seealso cref="M:devDept.Eyeshot.Drawing.Rebuild(devDept.Eyeshot.Design,System.Boolean,System.Boolean)" />
    </member>
    <member name="P:devDept.Eyeshot.Drawing.HiddenSilhouettesLayerName">
      <summary>
            Gets or sets the layer name for hidden silhouettes.
            </summary>
      <remarks>When a block related to a <see cref="T:devDept.Eyeshot.Entities.VectorView" /> is built, the entities created for hidden silhouettes are assigned to the layer with this name.</remarks>
      <seealso cref="T:devDept.Eyeshot.ViewBuilder" />
      <seealso cref="M:devDept.Eyeshot.Drawing.Rebuild(devDept.Eyeshot.Design,System.Boolean,System.Boolean)" />
      <seealso cref="P:devDept.Eyeshot.Drawing.HiddenSegmentsLineTypeName" />
    </member>
    <member name="P:devDept.Eyeshot.Drawing.HiddenEdgesLayerName">
      <summary>
            Gets or sets the layer name for hidden edges.
            </summary>
      <remarks>When a block related to a <see cref="T:devDept.Eyeshot.Entities.VectorView" /> is built, the entities created for hidden edges are assigned to the layer with this name.</remarks>
      <seealso cref="T:devDept.Eyeshot.ViewBuilder" />
      <seealso cref="M:devDept.Eyeshot.Drawing.Rebuild(devDept.Eyeshot.Design,System.Boolean,System.Boolean)" />
      <seealso cref="P:devDept.Eyeshot.Drawing.HiddenSegmentsLineTypeName" />
    </member>
    <member name="P:devDept.Eyeshot.Drawing.HiddenWiresLayerName">
      <summary>
            Gets or sets the layer name for hidden wires.
            </summary>
      <remarks>When a block related to a <see cref="T:devDept.Eyeshot.Entities.VectorView" /> is built, the entities created for hidden wires are assigned to the layer with this name.</remarks>
      <seealso cref="T:devDept.Eyeshot.ViewBuilder" />
      <seealso cref="M:devDept.Eyeshot.Drawing.Rebuild(devDept.Eyeshot.Design,System.Boolean,System.Boolean)" />
      <seealso cref="P:devDept.Eyeshot.Drawing.HiddenSegmentsLineTypeName" />
    </member>
    <member name="P:devDept.Eyeshot.Drawing.CenterlinesLayerName">
      <summary>
            Gets or sets the layer name for centerlines.
            </summary>
      <remarks>When a block related to a <see cref="T:devDept.Eyeshot.Entities.VectorView" /> is built, the entities created for centerlines are assigned to the layer with this name.</remarks>
      <seealso cref="T:devDept.Eyeshot.ViewBuilder" />
      <seealso cref="M:devDept.Eyeshot.Drawing.Rebuild(devDept.Eyeshot.Design,System.Boolean,System.Boolean)" />
      <seealso cref="P:devDept.Eyeshot.Drawing.CenterlinesLineTypeName" />
    </member>
    <member name="P:devDept.Eyeshot.Drawing.HiddenSegmentsLineTypeName">
      <summary>
            Gets or sets the line type name for hidden lines layers.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Drawing.HiddenSilhouettesLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.HiddenEdgesLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.HiddenWiresLayerName" />
      <seealso cref="P:devDept.Eyeshot.Workspace.Layers" />
      <seealso cref="T:devDept.Eyeshot.ViewBuilder" />
      <seealso cref="M:devDept.Eyeshot.Drawing.Rebuild(devDept.Eyeshot.Design,System.Boolean,System.Boolean)" />
    </member>
    <member name="P:devDept.Eyeshot.Drawing.CenterlinesLineTypeName">
      <summary>
            Gets or sets the line type name for centerlines layer.
            </summary>
      <seealso cref="!:CenterLinesLayerName" />
      <seealso cref="P:devDept.Eyeshot.Workspace.Layers" />
      <seealso cref="T:devDept.Eyeshot.ViewBuilder" />
      <seealso cref="M:devDept.Eyeshot.Drawing.Rebuild(devDept.Eyeshot.Design,System.Boolean,System.Boolean)" />
      <seealso cref="P:devDept.Eyeshot.Drawing.CenterlinesLayerName" />
    </member>
    <member name="P:devDept.Eyeshot.Drawing.ViewBuilderText">
      <summary>
            Gets or sets the progress bar text displayed while bulding the view when executed asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Drawing.ViewBuilderSuffix">
      <summary>
            Gets or sets the progress bar suffix text displayed while bulding the view when executed asynchronously. If null it shows the view name.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Drawing.Rebuild(devDept.Eyeshot.Design,System.Boolean,System.Boolean)">
      <summary>
            Rebuilds sheets on this drawing.
            </summary>
      <param name="design">The design control.</param>
      <param name="async">When true the blocks are built asynchronously and must be added/updated at the <see cref="E:devDept.Eyeshot.Workspace.WorkCompleted" /> event by calling <see cref="M:devDept.Eyeshot.ViewBuilder.AddToDrawing(devDept.Eyeshot.Drawing)" />, otherwise they're built synchronously.</param>
      <param name="changedOnly">When true only missing/changed views are built.</param>
      <seealso cref="M:devDept.Eyeshot.ViewBuilder.AddToDrawing(devDept.Eyeshot.Drawing)" />
      <see cref="E:devDept.Eyeshot.Workspace.WorkCompleted" />
      <see cref="E:devDept.Eyeshot.Workspace.WorkFailed" />
      <see cref="E:devDept.Eyeshot.Workspace.WorkCancelled" />
    </member>
    <member name="M:devDept.Eyeshot.Drawing.#ctor">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Drawing.Clear">
      <summary>
            Clears all the master collections: entities, blocks, layers, materials, text styles, line types, sheets and labels.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Drawing.CopyTo(devDept.Eyeshot.Workspace,System.Boolean,System.Boolean)">
      <summary>
            Copies all items inside control master collections (<see cref="P:devDept.Eyeshot.Drawing.Sheets" />, <see cref="P:devDept.Eyeshot.Viewport.Labels" />, <see cref="P:devDept.Eyeshot.Workspace.Blocks" />, <see cref="P:devDept.Eyeshot.Workspace.Layers" />, <see cref="P:devDept.Eyeshot.Design.Materials" />, <see cref="P:devDept.Eyeshot.Workspace.TextStyles" />, <see cref="P:devDept.Eyeshot.Workspace.LineTypes" />) to the specified drawing.
            </summary>
      <param name="destination">The Drawing that is the destination of the elements copied.</param>
      <param name="replaceRootBlock">When true and the destination workspace is a <see cref="T:devDept.Eyeshot.Design" /> control, its root block is replaced.</param>
      <param name="skipSheets">When true and <paramref name="destination" /> is a <see cref="T:devDept.Eyeshot.Drawing" /> control, the <see cref="P:devDept.Eyeshot.Drawing.Sheets" /> collection is not copied.</param>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.Workspace.Invalidate" /> to see the effect of this command in the destination drawing.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.Drawing.PrintPreview(System.Drawing.Size)">
      <seealso cref="!:SetPrinterSettings(PrinterSettings, bool)" />
      <seealso cref="!:PageSetup(bool, bool, int?, PaperSize, bool?)">
      </seealso>
      <seealso cref="M:devDept.Eyeshot.Drawing.Print">
      </seealso>
    </member>
    <member name="M:devDept.Eyeshot.Drawing.Print">
      <remarks>For more options use the <see cref="T:devDept.Eyeshot.HiddenLinesViewOnPaper" /> class directly.</remarks>
      <seealso cref="!:SetPrinterSettings(PrinterSettings, bool)" />
      <seealso cref="!:PageSetup(bool, bool, int?, PaperSize, bool?)">
      </seealso>
      <seealso cref="!:PrintPreview(Size)">
      </seealso>
    </member>
    <member name="M:devDept.Eyeshot.Drawing.SaveFile(System.String,devDept.Eyeshot.Design,devDept.Serialization.FileSerializer)">
      <summary>
            Saves the current scene synchronously on disk, including entities and all the master collections (layers, blocks, etc.)
            </summary>
      <param name="fileName">File name.</param>
      <param name="design">The design control.</param>
      <param name="fileSerializer">The <see cref="T:devDept.Serialization.FileSerializer" />. Can be null/Nothing.</param>
      <remarks>
        <para>This command is based on Eyeshot proprietary file format.
                If the fileSerializer param is null, it skips some particular Autodesk properties like XData and your custom entities.
                If you want to run the operation asynchronously, use the <see cref="T:devDept.Eyeshot.Translators.WriteFile" /> class in conjunction with <see cref="M:devDept.Eyeshot.Workspace.StartWork(devDept.WorkUnit)" /> method.
                </para>
      </remarks>
      <seealso cref="T:devDept.Eyeshot.Translators.WriteFile" />
      <seealso cref="!:OpenFile(string)" />
    </member>
    <member name="M:devDept.Eyeshot.Drawing.SaveFile(System.IO.Stream,devDept.Eyeshot.Design,devDept.Serialization.FileSerializer)">
      <summary>
            Saves the current scene synchronously on disk, including entities and all the master collections (layers, blocks, etc.)
            </summary>
      <param name="stream">The file stream.</param>
      <param name="design">The design control.</param>
      <param name="fileSerializer">The <see cref="T:devDept.Serialization.FileSerializer" />. Can be null/Nothing.</param>
      <remarks>
        <para>This command is based on Eyeshot proprietary file format.
                If the fileSerializer param is null, it skips some particular Autodesk properties like XData and your custom entities.
                If you want to run the operation asynchronously, use the <see cref="T:devDept.Eyeshot.Translators.WriteFile" /> class in conjunction with <see cref="M:devDept.Eyeshot.Workspace.StartWork(devDept.WorkUnit)" /> method.
                </para>
      </remarks>
      <seealso cref="T:devDept.Eyeshot.Translators.WriteFile" />
      <seealso cref="!:OpenFile(Stream)" />
    </member>
    <member name="M:devDept.Eyeshot.Drawing.OpenFile(System.String,devDept.Eyeshot.Design,devDept.Serialization.FileSerializer)">
      <summary>
            Restores the scene synchronously from disk, including entities and all the master collections (layers, blocks, etc.)
            </summary>
      <param name="fileName">File name.</param>
      <param name="design">The design control.</param>
      <param name="fileSerializer">The <see cref="T:devDept.Serialization.FileSerializer" />. Can be null/Nothing.</param>
      <remarks>
        <para>This command is based on Eyeshot proprietary file format.
                If the fileSerializer param is null, it skips some particular Autodesk properties like XData and your custom entities.
                If you want to run the operation asynchronously, use the <see cref="T:devDept.Eyeshot.Translators.ReadFile" /> class in conjunction with <see cref="M:devDept.Eyeshot.Workspace.StartWork(devDept.WorkUnit)" /> method.
                </para>
      </remarks>
      <seealso cref="T:devDept.Eyeshot.Translators.ReadFile" />
      <seealso cref="!:SaveFile(string)" />
    </member>
    <member name="M:devDept.Eyeshot.Drawing.OpenFile(System.IO.Stream,devDept.Eyeshot.Design,devDept.Serialization.FileSerializer)">
      <summary>
            Restores the scene synchronously from disk, including entities and all the master collections (layers, blocks, etc.)
            </summary>
      <param name="stream">The file stream.</param>
      <param name="design">The design control.</param>
      <param name="fileSerializer">The <see cref="T:devDept.Serialization.FileSerializer" />. Can be null/Nothing.</param>
      <remarks>
        <para>This command is based on Eyeshot proprietary file format.
                If the fileSerializer param is null, it skips some particular Autodesk properties like XData and your custom entities.
                If you want to run the operation asynchronously, use the <see cref="T:devDept.Eyeshot.Translators.ReadFile" /> class in conjunction with <see cref="M:devDept.Eyeshot.Workspace.StartWork(devDept.WorkUnit)" /> method.
                </para>
      </remarks>
      <seealso cref="T:devDept.Eyeshot.Translators.ReadFile" />
      <seealso cref="!:SaveFile(Stream)" />
    </member>
    <member name="P:devDept.Eyeshot.Drawing.Sheets">
      <summary>
            Gets or sets the sheets collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Drawing.ActiveSheet">
      <summary>
            Gets or sets the active sheet.
            </summary>
      <remarks>
        <para>When a <see cref="T:devDept.Eyeshot.Sheet" /> is set as active, its entities are shared with the Drawing one.</para>
        <para>Since the drawing collection is modified, this method can't be called inside a loop.</para>
      </remarks>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when an element with the specified name does not exist in the collection or the name is null.</exception>
      <seealso cref="P:devDept.Eyeshot.Drawing.ActiveSheetIndex" />
    </member>
    <member name="P:devDept.Eyeshot.Drawing.ActiveSheetIndex">
      <summary>
            Gets or sets the active sheet index.
            </summary>
      <remarks>
        <para>When a <see cref="T:devDept.Eyeshot.Sheet" /> is set as active, its entities are shared with the Drawing one.</para>
        <para>Since the drawing collection is modified, this method can't be called inside a loop.</para>
      </remarks>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when an element with the specified name does not exist in the collection or the name is null.</exception>
      <seealso cref="P:devDept.Eyeshot.Drawing.ActiveSheet" />
    </member>
    <member name="T:devDept.Eyeshot.Sheet">
      <summary>
            Drawing sheet class definition.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.CreateBorder(System.Double,System.Double,System.Int32,System.Int32,System.Nullable{System.Drawing.Color},System.Single,System.Double,System.Double,System.Boolean,System.Single)">
      <summary>
            Creates the drawing border.
            </summary>
      <param name="width">Width of the drawing border.</param>
      <param name="height">Height of the drawing border.</param>
      <param name="rows">Rows number of the drawing border (vertical subdivision).</param>
      <param name="columns">Colums number of the drawing border (horizontal subdivision).</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <param name="lineWeight">The line weight.</param>
      <param name="textHeight">Height for numbers and letters.</param>
      <param name="externalBorderGap">Gap between the border lines. It's also used to compute numbers and letters center point.</param>
      <param name="createExternalBorder">When true the lines for external border are created.</param>
      <param name="externalBorderLineWeight">The line weight for external border.</param>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.CreateBorderSeparators(System.Double,System.Double,System.Int32,System.Int32,System.Nullable{System.Drawing.Color},System.Single,System.Double)">
      <summary>
            Creates the separator lines inside the drawing borders.
            </summary>
      <param name="width">Width of the drawing border.</param>
      <param name="height">Height of the drawing border.</param>
      <param name="rows">Rows number of the drawing border (vertical subdivision).</param>
      <param name="columns">Colums number of the drawing border (horizontal subdivision).</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <param name="lineWeight">The line weight.</param>
      <param name="externalBorderGap">Gap between the border lines. It's also used to compute numbers and letters center point.</param>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.CreateBorderHorizontalTexts(System.Double,System.Double,System.Int32,System.Int32,System.Nullable{System.Drawing.Color},System.Single,System.Double,System.Double,System.Boolean,System.Boolean)">
      <summary>
            Creates horizontal texts for the drawing border.
            </summary>
      <param name="width">Width of the drawing border.</param>
      <param name="height">Height of the drawing border.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <param name="lineWeight">The line weight.</param>
      <param name="textHeight">Height for numbers and letters.</param>
      <param name="externalBorderGap">Gap between the border lines to compute numbers and letters center point.</param>
      <param name="useNumbers">When true numbers are generated, otherwise letters.</param>
      <param name="reverseOrder">When true texts are generated from left to right, otherwise they are generated from right to left (default behavior)</param>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.CreateBorderVerticalTexts(System.Double,System.Double,System.Int32,System.Int32,System.Nullable{System.Drawing.Color},System.Single,System.Double,System.Double,System.Boolean,System.Boolean)">
      <summary>
            Creates vertical texts for the drawing border.
            </summary>
      <param name="width">Width of the drawing border.</param>
      <param name="height">Height of the drawing border.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <param name="lineWeight">The line weight.</param>
      <param name="textHeight">Height for numbers and letters.</param>
      <param name="externalBorderGap">Gap between the border lines to compute numbers and letters center point.</param>
      <param name="useNumbers">When true numbers are generated, otherwise letters.</param>
      <param name="reverseOrder">When true texts are generated from top to bottom, otherwise they are generated from bottom to top (default behavior)</param>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.CreateTitleBlock(System.Double,System.Drawing.Color,System.Single)">
      <summary>
            Creates the title block of the drawing border starting from the bottom-right corner.
            </summary>
      <param name="borderWidth">Width of the border.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <param name="lineWeight">The line weight.</param>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.GetLogo">
      <summary>
            Gets the logo for the title block.
            </summary>
      <returns>An array of entities representing the logo.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.#ctor(devDept.Geometry.linearUnitsType,System.Double,System.Double,System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="units">The measurement system type for the sheet.</param>
      <param name="width">The sheet width.</param>
      <param name="height">The sheet height.</param>
      <param name="name">The name of the sheet.</param>
    </member>
    <member name="P:devDept.Eyeshot.Sheet.Width">
      <summary>
            Gets or sets sheet width.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.Workspace.UpdateBoundingBox" /> after changing this value on the <see cref="P:devDept.Eyeshot.Drawing.ActiveSheet" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Sheet.Height">
      <summary>
            Gets or sets sheet height.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.Workspace.UpdateBoundingBox" /> after changing this value on the <see cref="P:devDept.Eyeshot.Drawing.ActiveSheet" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Sheet.Units">
      <summary>
            Gets the measurement system type for the sheet.
            </summary>
      <seealso cref="!:ScaleFactor" />
    </member>
    <member name="P:devDept.Eyeshot.Sheet.Name">
      <summary>
            Gets or sets sheet name.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Sheet.KeyChanged">
      <summary>
            Occurs when the <see cref="P:devDept.Eyeshot.Sheet.Name" /> changes.
            </summary>
      <seealso cref="E:devDept.Graphics.INotifyKeyChanged.KeyChanged" />
    </member>
    <member name="M:devDept.Eyeshot.Sheet.OnKeyChanged(System.String,System.String)">
      <summary>
            When the <see cref="P:devDept.Eyeshot.Sheet.Name" /> changes I need to notify it to the related keyed collections before changing it.
            </summary>
      <param name="newKey">The new <see cref="P:devDept.Eyeshot.Sheet.Name" /></param>
      <param name="propertyName">The property name that represent the key for the related keyed collections.</param>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.GetKey">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Sheet.SetKey(System.String)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Sheet.AddViewPlaceHolder(devDept.Eyeshot.Entities.View,devDept.Eyeshot.Design,devDept.Eyeshot.Drawing,System.String)">
      <summary>
            Creates a block with the placeholder entities, adds it to the <see cref="T:devDept.Eyeshot.Drawing" /> and adds the View to the <see cref="P:devDept.Eyeshot.Sheet.Entities" /> if not already present.
            </summary>
      <remarks>
        <para>The block is added only if it doesn't already exist.</para>
        <para>The view is not rebuilt.</para>
      </remarks>
      <param name="view">The view.</param>
      <param name="design">The design control.</param>
      <param name="drawing">The drawing control containing the sheet.</param>
      <param name="placeHolderText">The placeholder text. If null the view name is used.</param>
      <seealso cref="T:devDept.WorkManager`1" />
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildBillOfMaterials(devDept.Eyeshot.Design,devDept.Geometry.Point3D,System.String,System.String,System.String,System.String,devDept.Eyeshot.Block@,System.String,System.Boolean,devDept.Eyeshot.Entities.Table.flowDirection,System.Int32)">
      <summary>
            Creates a block with the Bill Of Materials table.
            </summary>
      <param name="design">The design workspace. </param>
      <param name="insertionPoint">The Table insertion point. </param>
      <param name="itemNumberText">The item number text.</param>
      <param name="partNumberText">The part number text. </param>
      <param name="descriptionText">The description text. </param>
      <param name="quantityText">The quantity text. </param>
      <param name="block">The new block created. </param>
      <param name="blockName">The block name. </param>
      <param name="partsOnly">If true, only the blocks containing geometry are taken in account to construct the bill of materials. </param>
      <param name="flowDirection">The table flow direction (up/down). </param>
      <param name="maxLevel">The max deep used to navigate the assembly geometry to create the bill of materials.</param>
      <returns>The resulting blockreference object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildA0ISO(devDept.Eyeshot.Block@,System.String,System.Nullable{System.Drawing.Color})">
      <summary>
            Creates the block for A0 ISO format and adds the related BlockReference to the Sheet Entities collection.
            </summary>
      <param name="block">The new block created.</param>
      <param name="blockName">The block name.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <returns>The new block reference.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildA1ISO(devDept.Eyeshot.Block@,System.String,System.Nullable{System.Drawing.Color})">
      <summary>
            Creates the block for A1 ISO format and adds the related BlockReference to the Sheet Entities collection.
            </summary>
      <param name="block">The new block created.</param>
      <param name="blockName">The block name.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <returns>The new block reference.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildA2ISO(devDept.Eyeshot.Block@,System.String,System.Nullable{System.Drawing.Color})">
      <summary>
            Creates the block for A2 ISO format and adds the related BlockReference to the Sheet Entities collection.
            </summary>
      <param name="block">The new block created.</param>
      <param name="blockName">The block name.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <returns>The new block reference.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildA3ISO(devDept.Eyeshot.Block@,System.String,System.Nullable{System.Drawing.Color})">
      <summary>
            Creates the block for A3 ISO format and adds the related BlockReference to the Sheet Entities collection.
            </summary>
      <param name="block">The new block created.</param>
      <param name="blockName">The block name.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <returns>The new block reference.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildA4ISO(devDept.Eyeshot.Block@,System.String,System.Nullable{System.Drawing.Color})">
      <summary>
            Creates the block for A4 ISO format and adds the related BlockReference to the Sheet Entities collection.
            </summary>
      <param name="block">The new block created.</param>
      <param name="blockName">The block name.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <returns>The new block reference.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildA4LANDSCAPEISO(devDept.Eyeshot.Block@,System.String,System.Nullable{System.Drawing.Color})">
      <summary>
            Creates the block for A4 LANDSCAPE ISO format and adds the related BlockReference to the Sheet Entities collection.
            </summary>
      <param name="block">The new block created.</param>
      <param name="blockName">The block name.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <returns>The new block reference.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildALANDSCAPEANSI(devDept.Eyeshot.Block@,System.String,System.Nullable{System.Drawing.Color})">
      <summary>
            Creates the block for A LANDSCAPE ANSI format and adds the related BlockReference to the Sheet Entities collection.
            </summary>
      <param name="block">The new block created.</param>
      <param name="blockName">The block name.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <returns>The new block reference.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildAANSI(devDept.Eyeshot.Block@,System.String,System.Nullable{System.Drawing.Color})">
      <summary>
            Creates the block for A ANSI format and adds the related BlockReference to the Sheet Entities collection.
            </summary>
      <param name="block">The new block created.</param>
      <param name="blockName">The block name.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <returns>The new block reference.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildBANSI(devDept.Eyeshot.Block@,System.String,System.Nullable{System.Drawing.Color})">
      <summary>
            Creates the block for B ANSI format and adds the related BlockReference to the Sheet Entities collection.
            </summary>
      <param name="block">The new block created.</param>
      <param name="blockName">The block name.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <returns>The new block reference.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildCANSI(devDept.Eyeshot.Block@,System.String,System.Nullable{System.Drawing.Color})">
      <summary>
            Creates the block for C ANSI format and adds the related BlockReference to the Sheet Entities collection.
            </summary>
      <param name="block">The new block created.</param>
      <param name="blockName">The block name.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <returns>The new block reference.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildDANSI(devDept.Eyeshot.Block@,System.String,System.Nullable{System.Drawing.Color})">
      <summary>
            Creates the block for D ANSI format and adds the related BlockReference to the Sheet Entities collection.
            </summary>
      <param name="block">The new block created.</param>
      <param name="blockName">The block name.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <returns>The new block reference.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildEANSI(devDept.Eyeshot.Block@,System.String,System.Nullable{System.Drawing.Color})">
      <summary>
            Creates the block for E ANSI format and adds the related BlockReference to the Sheet Entities collection.
            </summary>
      <param name="block">The new block created.</param>
      <param name="blockName">The block name.</param>
      <param name="color">Border color. If null or empty, default color is black.</param>
      <returns>The new block reference.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.BuildFormatBlock(System.String,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.Block@)">
      <summary>
            Creates the format block.
            </summary>
      <param name="blockName">The block name.</param>
      <param name="ents">The collection of entities.</param>
      <param name="block">The new block created.</param>
      <returns>The new block reference.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.Rebuild(devDept.Eyeshot.Design,devDept.Eyeshot.Drawing,System.Boolean,System.Boolean)">
      <summary>
            Rebuilds outdated views on this sheet.
            </summary>
      <param name="design">The design control.</param>
      <param name="drawing">The drawing control.</param>
      <param name="async">When true the blocks are built asynchronously and must be added/updated at the <see cref="E:devDept.Eyeshot.Workspace.WorkCompleted" /> event by calling <see cref="M:devDept.Eyeshot.ViewBuilder.AddToDrawing(devDept.Eyeshot.Drawing)" />, otherwise they're built synchronously.</param>
      <param name="changedOnly">When true only missing/changed views are built.</param>
      <seealso cref="M:devDept.Eyeshot.ViewBuilder.AddToDrawing(devDept.Eyeshot.Drawing)" />
      <see cref="E:devDept.Eyeshot.Workspace.WorkCompleted" />
      <see cref="E:devDept.Eyeshot.Workspace.WorkFailed" />
      <see cref="E:devDept.Eyeshot.Workspace.WorkCancelled" />
    </member>
    <member name="M:devDept.Eyeshot.Sheet.HasChanged(devDept.Eyeshot.BlockKeyedCollection)">
      <summary>
            Indicates whether some views must be updated or not.
            (Optional) Checks also if exists the related block for each BlockReference.
            </summary>
      <param name="blocks">(Optional) The blocks collection to check if exists the related block for each BlockReference.</param>
      <returns>True if at least one view is not updated or if a BlockReference has not the related block in the collection.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.Dispose">
      <summary>
            Cleans up graphics resources, like display lists, etc.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.Clone">
      <summary>
            Creates a deep copy of this entity.
            </summary>
      <returns>The new sheet object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Sheet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.ViewBuilder">
      <summary>
            Class that computes geometry for view entity.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ViewBuilder.#ctor(devDept.Eyeshot.Design,devDept.Eyeshot.Drawing,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="design">The design for building the views.</param>
      <param name="drawing">The drawing control containing sheets with views to rebuild.</param>
      <param name="changedOnly">When true only missing/changed views are built.</param>
      <seealso cref="P:devDept.Eyeshot.Drawing.SilhouettesLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.EdgesLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.WiresLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.HiddenSilhouettesLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.HiddenEdgesLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.HiddenWiresLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.CenterlinesLayerName" />
    </member>
    <member name="M:devDept.Eyeshot.ViewBuilder.#ctor(devDept.Eyeshot.Design,devDept.Eyeshot.Drawing,devDept.Eyeshot.Entities.View,devDept.Eyeshot.Sheet)">
      <summary>
            Standard constructor for a single view.
            </summary>
      <param name="design">The design for building the views.</param>
      <param name="drawing">The drawing control containing sheets with views to rebuild.</param>
      <param name="view">The view to rebuild.</param>
      <param name="sheet">The sheet to which the view belong to.</param>
      <remarks>
            If this will be added to a <see cref="T:devDept.WorkManager`1" /> queue, ensures to have added a place holder for the <paramref name="view" /> before.
            </remarks>
      <seealso cref="M:devDept.Eyeshot.Sheet.AddViewPlaceHolder(devDept.Eyeshot.Entities.View,devDept.Eyeshot.Design,devDept.Eyeshot.Drawing,System.String)" />
      <seealso cref="T:devDept.WorkManager`1" />
      <seealso cref="P:devDept.Eyeshot.Drawing.SilhouettesLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.EdgesLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.WiresLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.HiddenSilhouettesLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.HiddenEdgesLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.HiddenWiresLayerName" />
      <seealso cref="P:devDept.Eyeshot.Drawing.CenterlinesLayerName" />
    </member>
    <member name="P:devDept.Eyeshot.ViewBuilder.BuildingViewText">
      <summary>
            Gets or sets the progress bar text displayed while building the view when executed asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewBuilder.BuildingViewSuffix">
      <summary>
            Gets or sets the progress bar suffix text displayed while building the view when executed asynchronously. If null it shows the view name.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ViewBuilder.Contains(devDept.Eyeshot.Entities.View)">
      <summary>
            Indicates whether a view is already in the queue to be processed or not.
            </summary>
      <param name="view">The view that must be check.</param>
      <returns>True if the view is already in the queue, otherwise false.</returns>
    </member>
    <member name="M:devDept.Eyeshot.ViewBuilder.AddToDrawing(devDept.Eyeshot.Drawing)">
      <summary>
            Adds views and blocks to the drawing control.
            </summary>
      <param name="drawing">The drawing control.</param>
      <remarks>If a block already exists its entities are replaced with the new one.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Design">
      <summary>
            Design control definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Viewports">
      <summary>
            Gets or sets the list of viewports.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.ActiveViewportIndex">
      <summary>
            Gets or sets the active viewport index.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.ActiveViewport">
      <summary>
            Gets the active viewport.
            </summary>
      <exception cref="T:System.IndexOutOfRangeException">Throw when <see cref="P:devDept.Eyeshot.Design.Viewports" /> have not been initialized.</exception>
    </member>
    <member name="P:devDept.Eyeshot.Design.Units">
      <summary>
            The active units of measurement.
            </summary>
      <remarks>Affects the unit system of exported models.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Design.ViewportsGap">
      <summary>
            Gets or sets the gap between viewports.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Materials">
      <summary>Material collection. This collection contains material definitions.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.ZoomFitMode">
      <summary>
            Gets or sets the convexHull type used as optimization during entities zoom fit.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Wireframe">
      <summary>
            Gets or sets the display settings for Wireframe mode, shared by all viewports.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Shaded">
      <summary>
            Gets or sets the display settings for Shaded mode, shared by all viewports.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Flat">
      <summary>
            Gets or sets the display settings for Flat mode, shared by all viewports.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Rendered">
      <summary>
            Gets or sets the display settings for Rendered mode, shared by all viewports.
            </summary>
      <remarks>Call <see cref="!:Design.CompileUserInterfaceElements()" /></remarks>
    </member>
    <member name="P:devDept.Eyeshot.Design.HiddenLines">
      <summary>
            Sets the Hidden Lines options.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.BoundingBox">
      <summary>
            Bounding box settings.
            </summary>
      <remarks>You need to call <see cref="M:devDept.Eyeshot.Workspace.CompileUserInterfaceElements" /> after assigning a new BoundingBox.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Design.MinimumFramerate">
      <summary>
            The minimum acceptable framerate for dynamic movements.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.LayoutMode">
      <summary>
            Gets or sets the viewports configuration.
            </summary>
      <remarks>
        <see cref="P:devDept.Eyeshot.Design.Viewports" /> collection needs to be initialized with the correct number of Viewport items before changing this property.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Design.GetDefaultLayoutMode">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Light1">
      <summary>
            Light 1 attribute.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Light2">
      <summary>
            Light 2 attribute.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Light3">
      <summary>
            Light 3 attribute.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Light4">
      <summary>
            Light 4 attribute.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Light5">
      <summary>
            Light 5 attribute.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Light6">
      <summary>
            Light 6 attribute.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Light7">
      <summary>
            Light 7 attribute.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.Light8">
      <summary>
            Light 8 attribute.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.AmbientLight">
      <summary>
            Gets or sets the ambient light that is always added to the scene (multiplied by the material's ambient component).
            </summary>
      <seealso cref="P:devDept.Eyeshot.Design.DefaultMaterial" />
      <seealso cref="P:devDept.Eyeshot.Design.Materials" />
    </member>
    <member name="P:devDept.Eyeshot.Design.DefaultMaterial">
      <summary>
            Gets or sets the default material attributes used by the entities without their own material.
            </summary>
      <remarks>Only <see cref="P:devDept.Graphics.Material.Ambient" />, <see cref="P:devDept.Graphics.Material.Specular" /> and <see cref="P:devDept.Graphics.Material.Shininess" /> are used.</remarks>
      <seealso cref="!:SelectionColor" />
    </member>
    <member name="P:devDept.Eyeshot.Design.GroundPlaneDistance">
      <summary>
            Gets or sets the distance between the ground plane and the design's bounding box expressed as a fraction of the design height. 
            </summary>
      <remarks>This distance is use to compute the plane used by the planar reflections and the planar shadows</remarks>
      <seealso cref="P:devDept.Eyeshot.DisplayModeSettingsRendered.PlanarReflections" />
      <seealso cref="P:devDept.Eyeshot.DisplayModeSettingsShaded.ShadowMode" />
      <seealso cref="M:devDept.Eyeshot.Design.GetPlanarReflectionsPlane" />
    </member>
    <member name="P:devDept.Eyeshot.Design.PlanarShadowOpacity">
      <summary>
            Gets or sets the planar shadow's opacity. 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.ClippingPlane1">
      <summary>
            Clipping plane 1 attributes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.ClippingPlane2">
      <summary>
            Clipping plane 2 attributes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.ClippingPlane3">
      <summary>
            Clipping plane 3 attributes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.ClippingPlane4">
      <summary>
            Clipping plane 4 attributes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.ClippingPlane5">
      <summary>
            Clipping plane 5 attributes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.ClippingPlane6">
      <summary>
            Clipping plane 6 attributes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.ObjectManipulator">
      <summary>
            The manipulator used to graphically position the selected entities.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.ViewportBorder">
      <summary>
            Gets or sets the border settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.DefaultColor">
      <summary>
            Gets or sets the default color used by top level entities with <see cref="F:devDept.Eyeshot.Entities.colorMethodType.byParent" /> color method.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" />
    </member>
    <member name="P:devDept.Eyeshot.Design.Backface">
      <summary>
            Gets or sets the backface settings, shared by all viewports. This settings don't apply to multicolor entities like <see cref="T:devDept.Eyeshot.Entities.Mesh" /> for example.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.KeepSceneUpright">
      <summary>
            Gets or sets a flag that keeps the scene upright when doing SetView operations or clicking on the <see cref="T:devDept.Eyeshot.ViewCubeIcon" /> faces.
            </summary>
      <remarks>If false, the SetView operations and the mouse clicks on the ViewCubeIcon set the orientation with the up-vector closest to the current one.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Design.OrientationMode">
      <summary>
            Gets or sets the coordinate system orientation mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.AssemblySelectionMode">
      <summary>
            Gets or sets a boolean that determines whether the selection goes inside the <see cref="T:devDept.Eyeshot.Entities.BlockReference" /> tree.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Design.SelectionFilterMode">
      <summary>
            Gets or sets the pick filter used by the pick action modes.
            </summary>
      <seealso cref="!:ActionMode" />
    </member>
    <member name="P:devDept.Eyeshot.Design.SplitterMoving">
      <summary>
        <para>WinForms: When the viewport control is hosted inside a SplitContainer
            control an annoying repaint issue is present during SplitContainer splitter
            moving.</para>
        <para>WPF: When the viewport control is hosted inside a Grid control with
            GridSplitter an annoying repaint issue is present during GridSplitter
            moving.</para>
        <para>Setting properly this flag it can be avoided.</para>
      </summary>
      <example>
            The following code fragment demonstrates the usage of the SplitterMoving flag to
            avoid the SplitControl repaint issue during GridSplitter moving. 
            <code lang="C#"><![CDATA[// WinForms
            bool first = true;
            private void splitContainer1_SplitterMoving(object sender, SplitterCancelEventArgs e)
            {
               if (first == true)
               {
                  MainViewport.SplitterMoving = true;
                  first = false;
               }
            }
            private void splitContainer1_SplitterMoved(object sender, SplitterEventArgs e)
            {
               first = true;
               MainViewport.SplitterMoving = false;
            }
            
            // WPF
            private void GridSplitter1_PreviewMouseDown(object sender, MouseButtonEventArgs e)
            {
            	MainViewport.SplitterMoving = true;
            }
            private void GridSplitter1_PreviewMouseUp(object sender, MouseButtonEventArgs e)
            {
            	MainViewport.SplitterMoving = false;
            }]]></code><code lang="VB"><![CDATA[// WinForms
            Dim first As Boolean = True
            Private Sub SplitContainer1_SplitterMoving(ByVal sender As System.Object, ByVal e As System.Windows.Forms.SplitterCancelEventArgs) Handles SplitContainer1.SplitterMoving
               If first = True Then
                  MainViewport.SplitterMoving = True
                  first = False
               End If
            End Sub
            Private Sub SplitContainer1_SplitterMoved(ByVal sender As System.Object, ByVal e As System.Windows.Forms.SplitterEventArgs) Handles SplitContainer1.SplitterMoved
               first = True
               MainViewport.SplitterMoving = False
            End Sub
            // WPF
            Private Sub GridSplitter1_PreviewMouseDown(ByVal sender As System.Object, ByVal e As System.Windows.Input.MouseButtonEventArgs) Handles GridSplitter1.PreviewMouseDown
                MainViewport.SplitterMoving = True
            End Sub
            Private Sub GridSplitter1__PreviewMouseUp(ByVal sender As System.Object, ByVal e As System.Windows.Input.MouseButtonEventArgs) Handles GridSplitter1.PreviewMouseUp
                MainViewport.SplitterMoving = False
            End Sub]]></code></example>
    </member>
    <member name="P:devDept.Eyeshot.Design.FaceSelectionAngle">
      <summary>
            Gets or sets the angle (in radians) used to discriminate adjacent triangles in the selection of the faces of Mesh and Solids.
            </summary>
      <remarks>The default is 0.5 rad.</remarks>
      <seealso cref="P:devDept.Eyeshot.Entities.Mesh.Faces" />
      <seealso cref="P:devDept.Eyeshot.Entities.Solid.Faces" />
    </member>
    <member name="P:devDept.Eyeshot.Design.WriteDepthForTransparents">
      <summary>
            When true, adds an extra pass to write transparent entities in the Z buffer.
            </summary>
      <remarks>Refers to inaccurate transparency only.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Design.PrintPreview(System.Drawing.Size,System.Boolean)">
      <param name="extents">If true fits the design on view, else captures the whole viewport</param>
      <remarks>For more options use the <see cref="T:devDept.Eyeshot.HiddenLinesViewOnPaperPreview" /> class directly.</remarks>
      <seealso cref="!:SetPrinterSettings(PrinterSettings, bool)" />
      <seealso cref="!:PageSetup(bool, bool, int?, PaperSize, bool?)">
      </seealso>
      <seealso cref="M:devDept.Eyeshot.Design.Print(System.Boolean)">
      </seealso>
      <seealso cref="T:devDept.Eyeshot.HiddenLinesViewOnPaper" />
      <seealso cref="T:devDept.Eyeshot.HiddenLinesViewOnPaperPreview" />
    </member>
    <member name="M:devDept.Eyeshot.Design.Print(System.Boolean)">
      <param name="extents">If true fits the design on view, else captures the whole viewport</param>
      <remarks>For more options use the <see cref="T:devDept.Eyeshot.HiddenLinesViewOnPaper" /> class directly.</remarks>
      <seealso cref="!:SetPrinterSettings(PrinterSettings, bool)" />
      <seealso cref="!:PageSetup(bool, bool, int?, PaperSize, bool?)">
      </seealso>
      <seealso cref="!:PrintPreview(Size, bool)">
      </seealso>
      <seealso cref="T:devDept.Eyeshot.HiddenLinesViewOnPaper" />
      <seealso cref="T:devDept.Eyeshot.HiddenLinesViewOnPaperPreview" />
    </member>
    <member name="M:devDept.Eyeshot.Design.SaveFile(System.String,devDept.Eyeshot.Drawing,devDept.Serialization.contentType,devDept.Serialization.FileSerializer)">
      <summary>
            Saves the current scene synchronously on disk, including entities and all the master collections (layers, blocks, etc.)
            </summary>
      <param name="fileName">File name.</param>
      <param name="drawing">The drawing control. Can be null/Nothing.</param>
      <param name="contentType">The <see cref="T:devDept.Serialization.contentType" /> to store the file.</param>
      <param name="fileSerializer">The custom <see cref="T:devDept.Serialization.FileSerializer" /> where are defined custom objects. Can be null/Nothing.</param>
      <remarks>
        <para>This command is based on Eyeshot proprietary file format.
                If the fileSerializer param is null, it skips some particular Autodesk properties like XData and your custom entities.
                If you want to run the operation asynchronously, use the <see cref="T:devDept.Eyeshot.Translators.WriteFile" /> class in conjunction with <see cref="M:devDept.Eyeshot.Workspace.StartWork(devDept.WorkUnit)" /> method.         
                </para>
      </remarks>
      <seealso cref="T:devDept.Eyeshot.Translators.WriteFile" />
      <seealso cref="!:OpenFile(string)" />
    </member>
    <member name="M:devDept.Eyeshot.Design.SaveFile(System.IO.Stream,devDept.Eyeshot.Drawing,devDept.Serialization.contentType,devDept.Serialization.FileSerializer)">
      <summary>
            Saves the current scene synchronously on disk, including entities and all the master collections (layers, blocks, etc.)
            </summary>
      <param name="stream">The file stream.</param>
      <param name="drawing">The drawing control. Can be null/Nothing.</param>
      <param name="contentType">The <see cref="T:devDept.Serialization.contentType" /> to store the file.</param>
      <param name="fileSerializer">The custom <see cref="T:devDept.Serialization.FileSerializer" /> where are defined custom objects. Can be null/Nothing.</param>
      <remarks>
        <para>This command is based on Eyeshot proprietary file format.
                If the fileSerializer param is null, it skips some particular Autodesk properties like XData and your custom entities/objects.
                If you want to run the operation asynchronously, use the <see cref="T:devDept.Eyeshot.Translators.WriteFile" /> class in conjunction with <see cref="M:devDept.Eyeshot.Workspace.StartWork(devDept.WorkUnit)" /> method instead.
                </para>
      </remarks>
      <seealso cref="T:devDept.Eyeshot.Translators.WriteFile" />
      <seealso cref="!:OpenFile(Stream)" />
    </member>
    <member name="M:devDept.Eyeshot.Design.OpenFile(System.String,devDept.Eyeshot.Drawing,devDept.Serialization.FileSerializer)">
      <summary>
            Restores the scene synchronously from disk, including entities and all the master collections (layers, blocks, etc.)
            </summary>
      <param name="fileName">File name.</param>
      <param name="drawing">The drawing control. Can be null/Nothing.</param>
      <param name="fileSerializer">The <see cref="T:devDept.Serialization.FileSerializer" />. Can be null/Nothing.</param>
      <remarks>
        <para>This command is based on Eyeshot proprietary file format.
                If the fileSerializer param is null, it skips some particular Autodesk properties like XData and your custom entities/objects.
                If you want to run the operation asynchronously, use the <see cref="T:devDept.Eyeshot.Translators.ReadFile" /> class in conjunction with <see cref="M:devDept.Eyeshot.Workspace.StartWork(devDept.WorkUnit)" /> method instead.
                </para>
      </remarks>
      <seealso cref="T:devDept.Eyeshot.Translators.ReadFile" />
      <seealso cref="!:SaveFile(string)" />
    </member>
    <member name="M:devDept.Eyeshot.Design.OpenFile(System.IO.Stream,devDept.Eyeshot.Drawing,devDept.Serialization.FileSerializer)">
      <summary>
            Restores the scene synchronously from disk, including entities and all the master collections (layers, blocks, etc.)
            </summary>
      <param name="stream">The file stream.</param>
      <param name="drawing">The drawing control. Can be null/Nothing.</param>
      <param name="fileSerializer">The <see cref="T:devDept.Serialization.FileSerializer" />. Can be null/Nothing.</param>
      <remarks>
        <para>This command is based on Eyeshot proprietary file format.
                If the fileSerializer param is null, it skips some particular Autodesk properties like XData and your custom entities/objects.
                If you want to run the operation asynchronously, use the <see cref="T:devDept.Eyeshot.Translators.ReadFile" /> class in conjunction with <see cref="M:devDept.Eyeshot.Workspace.StartWork(devDept.WorkUnit)" /> method.
                </para>
      </remarks>
      <seealso cref="T:devDept.Eyeshot.Translators.ReadFile" />
      <seealso cref="!:SaveFile(Stream)" />
    </member>
    <member name="M:devDept.Eyeshot.Design.CreateBOMTable(devDept.Eyeshot.EntityList,devDept.Eyeshot.BlockKeyedCollection,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.Entities.Table.flowDirection,System.Int32)">
      <summary>
            Creates the Bill Of Materials. 
            </summary>
      <param name="entites">The entities collection. </param>
      <param name="blocks">The blocks collection. </param>
      <param name="itemNumberText">The text on the header row of the item number column. </param>
      <param name="partNumberText">The text on the header row of the part number column. </param>
      <param name="descriptionText">The text on the header raw of the description column. </param>
      <param name="quantityText">The text on the header raw of the quantity column. </param>
      <param name="partsOnly">If true, only the block containing geometry are taken in account to create the table. </param>
      <param name="flowDirection">The table's flow direction. </param>
      <param name="maxLevel">The maximum depth level of the Bill of Materials. </param>
      <returns> Returns a Table entity that represents the Bill of Materials. </returns>
    </member>
    <member name="M:devDept.Eyeshot.Design.CreateBillOfMaterials(devDept.Eyeshot.EntityList,devDept.Eyeshot.BlockKeyedCollection,System.Boolean,System.Int32)">
      <summary>
            Creates the data for the Bill Of Materials.
            </summary>
      <param name="entities">The entities collection. </param>
      <param name="blocks">The blocks collection. </param>
      <param name="partsOnly">If true, only the block containing geometry are taken in account to create the table.</param>
      <param name="maxLevel">The maximum depth level of the Bill of Materials.  </param>
      <returns>A DataTable containing the Bill of Materials data.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Design.SketchManager">
      <summary>
            The <see cref="T:devDept.Eyeshot.SketchManager" /> for <see cref="T:devDept.Eyeshot.Entities.SketchEntity" /> editing.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Design.EditSketch(devDept.Eyeshot.Entities.SketchEntity)" />
      <seealso cref="M:devDept.Eyeshot.Workspace.ResetOpenBlocks(System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Design.NewSketch(devDept.Geometry.Plane)">
      <summary>
            Sets the sketch entity for editing. 
            </summary>
      <param name="sketchPlane">The sketch plane.</param>
      <returns>
      </returns>
      <seealso cref="E:devDept.Eyeshot.SketchManager.EditStarted" />
      <seealso cref="E:devDept.Eyeshot.SketchManager.EditEnded" />
      <seealso cref="E:devDept.Eyeshot.SketchManager.SystemSolved" />
    </member>
    <member name="M:devDept.Eyeshot.Design.NewSketch(System.Int32,devDept.Eyeshot.Entities.Brep)">
      <summary>
            Creates a new sketch on the Brep face.
            </summary>
      <param name="faceIndex">The brep face index.</param>
      <param name="brep">The brep.</param>
      <seealso cref="E:devDept.Eyeshot.SketchManager.EditStarted" />
      <seealso cref="E:devDept.Eyeshot.SketchManager.EditEnded" />
      <seealso cref="E:devDept.Eyeshot.SketchManager.SystemSolved" />
    </member>
    <member name="M:devDept.Eyeshot.Design.EditSketch(devDept.Eyeshot.Entities.SketchEntity)">
      <summary>
            Sets the sketch entity for editing. 
            </summary>
      <param name="sketchEntity">The sketch.</param>
      <seealso cref="E:devDept.Eyeshot.SketchManager.EditStarted" />
      <seealso cref="E:devDept.Eyeshot.SketchManager.EditEnded" />
      <seealso cref="E:devDept.Eyeshot.SketchManager.SystemSolved" />
    </member>
    <member name="M:devDept.Eyeshot.Design.UpdateViewportsSizeAndLocation">
      <summary>
            Updates the Viewports dimensions and locations depending on the <see cref="P:devDept.Eyeshot.Design.LayoutMode" /> property.
            </summary>
      <remarks>If overridden, in WPF must call <see cref="M:devDept.Eyeshot.Workspace.ApplyOpacityMask" /></remarks>
    </member>
    <member name="M:devDept.Eyeshot.Design.ExtrudeText(devDept.Eyeshot.Entities.Text,System.Double,System.Double,System.Boolean)">
      <summary>
            Extrudes a text creating an array of new solids.
            </summary>
      <param name="text">Entity text</param>
      <param name="tolerance">Entity text needs to be converted to Solid type, this is the conversion tolerance (chordal error).</param>
      <param name="amount">Extrusion amount</param>
      <param name="endCaps">Closing Caps on both ends</param>
      <returns>The created array of solids.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Design.ExtrudeText(devDept.Eyeshot.Entities.Text,System.Double,devDept.Geometry.Vector3D,System.Boolean)">
      <summary>
            Extrudes a text creating an array of new solids.
            </summary>
      <param name="text">Entity text</param>
      <param name="tolerance">Entity text needs to be converted to Solid type, this is the conversion tolerance (chordal error).</param>
      <param name="amount">Extrusion amount</param>
      <param name="endCaps">Closing Caps on both ends</param>
      <returns>The created array of solids.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Design.ExtrudeText(devDept.Eyeshot.Entities.Text,System.Double,System.Double,System.Boolean,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Extrudes a text creating an array of new meshes.
            </summary>
      <param name="text">Entity text</param>
      <param name="tolerance">Entity text needs to be converted to Mesh type, this is the conversion tolerance (chordal error).</param>
      <param name="amount">Extrusion amount</param>
      <param name="endCaps">Closing Caps on both ends</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The created array of meshes.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Design.ExtrudeText(devDept.Eyeshot.Entities.Text,System.Double,devDept.Geometry.Vector3D,System.Boolean,devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Extrudes a text creating an array of new meshes.
            </summary>
      <param name="text">Entity text</param>
      <param name="tolerance">Entity text needs to be converted to Mesh type, this is the conversion tolerance (chordal error).</param>
      <param name="amount">Extrusion amount</param>
      <param name="endCaps">Closing Caps on both ends</param>
      <param name="meshNature">Nature of the resulting mesh entity</param>
      <returns>The created array of meshes.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Design.RotateCamera(System.Int32,System.Int32)">
      <summary>
            Rotates the view of the specified amount.
            </summary>
      <param name="dx">Horizontal rotation amount</param>
      <param name="dy">Vertical rotation amount</param>
      <seealso cref="!:ZoomCamera(int)" />
      <seealso cref="!:PanCamera(System.Drawing.Point, System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Design.RotateCamera(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Rotates the view of the specified amount.
            </summary>
      <param name="dx">Horizontal rotation amount</param>
      <param name="dy">Vertical rotation amount</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <seealso cref="!:ZoomCamera(int)" />
      <seealso cref="!:PanCamera(System.Drawing.Point, System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Design.RotateCamera(System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Rotates the view simulating the movement between two mouse position.
            </summary>
      <param name="mousePos1">The initial mouse position</param>
      <param name="mousePos2">The final mouse position</param>
      <seealso cref="!:ZoomCamera(int)" />
      <seealso cref="!:PanCamera(System.Drawing.Point, System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Design.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)">
      <summary>
            Rotates the view of the specified amount.
            </summary>
      <param name="last">Previous axis</param>
      <param name="current">Current axis</param>
      <seealso cref="!:ZoomCamera(int)" />
      <seealso cref="M:devDept.Eyeshot.Design.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="!:PanCamera(System.Drawing.Point, System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Design.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Boolean)">
      <summary>
            Rotates the view of the specified amount.
            </summary>
      <param name="last">Previous axis</param>
      <param name="current">Current axis</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <seealso cref="!:ZoomCamera(int)" />
      <seealso cref="M:devDept.Eyeshot.Design.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="!:PanCamera(System.Drawing.Point, System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Design.RotateCamera(devDept.Geometry.Vector3D,System.Double,System.Boolean)">
      <summary>
            Rotates the view of the specified amount.
            </summary>
      <param name="axis">Rotation axis</param>
      <param name="rotAngleInDegrees">Rotation amount</param>
      <param name="trackBall">if true, the rotation is applied after the current rotation, else it's applied before</param>
    </member>
    <member name="M:devDept.Eyeshot.Design.RotateCamera(devDept.Geometry.Vector3D,System.Double,System.Boolean,System.Boolean)">
      <summary>
            Rotates the view of the specified amount.
            </summary>
      <param name="axis">Rotation axis</param>
      <param name="rotAngleInDegrees">Rotation amount</param>
      <param name="trackBall">if true, the rotation is applied after the current rotation, else it's applied before</param>
      <param name="animate">If true performs an animation when changing the view</param>
    </member>
    <member name="M:devDept.Eyeshot.Design.OrientCamera(devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Orients the Camera between the two specified points.
            </summary>
      <param name="location">The camera location</param>
      <param name="target">The new camera target</param>
      <remarks>The <param nameref="location" /> parameter is used just to determine the direction. The final <see cref="P:devDept.Eyeshot.Camera.Location" /> depends on the <paramref name="target" /> and the <see cref="P:devDept.Eyeshot.Camera.Distance" /></remarks>
    </member>
    <member name="M:devDept.Eyeshot.Design.RotateLeft(System.Double)">
      <summary>
            Rotates the view to the left.
            </summary>
      <param name="degrees">Degrees of rotation</param>
    </member>
    <member name="M:devDept.Eyeshot.Design.RotateRight(System.Double)">
      <summary>
            Rotates the view to the right.
            </summary>
      <param name="degrees">Degrees of rotation</param>
    </member>
    <member name="M:devDept.Eyeshot.Design.RotateUp(System.Double)">
      <summary>
            Rotates the view upwards.
            </summary>
      <param name="degrees">Degrees of rotation</param>
    </member>
    <member name="M:devDept.Eyeshot.Design.RotateDown(System.Double)">
      <summary>
            Rotates the view downwards.
            </summary>
      <param name="degrees">Degrees of rotation</param>
    </member>
    <member name="M:devDept.Eyeshot.Design.MoveToPlane(System.Collections.Generic.ICollection{devDept.Eyeshot.Entities.Entity},devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Moves a list of entities from plane XY to the specified plane.
            </summary>
      <param name="entList">The entity list</param>
      <param name="origin">The destination plane origin</param>
      <param name="xAxis">The destination plane X axis</param>
      <param name="yAxis">The destination plane Y axis</param>
    </member>
    <member name="M:devDept.Eyeshot.Design.MoveToPlane(System.Collections.Generic.ICollection{devDept.Eyeshot.Entities.Entity},devDept.Geometry.Plane)">
      <summary>
            Moves a list of entities from plane XY to the specified plane.
            </summary>
      <param name="entList">The entity list</param>
      <param name="plane">Destination plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Design.MoveToPlane(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Geometry.Plane)">
      <summary>
            Moves a list of points from plane XY to the specified plane.
            </summary>
      <param name="points">The points list</param>
      <param name="plane">Destination plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Design.FindClosestTriangle(devDept.Eyeshot.Entities.IFace,System.Drawing.Point,devDept.Geometry.Point3D@,System.Int32@)">
      <summary>
            Finds the closest triangle to the viewer of the specified entity.
            </summary>
      <param name="entity">The entity</param>
      <param name="mousePos">Mouse cursor position</param>
      <param name="hitPoint">Closest triangle intersection point in the <see cref="P:devDept.Eyeshot.Workspace.Parents" /> coordinate system.</param>
      <param name="hitTriangleIndex">Closest triangle index</param>
      <returns>The numbers of triangles found under the mouse cursor.</returns>
      <seealso cref="!:Design.FindClosestVertex(System.Drawing.Point, double, out Point3D)" />
    </member>
    <member name="M:devDept.Eyeshot.Design.FindClosestTriangle(devDept.Eyeshot.Workspace.SelectedItem,System.Drawing.Point,devDept.Geometry.Point3D@,System.Int32@)">
      <summary>
            Finds the closest triangle to the viewer of the specified item (which must be related to an <see cref="T:devDept.Eyeshot.Entities.IFace" /> entity and may include the parents stack for nested entities).
            </summary>
      <param name="item">The item</param>
      <param name="mousePos">Mouse cursor position</param>
      <param name="hitPoint">Closest triangle intersection point in the <see cref="P:devDept.Eyeshot.Workspace.Parents" /> coordinate system.</param>
      <param name="hitTriangleIndex">Closest triangle index</param>
      <returns>The numbers of triangles found under the mouse cursor.</returns>
      <seealso cref="!:Design.FindClosestVertex(System.Drawing.Point, double, out Point3D)" />
    </member>
    <member name="M:devDept.Eyeshot.Design.FindClosestTriangle(devDept.Eyeshot.Entities.IFace,System.Drawing.Point)">
      <summary>
            Finds the closest triangle to the viewer of the specified entity.
            </summary>
      <param name="entity">The entity</param>
      <param name="mousePos">Mouse cursor position (zero on top)</param>
      <returns>A sorted (by distance from the viewer) list of <see cref="T:devDept.Geometry.Entities.HitTriangle" /> found under the mouse cursor.</returns>
      <seealso cref="!:Design.FindClosestVertex(System.Drawing.Point, double, out Point3D)" />
      <remarks>If the entity is inside a <see cref="T:devDept.Eyeshot.Entities.BlockReference" />, it must be set as current.</remarks>
      <remarks>The triangles intersection points are in the <see cref="P:devDept.Eyeshot.Workspace.Parents" /> coordinate system.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Design.FindClosestTriangle(devDept.Eyeshot.Workspace.SelectedItem,System.Drawing.Point)">
      <summary>
            Finds the closest triangle to the viewer of the specified item (which must be related to an <see cref="T:devDept.Eyeshot.Entities.IFace" /> entity and may include the parents stack for nested entities).
            </summary>
      <param name="item">The item</param>
      <param name="mousePos">Mouse cursor position (zero on top)</param>
      <returns>A sorted (by distance from the viewer) list of <see cref="T:devDept.Geometry.Entities.HitTriangle" /> found under the mouse cursor.</returns>
      <seealso cref="!:Design.FindClosestVertex(System.Drawing.Point, double, out Point3D)" />
      <remarks>The triangles intersection points are in the <see cref="P:devDept.Eyeshot.Workspace.Parents" /> coordinate system.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Design.StartAnimation">
      <summary>
        <para>Starts the animation timer. After calling this method the <see cref="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">Animate</see> method of all the entities is called periodically to allow the 
            computation of the new entity position.</para>
        <para>To animate group of entities the approach is the following:</para>
        <list type="number">
          <item>
            <description>Create groups of moving objects (using <see cref="T:devDept.Eyeshot.Block" /> class and adding entities to the <see cref="P:devDept.Eyeshot.Block.Entities" /> collection)</description>
          </item>
          <item>
            <description>Add blocks created at point 1) to the <see cref="!:Design.Blocks" /> collection</description>
          </item>
          <item>
            <description>Subclass the <see cref="T:devDept.Eyeshot.Entities.BlockReference">BlockReference</see> class for each moving group of objects</description>
          </item>
          <item>
            <description>Override the <see cref="!:BlockReference.Animate">BlockReference.Animate()</see> method of the class at point 3) and add the code to compute the data for entities transformation at that specific time frame</description>
          </item>
          <item>
            <description>Override the <see cref="M:devDept.Eyeshot.Entities.BlockReference.MoveTo(devDept.Eyeshot.DrawParams)">BlockReference.MoveTo()</see> method of the class at point 3) and add the code to move the objects on the GPU</description>
          </item>
          <item>
            <description>Override the <see cref="M:devDept.Eyeshot.Entities.Entity.IsInFrustum(devDept.Eyeshot.FrustumParams,devDept.Geometry.Point3D,System.Double)">Entity.IsInFrustum()</see> method of the class at point 3) and return true without calling the base to avoid undesired clipping. 
            		It might be necessary to override also the <see cref="P:devDept.Eyeshot.BoundingBoxSettings.OverrideSceneExtents">bounding box scene extents</see></description>
          </item>
          <item>
            <description>Add the block references created at point 3) to the <see cref="!:Design.Entities" /> collection</description>
          </item>
          <item>
            <description>Call StartAnimation() providing the time interval between each frame</description>
          </item>
          <item>
            <description>Call StopAnimation() to stop the animation</description>
          </item>
        </list>
      </summary>
      <seealso cref="M:devDept.Eyeshot.Design.StopAnimation">StopAnimation Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">Animate Method</seealso>
      <seealso cref="P:devDept.Eyeshot.DisplayModeSettings.SilhouettesDrawingMode" />
      <seealso cref="P:devDept.Eyeshot.Design.IsAnimationRunning" />
      <seealso cref="!:BoundingBox.OverrideSceneExtents" />
      <seealso cref="M:devDept.Eyeshot.Entities.BlockReference.MoveTo(devDept.Eyeshot.DrawParams)" />
      <remarks>During animation the silhouettes, if enabled, are skipped.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Design.StartAnimation(System.Int32)">
      <summary>
        <para>Starts the animation timer. After calling this method the <see cref="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">Animate</see> method of all the entities is called periodically to allow the 
            computation of the new entity position.</para>
        <para>To animate group of entities the approach is the following:</para>
        <list type="number">
          <item>
            <description>Create groups of moving objects (using <see cref="T:devDept.Eyeshot.Block" /> class and adding entities to the <see cref="P:devDept.Eyeshot.Block.Entities" /> collection)</description>
          </item>
          <item>
            <description>Add blocks created at point 1) to the <see cref="!:Design.Blocks" /> collection</description>
          </item>
          <item>
            <description>Subclass the <see cref="T:devDept.Eyeshot.Entities.BlockReference">BlockReference</see> class for each moving group of objects</description>
          </item>
          <item>
            <description>Override the <see cref="!:BlockReference.Animate">BlockReference.Animate()</see> method of the class at point 3) and add the code to compute the data for entities transformation at that specific time frame</description>
          </item>
          <item>
            <description>Override the <see cref="M:devDept.Eyeshot.Entities.BlockReference.MoveTo(devDept.Eyeshot.DrawParams)">BlockReference.MoveTo()</see> method of the class at point 3) and add the code to move the objects on the GPU</description>
          </item>
          <item>
            <description>Override the <see cref="M:devDept.Eyeshot.Entities.Entity.IsInFrustum(devDept.Eyeshot.FrustumParams,devDept.Geometry.Point3D,System.Double)">BlockReference.IsInFrustum()</see> method of the class at point 3) and return true without calling the base to avoid undesired clipping. 
            		It might be necessary to override also the <see cref="P:devDept.Eyeshot.BoundingBoxSettings.OverrideSceneExtents">bounding box scene extents</see></description>
          </item>
          <item>
            <description>Add the block references created at point 3) to the <see cref="!:Design.Entities" /> collection</description>
          </item>
          <item>
            <description>Call StartAnimation() providing the time interval between each frame</description>
          </item>
          <item>
            <description>Call StopAnimation() to stop the animation</description>
          </item>
        </list>
      </summary>
      <param name="interval">Timer interval. See <see cref="T:System.Threading.Timer" /> object.</param>
      <seealso cref="M:devDept.Eyeshot.Design.StopAnimation">StopAnimation Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">Animate Method</seealso>
      <seealso cref="P:devDept.Eyeshot.DisplayModeSettings.SilhouettesDrawingMode" />
      <seealso cref="P:devDept.Eyeshot.Design.IsAnimationRunning" />
      <seealso cref="!:BoundingBox.OverrideSceneExtents" />
      <seealso cref="M:devDept.Eyeshot.Entities.BlockReference.MoveTo(devDept.Eyeshot.DrawParams)" />
      <remarks>During animation the silhouettes, if enabled, are skipped.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Design.StartAnimation(System.Int32,System.Int32)">
      <summary>
        <para>Starts the animation timer. After calling this method the <see cref="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">Animate</see> method of all the entities is called periodically to allow the 
            computation of the new entity position.</para>
        <para>To animate group of entities the approach is the following:</para>
        <list type="number">
          <item>
            <description>Create groups of moving objects (using <see cref="T:devDept.Eyeshot.Block" /> class and adding entities to the <see cref="P:devDept.Eyeshot.Block.Entities" /> collection)</description>
          </item>
          <item>
            <description>Add blocks created at point 1) to the <see cref="!:Design.Blocks" /> collection</description>
          </item>
          <item>
            <description>Subclass the <see cref="T:devDept.Eyeshot.Entities.BlockReference">BlockReference</see> class for each moving group of objects</description>
          </item>
          <item>
            <description>Override the <see cref="!:BlockReference.Animate">BlockReference.Animate()</see> method of the class at point 3) and add the code to compute the data for entities transformation at that specific time frame</description>
          </item>
          <item>
            <description>Override the <see cref="M:devDept.Eyeshot.Entities.BlockReference.MoveTo(devDept.Eyeshot.DrawParams)">BlockReference.MoveTo()</see> method of the class at point 3) and add the code to move the objects on the GPU</description>
          </item>
          <item>
            <description>Override the <see cref="M:devDept.Eyeshot.Entities.Entity.IsInFrustum(devDept.Eyeshot.FrustumParams,devDept.Geometry.Point3D,System.Double)">Entity.IsInFrustum()</see> method of the class at point 3) and return true without calling the base to avoid undesired clipping. 
            		It might be necessary to override also the <see cref="P:devDept.Eyeshot.BoundingBoxSettings.OverrideSceneExtents">bounding box scene extents</see></description>
          </item>
          <item>
            <description>Add the block references created at point 3) to the <see cref="!:Design.Entities" /> collection</description>
          </item>
          <item>
            <description>Call StartAnimation() providing the time interval between each frame</description>
          </item>
          <item>
            <description>Call StopAnimation() to stop the animation</description>
          </item>
        </list>
      </summary>
      <param name="stopAfter">The animation will stop after this number of frames</param>
      <param name="interval">Timer interval, see <see cref="T:System.Threading.Timer" /> object.</param>
      <seealso cref="M:devDept.Eyeshot.Design.StopAnimation">StopAnimation Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Entities.Entity.Animate(System.Int32)">Animate Method</seealso>
      <seealso cref="P:devDept.Eyeshot.DisplayModeSettings.SilhouettesDrawingMode" />
      <seealso cref="P:devDept.Eyeshot.Design.IsAnimationRunning" />
      <seealso cref="!:BoundingBox.OverrideSceneExtents" />
      <seealso cref="M:devDept.Eyeshot.Entities.BlockReference.MoveTo(devDept.Eyeshot.DrawParams)" />
      <remarks>During animation the silhouettes, if enabled, are skipped.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Design.IsAnimationRunning">
      <summary>
            Tells if the animation is currently running.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Design.StartAnimation" />
      <seealso cref="M:devDept.Eyeshot.Design.StopAnimation" />
      <seealso cref="P:devDept.Eyeshot.DisplayModeSettings.SilhouettesDrawingMode" />
      <remarks>During animation the silhouettes, if enabled, are skipped.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Design.StopAnimation">
      <summary>Stops the animation timer. Call base class method when overriding.</summary>
      <seealso cref="M:devDept.Eyeshot.Design.StartAnimation(System.Int32)">StartAnimation Method</seealso>
    </member>
    <member name="P:devDept.Eyeshot.Design.AnimationStep">
      <summary>Gets or sets the animation step that increments the <see cref="P:devDept.Eyeshot.Design.AnimationFrameNumber" /> at each tick of the animation timer. Can be a negative number.</summary>
      <seealso cref="M:devDept.Eyeshot.Design.StartAnimation(System.Int32)">StartAnimation Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Design.StopAnimation">StopAnimation Method</seealso>
    </member>
    <member name="P:devDept.Eyeshot.Design.AnimationInterval">
      <summary>Gets or sets the animation interval.</summary>
      <seealso cref="M:devDept.Eyeshot.Design.StartAnimation(System.Int32)">StartAnimation Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Design.StopAnimation">StopAnimation Method</seealso>
    </member>
    <member name="P:devDept.Eyeshot.Design.AnimationFrameNumber">
      <summary>Gets or sets the animation frame number.</summary>
      <seealso cref="M:devDept.Eyeshot.Design.StartAnimation(System.Int32)">StartAnimation Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Design.StopAnimation">StopAnimation Method</seealso>
    </member>
    <member name="M:devDept.Eyeshot.Design.SetSelectionScope(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Sets the parents stack that represents the starting point for the selection.
            </summary>
      <remarks>The top most element of the stack is the inner most BlockReference (the last parent of the hierarchy).</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Design.GetPlanarReflectionsPlane">
      <summary>
             Gets the plane used to draw the planar reflections.
            </summary>
      <returns>The plane</returns>
      <seealso cref="P:devDept.Eyeshot.Design.GroundPlaneDistance" />
    </member>
    <member name="M:devDept.Eyeshot.Design.SetColorShaded(devDept.Graphics.RenderContextBase,devDept.Eyeshot.Entities.entityNatureType,System.Drawing.Color,System.Boolean,devDept.Graphics.BackfaceSettings)">
      <summary>
            Shaded color changer.
            </summary>
      <param name="context">The render context</param>
      <param name="nature">The nature of the entity just to be drawn</param>
      <param name="color">The color</param>
      <param name="selected">The selection status</param>
      <param name="backface">The BackFace settings</param>
      <seealso cref="P:devDept.Eyeshot.Design.Backface" />
    </member>
    <member name="M:devDept.Eyeshot.Design.SetColorRendered(devDept.Graphics.RenderContextBase,devDept.Eyeshot.Entities.entityNatureType,devDept.Graphics.Material,System.Boolean,devDept.Eyeshot.RenderParams)">
      <summary>
            Rendered mat changer.
            </summary>
      <param name="nature">The nature of the entity just to be drawn</param>
      <param name="material">The entity material</param>
      <param name="selected">The selection status</param>
      <param name="data">Data for high quality rendering</param>
    </member>
    <member name="T:devDept.Eyeshot.ViewportLayout">
      <summary>
            Deprecated class.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Model">
      <summary>
            Deprecated class.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.CollisionDetection2D">
      <summary>
            Utility class for performing Collision Detection 2D on Plane XY (for ICurve and Region types only).
            </summary>
      <remarks>The Regen() method needs to be called first for the interested entities (except for LinearPath).</remarks>
    </member>
    <member name="T:devDept.Eyeshot.CollisionDetection2D.CollisionTupleItem">
      <summary>
            The resulting sub-item of the <see cref="F:devDept.Eyeshot.CollisionDetection2D.CollisionResult.CollidedEntities" /> tuple result.
            If the resulting collided entity is a leaf, then the name of the first block containing that entity will be saved into ParentName field and the trasformation field will be filled.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.CollisionDetection2D.CollisionTupleItem.Transformation">
      <summary>
            The accumulated parent transformation of the collided entity.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.CollisionDetection2D.CollisionTupleItem.ParentName">
      <summary>
            The block name of the first parent that contain that entity.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.CollisionDetection2D.CollisionTupleItem.Parents">
      <summary>
            The parents stack to reach the entity.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.CollisionDetection2D.CollisionTupleItem.Entity">
      <summary>
            The entity found intersecting in the resulting tuple.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.CollisionDetection2D.collisionCheckType">
      <summary>
            The accuracy type used during collision detection.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.CollisionDetection2D.collisionCheckType.OB">
      <summary>
            Oriented Bounding check type- Computes a collision detection by using OrientedBoundingRect (for CollisionDetection2D) or OrientedBoundingBox (for CollisionDetection) intersection.
            The most approximated accuracy, the faster.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.CollisionDetection2D.collisionCheckType.SubdivisionTree">
      <summary>
            Computes a collision detection by using intersection among QuadTree(for 2D) or Octree(for 3D) subdivision.
            More accurate than OB Accuracy, but slower during collision computation if the entities collection are transformed BlockReferences.
            Usefull for entities with complex but balanced tessellation.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.CollisionDetection2D.collisionCheckType.OBWithSubdivisionTree">
      <summary>
            Computes a collision detection by using a combination of OBR/OBB and triangles/segments QuadTree/Octree subdivision intersections.
            Same accuracy of SubdivisionTree method, but faster during collision computation for deep Block\BlockReference gerarchy (it could be slower during computation of QuadTree\Octree and OBR\OBB data).
            Suggested for deep Block\BlockReferences hierarchy containing leaves entities with a complex/dense tessellation.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.CollisionDetection2D.collisionCheckType.Accurate">
      <summary>
            Computes a collision detection by using Geometrical intersections.
            The most accurate but slower approach.
            Suggested if you need to find precise intersection for curved entities. 
            Advised against animation and frequently translated entities.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.CollisionDetection2D.CollisionResult">
      <summary>
            The resulting collision information after a Collision check between two colliding leaves entities.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.CollisionDetection2D.CollisionResult.CollidedEntities">
      <summary>
            contains the <see cref="T:devDept.Eyeshot.CollisionDetection2D.CollisionTupleItem" /> information of both the colliding entities.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.CollisionDetection2D.CollisionResult.CollisionItems">
      <summary>
            When <see cref="M:devDept.Eyeshot.CollisionDetection2D.ComputeIntersectionVolume" /> is called, it is filled with the list of the intersection volumes found between the tuple <see cref="F:devDept.Eyeshot.CollisionDetection2D.CollisionResult.CollidedEntities" />.
            When false it is filled only during <see cref="F:devDept.Eyeshot.CollisionDetection2D.collisionCheckType.Accurate" /> checkMethod with the collision information found during the ordinary check.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.CollisionDetection2D._entities1">
      <summary>
             Lists of entities to check during collision detection.
             </summary>
    </member>
    <member name="F:devDept.Eyeshot.CollisionDetection2D._entities2">
      <summary>
             Lists of entities to check during collision detection.
             </summary>
    </member>
    <member name="F:devDept.Eyeshot.CollisionDetection2D._allToAll">
      <summary>
            When true, it detects collition from a unique list of entities intersecting each others.
            When false, it takes two list of separate object. Detects wich entities of the first list intersect what of the second.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CollisionDetection2D.Result">
      <summary>
            The resulting collision Data subdivided for tuples of intersecting entities.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CollisionDetection2D.CheckMethod">
      <summary>
            Gets or sets the collision accuracy type.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CollisionDetection2D.CoincidenceAsCollision">
      <summary>
            When true it considers the coincidence between objects as collision.
            It avoids them otherwise.
            </summary>
      <remarks>The <see cref="F:devDept.Eyeshot.CollisionDetection2D.collisionCheckType.Accurate" /><see cref="P:devDept.Eyeshot.CollisionDetection2D.CheckMethod" /> is not entirely supported yet.
            This could affect performances.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.CollisionDetection2D.FirstOnly">
      <summary>
            When true the collision detection will stop at the first entities tuple found.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CollisionDetection2D.preCollisionText">
      <summary>
            Gets or sets the "Preparing data..." text string.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CollisionDetection2D.obbCollisionText">
      <summary>
            Gets or sets the "Collision detection..." text string.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CollisionDetection2D.octreeCollisionText">
      <summary>
            Gets or sets the "Collision detection with QuadTree..." text string.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection2D.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.BlockKeyedCollection,System.Boolean,devDept.Eyeshot.CollisionDetection2D.collisionCheckType,System.Int32)">
      <summary>
            The Collision detection utility constructor with two entity lists. The collision test checks collisions from the first entity list to the second one.
            </summary>
      <param name="list1">first entity group</param>
      <param name="list2">second entity group</param>
      <param name="blocksCollection">the collection of the blocks that defines/contains the entities for the BlockReferences in the entities list</param>
      <param name="firstOnly">when true,the collision detection will stop at the first couple of intersecting entities found</param>
      <param name="checkMethod">the collision accuracy type</param>
      <param name="maxElemsNumForQuadTreeNode">the maximum number of triangles for each Octant of each entity's octree (used only with Octree check methods)</param>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection2D.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.BlockKeyedCollection,System.Boolean,devDept.Eyeshot.CollisionDetection2D.collisionCheckType,System.Int32)">
      <summary>
            The Collision detection utility constructor with a list of entity. The collision test checks collisions among the entities of the same list (all to all check).
            </summary>
      <param name="list">the entity group to check each other</param>
      <param name="blocksCollection">the collection of the blocks that defines/contains the entities for the BlockReferences in the entities list</param>
      <param name="firstOnly">when true,the collision detection will stop at the first couple of intersecting entities found</param>
      <param name="collisionCheckMethod">the collision accuracy type</param>
      <param name="maxTrianglesNumForOctreeNode">the maximum number of triangles for each Octant of each entity's octree</param>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection2D.PrepareDataForCollision(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
      <summary>
            Computes the collision detection data needed during the check.
            </summary>
      <param name="worker">The background worker thread</param>
      <param name="doWorkEventArgs">DoWork event arguments</param>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection2D.ComputeIntersectionVolume">
      <summary>
            Performs extra computation to find the intersection volumes of each Colliding Entities tuple.
            The <see cref="F:devDept.Eyeshot.CollisionDetection2D.CollisionResult.CollisionItems" /> is filled with the list of the intersection volumes found.
            </summary>
      <returns>The log of the single operation.</returns>
      <remarks>When the volumes computation fails, a simpler intersection data is returned anyway if available.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection2D.ComputeOrientedBoundings(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
      <summary>
            Computes the oriented bounding rect/box for all the entities in the groups (or update only the modified entities)
            </summary>
      <param name="worker">The background worker thread</param>
      <param name="doWorkEventArgs">DoWork event arguments</param>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection2D.OrientedBoundingBoxCollision(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
      <summary>
            Check collision among oriented bounding boxes of the entities groups
            </summary>
      <param name="worker">
      </param>
      <param name="doWorkEventArgs">
      </param>
      <returns>True if at least two OBB intersects each other, false otherwise</returns>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection2D.TreesCollision(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
      <summary>
            Check collision among octrees of the entities groups
            </summary>
      <param name="worker">
      </param>
      <param name="doWorkEventArgs">
      </param>
      <returns>True if at least two triangles (of Intersected Octrees) intersects each other, false otherwise</returns>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection2D.IntersectTree(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity,System.Collections.Generic.List{devDept.Eyeshot.CollisionDetection2D.CollisionResult}@,System.Collections.Generic.List{devDept.Eyeshot.Entities.Entity}@,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
      <summary>
            Check intersection between Octrees of two root entities (the entities can be BlockReference), by using SAT algorithm.
            </summary>
      <param name="ent1">First entity to check</param>
      <param name="ent2">second entity to check</param>
      <param name="collisionResults">
      </param>
      <param name="intersectionData">
      </param>
      <param name="worker">
      </param>
      <param name="doWorkEventArgs">
      </param>
      <returns>True if at least two Octrees intersects each other, false otherwise</returns>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection2D.IntersectOB(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity,System.Collections.Generic.List{devDept.Eyeshot.CollisionDetection2D.CollisionResult}@,System.Collections.Generic.List{devDept.Eyeshot.Entities.Entity}@,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
      <summary>
            Check intersection between Oriented Bounding (Rect or Box) of two root entities (the entities can be BlockReference), by using SAT algorithm.
            </summary>
      <param name="ent1">First entity to check</param>
      <param name="ent2">second entity to check</param>
      <param name="collisionResult">The list of resulting intersecting entities data</param>
      <param name="intersectionData">The collision information related to this entities tuple</param>
      <param name="worker">
      </param>
      <param name="doWorkEventArgs">
      </param>
      <returns>True if at least two OBB(or OBR) intersects each other, false otherwise</returns>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection2D.AccurateIntersection(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity,System.Boolean,System.Boolean,System.Collections.Generic.List{devDept.Eyeshot.Entities.Entity}@)">
      <summary>
            Checks if two entity intersect geometrically.
            </summary>
      <param name="ent1">the entity to check intersection with second</param>
      <param name="ent2">the entity to check intersection with first</param>
      <param name="coincidencesAsCollision">When false doesn't consider the coincidences as intersections.</param>
      <param name="intersectionData">The information about the volumes and/or position of collisions</param>
      <param name="log">The resulting error log for the operation</param>
      <returns>True if the two entities intersect.</returns>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection2D.ClearCache">
      <summary>
            Removes all the objects defined for collision detection.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.CollisionDetection">
      <summary>
            Utility class for performing Collision Detection.
            </summary>
      <remarks>The Regen() method needs to be called first for the interested entities (except for Mesh, Solid, FastPointCloud, Joint, Bar and LinearPath). </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CollisionDetection.octreeCollisionText">
      <summary>
            Gets or sets the "Collision detection with Octree..." text string
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.BlockKeyedCollection,System.Boolean,devDept.Eyeshot.CollisionDetection2D.collisionCheckType,System.Int32,System.Int32)">
      <summary>
            The Collision detection utility constructor with two entity lists. The collision test checks collisions from the first entity list to the second one.
            </summary>
      <param name="list1">first entity group</param>
      <param name="list2">second entity group</param>
      <param name="blocksCollection">the collection of the blocks that defines/contains the entities for the BlockReferences in the entities list</param>
      <param name="firstOnly">when true,the collision detection will stop at the first couple of intersecting entities found</param>
      <param name="checkMethod">the collision accuracy type</param>
      <param name="maxTrianglesNumForOctreeNode">the maximum number of triangles for each Octant of each entity's octree (used only with Octree check methods)</param>
      <param name="maxTriangleEdgeLength">The maximum edge length or triangle side length of curved entity (Surface, Brep)</param>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.BlockKeyedCollection,System.Boolean,devDept.Eyeshot.CollisionDetection2D.collisionCheckType,System.Int32,System.Int32)">
      <summary>
            The Collision detection utility constructor with a list of entity. The collision test checks collisions among the entities of the same list (all to all check).
            </summary>
      <param name="list">the entity group to check each other</param>
      <param name="blocksCollection">the collection of the blocks that defines/contains the entities for the BlockReferences in the entities list</param>
      <param name="firstOnly">when true,the collision detection will stop at the first couple of intersecting entities found</param>
      <param name="collisionCheckMethod">the collision accuracy type</param>
      <param name="maxTrianglesNumForOctreeNode">the maximum number of triangles for each Octant of each entity's octree</param>
      <param name="maxTriangleEdgelength">The maximum edge length or triangle side length</param>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection.IntersectTree(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity,System.Collections.Generic.List{devDept.Eyeshot.CollisionDetection2D.CollisionResult}@,System.Collections.Generic.List{devDept.Eyeshot.Entities.Entity}@,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
      <summary>
            Check intersection between Octrees of two root entities (the entities can be BlockReference), by using SAT algorithm.
            </summary>
      <param name="ent1">First entity to check</param>
      <param name="ent2">second entity to check</param>
      <param name="collisionResults">Filled only for root entities.</param>
      <param name="intersectionData">Volumes data needed for OBWithSubdivisionTree checkMethod or not-root entities.</param>
      <param name="worker">
      </param>
      <param name="doWorkEventArgs">
      </param>
      <returns>True if at least two Octrees intersects each other, false otherwise</returns>
    </member>
    <member name="M:devDept.Eyeshot.CollisionDetection.IntersectOB(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Entities.Entity,System.Collections.Generic.List{devDept.Eyeshot.CollisionDetection2D.CollisionResult}@,System.Collections.Generic.List{devDept.Eyeshot.Entities.Entity}@,System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)">
      <summary>
            Check intersection between Oriented Bounding Box of two root entities (the entities can be BlockReference), by using SAT algorithm.
            </summary>
      <param name="ent1">First entity to check</param>
      <param name="ent2">second entity to check</param>
      <param name="collisionResult">
      </param>
      <param name="intersectionData">
      </param>
      <param name="worker">
      </param>
      <param name="doWorkEventArgs">
      </param>
      <returns>True if at least two OBB intersects each other, false otherwise</returns>
    </member>
    <member name="T:devDept.Eyeshot.OrientedBoundingRect">
      <summary>
            Oriented Bounding Box definition.
            </summary>
      <remarks>The result is not guaranteed to be the minimum Oriented Bounding Box possible.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.OrientedBoundingRect.Transformation">
      <summary>
            the Oriented Bounding Box transformation that defines its orientation from the world-axes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.OrientedBoundingRect.AccumulatedTransformation">
      <summary>
            Gets the global transformation given by the transformation of the parents entity (if entity is a BlockReference or is into one of it).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.GetFullTransformation">
      <summary>
            Gets the OrientedBoundingBox transformation combined with the global transformation.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.AccumulateTransformation(devDept.Geometry.Transformation)">
      <summary>
            Adds transformation to the global transformation.
            </summary>
      <param name="newTransformation">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.GetOrigin">
      <summary>
            Gets the Origin position of the OrientedBoundingBox.
            </summary>
      <returns>A Point3D that defines the origin.</returns>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.GetAxis">
      <summary>
            Gets the 3-axis defining the direction of the OrientedBoundingBox
            </summary>
      <returns>The 3-Vector3D representing rispectively axis-X, axis-Y, axis-Z of the OrientedBoundingBox</returns>
    </member>
    <member name="P:devDept.Eyeshot.OrientedBoundingRect.Size">
      <summary>
            The size-box.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.GetVertices">
      <summary>
            Gets the 8-vertices of the OrientedBoundingBox.
            </summary>
      <returns>A Point3D array that defines the already-transformed vertices.</returns>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.UpdateData">
      <summary>
            Updates the data of the OrientedBoundingBox needed during collision/intersection check among others OrientedBoundingBoxes.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.#ctor(devDept.Geometry.Point2D,System.Double,System.Double)">
      <summary>
            Defines an OrientedBoundingBox with World-Axis-Aligned transformation.
            </summary>
      <param name="origin">The position of the origin of the oriented box</param>
      <param name="width">The width of the box along axis-X</param>
      <param name="height">The height of the box along axis-Y</param>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Vector2D,devDept.Geometry.Vector2D,System.Double,System.Double)">
      <summary>
            Defines an OrientedBoundingBox with axis-X and axis-Y orientation.
            </summary>
      <param name="origin">The position of the origin of the oriented box</param>
      <param name="axisX">The direction of the axis-X of the oriented box</param>
      <param name="axisY">The direction of the axis-Y of the oriented box</param>
      <param name="width">The width of the box along axis-X</param>
      <param name="height">The height of the box along axis-Y</param>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point2D},devDept.Geometry.Vector2D,devDept.Geometry.Vector2D)">
      <summary>
            Defines an OrientedBoundingRect from a list of Point2D by forcing the input axis-X and axis-Y orientation.
            </summary>
      <param name="pointCloud">The Point2D list</param>
      <param name="axisX">The direction of the axis-X of the oriented box</param>
      <param name="axisY">The direction of the axis-Y of the oriented box</param>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point2D})">
      <summary>
            Defines an OrientedBoundingRect from a list of Point2D.
            </summary>
      <param name="pointCloud">The Point2D list</param>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.#ctor(devDept.Eyeshot.OrientedBoundingRect)">
      <summary>
            Defines an OrientedBoundingBox from another one.
            </summary>
      <param name="another">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.Clone">
      <summary>
            Creates a deep copy of this oriented bounding rect.
            </summary>
      <returns>The new oriented bounding rect object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.DoOverlapOrTouch(devDept.Eyeshot.OrientedBoundingRect,devDept.Eyeshot.OrientedBoundingRect)">
      <summary>
            Checks if two Oriented Bounding Boxes overlap or touch each other.
            </summary>
      <param name="first">first oriented bounding box to check</param>
      <param name="second">second oriented bounding box to check</param>
      <returns>False if a separation axis between the two boxes was found, true otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingRect.DoOverlap(devDept.Eyeshot.OrientedBoundingRect,devDept.Eyeshot.OrientedBoundingRect)">
      <summary>
            Checks if two Oriented Bounding Boxes overlap each other.
            </summary>
      <param name="first">first oriented bounding box to check</param>
      <param name="second">second oriented bounding box to check</param>
      <returns>False if a separation axis between the two boxes was found, true otherwise.</returns>
    </member>
    <member name="T:devDept.Eyeshot.OrientedBoundingBox">
      <summary>
            Oriented Bounding Box definition.
            </summary>
      <remarks>The result is not guaranteed to be the minimum Oriented Bounding Box possible.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingBox.GetOrigin">
      <summary>
            Gets the Origin position of the OrientedBoundingBox.
            </summary>
      <returns>A Point3D that defines the origin.</returns>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingBox.GetAxis">
      <summary>
            Gets the 3-axis defining the direction of the OrientedBoundingBox
            </summary>
      <returns>The 3-Vector3D representing rispectively axis-X, axis-Y, axis-Z of the OrientedBoundingBox</returns>
    </member>
    <member name="P:devDept.Eyeshot.OrientedBoundingBox.Size">
      <summary>
            The size-box.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingBox.GetVertices">
      <summary>
            Gets the 8-vertices of the OrientedBoundingBox.
            </summary>
      <returns>A Point3D array that defines the already-transformed vertices.</returns>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingBox.#ctor(devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
      <summary>
            Defines an OrientedBoundingBox with World-Axis-Aligned transformation.
            </summary>
      <param name="origin">The position of the origin of the oriented box</param>
      <param name="width">The width of the box along axis-X</param>
      <param name="depth">The depth of the box along axis-Y</param>
      <param name="height">The height of the box along axis-Z</param>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingBox.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Double,System.Double,System.Double)">
      <summary>
            Defines an OrientedBoundingBox with axis-X and axis-Y orientation.
            </summary>
      <param name="origin">The position of the origin of the oriented box</param>
      <param name="axisX">The direction of the axis-X of the oriented box</param>
      <param name="axisY">The direction of the axis-Z of the oriented box</param>
      <param name="width">The width of the box along axis-X</param>
      <param name="depth">The depth of the box along axis-Y</param>
      <param name="height">The height of the box along axis-Z</param>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingBox.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point2D},devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)">
      <summary>
            Defines an OrientedBoundingBox from a list of Point3D by forcing the input axis-X and axis-Y orientation.
            </summary>
      <param name="pointCloud">The Point3D list</param>
      <param name="axisX">The direction of the axis-X of the oriented box</param>
      <param name="axisY">The direction of the axis-Y of the oriented box</param>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingBox.#ctor(System.Collections.Generic.IList{devDept.Geometry.Point2D})">
      <summary>
            Defines an OrientedBoundingBox from a list of Point3D.
            </summary>
      <param name="pointCloud">The Point3D list</param>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingBox.#ctor(devDept.Eyeshot.OrientedBoundingBox)">
      <summary>
            Defines an OrientedBoundingBox from another one.
            </summary>
      <param name="another">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingBox.Clone">
      <summary>
            Creates a deep copy of this oriented bounding box.
            </summary>
      <returns>The new oriented bounding box object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingBox.DoOverlapOrTouch(devDept.Eyeshot.OrientedBoundingBox,devDept.Eyeshot.OrientedBoundingBox)">
      <summary>
            Checks if two Oriented Bounding Boxes overlap or touch each other.
            </summary>
      <param name="first">first oriented bounding box to check</param>
      <param name="second">second oriented bounding box to check</param>
      <returns>False if a separation axis between the two boxes was found, true otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.OrientedBoundingBox.DoOverlap(devDept.Eyeshot.OrientedBoundingBox,devDept.Eyeshot.OrientedBoundingBox)">
      <summary>
            Checks if two Oriented Bounding Boxes overlap each other.
            </summary>
      <param name="first">first oriented bounding box to check</param>
      <param name="second">second oriented bounding box to check</param>
      <returns>False if a separation axis between the two boxes was found, true otherwise.</returns>
    </member>
    <member name="T:devDept.Eyeshot.UIAutomation.Actions">
      <summary>
            Actions to interact with Eyeshot controls during UIAutomation testing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.GetDisplayMode">
      <summary>
            Gets the display mode.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetDisplayModeRendered">
      <summary>
            Sets the display mode to Renderer.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetDisplayModeWireframe">
      <summary>
            Sets the display mode to Wireframe.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetDisplayModeFlat">
      <summary>
            Sets the display mode to Flat.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetDisplayModeHiddenLines">
      <summary>
            Sets the display mode to HiddenLines.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetDisplayModeShaded">
      <summary>
            Sets the display mode to Shaded.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.GetActionMode">
      <summary>
            Gets the action mode.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeNone">
      <summary>
            Sets the action mode to None.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeZoom">
      <summary>
            Sets the action mode to Zoom.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModePan">
      <summary>
            Sets the action mode to Pan.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeRotate">
      <summary>
            Sets the action mode to Rotate.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeZoomWindow">
      <summary>
            Sets the action mode to ZoomWindow.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeMagnifyingGlass">
      <summary>
            Sets the action mode to MagnifyingGlass.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeSelectByPick">
      <summary>
            Sets the action mode to SelectByPick.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeSelectByBox">
      <summary>
            Sets the action mode to SelectByBox.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeSelectByPolygon">
      <summary>
            Sets the action mode to SelectByPolygon.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeSelectVisibleByPick">
      <summary>
            Sets the action mode to SelectVisibleByPick.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeSelectVisibleByPickDynamic">
      <summary>
            Sets the action mode to SelectVisibleByPickDynamic.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeSelectVisibleByBox">
      <summary>
            Sets the action mode to SelectVisibleByBox.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeSelectVisibleByPolygon">
      <summary>
            Sets the action mode to SelectVisibleByPolygon.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeSelectByBoxEnclosed">
      <summary>
            Sets the action mode to SelectByBoxEnclosed.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeSelectByPolygonEnclosed">
      <summary>
            Sets the action mode to SelectByPolygonEnclosed.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetActionModeSelectVisibleByPickLabel">
      <summary>
            Sets the action mode to SelectVisibleByPickLabel.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.GetSelectionFilterMode">
      <summary>
            Gets the selection filter mode.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSelectionFilterTypeEntity">
      <summary>
            Sets the filter type to Entity.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSelectionFilterTypeVertex">
      <summary>
            Sets the filter type to Vertex.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSelectionFilterTypeEdge">
      <summary>
            Sets the filter type to Edge.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSelectionFilterTypeFace">
      <summary>
            Sets the filter type to Face.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSelectionFilterTypeVertexEdge">
      <summary>
            Sets the filter type to mix Vertex-Edge.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSelectionFilterTypeVertexFace">
      <summary>
            Sets the filter type to mix Vertex-Face.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSelectionFilterTypeEdgeFace">
      <summary>
            Sets the filter type to mix Edge-Face.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSelectionFilterTypeVertexEdgeFace">
      <summary>
            Sets the filter type to mix Vertex-Edge-Face.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSelectionFilterSubCurve">
      <summary>
            Sets the filter type subCurve (CompositeCurve).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSelectionFilterContour">
      <summary>
            Sets the filter type contour (Region).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSelectionFilterSketchPoint">
      <summary>
            Sets the filter type Sketch Point (SketchEntity).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSelectionFilterSketchCurves">
      <summary>
            Sets the filter type Sketch Curve (SketchEntity).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSelectionFilterSketchPointAndCurves">
      <summary>
            Sets the filter type to mix Sketch Point+Curve (SketchEntity).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.GetMultipleSelection">
      <summary>
            Get the current multiple selection mode.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetMultipleSelectionOn">
      <summary>
            Sets the multiple selection to true.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetMultipleSelectionOff">
      <summary>
            Sets the multiple selection to false.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.GetAssemblySelectionMode">
      <summary>
            Get the assembly selection mode.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetAssemblySelectionModeLeaf">
      <summary>
            Set the assembly selection mode to Leaf.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetAssemblySelectionModeBranch">
      <summary>
            Set the assembly selection mode to Branch.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.GetLayoutMode">
      <summary>
            Gets the current viewport layout type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetLayoutModeSingleViewport">
      <summary>
            Sets the viewport layout mode to single viewport.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetLayoutModeTwoViewportsVertical">
      <summary>
            Sets the viewport layout mode to 2 vertical viewports.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetLayoutModeTwoViewportsHorizontal">
      <summary>
            Sets the viewport layout mode to 2 horizontal viewports.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetLayoutModeThreeViewportsWithOneOnLeft">
      <summary>
            Sets the viewport layout mode to 3 viewports with one on the left.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetLayoutModeThreeViewportsWithOneOnTop">
      <summary>
            Sets the viewport layout mode to 3 viewports with one on the top.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetLayoutModeThreeViewportsWithOneOnRight">
      <summary>
            Sets the viewport layout mode to 3 viewports with one on the right.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetLayoutModeThreeViewportsWithOneOnBottom">
      <summary>
            Sets the viewport layout mode to 3 viewports with one on the bottom.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetLayoutModeFourViewports">
      <summary>
            Sets the viewport layout mode to 4 viewports.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetLayoutModeStacked">
      <summary>
            Sets the viewport layout mode to stacked viewports.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.GetCameraProjectionMode">
      <summary>
            Gets the current camera projection mode.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetCameraProjectionModeOrthographic">
      <summary>
            Sets the camera projection mode to Orthographic.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetCameraProjectionModePerspective">
      <summary>
            Sets the camera projection mode to Perspective.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.AdjustNearAndFarPlanes">
      <summary>
            Adjusts Near and Far planes.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ZoomFit">
      <summary>
            Performs a ZoomFit operation.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ObjectManipulatorApply">
      <summary>
            Applies the transformation of the ObjectManipulator on the selected entities and hides it.
            </summary>
      <remarks>ObjectManipulator.Enable() method must be called by the test itself.</remarks>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ObjectManipulatorCancel">
      <summary>
            Cancels the transformation of the ObjectManipulator and hides it.
            </summary>
      <remarks>ObjectManipulator.Enable() method must be called by the test itself.</remarks>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane1Edit">
      <summary>
            Edits a clipping plane 1.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane1Apply">
      <summary>
            Applies the changes of the editing to clipping plane 1.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane1Cancel">
      <summary>
            Cancels the changes of the editing to clipping plane 1.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane1CappingTrue">
      <summary>
            Enables capping clipped solid for clipping plane 1.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane1CappingFalse">
      <summary>
            Disables capping clipped solid for clipping plane 1.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane1ShowPlaneTrue">
      <summary>
            Enables plane drawing during clipping plane 1 editing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane1ShowPlaneFalse">
      <summary>
            Disables plane drawing during clipping plane 1 editing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane2Edit">
      <summary>
            Edits a clipping plane 2.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane2Apply">
      <summary>
            Applies the changes of the editing to clipping plane 2.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane2Cancel">
      <summary>
            Cancels the changes of the editing to clipping plane 2.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane2CappingTrue">
      <summary>
            Enables capping clipped solid for clipping plane 2.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane2CappingFalse">
      <summary>
            Disables capping clipped solid for clipping plane 2.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane2ShowPlaneTrue">
      <summary>
            Enables plane drawing during clipping plane 2 editing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane2ShowPlaneFalse">
      <summary>
            Disables plane drawing during clipping plane 2 editing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane3Edit">
      <summary>
            Edits a clipping plane 3.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane3Apply">
      <summary>
            Applies the changes of the editing to clipping plane 3.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane3Cancel">
      <summary>
            Cancels the changes of the editing to clipping plane 3.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane3CappingTrue">
      <summary>
            Enables capping clipped solid for clipping plane 3.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane3CappingFalse">
      <summary>
            Disables capping clipped solid for clipping plane 3.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane3ShowPlaneTrue">
      <summary>
            Enables plane drawing during clipping plane 3 editing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane3ShowPlaneFalse">
      <summary>
            Disables plane drawing during clipping plane 3 editing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane4Edit">
      <summary>
            Edits a clipping plane 4.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane4Apply">
      <summary>
            Applies the changes of the editing to clipping plane 4.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane4Cancel">
      <summary>
            Cancels the changes of the editing to clipping plane 4.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane4CappingTrue">
      <summary>
            Enables capping clipped solid for clipping plane 4.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane4CappingFalse">
      <summary>
            Disables capping clipped solid for clipping plane 4.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane4ShowPlaneTrue">
      <summary>
            Enables plane drawing during clipping plane 4 editing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane4ShowPlaneFalse">
      <summary>
            Disables plane drawing during clipping plane 4 editing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane5Edit">
      <summary>
            Edits a clipping plane 5.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane5Apply">
      <summary>
            Applies the changes of the editing to clipping plane 5.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane5Cancel">
      <summary>
            Cancels the changes of the editing to clipping plane 5.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane5CappingTrue">
      <summary>
            Enables capping clipped solid for clipping plane 5.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane5CappingFalse">
      <summary>
            Disables capping clipped solid for clipping plane 5.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane5ShowPlaneTrue">
      <summary>
            Enables plane drawing during clipping plane 5 editing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane5ShowPlaneFalse">
      <summary>
            Disables plane drawing during clipping plane 5 editing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane6Edit">
      <summary>
            Edits a clipping plane 6.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane6Apply">
      <summary>
            Applies the changes of the editing to clipping plane 6.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane6Cancel">
      <summary>
            Cancels the changes of the editing to clipping plane 6.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane6CappingTrue">
      <summary>
            Enables capping clipped solid for clipping plane 6.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane6CappingFalse">
      <summary>
            Disables capping clipped solid for clipping plane 6.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane6ShowPlaneTrue">
      <summary>
            Enables plane drawing during clipping plane 6 editing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ClippingPlane6ShowPlaneFalse">
      <summary>
            Disables plane drawing during clipping plane 6 editing.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.GetEntitiesCount">
      <summary>
            Gets the entities count.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.GetSelectedEntitiesCount">
      <summary>
            Gets the selected entities count.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetViewCubeIconVisibleTrue">
      <summary>
            Sets the ViewCube Visible property to true.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetViewCubeIconVisibleFalse">
      <summary>
            Sets the ViewCube Visible property to false.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetToolBarVisibleTrue">
      <summary>
            Sets the Visible property to true for the first ToolBar.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetToolBarVisibleFalse">
      <summary>
            Sets the Visible property to false for the first ToolBar.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetToolBarsVisibleTrue">
      <summary>
            Sets the Visible property to true for all the ToolBars.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetToolBarsVisibleFalse">
      <summary>
            Sets the Visible property to false for all the ToolBars.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetCoordinateSystemIconVisibleTrue">
      <summary>
            Sets the CSI Visible property to true.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetCoordinateSystemIconVisibleFalse">
      <summary>
            Sets the CSI Visible property to false.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetOriginSymbolVisibleTrue">
      <summary>
            Sets the OS Visible property to true.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetOriginSymbolVisibleFalse">
      <summary>
            Sets the OS Visible property to false.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetGridVisibleTrue">
      <summary>
            Sets the Visible property to true for the first Grid.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetGridVisibleFalse">
      <summary>
            Sets the Visible property to false for the first Grid.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetGridsVisibleTrue">
      <summary>
            Sets the Visible property to true for all the Grids.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetGridsVisibleFalse">
      <summary>
            Sets the Visible property to false for all the Grids.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.ShowAllUIElements">
      <summary>
            Sets the Visible property to true for all the UI elements (ViewCube, OriginSymbol, CoordinateSystem, ToolBars, Grids).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.HideAllUIElements">
      <summary>
            Sets the Visible property to false for all the UI elements (ViewCube, OriginSymbol, CoordinateSystem, ToolBars, Grids).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.Invalidate">
      <summary>
            Performs an Invalidate.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.Refresh">
      <summary>
            Performs a Refresh.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.UpdateViewportsSizeAndLocation">
      <summary>
            Updates the Viewports dimensions and locations for the Design control.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.SetSmallSizeRatioPerc5">
      <summary>
            Set SmallSizeRatioMoving value to 5% of the shortest viewport's dimension.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.EnableTurbo">
      <summary>
            Set Turbo.MaxComplexity = 0
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.UIAutomation.Actions.DisableTurbo">
      <summary>
            Set Turbo.MaxComplexity = int.MaxValue
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Dicom.CtSliceInfo">
      <summary>
            CT image information of a single slice.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.TransferSyntax">
      <summary>
            Gets the "Transfer Syntax UID" attribute (0002,0010)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.PixelRepresentation">
      <summary>
            Gets the "Pixel Representation" attribute (0028,0103)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.WindowCenter">
      <summary>
            Gets the "Window Center" (brightness) attribute (0028,1050)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.WindowWidth">
      <summary>
            Gets the "Window Width" (contrast) attribute (0028,1051)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.PixelPaddingValue">
      <summary>
            Gets the "Pixel Padding Value" attribute (0028,0120)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.FileName">
      <summary>
            Gets the file name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.SamplePerPixel">
      <summary>
            Gets the "Sample Per Pixel" attribute (0028,0002)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.BitsAllocated">
      <summary>
            Gets the "Bits Allocated" attribute (0028,0100)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.PhotometricInterpretation">
      <summary>
            Gets the "Photometric Interpretation" attribute (0028,0004)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.RescaleIntercept">
      <summary>
            Gets the "Rescale Intercept" attribute (0028,1052)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.RescaleSlope">
      <summary>
            Gets the "Rescale Slope" attribute (0028,1053)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.InstanceNumber">
      <summary>
            Gets the "Instance Number" attribute (0020,0013)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.Columns">
      <summary>
            Gets the "Columns; attribute (0028,0011)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.Rows">
      <summary>
            Gets the "Rows" attribute (0028,0010)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.ImageUpperLeftX">
      <summary>
            Gets the X coordinate of the "Image Position (Patient)" attribute (0020,0032)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.ImageUpperLeftY">
      <summary>
            Gets the Y coordinate of the "Image Position (Patient)" attribute (0020,0032)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.ImageUpperLeftZ">
      <summary>
            Gets the Z coordinate of the "Image Position (Patient)" attribute (0020,0032)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.PixelSpacingRow">
      <summary>
            Gets the first value (row spacing in mm) of the "Pixel Spacing" attribute (0028,0030)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.PixelSpacingColumn">
      <summary>
            Gets the second value (column spacing in mm) of the "Pixel Spacing" attribute (0028,0030)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.CtSliceInfo.SliceThickness">
      <summary>
            Gets the "Slice Thickness" attribute (0018,0050)
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.CtSliceInfo.Clone">
      <summary>
            Creates a deep copy of this CT Slice.
            </summary>
      <returns>The new CT Slice.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.CtSliceInfo.#ctor(System.Xml.Linq.XDocument,System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="xDocument">The XDocument that represents the physical DICOM file.</param>
      <param name="fileName">The file name.</param>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.CtSliceInfo.GetHounsfieldPixelValue(System.Int32,System.Int32)">
      <summary>
            Gets the Hounsfield value of a specified voxel (RowIndex/ColumnIndex).
            </summary>
      <param name="rowIndex">The row index.</param>
      <param name="columnIndex">The column index.</param>
      <returns>The Hounsfield value of the specified voxel.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.CtSliceInfo.SetPixelData">
      <summary>
            Fills the Hounsfield Pixel matrix.
            <remarks>If you use an external library to read the DICOM images, then you need to override this method.</remarks></summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.CtSliceInfo.GetBitmap(System.Int32,System.Int32)">
      <summary>
            Gets the pixel data of a CT slice as gray-scale bitmap.
            </summary>
      <param name="windowCenter">The window center (brightness) value.</param>
      <param name="windowWidth">The window width (contrast) value.</param>
      <remarks>If you use an external library to read the DICOM images, then you need to override this method.</remarks>
      <returns>
      </returns>
    </member>
    <member name="T:devDept.Eyeshot.Dicom.DicomElement">
      <summary>
            The DICOM element
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Dicom.DicomElement.dicomNodeType">
      <summary>
            DICOM node type.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Dicom.DicomElement.DicomNode" />
    </member>
    <member name="F:devDept.Eyeshot.Dicom.DicomElement.dicomNodeType.Unknown">
      <summary>
            Unknown
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Dicom.DicomElement.dicomNodeType.Patient">
      <summary>
            Patient
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Dicom.DicomElement.dicomNodeType.SopClass">
      <summary>
            SOP Class
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Dicom.DicomElement.dicomNodeType.Study">
      <summary>
            Study
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Dicom.DicomElement.dicomNodeType.Series">
      <summary>
            Series
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Dicom.DicomElement.dicomNodeType.Instance">
      <summary>
            Instance
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Dicom.DicomElement.dicomNodeType.Tag">
      <summary>
            Tag
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.DicomElement.#ctor(System.String,devDept.Eyeshot.Dicom.DicomElement.dicomNodeType,devDept.Eyeshot.Dicom.DicomElement)">
      <summary>
            Standard constructor.
            </summary>
      <param name="header">The header.</param>
      <param name="dicomNode">The <see cref="T:devDept.Eyeshot.Dicom.DicomElement.dicomNodeType" />.</param>
      <param name="parent">The parent <see cref="T:devDept.Eyeshot.Dicom.DicomElement" />.</param>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.DicomElement.Header">
      <summary>
            Gets or sets the header.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.DicomElement.DicomNode">
      <summary>
            Gets the <see cref="T:devDept.Eyeshot.Dicom.DicomElement.dicomNodeType" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.DicomElement.Elements">
      <summary>
            Gets or sets the collection of the child elements.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.DicomElement.Parent">
      <summary>
            Gets or sets the parent element.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Dicom.IodElement">
      <summary>
            The IOD (Information Object Definitions) element.
            <remarks>This is the DicomElement that contains the info about the single slice.</remarks></summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.IodElement.Tag">
      <summary>
            The Tag.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.IodElement.SliceInfo">
      <summary>
            Gets or sets the <see cref="T:devDept.Eyeshot.Dicom.CtSliceInfo" />.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.IodElement.IsSupportedDicomFile">
      <summary>
            Checks the <see cref="T:devDept.Eyeshot.Dicom.DicomVersion" /> to know if the current element is or not a supported DICOM file.
            </summary>
      <returns>True when the current element is a supported DICOM file.</returns>
      <remarks>If you use an external library to read the DICOM images, then you have to remember to set the <see cref="T:devDept.Eyeshot.Dicom.DicomVersion" /> rightly.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.IodElement.GetTransferSyntax">
      <summary>
            Gets the "Transfer Syntax UID" attribute (0002,0010)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.IodElement.GetWindowWidth">
      <summary>
            Gets the "Window Width" (contrast) attribute (0028,1051)
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.IodElement.GetWindowCenter">
      <summary>
            Gets the "Window Center" (brightness) attribute (0028,1050)
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.IodElement.GetPixelPaddingValue">
      <summary>
            Gets the "Pixel Padding Value" attribute (0028,0120)
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.IodElement.GetPixelSpacing(System.Single@,System.Single@)">
      <summary>
            Gets the "Pixel Spacing" attribute (0028,0030)
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.IodElement.GetSliceThickness">
      <summary>
            Gets the "Slice Thickness" attribute (0018,0050)
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.IodElement.GetColumns">
      <summary>
            Gets the "Columns; attribute (0028,0011)
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.IodElement.GetRows">
      <summary>
            Gets the "Rows" attribute (0028,0010)
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.IodElement.BuildHounsfieldValues">
      <summary>
            Fills the Hounsfield Pixel matrix.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.IodElement.GetHounsfieldPixelValue(System.Int32,System.Int32)">
      <summary>
            Gets the Hounsfield value of a specified voxel (RowIndex/ColumnIndex).
            </summary>
      <param name="rowIndex">The row index.</param>
      <param name="columnIndex">The column index.</param>
      <returns>The Hounsfield value of the specified voxel.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.IodElement.GetBitmap">
      <summary>
            Gets the pixel data of the CT slice as bitmap.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.IodElement.GetBitmap(System.Int32,System.Int32)">
      <summary>
            Gets the pixel data of the CT slice as bitmap.
            </summary>
      <param name="brightness">The brightness (window center)</param>
      <param name="contrast">The contrast (window width)</param>
      <returns>
      </returns>
    </member>
    <member name="T:devDept.Eyeshot.Dicom.DicomTree">
      <summary>
            The DICOM tree.
            <remarks>The hierarchy of the tree is: Patient-SOPClass-Study-Series-Instance(Image).</remarks></summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.DicomTree.Log">
      <summary>
            Gets the list of errors and warnings generated during files reading.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.DicomTree.#ctor(System.String[])">
      <summary>
            Standard constructor.
            </summary>
      <param name="fileNames">The array of DICOM's filenames</param>
    </member>
    <member name="T:devDept.Eyeshot.Dicom.DicomVersion">
      <summary>
            DICOM Version
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Dicom.DicomVersion.NotDicom">
      <summary>
            Not DICOM file
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Dicom.DicomVersion.Dicom3">
      <summary>
            DICOM 3.0
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Dicom.DicomVersion.DicomOldType">
      <summary>
            Old DICOM file
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Dicom.DicomVersion.DicomUnknownTransferSyntax">
      <summary>
            Unknown TransferSyntax
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Dicom.Iod">
      <summary>
            DICOM Instance class.
            <remarks>It represents one physical DICOM file.</remarks></summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.Iod.XDocument">
      <summary>
            The XDocument that represents the physical DICOM file.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.Iod.FileName">
      <summary>
            Gets the file name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.Iod.StudyInstanceUid">
      <summary>
            Gets the study instance UID.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.Iod.SeriesInstanceUid">
      <summary>
            Gets the series instance UID.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.Iod.SopInstanceUid">
      <summary>
            Gets the SOP instance UID.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.Iod.SopClassUid">
      <summary>
            Gets the SOP class UID.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.Iod.SopClassName">
      <summary>
            Gets the SOP class name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.Iod.PatientName">
      <summary>
            Gets the patient name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.Iod.TransferSyntaxUid">
      <summary>
            Gets the transfer syntax UID.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.Iod.#ctor(System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="fileName">The file name.</param>
    </member>
    <member name="T:devDept.Eyeshot.Dicom.DicomDictionary">
      <summary>
            Dictionary for public DICOM attributes.
            <remarks>Reference: DCIOM Standard 2009, Part 3: Information Object Definitions</remarks></summary>
    </member>
    <member name="T:devDept.Eyeshot.Dicom.SopClassDictionary">
      <summary>
            DICOM SOP Class Dictionary
            <remarks>Reference: DICOM Standard 2009, Part 4: Service Class Specifications, Table B.5-1 Standard SOP Classes</remarks></summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.SopClassDictionary.GetSopClassName(System.String)">
      <summary>
            Gets the SOP class name.
            </summary>
      <param name="sopClassUid">The SOP class uid.</param>
      <returns>The SOP class name.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Dicom.TransferSyntaxDictionary">
      <summary>
            DICOM Transfer Syntax Dictionary.
            <remarks>Reference: DCIOM Standard 2009, Part 5: Data Structures and Encoding.</remarks></summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.TransferSyntaxDictionary.GetTransferSyntaxName(System.String)">
      <summary>
            Gets the transfer syntax name.
            </summary>
      <param name="transferSyntaxUid">The transfer syntax UID.</param>
      <returns>The transfer syntax name.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Dicom.VolumeRenderingBase`1">
      <summary>
            Volume rendering base definition.
            </summary>
      <typeparam name="T">The struct type.</typeparam>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.VolumeRenderingBase`1.LoadingFilesText">
      <summary>
            Gets or sets the text displayed during the loading of the files.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.VolumeRenderingBase`1.FileNames">
      <summary>
             Gets or sets the list of file names.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.VolumeRenderingBase`1.Pictures">
      <summary>
            Gets or sets the pictures data for volume rendering.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.VolumeRenderingBase`1.#ctor(System.String[],System.Int32,System.Single,System.Int32,System.Single,System.Int32,System.Single,devDept.Eyeshot.Triangulation.ScalarField3D)">
      <summary>
            Constructor with the grid origin in (0, 0, 0).
            </summary>
      <param name="fileNames">The list of file names</param>
      <param name="nCellsInX">The number of cells in the X direction.</param>
      <param name="cellSizeX">The cell's size in the X direction.</param>
      <param name="nCellsInY">The number of cells in the Y direction.</param>
      <param name="cellSizeY">The cell's size in the Y direction.</param>
      <param name="nCellsInZ">The number of cells in the Z direction.</param>
      <param name="cellSizeZ">The cell's size in the Z direction.</param>
      <param name="func">The 3D scalar field function</param>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.VolumeRenderingBase`1.#ctor(System.String[],devDept.Geometry.Point3D,System.Int32,System.Single,System.Int32,System.Single,System.Int32,System.Single,devDept.Eyeshot.Triangulation.ScalarField3D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="fileNames">The list of file names</param>
      <param name="gridOrigin">The 3D point that represents the origin of the selection grid.</param>
      <param name="nCellsInX">The number of cells in the X direction.</param>
      <param name="cellSizeX">The cell's size in the X direction.</param>
      <param name="nCellsInY">The number of cells in the Y direction.</param>
      <param name="cellSizeY">The cell's size in the Y direction.</param>
      <param name="nCellsInZ">The number of cells in the Z direction.</param>
      <param name="cellSizeZ">The cell's size in the Z direction.</param>
      <param name="func">The 3D scalar field function</param>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.VolumeRenderingBase`1.GaussFilter">
      <summary>
            Gets or sets a flag that tells if the gauss filter must be applied to the data.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Dicom.VolumeRendering">
      <summary>
            Utility class for the volume rendering reconstruction.
            <para>The volume rendering is a set of techniques used to display a 2D projection of a 3D discretely sampled data set, typically a 3D scalar field.</para><para>A typical 3D data set is a group of 2D slice images acquired by a CT, MRI, or MicroCT scanner. Usually these are acquired in a regular pattern (e.g., one slice every millimeter) and usually have a regular number of image pixels in a regular pattern. This is an example of a regular volumetric grid, with each volume element, or voxel represented by a single value that is obtained by sampling the immediate area surrounding the voxel.</para></summary>
    </member>
    <member name="P:devDept.Eyeshot.Dicom.VolumeRendering.ProgressBarTextLoadHounsfieldValues">
      <summary>
            Gets or sets the text displayed during the loading of the Hounsfield values.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.VolumeRendering.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Dicom.DicomElement},devDept.Geometry.Point3D,System.Int32,System.Int32,System.Int32,devDept.Eyeshot.Triangulation.ScalarField3D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="elements">The collection of <see cref="T:devDept.Eyeshot.Dicom.DicomElement" />.</param>
      <param name="gridOrigin">The 3D point that represents the origin of the selection grid.</param>
      <param name="nCellsInX">The number of cells in the X direction.</param>
      <param name="nCellsInY">The number of cells in the Y direction.</param>
      <param name="nCellsInZ">The number of cells in the Z direction.</param>
      <param name="func">The 3D scalar field function</param>
    </member>
    <member name="M:devDept.Eyeshot.Dicom.VolumeRendering.#ctor(System.Collections.Generic.IList{System.Drawing.Bitmap},devDept.Geometry.Point3D,System.Single)">
      <summary>
            Constructor with a sorted collection of gray-scale bitmaps.
            </summary>
      <param name="images">The collection of <see cref="T:System.Drawing.Bitmap" />.</param>
      <param name="gridOrigin">The 3D point that represents the origin of the selection grid.</param>
      <param name="cellSizeZ">The cell's size in the Z direction.</param>
      <remarks>The <see cref="P:devDept.Eyeshot.Triangulation.MarchingCubes.IsoLevel" /> must be between 0 and 255.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.ComputeDistances">
      <summary>
            Utility class to compute the distances of each point of a FastPointCloud from a number of surfaces.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ComputeDistances.Values">
      <summary>
            The resulting array, containing for each point the shortest distance from the closest surface
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ComputeDistances.Min">
      <summary>
            The smallest distance found
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ComputeDistances.Max">
      <summary>
            The biggest distance found
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ComputeDistances.#ctor(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Surface},devDept.Eyeshot.Entities.FastPointCloud)">
      <summary>
            Computes the distance for each point of a FastPointCloud from a number of surfaces.
            </summary>
      <param name="surfaces">The collection of surfaces</param>
      <param name="fpc">The FastPointCloud.</param>
    </member>
    <member name="T:devDept.Eyeshot.FontDataDictionary">
      <summary>
            The FontData dictionary.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.FontDataDictionary.Item(System.String)">
      <summary>
            Text styles indexer property.
            </summary>
      <param name="name">The name of the text style.</param>
      <returns>The text style with the specified name.</returns>
    </member>
    <member name="T:devDept.Eyeshot.TextStyle">
      <summary>
            Class holding the data for the text style.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.TextStyle.Name">
      <summary>
            Gets or sets text style name.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when trying to rename the Default text style.</exception>
    </member>
    <member name="M:devDept.Eyeshot.TextStyle.ToString">
      <inehrit />
    </member>
    <member name="M:devDept.Eyeshot.TextStyle.Equals(devDept.Eyeshot.TextStyle)">
      <summary>
            Compares text style names ignoring cases.
            </summary>
      <param name="other">The other text style</param>
      <returns>True if the two text style names are the same, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.TextStyle.GetHashCode">
      <inehrit />
    </member>
    <member name="E:devDept.Eyeshot.TextStyle.KeyChanged">
      <summary>
            Occurs when the <see cref="P:devDept.Eyeshot.TextStyle.Name" /> changes.
            </summary>
      <seealso cref="E:devDept.Graphics.INotifyKeyChanged.KeyChanged" />
    </member>
    <member name="M:devDept.Eyeshot.TextStyle.OnKeyChanged(System.String,System.String)">
      <summary>
            When the <see cref="P:devDept.Eyeshot.TextStyle.Name" /> changes I need to notify it to the related keyed collections before changing it.
            </summary>
      <param name="newKey">The new <see cref="P:devDept.Eyeshot.TextStyle.Name" /></param>
      <param name="propertyName">The property name that represent the key for the related keyed collections.</param>
    </member>
    <member name="M:devDept.Eyeshot.TextStyle.GetKey">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.TextStyle.SetKey(System.String)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.TextStyle.#ctor(System.String,System.String,System.Drawing.FontStyle,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="name">The text style name.</param>
      <param name="fontFamilyName">The font family name</param>
      <param name="style">The font style</param>
      <param name="widthFactor">The width factor</param>
    </member>
    <member name="M:devDept.Eyeshot.TextStyle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.TextStyle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.TextStyle.#ctor(devDept.Eyeshot.TextStyle)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other object</param>
    </member>
    <member name="M:devDept.Eyeshot.TextStyle.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.TextStyle.#ctor(System.String,System.Drawing.FontStyle,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="fontFamilyName">The font family name</param>
      <param name="style">The font style</param>
      <param name="widthFactor">The width factor</param>
    </member>
    <member name="P:devDept.Eyeshot.TextStyle.FontFamilyName">
      <summary>
            Gets or sets te font family name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.TextStyle.Style">
      <summary>
            Gets or sets the font style.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.TextStyle.WidthFactor">
      <summary>
            Gets or sets the width factor.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.TextStyle.FileName">
      <summary>
            The SHX file name (for SHX fonts).
            </summary>
      <remarks>The font file can be loaded with the <see cref="M:devDept.Eyeshot.TextStyleKeyedCollection.LoadFont(System.String,System.String)" />.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.FontData">
      <summary>
            Font data class. Used internally to store the data for the characters of a given <see cref="T:System.Drawing.Font" />.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.FontData.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.FontStyleData">
      <summary>
            FontStyleData data class. Holds the data for the characters of a given <see cref="T:System.Drawing.Font" /> and <see cref="T:System.Drawing.FontStyle" />.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.FontStyleCharData">
      <summary>
            Character data class. Used internally to store characters data.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Triangulation.BallPivoting">
      <summary>
            Surface reconstruction based on the Ball-Pivoting method. Designed to work on 100k triangles at time.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.BallPivoting.Log">
      <summary>
            Gets the log.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.BallPivoting.TriangulatingText">
      <summary>
            Gets or sets the progress bar text displayed when executed asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.BallPivoting.OutputType">
      <summary>
            Gets or sets the triangulation output type.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.BallPivoting.Result">
      <summary>
            Property that returns the mesh resulting from the triangulation.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(devDept.Eyeshot.Entities.FastPointCloud,System.Double[])">
      <summary>
            Fast point cloud and ball radius array constructor.
            </summary>
      <param name="fpc">The point cloud to be triangulated</param>
      <param name="radii">The array of ball radii used for pivoting</param>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(devDept.Eyeshot.Entities.FastPointCloud,System.Double)">
      <summary>
            Fast point cloud and ball radius constructor.
            </summary>
      <param name="fpc">The point cloud to be triangulated.</param>
      <param name="radius">The radius of the ball used for pivoting.</param>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(devDept.Eyeshot.Entities.FastPointCloud)">
      <summary>
            Fast point cloud constructor with ball radius autoguessing.
            </summary>
      <param name="fpc">The point cloud to be triangulated.</param>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(devDept.Eyeshot.Entities.PointCloud,System.Double[])">
      <summary>
            Point cloud constructor and ball radius array constructor.
            </summary>
      <param name="pc">The point cloud to be triangulated.</param>
      <param name="radii">The array of ball radii used for pivoting.</param>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(devDept.Eyeshot.Entities.PointCloud,System.Double)">
      <summary>
            Point cloud and ball radius constructor.
            </summary>
      <param name="pc">The point cloud to be triangulated.</param>
      <param name="radius">The radius of the ball used for pivoting.</param>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(devDept.Eyeshot.Entities.PointCloud)">
      <summary>
            Point cloud constructor with ball radius autoguessing.
            </summary>
      <param name="pc">The point cloud to be triangulated.</param>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(System.Single[],System.Byte[],System.Double)">
      <summary>
            Point array, color array and ball radius constructor.
            </summary>
      <param name="pointArray">The point array to triangulate, defined as XYZ tuples.</param>
      <param name="rgbArray">The color array used for colored meshes, defined as RGB tuples.</param>
      <param name="radius">The radius of the ball used for pivoting.</param>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(System.Single[],System.Byte[],System.Double[])">
      <summary>
            Point array, color array and ball radius array constructor.
            </summary>
      <param name="pointArray">The point array to triangulate, defined as XYZ tuples.</param>
      <param name="rgbArray">The color array used for colored meshes, defined as RGB tuples.</param>
      <param name="radii">The array of ball radii used for pivoting.</param>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.BallPivoting.#ctor(System.Single[],System.Byte[])">
      <summary>
            Point array and color array constructor with ball radius autoguessing.
            </summary>
      <param name="pointArray">The point array to triangulate, defined as XYZ tuples.</param>
      <param name="rgbArray">The color array used for colored meshes, defined as RGB tuples.</param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Triangulation.BallPivoting.TriangulateInternal(System.ComponentModel.BackgroundWorker,System.ComponentModel.DoWorkEventArgs)" -->
    <member name="P:devDept.Eyeshot.Triangulation.BallPivoting.MinAngle">
      <summary>
            Gets or sets the minimum angle (in radians) between two triangles.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Triangulation.BallPivoting.SpatialNeighborhood(devDept.Geometry.Point3D,System.Boolean,System.Int32[])" -->
    <member name="T:devDept.Eyeshot.Triangulation.ScalarField3D">
      <summary>
            The function used by the marching cube algorithm to evaluate the 3D scalar field.
            </summary>
      <param name="x">X coordinate value</param>
      <param name="y">Y coordinate value</param>
      <param name="z">Z coordinate value</param>
      <returns>The scalar field value.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Triangulation.MarchingCubes">
      <summary>
            Utility class for creating a polygonal surface representation of an iso-surface of a 3D scalar field. 
            <para>There are many applications for this type of technique, two very common
            ones are:</para><list type="bullet"><item><description>Reconstruction of a surface from medical volumetric datasets. For
            example MRI scans result in a 3d volume of samples at the vertices of a regular
            3D mesh.</description></item><item><description>Creating a 3D contour of a mathematical scalar field. In this
            case the function is known everywhere but is sampled at the vertices of a
            regular 3D grid.</description></item></list></summary>
      <seealso cref="T:devDept.Eyeshot.Triangulation.BallPivoting" />
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.MarchingCubes.ProgressBarText">
      <summary>
            Gets or sets the progress bar text string.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.MarchingCubes.IsoLevel">
      <summary>
            Gets or sets the desired iso-level value.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.MarchingCubes.Result">
      <summary>
            Gets the resulting mesh.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.MarchingCubes.LightWeight">
      <summary>
            Gets or sets the triangulation output type.
            </summary>
      <remarks>If true, the coincident vertices of the generated mesh are not welded and the <see cref="P:devDept.Eyeshot.Entities.Mesh.MeshNature" /> is set to <see cref="F:devDept.Geometry.Entities.GMesh.natureType.Plain" />,
            else the vertices are welded and the <see cref="P:devDept.Eyeshot.Entities.Mesh.MeshNature" /> is set to <see cref="F:devDept.Geometry.Entities.GMesh.natureType.Smooth" /> 
            The generated mesh is created with the same <see cref="P:devDept.Eyeshot.Entities.Mesh.LightWeight" /> value.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.MarchingCubes.#ctor(System.Int32,System.Single,System.Int32,System.Single,System.Int32,System.Single,devDept.Eyeshot.Triangulation.ScalarField3D)">
      <summary>
            Centered in world origin constructor.
            </summary>
      <param name="nCellsInX">Number of cells along the X axis</param>
      <param name="cellSizeX">Cell size in X</param>
      <param name="nCellsInY">Number of cells along the Y axis</param>
      <param name="cellSizeY">Cell size in Y</param>
      <param name="nCellsInZ">Number of cells along the Z axis</param>
      <param name="cellSizeZ">Cell size in Z</param>
      <param name="func">The 3D scalar field function</param>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.MarchingCubes.#ctor(devDept.Geometry.Point3D,System.Int32,System.Single,System.Int32,System.Single,System.Int32,System.Single,devDept.Eyeshot.Triangulation.ScalarField3D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="gridOrigin">Grid origin point</param>
      <param name="nCellsInX">Number of cells along the X axis</param>
      <param name="cellSizeX">Cell size in X</param>
      <param name="nCellsInY">Number of cells along the Y axis</param>
      <param name="cellSizeY">Cell size in Y</param>
      <param name="nCellsInZ">Number of cells along the Z axis</param>
      <param name="cellSizeZ">Cell size in Z</param>
      <param name="func">The 3D scalar field function</param>
    </member>
    <member name="T:devDept.Eyeshot.Triangulation.ScalarField2D">
      <summary>
            The function used by the marching squares algorithm to evaluate the 2D scalar field.
            </summary>
      <param name="x">X coordinate value</param>
      <param name="y">Y coordinate value</param>
      <returns>The scalar field value.</returns>
    </member>
    <member name="T:devDept.Eyeshot.Triangulation.MarchingSquares">
      <summary>
            Utility class for creating a polygonal representation of an isocurve of a 2D
            scalar field.
            </summary>
      <example>
        <code lang="C#"><![CDATA[public void MarchingSquares()
            {
                ScalarField2D func = new ScalarField2D(myScalarField);
                MarchingSquares ms = new MarchingSquares(new Point2D(0, 0), 100, 1, 100, 1, func);
                ms.IsoLevel = 20;
                ms.DoWork();
                Line[] isoCurv = ms.Result;
                Assert.AreEqual(156, isoCurv.Length);
            }
            float myScalarField(float x1, float y1)
            {
                Point2D pt = new Point2D(x1, y1);
                Point2D cen = new Point2D(50, 50);
                return Convert.ToSingle(cen.DistanceTo(pt));
            }]]></code>
        <code lang="VB"><![CDATA[Public Sub MarchingSquares()
                Dim func As ScalarField2D = New ScalarField2D(AddressOf myScalarField)
            
                Dim ms As MarchingSquares = new MarchingSquares(new Point2D(0, 0), 100, 1, 100, 1, func)
                ms.IsoLevel = 20
                ms.DoWork()
                Dim isoCurv As Line() = ms.Result
                Assert.AreEqual(156, isoCurv.Length)
            End Sub
            Private Function myScalarField(ByVal x1 As Single, ByVal y1 As Single) As Single
                Dim pt As Point2D = New Point2D(x1, y1)
                Dim cen As Point2D = New Point2D(50, 50)
                Return Convert.ToSingle(cen.DistanceTo(pt))
            End Function]]></code>
      </example>
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.MarchingSquares.ProgressBarText">
      <summary>
            Gets or sets the progress bar text string.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.MarchingSquares.IsoLevel">
      <summary>
            Gets or sets the desired iso-level value.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.MarchingSquares.Result">
      <summary>
            Gets the resulting line array.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.MarchingSquares.#ctor(System.Int32,System.Single,System.Int32,System.Single,devDept.Eyeshot.Triangulation.ScalarField2D)">
      <summary>
            Centered in world origin constructor.
            </summary>
      <param name="nCellsInX">Number of cells along the X axis</param>
      <param name="cellSizeX">Cell size in X</param>
      <param name="nCellsInY">Number of cells along the Y axis</param>
      <param name="cellSizeY">Cell size in Y</param>
      <param name="func">The 3D scalar field function</param>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.MarchingSquares.#ctor(System.Drawing.Bitmap,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Centered in world origin constructor.
            </summary>
      <param name="original">The bitmap image</param>
      <param name="cellSizeInX">Cell size in X in pixels</param>
      <param name="cellSizeInY">Cell size in Y in pixels</param>
      <param name="makeGrayscale">When true the image is converted to grayscale.</param>
    </member>
    <member name="M:devDept.Eyeshot.Triangulation.MarchingSquares.#ctor(devDept.Geometry.Point2D,System.Int32,System.Single,System.Int32,System.Single,devDept.Eyeshot.Triangulation.ScalarField2D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="gridOrigin">Grid origin point</param>
      <param name="nCellsInX">Number of cells along the X axis</param>
      <param name="cellSizeX">Cell size in X</param>
      <param name="nCellsInY">Number of cells along the Y axis</param>
      <param name="cellSizeY">Cell size in Y</param>
      <param name="func">The 3D scalar field function</param>
    </member>
    <member name="T:devDept.Eyeshot.Triangulation.PictureData`1">
      <summary>
            Class that holds data for volume rendering pictures.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.PictureData`1.Pixels">
      <summary>
            Gets the pixels data.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.PictureData`1.Rows">
      <summary>
            Gets the number of rows.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Triangulation.PictureData`1.Columns">
      <summary>
            Gets the number of columns.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.GestureHandler">
      <summary>
            Handles gesture events
            </summary>
      <remarks>
            The handler simplifies handling gesture such as rotate, zoom and pan 
            by keeping the requires knowledge of the previous and first event in 
            the gesture event sequence.  
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.GestureHandler.SetHWndTouchInfo">
      <summary>
            Register the form to get gesture events
            </summary>
      <returns>true if succeeded</returns>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.GestureHandler.Begin">
      <summary>
            Indicate a that a gesture is beginning
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.GestureHandler.End">
      <summary>
            Indicate an end of a gesture
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.GestureHandler.PanBegin">
      <summary>
            Start the pannin sequence
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.GestureHandler.Pan">
      <summary>
            Panning continue
            </summary>
            /// <remarks>
            Use the PanTranslation property of the event argument to get the
            relative translation size (relative to the last pan event) 
            </remarks></member>
    <member name="E:devDept.Eyeshot.MultiTouch.GestureHandler.PanEnd">
      <summary>
            End pan event
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.GestureHandler.PressAndTap">
      <summary>
            RollOver gesture event, this is a single event
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.GestureHandler.RotateBegin">
      <summary>
            Starting rotate gesture 
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.GestureHandler.Rotate">
      <summary>
            Continue rotating
            </summary>
      <remarks>
            Use the RotateAngle in the event argument to get the relative 
            rotation angle
            </remarks>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.GestureHandler.RotateEnd">
      <summary>
            Rotate end
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.GestureHandler.TwoFingerTap">
      <summary>
            Two fingers tap event.
            </summary>
      <remarks>
            This is a single event
            </remarks>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.GestureHandler.ZoomBegin">
      <summary>
            Start zoom gesture
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.GestureHandler.Zoom">
      <summary>
            Continue zooming
            </summary>
      <remarks>
            Use the ZoomFactor to know the relative zoom factor
            </remarks>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.GestureHandler.ZoomEnd">
      <summary>
            Zoom End event
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.GestureHandler.WindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
      <summary>
            The Windows message interception for gesture events handling
            </summary>
      <param name="hWnd">WndProc hWnd</param>
      <param name="msg">WndProc msg</param>
      <param name="wParam">WndProc wParam</param>
      <param name="lParam">WndProc lParam</param>
      <returns>WndProc return</returns>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.GestureEventArgs">
      <summary>
            Event arguments for all gesture events
            </summary>
      <remarks>
            Some of the properties are related to specific messages:
            Panning: PanTranslation
            Zooming: ZoomFactor
            Rotation: RotateAngle
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureEventArgs.GestureId">
      <summary>
            The windows gesture id
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureEventArgs.GestureArguments">
      <summary>
            the raw Gesture arguments
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureEventArgs.Location">
      <summary>
            The gesture location translated into client area
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureEventArgs.IsBegin">
      <summary>
            The first event of a gesture
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureEventArgs.IsEnd">
      <summary>
            The last event of a gesture
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureEventArgs.IsInertia">
      <summary>
            The gesture has triggered inertia
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureEventArgs.RotateAngle">
      <summary>
            The relative rotation angle, used by the Rotate event
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureEventArgs.Center">
      <summary>
            The calculated gesture center
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureEventArgs.ZoomFactor">
      <summary>
            The zoom factor, used by the Zoom event
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureEventArgs.PanTranslation">
      <summary>
            The relative panning translation, used by the Pan event
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureEventArgs.PanVelocity">
      <summary>
            The velocity vector of the pan gesture, can be used for custom inertia
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureEventArgs.LastBeginEvent">
      <summary>
            The first gesture in this gesture event sequence
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureEventArgs.LastEvent">
      <summary>
            The last gesture in this gesture event sequence
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.IHwndWrapper">
      <summary>
            Wrapp HWND source such as System.Windows.Forms.Control, or System.Windows.Window
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.IHwndWrapper.Handle">
      <summary>
            The Underline Windows Handle
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.IHwndWrapper.Source">
      <summary>
            The .NET object that wrap the Windows Handle (WinForm, WinForm Control, WPF Window, IntPtr of HWND)
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.IHwndWrapper.HandleCreated">
      <summary>
            The Win32 Handle has been created
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.IHwndWrapper.HandleDestroyed">
      <summary>
            /// The Win32 Handle has been destroyed
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.IHwndWrapper.IsHandleCreated">
      <summary>
            Check if the Win32 Handle is already created
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.IHwndWrapper.PointToClient(System.Drawing.Point)">
      <summary>
            Computes the location of the specified screen point into client coordinates
            </summary>
      <param name="point">The screen coordinate System.Drawing.Point to convert</param>
      <returns>A point that represents the converted point in client coordinates</returns>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.IGUITimer">
      <summary>
            A Common interface foir timer.
            The timer has to be in the UI thread context
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.IGUITimer.Enabled">
      <summary>
            Gets or sets whether the timer is running.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.IGUITimer.Interval">
      <summary>
            Gets or sets the time, in milliseconds, before the Tick event is raised
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.IGUITimer.Tick">
      <summary>
              Occurs when the specified timer interval has elapsed and the timer is enabled.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.IGUITimer.Start">
      <summary>
            Starts the timer.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.IGUITimer.Stop">
      <summary>
            Stops the timer.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Handler">
      <summary>
            Base class for handling Gesture and Touch event
            </summary>
      <remarks>
            A form can have one handler, either touch handler or gesture handler. 
            The form need to create the handler and register to events. 
            The code is not thread safe, we assume that the calling thread is the 
            UI thread. There is no blocking operation in the code.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Handler.SetHWndTouchInfo">
      <summary>
            Initiate touch support for the underline hWnd 
            </summary>
      <remarks>Registering the hWnd to touch support or configure the hWnd to receive gesture messages</remarks>
      <returns>true if succeeded</returns>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Handler.WindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
      <summary>
            The interceptor WndProc
            </summary>
      <param name="hWnd">WndProc hWnd</param>
      <param name="msg">WndProc msg</param>
      <param name="wparam">WndProc wParam</param>
      <param name="lparam">WndProc lPara</param>
      <returns>WndProc return</returns>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Handler.ControlHandle">
      <summary>
            The registered control's handler
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Handler.DpiX">
      <summary>
            The X DPI of the target window
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Handler.DpiY">
      <summary>
            The Y DPI of the target window
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.Handler.GestureNotify">
      <summary>
             GestureNotify event notifies a window that gesture recognition is
              in progress and a gesture will be generated if one is recognized under the
              current gesture settings.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Handler.DigitizerCapabilities">
      <summary>
            Report digitizer capabilities
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Handler.DigitizerCapabilities.Status">
      <summary>
            Get the current Digitizer Status
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Handler.DigitizerCapabilities.MaxumumTouches">
      <summary>
            Get the maximum touches capability
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Handler.DigitizerCapabilities.IsIntegratedTouch">
      <summary>
            Check for integrated touch support
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Handler.DigitizerCapabilities.IsExternalTouch">
      <summary>
            Check for external touch support
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Handler.DigitizerCapabilities.IsIntegratedPan">
      <summary>
            Check for Pen support
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Handler.DigitizerCapabilities.IsExternalPan">
      <summary>
            Check for external Pan support
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Handler.DigitizerCapabilities.IsMultiInput">
      <summary>
            Check for multi-input
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Handler.DigitizerCapabilities.IsStackReady">
      <summary>
            Check if touch device is ready
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Handler.DigitizerCapabilities.IsMultiTouchReady">
      <summary>
            Check if Multi-touch support device is ready
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Handler.IsTouchWindows(System.IntPtr)">
      <summary>
            Check if the Window is registered for multitouch events
            </summary>
      <param name="hWnd">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.GestureNotifyEventArgs">
      <summary>
             GestureNotify event notifies a window that gesture recognition is
              in progress and a gesture will be generated if one is recognized under the
              current gesture settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureNotifyEventArgs.Location">
      <summary>
            The gesture location
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.GestureNotifyEventArgs.TargetHwnd">
      <summary>
            The gesture target window
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.DigitizerStatus">
      <summary>
            All availible digitizer capabilities
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationInertiaProcessor">
      <summary>
            A manipulation processor that support Inertia processing
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationInertiaProcessor.#ctor(devDept.Eyeshot.MultiTouch.Manipulation.ProcessorManipulations,devDept.Eyeshot.MultiTouch.IGUITimer)">
      <summary>
            Create new manipulation processor
            </summary>
      <remarks>
            Call the <see cref="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ProcessDown(System.UInt32,System.Drawing.PointF)" />, <see cref="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ProcessMove(System.UInt32,System.Drawing.PointF)" />, <see cref="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ProcessUp(System.UInt32,System.Drawing.PointF)" /> to feed the processor.
            Register on <see cref="E:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ManipulationStarted" />, <see cref="E:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ManipulationDelta" /> and <see cref="E:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ManipulationCompleted" />
            to handle manipulation events
            Set the <see cref="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationInertiaProcessor.InertiaProcessor" /> properties to get the desired inertia behavior
            Register to the <see cref="E:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationInertiaProcessor.BeforeInertia" /> event to set the inertia properties when inertia is starting/&gt;
            </remarks>
      <param name="supportedManipulations">Activate specific manipulation (scale, translate, rotate)</param>
      <param name="timer">The GUI timer that will be used for inertia events</param>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationInertiaProcessor.BeforeInertia">
      <summary>
            Fired just before inertia is starting
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationInertiaProcessor.Dispose(System.Boolean)">
      <summary>
            Release the underline COM object
            </summary>
      <param name="dispose">
      </param>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationInertiaProcessor.InertiaProcessor">
      <summary>
            The inertia processor that is associate with the Manipulation Processor
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor">
      <summary>
            The Inertia Processor
            </summary>
      <remarks>Handles calculations regarding object motion for multitouch</remarks>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.MaxInertiaSteps">
      <summary>
            After this amount of timer ticks, the Inertia will stop
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.InertiaTimerInterval">
      <summary>
            The timer resolution for inertia events
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.InInertia">
      <summary>
            True when the inertia processor generate inertia motion events
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.InitialVelocity">
      <summary>
            Specifies the initial movement of the target object
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.InitialAngularVelocity">
      <summary>
            Specifies the rotation of the target when movement begins
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.InitialExpansionVelocity">
      <summary>
            Specifies the expention of the target when movement begins
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.InitialRadius">
      <summary>
            Specifies the distance from the edge of the target to its center before the object was changed
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.Boundary">
      <summary>
            Limits how far towards the edge of the screen the target object can move
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.ElasticMargin">
      <summary>
            Specifies the rectangle region for bouncing the target objec
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.DesiredDisplacement">
      <summary>
            Specifies the desired distance that the object will travel
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.DesiredRotation">
      <summary>
            Specifies the desired radians that the object will rotate
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.DesiredExpansion">
      <summary>
            Specifies the desired change in the object's average radius
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.DesiredDeceleration">
      <summary>
            Specifies the desired rate at which translation operations will decelerate
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.DesiredAngularDeceleration">
      <summary>
            Specifies the desired rate that the target object will stop spinning in radians per msec
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.DesiredExpansionDeceleration">
      <summary>
            Specifies the rate at which the object will stop expanding
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.InertiaProcessor.Dispose">
      <summary>
            Dispose the object and release the underline COM object
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Manipulation.BeforeInertiaEventArgs">
      <summary>
            Before Inertia phase is starting
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.MultiTouch.Manipulation.BeforeInertiaEventArgs.CancelInertia">
      <summary>
            Cancel Inertia by setting this property to true
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Manipulation.ProcessorManipulations">
      <summary>
            Manipulation Flags.
            Enables Manipulation Support
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.MultiTouch.Manipulation.ProcessorManipulations.NONE">
      <summary>
            Disable manipulation events
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.MultiTouch.Manipulation.ProcessorManipulations.TRANSLATE_X">
      <summary>
            X axis translation events
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.MultiTouch.Manipulation.ProcessorManipulations.TRANSLATE_Y">
      <summary>
            Y Axis translation events
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.MultiTouch.Manipulation.ProcessorManipulations.SCALE">
      <summary>
            Scaling events
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.MultiTouch.Manipulation.ProcessorManipulations.ROTATE">
      <summary>
            Rotation events
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.MultiTouch.Manipulation.ProcessorManipulations.ALL">
      <summary>
            Fire all manipulation events
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Manipulation.VectorF">
      <summary>
            Utility class for vector manipulations
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.#ctor(System.Single,System.Single)">
      <summary>
            Create new float vector
            </summary>
      <param name="x">X direction</param>
      <param name="y">Y Direction</param>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.ToString">
      <summary>
            (x,y)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.Equals(System.Object)">
      <summary>
            Check if two vectors are equal
            </summary>
      <param name="obj">the second vector</param>
      <returns>true if they are equal</returns>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.GetHashCode">
      <summary>
            Return the Vector hash code
            </summary>
      <returns>Hash Code</returns>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.X">
      <summary>
            The X direction
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.Y">
      <summary>
            The Y Direction
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.op_Implicit(devDept.Eyeshot.MultiTouch.Manipulation.VectorF)~System.Drawing.Size">
      <summary>
            Convert vector to Size
            </summary>
      <param name="vector">The Vector</param>
      <returns>The vector as Size</returns>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.op_Implicit(devDept.Eyeshot.MultiTouch.Manipulation.VectorF)~System.Drawing.SizeF">
      <summary>
            Convert Vector to SizeF
            </summary>
      <param name="vector">The Vector</param>
      <returns>The vector as SizeF</returns>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.op_Implicit(System.Drawing.Size)~devDept.Eyeshot.MultiTouch.Manipulation.VectorF">
      <summary>
            Convert Size to vector
            </summary>
      <param name="size">The size</param>
      <returns>The size as vector</returns>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.op_Implicit(System.Drawing.SizeF)~devDept.Eyeshot.MultiTouch.Manipulation.VectorF">
      <summary>
            Convert SizeF to Vector
            </summary>
      <param name="size">The Size</param>
      <returns>The Size as Vector</returns>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.op_Multiply(devDept.Eyeshot.MultiTouch.Manipulation.VectorF,System.Single)">
      <summary>
            Multiply the vector with scalar (float)
            </summary>
      <param name="vector">The source vector</param>
      <param name="value">The floating point scalar</param>
      <returns>New vector</returns>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.op_Division(devDept.Eyeshot.MultiTouch.Manipulation.VectorF,System.Single)">
      <summary>
            Divide Vector with scalar (float)
            </summary>
      <param name="vector">The Vector</param>
      <param name="value">The scalar</param>
      <returns>New Vector</returns>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.op_Addition(devDept.Eyeshot.MultiTouch.Manipulation.VectorF,System.Single)">
      <summary>
            Add scalar to a vector
            </summary>
      <param name="vector">The Vector</param>
      <param name="value">The scalar</param>
      <returns>New vector</returns>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.op_Subtraction(devDept.Eyeshot.MultiTouch.Manipulation.VectorF,System.Single)">
      <summary>
            Substruct Scalar from vector
            </summary>
      <param name="vector">The vector</param>
      <param name="value">The scalar</param>
      <returns>New vector</returns>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.op_Addition(devDept.Eyeshot.MultiTouch.Manipulation.VectorF,devDept.Eyeshot.MultiTouch.Manipulation.VectorF)">
      <summary>
            Add two vectors
            </summary>
      <param name="v1">V1</param>
      <param name="v2">V2</param>
      <returns>New Vector</returns>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.op_Subtraction(devDept.Eyeshot.MultiTouch.Manipulation.VectorF,devDept.Eyeshot.MultiTouch.Manipulation.VectorF)">
      <summary>
            Substruct two vectors
            </summary>
      <param name="v1">V1</param>
      <param name="v2">V2</param>
      <returns>New Vector</returns>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.Magnitude">
      <summary>
            Return the magnitude (normal) of a vector
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.VectorF.Direction">
      <summary>
            Return the unit vector
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationStartedEventArgs">
      <summary>
            Argument for manipulatiuon start event
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationStartedEventArgs.#ctor(System.Single,System.Single)">
      <summary>
            Argument for touch event location
            </summary>
      <param name="x">The x Axis</param>
      <param name="y">The y Axis</param>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationStartedEventArgs.Location">
      <summary>
            This location is usually the center point
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationCompletedEventArgs">
      <summary>
            The argument for manipulation complete event
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationCompletedEventArgs.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
            Create new ManipulationCompletedEventArgs
            </summary>
      <param name="x">x Axis</param>
      <param name="y">y Axis</param>
      <param name="cumulativeTranslationX">Cumulative Translation in the X Axis since starting manipulation</param>
      <param name="cumulativeTranslationY">Cumulative Translation in the Y Axis since starting manipulation</param>
      <param name="cumulativeScale">Cumulative scaling since starting manipulation</param>
      <param name="cumulativeExpansion">Cumulative Expension since starting manipulation</param>
      <param name="cumulativeRotation">Cumulative rotation in radians since starting manipulation</param>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationCompletedEventArgs.CumulativeTranslation">
      <summary>
            Total translation
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationCompletedEventArgs.CumulativeScale">
      <summary>
            Total Scaling
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationCompletedEventArgs.CumulativeExpansion">
      <summary>
            Total Extension
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationCompletedEventArgs.CumulativeRotation">
      <summary>
            Total Rotation
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationDeltaEventArgs">
      <summary>
            The argument for manipulation delta
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationDeltaEventArgs.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
      </summary>
      <param name="x">x Axis</param>
      <param name="y">y Axis</param>
      <param name="translationDeltaX">The amount of translation since the last event</param>
      <param name="translationDeltaY">The amount of translation since the last event</param>
      <param name="scaleDelta">The amount of scaling since the last event</param>
      <param name="expansionDelta">The amount of expension since the last event</param>
      <param name="rotationDelta">The amount of rotation in radians since the last event</param>
      <param name="cumulativeTranslationX">Cumulative Translation in the X Axis since starting manipulation</param>
      <param name="cumulativeTranslationY">Cumulative Translation in the Y Axis since starting manipulation</param>
      <param name="cumulativeScale">Cumulative scaling since starting manipulation</param>
      <param name="cumulativeExpansion">Cumulative Expension since starting manipulation</param>
      <param name="cumulativeRotation">Cumulative rotation in radians since starting manipulation</param>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationDeltaEventArgs.TranslationDelta">
      <summary>
            The amount of translation since the last event
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationDeltaEventArgs.ScaleDelta">
      <summary>
            The amount of scaling since the last event
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationDeltaEventArgs.ExpansionDelta">
      <summary>
            The amount of expension since the last event
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationDeltaEventArgs.RotationDelta">
      <summary>
            The amount of rotation since the last event
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor">
      <summary>
            A .NET wrapper for touch manipulation processing
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.#ctor(devDept.Eyeshot.MultiTouch.Manipulation.ProcessorManipulations)">
      <summary>
            Create new manipulation processor
            </summary>
      <remarks>
            Call the <see cref="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ProcessDown(System.UInt32,System.Drawing.PointF)" />, <see cref="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ProcessMove(System.UInt32,System.Drawing.PointF)" />, <see cref="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ProcessUp(System.UInt32,System.Drawing.PointF)" /> to feed the processor.
            Register on <see cref="E:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ManipulationStarted" />, <see cref="E:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ManipulationDelta" /> and <see cref="E:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ManipulationCompleted" />
            to handle manipulation events
            </remarks>
      <param name="supportedManipulations">Activate specific manipulation (scale, translate, rotate)</param>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ManipulationStarted">
      <summary>
            Fired when manipulation is started
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ManipulationDelta">
      <summary>
            Fired each time the processor had figured a change in one or more of the required manipulations
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ManipulationCompleted">
      <summary>
            Fired on manipulation end
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.SupportedManipulations">
      <summary>
            Gets or sets the required manipulation
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.PivotPoint">
      <summary>
            The Center of the object
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.PivotRadius">
      <summary>
            The PivotRadius property is used to determine how much rotation is used in single finger manipulation
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.CompleteManipulation">
      <summary>
            This method raises the ManipulationCompleted() event in response
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ProcessDown(System.UInt32,System.Drawing.PointF)">
      <summary>
            The ProcessDown method feeds data to the manipulation processor associated with a target
            </summary>
      <param name="manipulationId">The identifier for the manipulation that you want to process</param>
      <param name="location">The coordinates associated with the target</param>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ProcessMove(System.UInt32,System.Drawing.PointF)">
      <summary>
            The ProcessMove method feeds movement data for the target object to its manipulation processor
            </summary>
      <param name="manipulationId">The identifier for the manipulation that you want to process</param>
      <param name="location">The coordinates associated with the target</param>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ProcessUp(System.UInt32,System.Drawing.PointF)">
      <summary>
            The ProcessUp method feeds data to a target's manipulation processor for touch up sequences
            </summary>
      <param name="manipulationId">The identifier for the manipulation that you want to process</param>
      <param name="location">The coordinates associated with the target</param>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ProcessDownWithTime(System.UInt32,System.Drawing.PointF,System.Int32)">
      <summary>
            Feds data to the manipulation processor associated with a target and a timestamp
            </summary>
      <param name="manipulationId">The identifier for the manipulation that you want to process</param>
      <param name="location">The coordinates associated with the target</param>
      <param name="timestamp">The timestamp of the event</param>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ProcessMoveWithTime(System.UInt32,System.Drawing.PointF,System.Int32)">
      <summary>
            Feds data to the manipulation processor associated with a target and a timestamp
            </summary>
      <param name="manipulationId">The identifier for the manipulation that you want to process</param>
      <param name="location">The coordinates associated with the target</param>
      <param name="timestamp">The timestamp of the event</param>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ProcessUpWithTime(System.UInt32,System.Drawing.PointF,System.Int32)">
      <summary>
            Feds data to the manipulation processor associated with a target and a timestamp
            </summary>
      <param name="manipulationId">The identifier for the manipulation that you want to process</param>
      <param name="location">The coordinates associated with the target</param>
      <param name="timestamp">The timestamp of the event</param>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.Velocity">
      <summary>
            Calculates and returns the velocity for the target object
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.ExpansionVelocity">
      <summary>
            Calculates the rate that the target object is expanding at
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.AngularVelocity">
      <summary>
            Calculates the rotational velocity that the target object is moving at
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.MinimumScaleRotateRadius">
      <summary>
            Specifies the minimum scale and rotate radius
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.Dispose(System.Boolean)">
      <summary>
            Release the underlined COM Object
            </summary>
      <param name="dispose">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Manipulation.ManipulationProcessor.Dispose">
      <summary>
            Dispose the object, free the underline COM object
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.MultiTouchEventHandler">
      <summary>
            Represents the method that will handle the multitouch events.
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">The event data</param>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.TouchHandler">
      <summary>
            Handles touch events for a hWnd
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchHandler.ParentWF">
      <summary>
            WinForms parent workspace. Null when the workspace is Wpf Native.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchHandler.DisablePalmRejection">
      <summary>
            Enabling this flag disables palm rejection
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.TouchHandler.SetHWndTouchInfo">
      <summary>
            Register for touch event
            </summary>
      <returns>true if succeeded</returns>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.TouchHandler.WindowProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
      <summary>
            Intercept and fire touch events
            </summary>
      <param name="hWnd">The Windows Handle</param>
      <param name="msg">Windows Message</param>
      <param name="wparam">wParam</param>
      <param name="lparam">lParam</param>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.TouchEventArgs">
      <summary>
            EventArgs passed to Touch handlers 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.Location">
      <summary>
            Touch client coordinate in pixels
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.Id">
      <summary>
            A touch point identifier that distinguishes a particular touch input
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.Flags">
      <summary>
            A set of bit flags that specify various aspects of touch point
            press, release, and motion. 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.Mask">
      <summary>
            mask which fields in the structure are valid
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.AbsoluteTime">
      <summary>
            touch event time
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.Time">
      <summary>
            touch event time from system up
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.ContactSize">
      <summary>
            the size of the contact area in pixels
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.IsPrimaryContact">
      <summary>
            Is Primary Contact (The first touch sequence)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.IsTouchMove">
      <summary>
            Specifies that movement occurred
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.IsTouchDown">
      <summary>
            Specifies that the corresponding touch point was established through a new contact
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.IsTouchUp">
      <summary>
            Specifies that a touch point was removed
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.IsTouchInRange">
      <summary>
            Specifies that a touch point is in range
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.IsTouchNoCoalesce">
      <summary>
            specifies that this input was not coalesced.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.IsTouchPen">
      <summary>
            Specifies that the touch point is associated with a pen contact
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouch.TouchEventArgs.IsTouchPalm">
      <summary>
            The touch event came from the user's palm
            </summary>
      <remarks>Set <see cref="P:devDept.Eyeshot.MultiTouch.TouchHandler.DisablePalmRejection" /> to true</remarks>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Interop.TOUCHINPUT">
      <summary>
            Touch API defined structures [winuser.h]
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Interop.POINTS">
      <summary>
            A Simple POINTS Interop structure
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Interop.POINT">
      <summary>
            A Simple POINT Interop structure
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Interop.GESTURECONFIG">
      <summary>
            Gesture Config Interop Structure
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Interop.GESTUREINFO">
      <summary>
            Gesture Info Interop Structure
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouch.Win32Helper.Factory">
      <summary>
            A factory that creates touch or gesture handler for a HWnd based Window
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouch.Win32Helper.Factory.CreateHandler``1(System.IntPtr)">
      <summary>
             A factory that creates touch or gesture handler for a HWnd based Window
            </summary>
      <remarks>We use factory to ensure that only one handler will be created for a window, since Gesture and Touch are mutually exclusive</remarks>
      <typeparam name="T">The handler type</typeparam>
      <param name="hWnd">The Windows handle that need touch or gesture events</param>
      <returns>TouchHandler or Gesture Handler</returns>
    </member>
    <member name="T:devDept.Eyeshot.Viewport">
      <summary>
            Viewport settings.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.UpdateWorkspace">
      <summary>
            Updates the workspace control in both desing-time and run-time mode.
            If necessary adjust near and far planes to accomodate origin
            symbols of various sizes.            
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Viewport.UpdateGraphics">
      <summary>
            Occurs when graphics is updated.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.InstanceId">
      <summary>
            For internal use only. Gets the instance id for the logging.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.#ctor(devDept.Eyeshot.Viewport)">
      <summary>
            Shallow-copy constructor.
            </summary>
      <param name="another">The viewport whose data is copied to this</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.#ctor(System.Drawing.Point,System.Drawing.Size,devDept.Graphics.BackgroundSettings,devDept.Eyeshot.Camera,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.ToolBar},System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Legend},devDept.Eyeshot.Histogram,devDept.Eyeshot.displayType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.Grid},System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.OriginSymbol},System.Boolean,devDept.Eyeshot.RotateSettings,devDept.Eyeshot.ZoomSettings,devDept.Eyeshot.PanSettings,devDept.Eyeshot.NavigationSettings,devDept.Eyeshot.CoordinateSystemIcon,devDept.Eyeshot.ViewCubeIcon,devDept.Eyeshot.Viewport.SavedViewsManager,devDept.Eyeshot.viewType)">
      <summary>
            Standard constructor (WPF).
            </summary>
      <param name="location">Coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container</param>
      <param name="size">Size of the viewport in pixels</param>
      <param name="background">Background settings</param>
      <param name="camera">Camera settings</param>
      <param name="toolBars">Toolbars collection</param>
      <param name="legends">Legends collection</param>
      <param name="displayMode">Display mode</param>
      <param name="showLabels">Labels visibility status</param>
      <param name="autoHideLabels">If true, labels are hidden automatically when behind the model</param>
      <param name="showVertices">If true, the model vertices are displayed</param>
      <param name="showVertexIndices">If true and <see cref="P:devDept.Eyeshot.Viewport.ShowVertices" /> is also true the model vertex indices are displayed</param>
      <param name="grids">Grids collection</param>
      <param name="originSymbol">Origin symbol settings</param>
      <param name="sortLabels">If true, sorts the Labels using the depth from the viewer</param>
      <param name="rotate">Rotate settings</param>
      <param name="zoom">Zoom settings</param>
      <param name="pan">Pan settings</param>
      <param name="navigation">Settings for the <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk" /> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly" /> camera navigation modes</param>
      <param name="coordinateSystemIcon">The coordinate system icon</param>
      <param name="viewCubeIcon">The view cube icon</param>
      <param name="savedViews">The saved views manager</param>
      <param name="initialView">Initial View</param>
    </member>
    <member name="T:devDept.Eyeshot.Viewport.SavedViewsManager">
      <summary>
            Class that manages the saved views stack.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.#ctor(devDept.Eyeshot.Viewport.SavedViewsManager)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other SavedViewsManager</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.Clear">
      <summary>
            Clears the stack of saved views.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.NumberOfPrevious">
      <summary>
            Gets the number of the previous views saved in the stack.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.NumberOfNext">
      <summary>
            Gets the number of the next views saved in the stack.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.Suspend">
      <summary>
            Suspends the automatic saving of the views.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.Resume">
      <summary>
            Resumes the automatic saving of the views.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.MaximumNumber">
      <summary>
            Gets or sets the maximum number of saved views.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.Save">
      <summary>
            Saves the current view on the stack.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Viewport.SavedViewsManager.Previous" />
      <seealso cref="M:devDept.Eyeshot.Viewport.SavedViewsManager.Next" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.Previous">
      <summary>
            Restores the previous view on the stack.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Viewport.SavedViewsManager.Save" />
      <seealso cref="M:devDept.Eyeshot.Viewport.SavedViewsManager.Next" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.Next">
      <summary>
            Restores the next view on the stack.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Viewport.SavedViewsManager.Save" />
      <seealso cref="M:devDept.Eyeshot.Viewport.SavedViewsManager.Previous" />
    </member>
    <member name="T:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs">
      <summary>
            Class that holds data for <see cref="E:devDept.Eyeshot.Viewport.ViewSaved" /> and <see cref="E:devDept.Eyeshot.Viewport.ViewRestored" /> events.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.#ctor(devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other object</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.#ctor(devDept.Eyeshot.Camera)">
      <summary>
            Standard constructor.
            </summary>
      <param name="camera">The camera</param>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.Target">
      <summary>
            Gets or sets the camera target.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.Rotation">
      <summary>
            Gets or sets the camera rotation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.Distance">
      <summary>
            Gets or sets the camera distance.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.ProjectionMode">
      <summary>
            Gets or sets the camera projection mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.ZoomFactor">
      <summary>
            Gets or sets the camera zoom factor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs.Restore(devDept.Eyeshot.Camera)">
      <summary>
            Assigns the saved data to the camera.
            </summary>
      <param name="camera">Camera</param>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SavedViews">
      <summary>
            Gets or sets the manager of the saved views.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SaveView(devDept.Eyeshot.Camera@)">
      <summary>
            Stores the current view. 
            </summary>
      <param name="saved">Will hold a copy of the active <see cref="P:devDept.Eyeshot.Viewport.Camera" /> object</param>
      <seealso cref="M:devDept.Eyeshot.Viewport.RestoreView(devDept.Eyeshot.Camera)" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RestoreView(devDept.Eyeshot.Camera)">
      <summary>
            Restores the previously saved view.
            </summary>
      <param name="saved">The <see cref="P:devDept.Eyeshot.Viewport.Camera" /> object previously initializiated by <see cref="M:devDept.Eyeshot.Viewport.SaveView(devDept.Eyeshot.Camera@)" /></param>
      <seealso cref="M:devDept.Eyeshot.Viewport.SaveView(devDept.Eyeshot.Camera@)" />
      <remarks>If <see cref="P:devDept.Eyeshot.Workspace.AnimateCamera" /> is true, the operation animates the Camera using the time interval specified by <see cref="P:devDept.Eyeshot.Workspace.AnimateCameraDuration" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Location">
      <summary>
            The coordinates of the upper-left corner of the viewport relative to the upper-left corner of its container.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.GetViewFrame">
      <summary>
            Gets the viewport bounds.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Size">
      <summary>
            The size of the viewport in pixels.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ComputeSmallSizeStill">
      <summary>
            Computes the <see cref="P:devDept.Eyeshot.Viewport.SmallSizeStill" /> value as <see cref="P:devDept.Eyeshot.Viewport.SmallSizeRatioStill" /> * Min(<see cref="P:devDept.Eyeshot.Viewport.Size" />.Width, <see cref="P:devDept.Eyeshot.Viewport.Size" />.Height)
            </summary>
      <returns>
            The small size value in pixels.
            </returns>
      <seealso cref="P:devDept.Eyeshot.Viewport.SmallSizeStill" />
      <seealso cref="P:devDept.Eyeshot.Viewport.SmallSizeRatioStill" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ComputeSmallSize">
      <summary>
             Computes the <see cref="P:devDept.Eyeshot.Viewport.SmallSizeMoving" /> value as <see cref="P:devDept.Eyeshot.Viewport.SmallSizeRatioMoving" /> * Min(<see cref="P:devDept.Eyeshot.Viewport.Size" />.Width, <see cref="P:devDept.Eyeshot.Viewport.Size" />.Height)
            </summary>
      <returns>
             The moving frames small size value in pixels.
             </returns>
      <seealso cref="P:devDept.Eyeshot.Viewport.SmallSizeMoving" />
      <seealso cref="P:devDept.Eyeshot.Viewport.SmallSizeRatioMoving" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ComputeSmallSizeMoving">
      <summary>
            Computes the <see cref="P:devDept.Eyeshot.Viewport.SmallSizeMoving" /> value as <see cref="P:devDept.Eyeshot.Viewport.SmallSizeRatioMoving" /> * Min(<see cref="P:devDept.Eyeshot.Viewport.Size" />.Width, <see cref="P:devDept.Eyeshot.Viewport.Size" />.Height)
            </summary>
      <returns>
            The small size value in pixels.
            </returns>
      <seealso cref="P:devDept.Eyeshot.Viewport.SmallSizeMoving" />
      <seealso cref="P:devDept.Eyeshot.Viewport.SmallSizeRatioMoving" />
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SmallSize">
      <summary>
            Gets the estimated small size value in pixels.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Viewport.SmallSizeRatio" />
      <seealso cref="M:devDept.Eyeshot.Viewport.ComputeSmallSize" />
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SmallSizeMoving">
      <summary>
            Gets the estimated small size value for the moving frames in pixels.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Viewport.SmallSizeRatioMoving" />
      <seealso cref="M:devDept.Eyeshot.Viewport.ComputeSmallSize" />
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SmallSizeStill">
      <summary>
            Gets the estimated small size value for the still frames in pixels.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Viewport.SmallSizeRatioStill" />
      <seealso cref="M:devDept.Eyeshot.Viewport.ComputeSmallSizeStill" />
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SmallSizeRatio">
      <summary>
        <para>Gets or sets the ratio to classify small entities. Small entities are hid
            during dynamic movements (Zoom/Pan/Rotate). Default value is 0.01. Use zero to disable.</para>
        <para>This ratio is used by <see cref="M:devDept.Eyeshot.Viewport.ComputeSmallSize" /> to estimate <see cref="P:devDept.Eyeshot.Viewport.SmallSize" /> value in pixels.</para>
      </summary>
      <remarks>
            The on screen object size is calculated approximating the size of the
            object's bounding box. Most of the times, there is a big difference between
            the actual pixel footprint and the <see cref="P:devDept.Eyeshot.Viewport.SmallSize" /> value.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Viewport.SmallSize" />
      <seealso cref="M:devDept.Eyeshot.Viewport.ComputeSmallSize" />
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SmallSizeRatioMoving">
      <summary>
        <para>Gets or sets the ratio to classify small entities. Small entities are hid
            during dynamic movements (Zoom/Pan/Rotate). Default value is 0.01. Use zero to disable.</para>
        <para>This ratio is used by <see cref="M:devDept.Eyeshot.Viewport.ComputeSmallSize" /> to estimate <see cref="P:devDept.Eyeshot.Viewport.SmallSizeMoving" /> value in pixels.</para>
      </summary>
      <remarks>
            The on screen object size is calculated approximating the size of the
            object's bounding box. Most of the times, there is a big difference between
            the actual pixel footprint and the <see cref="P:devDept.Eyeshot.Viewport.SmallSizeMoving" /> value.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Viewport.SmallSizeMoving" />
      <seealso cref="M:devDept.Eyeshot.Viewport.ComputeSmallSize" />
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SmallSizeRatioStill">
      <summary>
        <para>Gets or sets the ratio to classify small entities. Small entities are hid
            on the still frames. Default value is 0. Use zero to disable.</para>
        <para>This ratio is used by <see cref="M:devDept.Eyeshot.Viewport.ComputeSmallSizeStill" /> to estimate <see cref="P:devDept.Eyeshot.Viewport.SmallSizeStill" /> value in pixels.</para>
      </summary>
      <remarks>
            The on screen object size is calculated approximating the size of the
            object's bounding box. Most of the times, there is a big difference between
            the actual pixel footprint and the <see cref="P:devDept.Eyeshot.Viewport.SmallSizeStill" /> value.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Viewport.SmallSizeStill" />
      <seealso cref="M:devDept.Eyeshot.Viewport.ComputeSmallSizeStill" />
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Camera">
      <summary>
            Gets or sets the Camera settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.ToolBar">
      <summary>
            Gets the first ToolBar settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.ToolBars">
      <summary>
            Gets or sets the ToolBars settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.DisplayMode">
      <summary>
            Gets or sets the active display mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.InitialView">
      <summary>
            Gets or sets the active initial view.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.ShowLabels">
      <summary>
            Labels visibility status.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.ShowVertices">
      <summary>
            If true, the model vertices are displayed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.ShowVertexIndices">
      <summary>
            If true, the model vertices are displayed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.VertexSize">
      <summary>        
            Gets or sets the vertex visualization size (meaningful only if <see cref="P:devDept.Eyeshot.Viewport.ShowVertices" /> is true).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.AutoHideLabels">
      <summary>
            Gets or sets the auto hide labels flag. If true labels are hidden automatically when behind the model.
            </summary>
      <remarks>With Direct3D renderer, if Antialiasing is enabled, during the movement of the camera the labels may not be correctly hidden.</remarks>
      <seealso cref="!:AskForAntiAliasing" />
      <seealso cref="!:AntiAliasingSamples" />
      <seealso cref="!:AntiAliasing" />
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Grid">
      <summary>
            Gets the first planar grid settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Grids">
      <summary>
            Gets or sets the planar grids settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.OriginSymbol">
      <summary>
            Gets the first origin symbol settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.OriginSymbols">
      <summary>
            Gets or sets the OriginSymbols settings array.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Legend">
      <summary>
            Gets the first legend settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Legends">
      <summary>
            Gets or sets the legend objects.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Background">
      <summary>
            Gets or sets the background settings.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.GetCameraFrustum">
      <summary>
            Gets the planes of the viewport camera frustum.
            </summary>
      <returns>The camera frustum planes.</returns>
    </member>
    <member name="E:devDept.Eyeshot.Viewport.LabelSelectionChanged">
      <summary>
            Occurs when label selection has changed.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Eyeshot.viewType)">
      <summary>
            Sets the specified view.
            </summary>
      <param name="view">View type</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Eyeshot.viewType,System.Boolean,System.Boolean)">
      <summary>
            Sets the specified view.
            </summary>
      <param name="view">View type</param>
      <param name="fit">If true fits the view</param>
      <param name="animate">If true performs an animation when changing the view</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Quaternion,System.Boolean,System.Boolean)">
      <summary>
            Sets the specified view.
            </summary>
      <param name="rotation">View rotation</param>
      <param name="fit">If true fits the view</param>
      <param name="animate">If true performs an animation when changing the view</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Eyeshot.viewType,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Int32)">
      <summary>
            Sets the specified view.
            </summary>
      <param name="view">View type</param>
      <param name="fit">If true fits the view</param>
      <param name="margin">Pixels margin from the border, if <paramref name="fit" /> is true</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <param name="selectedOnly">If <paramref name="fit" /> is true, fits only the selected entities</param>
      <param name="duration">Animation duration (use 0 to use the <see cref="!:Design.AnimateCameraDuration" /></param>
      <seealso cref="M:devDept.Eyeshot.Viewport.IsCameraAnimating" />
      <seealso cref="M:devDept.Eyeshot.Viewport.StopCameraAnimation" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Quaternion,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Int32)">
      <summary>
            Sets the specified view.
            </summary>
      <param name="rotation">View rotation</param>
      <param name="fit">If true fits the view</param>
      <param name="margin">Pixels margin from the border, if <paramref name="fit" /> is true</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <param name="selectedOnly">If <paramref name="fit" /> is true, fits only the selected entities</param>
      <param name="duration">Animation duration (use 0 to use the <see cref="!:Design.AnimateCameraDuration" /></param>
      <seealso cref="M:devDept.Eyeshot.Viewport.IsCameraAnimating" />
      <seealso cref="M:devDept.Eyeshot.Viewport.StopCameraAnimation" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.StopCameraAnimation">
      <summary>
            Stops the camera animation.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Viewport.SetView(devDept.Eyeshot.viewType,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Int32)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.IsCameraAnimating" />
      <seealso cref="M:devDept.Eyeshot.Viewport.StopCameraAnimation" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.IsCameraAnimating">
      <summary>
            Tells if the Camera is performing an animation.
            </summary>
      <returns>True if the camera is performing an animation</returns>
      <seealso cref="M:devDept.Eyeshot.Viewport.SetView(devDept.Eyeshot.viewType,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Int32)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.StopCameraAnimation" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Quaternion,devDept.Geometry.Point3D,System.Double,System.Double)">
      <summary>
            Sets the specified view by doing an animation.
            </summary>
      <param name="rotation">The new camera rotation</param>
      <param name="target">The new cameratarget</param>
      <param name="distance">The new cameradistance</param>
      <param name="zoomFactor">The new camera zoomFactor</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Quaternion,devDept.Geometry.Point3D,System.Double,System.Double,System.Boolean)">
      <summary>
            Sets the specified view by doing an animation.
            </summary>
      <param name="rotation">The new camera rotation</param>
      <param name="target">The new cameratarget</param>
      <param name="distance">The new cameradistance</param>
      <param name="zoomFactor">The new camera zoomFactor</param>
      <param name="animate">If true performs an animation when changing the view</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.GetCameraRotation(devDept.Eyeshot.viewType,devDept.Geometry.Quaternion)">
      <summary>
            Gets the <see cref="T:devDept.Geometry.Quaternion" /> that describes the orientation of the given view.
            </summary>
      <param name="view">The view to set</param>
      <param name="initialRotation">An extra rotation to apply to the final rotation</param>
      <returns>The <see cref="T:devDept.Geometry.Quaternion" />.</returns>
      <seealso cref="P:devDept.Eyeshot.Camera.Rotation" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ViewportToCameraScreen(System.Drawing.Point)">
      <summary>
            Converts Viewport coordinates (0 on top of viewport) to Camera Screen coordinates (0 on bottom of control)
            </summary>
      <param name="pt">The point to convert</param>
      <returns>The point in camera screen coordinates</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ScreenToViewport(System.Drawing.Point)">
      <summary>
            Converts Screen coordinates (0 on top of control) to Viewport coordinates (0 on top of viewport)
            </summary>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ScreenToViewport(System.Drawing.PointF)">
      <summary>
            Converts Screen coordinates (0 on top of control) to Viewport coordinates (0 on top of viewport)
            </summary>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ViewportToScreen(System.Drawing.Point)">
      <summary>
            Converts Viewport coordinates (0 on top of viewport) to Screen coordinates (0 on top of control)
            </summary>
      <param name="pt">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.Project(System.Int32,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
      <summary>
            Maps world coordinates to screen coordinates.
            </summary>
      <param name="controlHeight">The height of the viewport layout control</param>
      <param name="objx">The world X coordinates</param>
      <param name="objy">The world Y coordinates</param>
      <param name="objz">The world Z coordinates</param>
      <param name="winx">The computed window X coordinates</param>
      <param name="winy">The computed window Y coordinates (0 on bottom of viewport)</param>
      <param name="winz">The computed window Z coordinates</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.Project(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32)">
      <summary>
            Projects a list of points on the screen.
            </summary>
      <returns>
            A list of 2D points. The origin point is the lower-left corner of the
            viewport.
            </returns>
      <param name="points">The list of points to project</param>
      <param name="controlHeight">The height of the viewport layout control </param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.UnProject(System.Int32,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
      <summary>
            Maps viewport coordinates to world coordinates.
            </summary>
      <param name="controlHeight">The height of the viewport layout control</param>
      <param name="winx">The screen X viewport coordinates to be mapped</param>
      <param name="winy">The screen Y viewport coordinates to be mapped (0 on bottom of viewport)</param>
      <param name="winz">The screen Z viewport coordinates to be mapped</param>
      <param name="objx">The computed world X coordinates</param>
      <param name="objy">The computed world Y coordinates</param>
      <param name="objz">The computed world Z coordinates</param>
      <returns>True if the operation succeeded, false otherwise</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.UnProject(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32)">
      <summary>
            Maps viewport coordinates to world coordinates.
            </summary>
      <returns>
            A list of 3D points in viewport coordinates. The origin point is the lower-left corner of the
            viewport.
            </returns>
      <param name="points">The list of points to unproject in viewport coordinates</param>
      <param name="controlHeight">The height of the viewport layout control </param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ScreenToPlane(System.Drawing.Point,devDept.Geometry.Plane,devDept.Geometry.Point3D@)">
      <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
      <param name="mousePos">Mouse cursor position (zero on top)</param>
      <param name="plane">The plane</param>
      <param name="intPoint">The intersection point. null/Nothing if the plane perpendicular to the screen.</param>
      <returns>True if the mapping succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ScreenToPlane(System.Drawing.Point,devDept.Geometry.PlaneEquation,devDept.Geometry.Point3D@)">
      <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
      <param name="mousePos">Mouse cursor position (zero on top)</param>
      <param name="pe">The plane equation</param>
      <param name="intPoint">The intersection point. null/Nothing if the plane perpendicular to the screen.</param>
      <returns>True if the mapping succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ScreenToPlane(System.Collections.Generic.IList{System.Drawing.Point},devDept.Geometry.Plane)">
      <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
      <param name="mousePointList">2D mouse point list (zero on top)</param>
      <param name="pe">The plane</param>
      <returns>The associated 3D world point list.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ScreenToPlane(System.Collections.Generic.IList{System.Drawing.Point},devDept.Geometry.PlaneEquation)">
      <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
      <param name="mousePointList">2D mouse point list (zero on top)</param>
      <param name="pe">The plane equation</param>
      <returns>The associated 3D world point list.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ScreenToWorld(System.Collections.Generic.IList{System.Drawing.Point})">
      <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
      <param name="mousePointList">2D mouse point list (zero on top)</param>
      <returns>The associated 3D world point list.</returns>
      <remarks>Positions that don't have geometry underneath will return null.</remarks>
      <remarks>The depth is read from the depth buffer, so its precision affects accuracy.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ScreenToWorld(System.Drawing.Point)">
      <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
      <param name="mousePos">Mouse cursor position (zero on top)</param>
      <returns>The associated 3D world point if there is geometry in the point position, null otherwise.</returns>
      <remarks>The depth is read from the depth buffer, so its precision affects accuracy.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.WorldToScreen(devDept.Geometry.Point3D)">
      <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
      <param name="point">The 3D point to project on screen</param>
      <returns>The associated projected screen point (zero on bottom)</returns>
      <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.WorldToScreen(System.Double,System.Double,System.Double)">
      <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
      <param name="x">3D point's x-coordinate</param>
      <param name="y">3D point's y-coordinate</param>
      <param name="z">3D point's z-coordinate</param>
      <returns>The associated projected screen point (zero on bottom).</returns>
      <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.WorldToScreen(System.Collections.Generic.IList{devDept.Geometry.Point3D})">
      <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
      <param name="pointList">3D point list</param>
      <returns>The associated projected screen point list (zero on bottom).</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.AdjustNearAndFarPlanes">
      <summary>
            Adjusts camera near and far planes based on model extents and on origin symbol, grid and shadow visibility status.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.GetThumbnail(devDept.Eyeshot.Viewport,System.Drawing.Size,System.Drawing.Color)">
      <summary>
            Gets a bitmap of the user interface element for designer mode only.
            </summary>
      <param name="viewport">Unused</param>
      <param name="size">The desired bitmap size</param>
      <param name="backgroundColor">Unused</param>
      <returns>
      </returns>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.GetBounds">
      <summary>
            Gets the bounds rectangle in screen coordinates.
            </summary>
      <returns>The bounds rectangle in screen coordinates.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.CoordinateSystemIcon">
      <summary>
            Gets or sets the coordinate system icon settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Histogram">
      <summary>
            Gets or sets the coordinate system icon settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.ViewCubeIcon">
      <summary>
            Gets or sets the view cube icon settings.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.CompileUserInterfaceElements">
      <summary>
            Compiles 3D user interface elements like the origin symbol, the bitmap background, the FEM restraint and load symbols, etc.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Viewport.ViewSavedEventHandler">
      <summary>
            Represents a method that will handle the <see cref="E:devDept.Eyeshot.Viewport.ViewSaved" /> event.
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">A <see cref="T:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs" /> that contains the event data</param>
    </member>
    <member name="T:devDept.Eyeshot.Viewport.ViewRestoredHandler">
      <summary>
            Represents a method that will handle the <see cref="E:devDept.Eyeshot.Viewport.ViewRestored" /> event.
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">A <see cref="T:devDept.Eyeshot.Viewport.SavedViewsManager.ViewEventArgs" /> that contains the event data</param>
    </member>
    <member name="E:devDept.Eyeshot.Viewport.ViewSaved">
      <summary>
            Occurs when a view is saved in the <see cref="T:devDept.Eyeshot.Viewport.SavedViewsManager" />.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Viewport.ViewRestored">
      <summary>
            Occurs when a view is restored from the <see cref="T:devDept.Eyeshot.Viewport.SavedViewsManager" />.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.GetBitmapSizeToPrintInWorldUnits(System.Drawing.GraphicsUnit,devDept.Geometry.linearUnitsType,System.Double)">
      <summary>
            Gets the size to print the viewport so that world units in the design correspond to world units on paper.
            </summary>
      <param name="pageUnits">The units of the graphics used to paint the page</param>
      <param name="designUnits">The units of the design control</param>
      <param name="scale">The scale to apply to the drawing</param>
      <returns>The viewport size to use in the <see cref="!:Design.RenderToBitmap(System.Drawing.Size)" /> to print the scene so that the world units in the design correspond to world units on paper.</returns>
      <remarks>Applies to <see cref="F:devDept.Graphics.projectionType.Orthographic" /> camera ProjectionMode only.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.GetThumbnail(System.Int32,System.Drawing.Color)">
      <summary>
            Returns a thumbnail bitmap of the Viewport. The maximum size is 256x256.
            </summary>
      <param name="thumbnailSize">Desired size of the biggest dimension of the workspace control.</param>
      <param name="backgroundColor">Desired background solid color. If Empty, then it uses the current one.</param>
      <returns>The bitmap of the current Viewport</returns>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.SortLabels">
      <summary>
            Sorts the Labels using the depth from the viewer.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Labels">
      <summary>Master label collection.</summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.DrawLabels(devDept.Graphics.RenderContextBase)">
      <summary>
            Draws the labels.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.ContentAlignment)">
      <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.Design" />'s client area.
            </summary>
      <param name="x">The text's x coordinate</param>
      <param name="y">The text's y coordinate (from the bottom of the viewport)</param>
      <param name="text">The text string to draw</param>
      <param name="textFont">The text font</param>
      <param name="textColor">The text color</param>
      <param name="textAlign">The text alignment</param>
      <seealso cref="!:Design.DrawTextOutlined" />
      <seealso cref="!:Design.DrawImage" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment)">
      <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.Design" />'s client area.
            </summary>
      <param name="x">The text's x coordinate</param>
      <param name="y">The text's y coordinate (from the bottom of the viewport)</param>
      <param name="text">The text string to draw</param>
      <param name="textFont">The text font</param>
      <param name="textColor">The text color</param>
      <param name="fillColor">The background color (can be semi-transparent)</param>
      <param name="textAlign">The text alignment</param>
      <seealso cref="!:DrawTextOutlined" />
      <seealso cref="!:DrawImage" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.DrawText(System.Int32,System.Int32,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment,System.Drawing.RotateFlipType)">
      <summary>
            Draws a text on the <see cref="T:devDept.Eyeshot.Design" />'s client area.
            </summary>
      <param name="x">The text's x coordinate</param>
      <param name="y">The text's y coordinate (from the bottom of the viewport)</param>
      <param name="text">The text string to draw</param>
      <param name="textFont">The text font</param>
      <param name="textColor">The text color</param>
      <param name="fillColor">The background color (can be semi-transparent)</param>
      <param name="textAlign">The text alignment</param>
      <param name="rotateFlip">The text rotation</param>
      <seealso cref="!:DrawTextOutlined" />
      <seealso cref="!:DrawImage" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.CompileBackground">
      <summary>
            Compiles the background, used by the designer.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.DrawBackground(devDept.Graphics.RenderContextBase,System.Boolean,System.Single,System.Drawing.Color,devDept.Geometry.Transformation)">
      <summary>Draws the viewport background.</summary>
      <param name="context">The render context</param>
      <param name="reflection">If true, it's drawing the planar reflections (when there are no shaders)</param>
      <param name="reflectionIntensity">THe intensity of the planar reflections</param>
      <param name="parentColor">The color of the parent</param>
      <param name="pickMatrix">The matrix to restrict the rendering to the given rectangle (important for <see cref="!:Design.RenderToBitmap(System.Drawing.Size)" />).</param>
      <example>
            The following code fragment demonstrates how to override the DrawBackground() method to draw a custom background.
            <code title="Example" description="" lang="CS">
            class MyViewport : Viewport
            {
                  protected override void DrawBackground()
                  {
                      // Draws standard background
                      base.DrawBackground();
             
                      // Draws a white rectangle with a margin of 50 pixel from the viewport's border
                      gl.Begin(gl.QUADS);
             
                      gl.Color3ub(255, 255, 255);
                      gl.Vertex2i(50, 50);
                      gl.Vertex2i(Width - 50, 50);
                      gl.Vertex2i(Width-50, Height -50);
                      gl.Vertex2i(50, Height - 50);
                      
                      gl.End();         
                  }
            }</code><code title="Example2" description="" lang="VB.NET">
            Class MyViewport
                Inherits Viewport
                Protected Overrides Sub DrawBackground()
                    ' Draws standard background
                    MyBase.DrawBackground()
             
                    ' Draws a white rectangle with a margin of 50 pixel from the viewport's border
                    gl.Begin(gl.QUADS)
             
                    gl.Color3ub(255, 255, 255)
                    gl.Vertex2i(50, 50)
                    gl.Vertex2i(Width - 50, 50)
                    gl.Vertex2i(Width - 50, Height - 50)
                    gl.Vertex2i(50, Height - 50)
             
                    gl.[End]()
                End Sub
            End Class
            </code></example>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.DrawOverlay(devDept.Eyeshot.Workspace.DrawSceneParams)">
      <summary>
            Draws overlaying UI elements.
            </summary>
      <param name="data">The draw data</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Double)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Design" /> viewport scene. The image can be scaled even to a poster size one.</summary>
      <param name="drawScale">The bitmap scale</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Double,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Design" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="drawScale">The bitmap scale</param>
      <param name="drawBackground">If false, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Double,System.Double,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Design" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="drawScale">The bitmap scale</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="drawBackground">If false, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.RectangleF,System.Double,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Design" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="rectangle">The rectangle of the viewport to capture in screen coordinates</param>
      <param name="drawScale">The bitmap scale</param>
      <param name="drawBackground">If false, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.RectangleF,System.Double,System.Double,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Design" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="rectangle">The rectangle of the viewport to capture in screen coordinates</param>
      <param name="drawScale">The bitmap scale</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="drawBackground">If false, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
      <remarks>To get a 32-bit image with transparent background set the <see cref="P:devDept.Graphics.BackgroundSettings.StyleMode" /> to <see cref="F:devDept.Graphics.backgroundStyleType.None" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.Size,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Design" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration</param>
      <returns>The 24-bit image.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.Size,System.Double,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Design" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.Size,System.Double,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Design" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <param name="drawUiElements">Draws UI elements like <see cref="P:devDept.Eyeshot.Viewport.ViewCubeIcon" /> and <see cref="P:devDept.Eyeshot.Viewport.ToolBar" /></param>
      <returns>The 24-bit image.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.Rectangle,System.Drawing.Size,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Design" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="rectangle">The rectangle of the viewport to capture in screen coordinates</param>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
    </member>
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Viewport.RenderToTexture(devDept.Graphics.TextureBase,System.Drawing.Rectangle,System.Double,System.Boolean,System.Boolean,System.Boolean)" -->
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.Viewport.RenderToTexture(devDept.Graphics.TextureBase,System.Drawing.Rectangle,System.Double,System.Drawing.Color,System.Boolean,System.Boolean)" -->
    <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.RectangleF,System.Drawing.Size,System.Double,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Design" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="rectangle">The rectangle of the viewport to capture in screen coordinates</param>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <returns>The 24-bit image.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.RectangleF,System.Drawing.Size,System.Double,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Design" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="rectangle">The rectangle of the viewport to capture in screen coordinates</param>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <param name="drawUiElements">Draws UI elements like <see cref="P:devDept.Eyeshot.Viewport.ViewCubeIcon" /> and <see cref="P:devDept.Eyeshot.Viewport.ToolBar" /></param>
      <returns>The 24-bit image.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RenderToBitmap(System.Drawing.RectangleF,System.Drawing.Size,System.Double,System.Drawing.Color,System.Boolean,System.Boolean)">
      <summary>Returns an image of the current <see cref="T:devDept.Eyeshot.Design" /> scene. The image can be scaled even to a poster size one.</summary>
      <param name="rectangle">The rectangle of the viewport to capture in screen coordinates</param>
      <param name="bitmapSize">The size in which the viewport will be fitted.</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="backgroundColor">The color used for the background</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <param name="drawUiElements">Draws UI elements like <see cref="P:devDept.Eyeshot.Viewport.ViewCubeIcon" /> and <see cref="P:devDept.Eyeshot.Viewport.ToolBar" /></param>
      <returns>The 24-bit image.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.WriteToFileRaster(System.Single,System.String,System.Drawing.Imaging.ImageFormat,System.Boolean,System.Boolean)">
      <summary>Saves a raster image of the current viewport scene on disk.</summary>
      <param name="drawScale">The image scale</param>
      <param name="fileName">A string that contains the name of the file to which to save the raster image</param>
      <param name="format">The file format of the raster image</param>
      <param name="drawBackground">If false, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration</param>
      <remarks>The saved file will contain a 24-bit image.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.WriteToFileRaster(System.Single,System.Double,System.String,System.Drawing.Imaging.ImageFormat,System.Boolean,System.Boolean)">
      <summary>Saves a raster image of the current viewport scene on disk.</summary>
      <param name="drawScale">The image scale</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="fileName">A string that contains the name of the file to which to save the raster image</param>
      <param name="format">The file format of the raster image</param>
      <param name="drawBackground">If false, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <remarks>The saved file will contain a 24-bit image.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.CopyToClipboardRaster(System.Single,System.Boolean,System.Boolean)">
      <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
      <param name="drawScale">The image scale</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL only)</param>
      <remarks>The copied image will be a 24-bit bitmap.</remarks>
      <seealso cref="M:devDept.Eyeshot.Viewport.CopyToClipboardRaster(System.Single,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.CopyToClipboardRaster(System.Single,System.Double,System.Boolean,System.Boolean)">
      <summary>
            Copies a raster image of the current viewport scene on the clipboard.
            </summary>
      <param name="drawScale">The image scale</param>
      <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param>
      <param name="drawBackground">If true, the drawing of the background is skipped</param>
      <param name="hdwAcceleration">If true, use the hardware acceleration (OpenGL)</param>
      <remarks>The copied image will be a 24-bit bitmap.</remarks>
      <seealso cref="M:devDept.Eyeshot.Viewport.CopyToClipboardRaster(System.Single,System.Boolean,System.Boolean)" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)">
      <summary>
            Zooms the view of the specified amount.
            </summary>
      <param name="dy">Zoom amount</param>
      <seealso cref="!:RotateCamera(Viewport,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32,System.Boolean)">
      <summary>
            Zooms the view of the specified amount.
            </summary>
      <param name="dy">Zoom amount</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <seealso cref="!:RotateCamera(Viewport,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Drawing.Point,System.Int32)">
      <summary>
            Zooms the view of the specified amount.
            </summary>
      <param name="mousePos">The screen point to keep fixed</param>
      <param name="dy">The zoom amount</param>
      <seealso cref="!:RotateCamera(Viewport,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Drawing.Point,System.Int32,System.Boolean)">
      <summary>
            Zooms the view of the specified amount.
            </summary>
      <param name="mousePos">The screen point to keep fixed</param>
      <param name="dy">The zoom amount</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <seealso cref="!:RotateCamera(Viewport,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32,System.Double)">
      <summary>
            Zooms the view of the specified amount.
            </summary>
      <param name="dy">Zoom amount</param>
      <param name="zoomSpeed">Zoom speed</param>
      <seealso cref="!:RotateCamera(Viewport,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32,System.Double,System.Boolean)">
      <summary>
            Zooms the view of the specified amount.
            </summary>
      <param name="dy">Zoom amount</param>
      <param name="zoomSpeed">Zoom speed</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <seealso cref="!:RotateCamera(Viewport,devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomWindow(System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Zooms to the specified window.
            </summary>
      <param name="p1">Window's diagonal start point in screen coordinates</param>
      <param name="p2">Window's diagonal end point in screen coordinates</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomFit">
      <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomFit(System.Int32)">
      <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
      <param name="margin">Pixels margin from the border</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomFit(System.Boolean,devDept.Eyeshot.Camera.perspectiveFitType)">
      <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
      <param name="selectedOnly">If true, fits only selected entities.</param>
      <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomFit(System.Boolean,devDept.Eyeshot.Camera.perspectiveFitType,System.Int32)">
      <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
      <param name="selectedOnly">If true, fits only selected entities.</param>
      <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
      <param name="margin">Pixels margin from the border</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Boolean,devDept.Eyeshot.Camera.perspectiveFitType)">
      <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
      <param name="entList">The list of entities to be fitted</param>
      <param name="selectedOnly">If true, fits only selected entities.</param>
      <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Boolean,devDept.Eyeshot.Camera.perspectiveFitType,System.Int32,System.Boolean)">
      <summary>
            Fits the entire model in the viewport control's client area.
            </summary>
      <param name="entList">The list of entities to be fitted</param>
      <param name="selectedOnly">If true, fits only selected entities.</param>
      <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
      <param name="margin">Pixels margin from the border</param>
      <param name="fitLabels">If true, fits also the labels</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomFitSelectedLeaves">
      <summary>
            Fits the selected entities, including the ones inside BlockReferences.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomFitSelectedLeaves(System.Int32)">
      <summary>
            Fits the selected entities, including the ones inside BlockReferences.
            </summary>
      <param name="margin">Pixels margin from the border</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomFitSelectedLeaves(System.Int32,devDept.Eyeshot.Camera.perspectiveFitType)">
      <summary>
            Fits the selected entities, including the ones inside BlockReferences.
            </summary>
      <param name="margin">Pixels margin from the border</param>
      <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Workspace.SelectedItem})">
      <summary>
            Fits the selected items.
            </summary>
      <param name="items">The collection of entities to fit</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Workspace.SelectedItem},System.Int32)">
      <summary>
            Fits the selected items.
            </summary>
      <param name="items">The collection of entities to fit</param>
      <param name="margin">Pixels margin from the border</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.ZoomFit(System.Collections.Generic.IList{devDept.Eyeshot.Workspace.SelectedItem},System.Int32,devDept.Eyeshot.Camera.perspectiveFitType)">
      <summary>
            Fits the selected items.
            </summary>
      <param name="items">The collection of entities to fit</param>
      <param name="margin">Pixels margin from the border</param>
      <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Pans the view from one screen point to the other.
            </summary>
      <param name="from">StartPoint point</param>
      <param name="to">End point</param>
      <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)" />
      <seealso cref="!:RotateCamera()" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point,System.Boolean)">
      <summary>
            Pans the view from one screen point to the other.
            </summary>
      <param name="from">StartPoint point</param>
      <param name="to">End point</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)" />
      <seealso cref="!:RotateCamera()" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RotateCamera(System.Int32,System.Int32)">
      <summary>
            Rotates the view of the specified amount.
            </summary>
      <param name="dx">Horizontal rotation amount</param>
      <param name="dy">Vertical rotation amount</param>
      <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
      <remarks>The orientation of the camera is performed with an animation if <see cref="!:Design.AnimateCamera" /> is true</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RotateCamera(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Rotates the view of the specified amount.
            </summary>
      <param name="dx">Horizontal rotation amount</param>
      <param name="dy">Vertical rotation amount</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.OrientCamera(devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Orients the Camera between the two specified points.
            </summary>
      <param name="location">The camera location</param>
      <param name="target">The new camera target</param>
      <remarks>The orientation of the camera is performed with an animation if <see cref="!:Design.AnimateCamera" /> is true</remarks>
      <remarks>The <param nameref="location" /> parameter is used just to determine the direction. The final <see cref="P:devDept.Eyeshot.Camera.Location" /> depends on the <paramref name="target" /> and the <see cref="P:devDept.Eyeshot.Camera.Distance" /></remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RotateCamera(System.Drawing.Point,System.Drawing.Point)">
      <summary>
            Rotates the view simulating the movement between two mouse position.
            </summary>
      <param name="mousePos1">The initial mouse position</param>
      <param name="mousePos2">The final mouse position</param>
      <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
      <remarks>The orientation of the camera is performed with an animation if <see cref="!:Design.AnimateCamera" /> is true</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RotateCamera(System.Drawing.Point,System.Drawing.Point,System.Boolean)">
      <summary>
            Rotates the view simulating the movement between two mouse position.
            </summary>
      <param name="mousePos1">The initial mouse position</param>
      <param name="mousePos2">The final mouse position</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RotateCamera(devDept.Geometry.Vector3D,System.Double,System.Boolean)">
      <summary>
            Rotates the view of the specified amount.
            </summary>
      <param name="axis">Rotation axis</param>
      <param name="rotAngleInDegrees">Rotation amount</param>
      <param name="trackBall">If true, the rotation is applied after the current rotation, else it's applied before</param>
      <remarks>The orientation of the camera is performed with an animation if <see cref="!:Design.AnimateCamera" /> is true</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RotateCamera(devDept.Geometry.Vector3D,System.Double,System.Boolean,System.Boolean)">
      <summary>
            Rotates the view of the specified amount.
            </summary>
      <param name="axis">Rotation axis</param>
      <param name="rotAngleInDegrees">Rotation amount</param>
      <param name="trackBall">If true, the rotation is applied after the current rotation, else it's applied before</param>
      <param name="animate">If true performs an animation</param>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)">
      <summary>
            Rotates the view of the specified amount.
            </summary>
      <param name="last">Previous axis</param>
      <param name="current">Current axis</param>
      <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
      <remarks>The orientation of the camera is performed with an animation if <see cref="!:Design.AnimateCamera" /> is true</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Boolean)">
      <summary>
            Rotates the view of the specified amount.
            </summary>
      <param name="last">Previous axis</param>
      <param name="current">Current axis</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <seealso cref="M:devDept.Eyeshot.Viewport.ZoomCamera(System.Int32)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.RotateCamera(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D)" />
      <seealso cref="M:devDept.Eyeshot.Viewport.PanCamera(System.Drawing.Point,System.Drawing.Point)" />
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Vector3D,System.Boolean,System.Int32,System.Boolean)">
      <summary>Sets the view direction of the camera to the specified direction.</summary>
      <param name="direction">The new camera direction</param>
      <param name="fit">if true fits the scene in the viewport</param>
      <param name="margin">Pixels margin from the border, if <paramref name="fit" /> is true</param>
      <param name="selectedOnly">If <paramref name="fit" /> is true, fits only the selected entities</param>
      <remarks>The orientation of the camera is performed with an animation if <see cref="!:Design.AnimateCamera" /> is true</remarks>
      <remarks>The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Vector3D,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
      <summary>Sets the view direction of the camera to the specified direction.</summary>
      <param name="direction">The new camera direction</param>
      <param name="fit">if true fits the scene in the viewport</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <param name="margin">Pixels margin from the border, if <paramref name="fit" /> is true</param>
      <param name="selectedOnly">If <paramref name="fit" /> is true, fits only the selected entities</param>
      <remarks>The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Boolean,System.Int32,System.Boolean)">
      <summary>Sets the view direction of the camera to the specified direction.</summary>
      <param name="direction">The new camera direction</param>
      <param name="upVector">The camera up vector</param>
      <param name="fit">if true fits the scene in the viewport</param>
      <param name="margin">Pixels margin from the border, if <paramref name="fit" /> is true</param>
      <param name="selectedOnly">If <paramref name="fit" /> is true, fits only the selected entities</param>
      <remarks>The orientation of the camera is performed with an animation if <see cref="!:Design.AnimateCamera" /> is true</remarks>
      <remarks>The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.SetView(devDept.Geometry.Vector3D,devDept.Geometry.Vector3D,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
      <summary>Sets the view direction of the camera to the specified direction.</summary>
      <param name="direction">The new camera direction</param>
      <param name="upVector">The camera up vector</param>
      <param name="fit">if true fits the scene in the viewport</param>
      <param name="animate">If true performs an animation when changing the view</param>
      <param name="margin">Pixels margin from the border, if <paramref name="fit" /> is true</param>
      <param name="selectedOnly">If <paramref name="fit" /> is true, fits only the selected entities</param>
      <param name="entList">When <paramref name="fit" /> is true, the list of entities to fit.</param>
      <remarks>The direction points outside the screen, so the Camera is actually looking in the opposite direction.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Viewport.RotateCamera(System.Drawing.Point)">
      <summary>Sets the view direction as the normal of the plane under the mouse cursor.</summary>
      <param name="mouseLocation">Location of the mouse</param>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Rotate">
      <summary>
            Gets or sets the Rotate settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.CenterOfRotation">
      <summary>
            Gets the current center of rotation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Navigation">
      <summary>
            Gets or sets the Navigation settings for the <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk" /> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly" /> camera navigation modes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Zoom">
      <summary>
            Gets or sets the Zoom settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Viewport.Pan">
      <summary>
            Gets or sets the Pan settings.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ViewportList">
      <summary>
            Class that holds and manages the list of Viewports.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Arc2D">
      <summary>
            Defines a 2D arc.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Arc2D.Center">
      <summary>
            The arc Center.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Arc2D.Radius">
      <summary>
            The arc Radius.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Arc2D.Angle">
      <summary>
            The arc Angle.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Arc2D.#ctor(devDept.Geometry.Point2D,System.Double,System.Double)">
      <summary>
            Arc2D constructor.
            </summary>
      <param name="center">The center.</param>
      <param name="radius">The radius. </param>
      <param name="angleInRadians">The angle. </param>
    </member>
    <member name="M:devDept.Eyeshot.Arc2D.#ctor(devDept.Geometry.Point2D,System.Double,devDept.Geometry.Interval)">
      <summary>
            Arc2D constructor.
            </summary>
      <param name="center">The center.</param>
      <param name="radius">The radius. </param>
      <param name="angle">The angle. </param>
    </member>
    <member name="M:devDept.Eyeshot.Arc2D.#ctor(devDept.Geometry.Point2D,System.Double,System.Double,System.Double)">
      <summary>
            Arc2D constructor.
            </summary>
      <param name="center">The center.</param>
      <param name="radius">The radius. </param>
      <param name="angle">The angle. </param>
    </member>
    <member name="M:devDept.Eyeshot.Arc2D.Clone">
      <summary>
            Creates a deep copy of this 2D arc.
            </summary>
      <returns>The new 2D arc.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Arc2D.Length">
      <summary>
            Gets the 2D arc length.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.PointOnCircle">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesViewSettings">
      <summary>
             Class that holds the settings and the result of hidden lines computation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.EntitiesToHide">
      <summary>
             Gets or sets the list of entities (with the correspondent stack of parents) to hide in the view.
             </summary>
      <remarks>If the entity to hide is at root level, an empty stack of parents need to be passed as input. </remarks>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.PenSilhouette">
      <summary>
            The pen used to draw the silhouettes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.PenEdge">
      <summary>
            The pen used to draw the edges.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.PenWire">
      <summary>
            The pen used to draw the wires.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.PenHiddenSilhouette">
      <summary>
            The pen used to draw the hidden silhouettes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.PenHiddenEdge">
      <summary>
            The pen used to draw the hidden edges.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.PenHiddenWire">
      <summary>
            The pen used to draw the hidden wires.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.BrushTriangle">
      <summary>
            The brush used to draw the triangles of the Text when FillTexts is true.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepHiddenSegments">
      <summary>
            Tells if during the hidden lines computation the hidden segments must be preserved
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepEntityColor">
      <summary>
            If true, keeps the entity color.
            </summary>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesViewSettings.TreatWhiteAsBlack" />
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepEntityLineWeight">
      <summary>
            If true, keeps the entity line weight method.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.IgnoreTransparency">
      <summary>
            If true, treats the transparent entities as if they are opaque, so they will hide the geometry behind.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.TreatWhiteAsBlack">
      <summary>
            If true and <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepEntityColor" /> is also true, treats white entities as if they were black.
            </summary>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepEntityColor" />
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.HiddenLinesViewSettings)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other hiddenLinesViewSettings</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Workspace)">
      <summary>Standard constructor.
            </summary>
      <param name="workspace">The workspace control to process</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
      <remarks>Captures the active viewport using its camera, does not clip the area outside the viewport in orthographic.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace)">
      <summary>Standard constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
      <remarks>Uses the camera viewport, does not clip the area outside the viewport in orthographic.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double)">
      <summary>Standard constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
      <remarks>Uses the camera viewport, does not clip the area outside the viewport in orthographic.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
      <summary>Standard constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="penSilhouette">The pen used to draw silhouettes</param>
      <param name="penEdge">The pen used to draw edges</param>
      <param name="penWire">The pen used to draw wireframe</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
      <remarks>Uses the camera viewport, does not clip the area outside the viewport in orthographic.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean)">
      <summary>Standard constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="penSilhouette">The pen used to draw silhouettes</param>
      <param name="penEdge">The pen used to draw edges</param>
      <param name="penWire">The pen used to draw wireframe</param>
      <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
      <remarks>Uses the camera viewport, does not clip the area outside the viewport in orthographic.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
      <summary>Standard constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="penSilhouette">The pen used to draw silhouettes</param>
      <param name="penEdge">The pen used to draw edges</param>
      <param name="penWire">The pen used to draw wireframe</param>
      <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
      <param name="penHiddenSilhouette">The pen used to draw the hidden silhouettes</param>
      <param name="penHiddenEdge">The pen used to draw the hidden edges</param>
      <param name="penHiddenWire">The pen used to draw the hidden wireframe</param>
      <remarks>Uses the camera viewport, does not clip the area outside the viewport in orthographic.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
      <summary>Standard constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="penSilhouette">The pen used to draw silhouettes</param>
      <param name="penEdge">The pen used to draw edges</param>
      <param name="penWire">The pen used to draw wireframe</param>
      <param name="keepEntityColor">If true, keeps the color of each entity</param>
      <param name="keepEntityLineWeight">If true, keeps the line weight of each entity</param>
      <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
      <param name="penHiddenSilhouette">The pen used to draw the hidden silhouettes</param>
      <param name="penHiddenEdge">The pen used to draw the hidden edges</param>
      <param name="penHiddenWire">The pen used to draw the hidden wireframe</param>
      <remarks>Uses the camera viewport, does not clip the area outside the viewport in orthographic.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Boolean)">
      <summary>Extents Constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="extents">If true fits the design on view, else captures the whole viewport</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
      <summary>Extents Constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="extents">If true fits the design on view, else captures the whole viewport</param>
      <param name="penSilhouette">The pen used to draw silhouettes</param>
      <param name="penEdge">The pen used to draw edges</param>
      <param name="penWire">The pen used to draw wireframe</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean)">
      <summary>Extents Constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="extents">If true fits the design on view, else captures the whole viewport</param>
      <param name="penSilhouette">The pen used to draw silhouettes</param>
      <param name="penEdge">The pen used to draw edges</param>
      <param name="penWire">The pen used to draw wireframe</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
      <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
      <summary>Extents Constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="extents">If true fits the design on view, else captures the whole viewport</param>
      <param name="penSilhouette">The pen used to draw silhouettes</param>
      <param name="penEdge">The pen used to draw edges</param>
      <param name="penWire">The pen used to draw wireframe</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
      <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
      <param name="penHiddenSilhouette">The pen used to draw the hidden silhouettes</param>
      <param name="penHiddenEdge">The pen used to draw the hidden edges</param>
      <param name="penHiddenWire">The pen used to draw the hidden wireframe</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
      <summary>Extents Constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="extents">If true fits the design on view, else captures the whole viewport</param>
      <param name="penSilhouette">The pen used to draw silhouettes</param>
      <param name="penEdge">The pen used to draw edges</param>
      <param name="penWire">The pen used to draw wireframe</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
      <param name="keepEntityColor">If true, keeps the color of each entity</param>
      <param name="keepEntityLineWeight">If true, keeps the line weight of each entity</param>
      <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
      <param name="penHiddenSilhouette">The pen used to draw the hidden silhouettes</param>
      <param name="penHiddenEdge">The pen used to draw the hidden edges</param>
      <param name="penHiddenWire">The pen used to draw the hidden wireframe</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Drawing.RectangleF)">
      <summary>Window mode constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="window">The portion of the viewport to capture in screen coordinates (0 on top)</param>
      <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Drawing.RectangleF,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
      <summary>Window mode constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="window">The portion of the viewport to capture in screen coordinates (0 on top)</param>
      <param name="penSilhouette">The pen used to draw silhouettes</param>
      <param name="penEdge">The pen used to draw edges</param>
      <param name="penWire">The pen used to draw wireframe</param>
      <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Drawing.RectangleF,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean)">
      <summary>Window mode constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="window">The portion of the viewport to capture in screen coordinates (0 on top)</param>
      <param name="penSilhouette">The pen used to draw silhouettes</param>
      <param name="penEdge">The pen used to draw edges</param>
      <param name="penWire">The pen used to draw wireframe</param>
      <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Drawing.RectangleF,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
      <summary>Window mode constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="window">The portion of the viewport to capture in screen coordinates (0 on top)</param>
      <param name="penSilhouette">The pen used to draw silhouettes</param>
      <param name="penEdge">The pen used to draw edges</param>
      <param name="penWire">The pen used to draw wireframe</param>
      <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
      <param name="penHiddenSilhouette">The pen used to draw the hidden silhouettes</param>
      <param name="penHiddenEdge">The pen used to draw the hidden edges</param>
      <param name="penHiddenWire">The pen used to draw the hidden wireframe</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double,System.Drawing.RectangleF,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Pen)">
      <summary>Window mode constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="window">The portion of the viewport to capture in screen coordinates (0 on top)</param>
      <param name="penSilhouette">The pen used to draw silhouettes</param>
      <param name="penEdge">The pen used to draw edges</param>
      <param name="penWire">The pen used to draw wireframe</param>
      <param name="keepEntityColor">If true, keeps the color of each entity</param>
      <param name="keepEntityLineWeight">If true, keeps the line weight of each entity</param>
      <param name="keepHiddenSegments">If true, computes even the hidden edges, silhouettes, wires in separate arrays</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
      <param name="penHiddenSilhouette">The pen used to draw the hidden silhouettes</param>
      <param name="penHiddenEdge">The pen used to draw the hidden edges</param>
      <param name="penHiddenWire">The pen used to draw the hidden wireframe</param>
    </member>
    <member name="F:devDept.Eyeshot.HiddenLinesViewSettings.newOldViewportRatio">
      <summary>
            ConversionFactor between the viewport used internally for the computation and the original viewport.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.HiddenLinesViewSettings.ControlSize">
      <summary>
            The size of the Workspace control.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.Camera">
      <summary>
            Gets the camera.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.ViewBounds">
      <summary>
            Gets the viewport bounds.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.FontAccuracy">
      <summary>
            Gets or sets the font accuracy tolerance.
            </summary>
      <remarks>If 0 and <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.FillTexts" /> is true, the triangles of the texts in the scene are used.</remarks>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesViewSettings.FillTexts" />
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.ViewToWorldConversion">
      <summary>
            Gets the conversion factor from view coordinates to world coordinates.
            </summary>
      <returns>The conversion factor</returns>
      <remarks>This value is meaningful only for <see cref="F:devDept.Graphics.projectionType.Orthographic" /><see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.Camera" /> ProjectionMode.</remarks>
      <seealso cref="!:ScaleLinesToWorld" />
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.FillTexts">
      <summary>
            If true, the texts and dimensions arrow heads are excluded from the hidden lines computation and exported as filled triangles.
            </summary>
      <remarks>The font accuracy is determined by the <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.FontAccuracy" /></remarks>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesViewSettings.FontAccuracy" />
      <seealso cref="P:devDept.Eyeshot.HiddenLinesView.TextStrings" />
    </member>
    <member name="F:devDept.Eyeshot.HiddenLinesViewSettings.ForceTextsAsTriangles">
      <summary>
            Indicates whether all texts must be elaborated as triangles when FillText is set to true.
            </summary>
      <remarks>For internal use.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewSettings.FillRegions">
      <summary>
            If true, regions amd hatches are excluded from the hidden lines computation and exported as filled triangles.
            </summary>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesView.Regions" />
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewSettings.ScaleTrianglesToWorld(System.Collections.Generic.IList{devDept.Eyeshot.SilhoWireAndTriangleData},System.Single)">
      <summary>
            Scales the computed lines to world coordinates and applies an extra scale factor.
            </summary>
      <param name="scale">The extra scale factor applied to the lines once they are converted to world coordinates.</param>
      <remarks>The <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.Camera" /> ProjectionMode must be <see cref="F:devDept.Graphics.projectionType.Orthographic" /> to convert the lines to world.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.ViewCubeIcon">
      <summary>View Cube icon settings. This user interface element will never be added to images and printouts.</summary>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.GetDefaultViewCubeIcon">
      <summary>
            Gets the default <see cref="T:devDept.Eyeshot.ViewCubeIcon" />.
            </summary>
      <returns>The default <see cref="T:devDept.Eyeshot.ViewCubeIcon" />.</returns>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.AnimateCamera">
      <summary>
            When true, animates the camera when changing the orientation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.Lighting">
      <summary>
            When false, the UI element is drawn with a flat color.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.FitAfterViewChange">
      <summary>
            When true, fits the view when the view orientation changes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.ShowRing">
      <summary>
            Gets or sets the visibility of the ring under the view cube.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.ShowShadow">
      <summary>
            Gets or sets the visibility of the shadow under the view cube.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ViewCubeIcon.ViewCubePartEntity">
      <summary>
            Class that represents a portion of the <see cref="T:devDept.Eyeshot.ViewCubeIcon" /></summary>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.ViewCubePartEntity.GetView">
      <summary>
            Gets the view orientation corresponding to the selected part of the viewcube.
            </summary>
      <returns>The corresponding view orientation.</returns>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.FrontRingLabel">
      <summary>
            Gets or sets the label on the ring for front orientation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.BackRingLabel">
      <summary>
            Gets or sets the label on the ring for front orientation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.LeftRingLabel">
      <summary>
            Gets or sets the label on the ring for left orientation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.RightRingLabel">
      <summary>
            Gets or sets the label on the ring for right orientation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.FrontColor">
      <summary>
            Gets or sets the color of the front face.
            </summary>
      <remarks>This value is used only if <see cref="P:devDept.Eyeshot.ViewCubeIcon.Lighting" /> is true, else it depends on the <see cref="P:devDept.Graphics.BackgroundSettings.ColorTheme" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.BackColor">
      <summary>
            Gets or sets the color of the back face.
            </summary>
      <remarks>This value is used only if <see cref="P:devDept.Eyeshot.ViewCubeIcon.Lighting" /> is true, else it depends on the <see cref="P:devDept.Graphics.BackgroundSettings.ColorTheme" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.LeftColor">
      <summary>
            Gets or sets the color of the left face.
            </summary>
      <remarks>This value is used only if <see cref="P:devDept.Eyeshot.ViewCubeIcon.Lighting" /> is true, else it depends on the <see cref="P:devDept.Graphics.BackgroundSettings.ColorTheme" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.RightColor">
      <summary>
            Gets or sets the color of the right face.
            </summary>
      <remarks>This value is used only if <see cref="P:devDept.Eyeshot.ViewCubeIcon.Lighting" /> is true, else it depends on the <see cref="P:devDept.Graphics.BackgroundSettings.ColorTheme" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.TopColor">
      <summary>
            Gets or sets the color of the top face.
            </summary>
      <remarks>This value is used only if <see cref="P:devDept.Eyeshot.ViewCubeIcon.Lighting" /> is true, else it depends on the <see cref="P:devDept.Graphics.BackgroundSettings.ColorTheme" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.BottomColor">
      <summary>
            Gets or sets the color of the bottom face.
            </summary>
      <remarks>This value is used only if <see cref="P:devDept.Eyeshot.ViewCubeIcon.Lighting" /> is true, else it depends on the <see cref="P:devDept.Graphics.BackgroundSettings.ColorTheme" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.FrontRingColor">
      <summary>
            Gets or sets the color of the front ring label.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.BackRingColor">
      <summary>
            Gets or sets the color of the back ring label.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.LeftRingColor">
      <summary>
            Gets or sets the color of the left ring label.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.RightRingColor">
      <summary>
            Gets or sets the color of the left ring label.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.HighlightColor">
      <summary>
            Gets or sets the highlight color.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.FrontText">
      <summary>
            Gets or sets the text of the front face.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.BackText">
      <summary>
            Gets or sets the text of the back face.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.LeftText">
      <summary>
            Gets or sets the text of the left face.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.RightText">
      <summary>
            Gets or sets the text of the right face.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.BottomText">
      <summary>
            Gets or sets the text of the bottom face.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.TopText">
      <summary>
            Gets or sets the text of the top face.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Int32)">
      <summary>Deprecated constructor.</summary>
      <param name="position">Position</param>
      <param name="visible">Visibility status</param>
      <param name="highlightColor">Color of highlight</param>
      <param name="animateCamera">If true, animates the camera when changing the orientation</param>
      <param name="animateCameraDuration">Deprecated, see <see cref="!:Design.AnimateCameraDuration" /></param>
      <param name="frontText">Text of the front face</param>
      <param name="backText">Text of the back face</param>
      <param name="leftText">Text of the left face</param>
      <param name="rightText">Text of the right face</param>
      <param name="topText">Text of the top face</param>
      <param name="bottomText">Text of the bottom face</param>
      <param name="frontRingLabel">Front orientation ring label</param>
      <param name="backRingLabel">Back orientation ring label</param>
      <param name="leftRingLabel">Left orientation ring label</param>
      <param name="rightRingLabel">Right orientation ring label</param>
      <param name="showRing">If true, shows the ring under the view cube</param>
      <param name="font">The font used to draw the texts on the cube faces and the labels on the ring</param>
      <param name="textColor">The color used to draw the texts on the cube faces</param>
      <param name="size">The size in pixels</param>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Int32,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="position">Position</param>
      <param name="visible">Visibility status</param>
      <param name="highlightColor">Color of highlight</param>
      <param name="animateCamera">If true, animates the camera when changing the orientation</param>
      <param name="animateCameraDuration">Deprecated, see <see cref="!:Design.AnimateCameraDuration" /></param>
      <param name="frontText">Text of the front face</param>
      <param name="backText">Text of the back face</param>
      <param name="leftText">Text of the left face</param>
      <param name="rightText">Text of the right face</param>
      <param name="topText">Text of the top face</param>
      <param name="bottomText">Text of the bottom face</param>
      <param name="frontRingLabel">Front orientation ring label</param>
      <param name="backRingLabel">Back orientation ring label</param>
      <param name="leftRingLabel">Left orientation ring label</param>
      <param name="rightRingLabel">Right orientation ring label</param>
      <param name="showRing">If true, shows the ring under the view cube</param>
      <param name="font">The font used to draw the texts on the cube faces and the labels on the ring</param>
      <param name="textColor">The color used to draw the texts on the cube faces</param>
      <param name="size">The size in pixels</param>
      <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="position">Position</param>
      <param name="visible">Visibility status</param>
      <param name="highlightColor">Color of highlight</param>
      <param name="animateCamera">If true, animates the camera when changing the orientation</param>
      <param name="animateCameraDuration">Deprecated, see <see cref="!:Design.AnimateCameraDuration" /></param>
      <param name="frontText">Text of the front face</param>
      <param name="backText">Text of the back face</param>
      <param name="leftText">Text of the left face</param>
      <param name="rightText">Text of the right face</param>
      <param name="topText">Text of the top face</param>
      <param name="bottomText">Text of the bottom face</param>
      <param name="frontRingLabel">Front orientation ring label</param>
      <param name="backRingLabel">Back orientation ring label</param>
      <param name="leftRingLabel">Left orientation ring label</param>
      <param name="rightRingLabel">Right orientation ring label</param>
      <param name="showRing">If true, shows the ring under the view cube</param>
      <param name="font">The font used to draw the texts on the cube faces and the labels on the ring</param>
      <param name="textColor">The color used to draw the texts on the cube faces</param>
      <param name="size">The size in pixels</param>
      <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
      <param name="enabled">The enabled status</param>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="position">Position</param>
      <param name="visible">Visibility status</param>
      <param name="highlightColor">Color of highlight</param>
      <param name="animateCamera">If true, animates the camera when changing the orientation</param>
      <param name="animateCameraDuration">Deprecated, see <see cref="!:Design.AnimateCameraDuration" /></param>
      <param name="frontText">Text of the front face</param>
      <param name="backText">Text of the back face</param>
      <param name="leftText">Text of the left face</param>
      <param name="rightText">Text of the right face</param>
      <param name="topText">Text of the top face</param>
      <param name="bottomText">Text of the bottom face</param>
      <param name="frontColor">The color of the front face</param>
      <param name="backColor">The color of the back face</param>
      <param name="leftColor">The color of the left face</param>
      <param name="rightColor">The color of the right face</param>
      <param name="topColor">The color of the top face</param>
      <param name="bottomColor">The color of the bottom face</param>
      <param name="frontRingLabel">Front orientation ring label</param>
      <param name="backRingLabel">Back orientation ring label</param>
      <param name="leftRingLabel">Left orientation ring label</param>
      <param name="rightRingLabel">Right orientation ring label</param>
      <param name="showRing">If true, shows the ring under the view cube</param>
      <param name="font">The font used to draw the texts on the cube faces and the labels on the ring</param>
      <param name="textColor">The color used to draw the texts on the cube faces</param>
      <param name="edgeColor">The color used to draw the cube edges</param>
      <param name="size">The size in pixels</param>
      <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
      <param name="enabled">The enabled status</param>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource)">
      <summary>Deprecated constructor.</summary>
      <param name="position">Position</param>
      <param name="visible">Visibility status</param>
      <param name="highlightColor">Color of highlight</param>
      <param name="animateCamera">If true, animates the camera when changing the orientation</param>
      <param name="animateCameraDuration">Deprecated, see <see cref="!:Design.AnimateCameraDuration" /></param>
      <param name="frontText">Text of the front face</param>
      <param name="backText">Text of the back face</param>
      <param name="leftText">Text of the left face</param>
      <param name="rightText">Text of the right face</param>
      <param name="topText">Text of the top face</param>
      <param name="bottomText">Text of the bottom face</param>
      <param name="frontColor">The color of the front face</param>
      <param name="backColor">The color of the back face</param>
      <param name="leftColor">The color of the left face</param>
      <param name="rightColor">The color of the right face</param>
      <param name="topColor">The color of the top face</param>
      <param name="bottomColor">The color of the bottom face</param>
      <param name="frontRingLabel">Front orientation ring label</param>
      <param name="backRingLabel">Back orientation ring label</param>
      <param name="leftRingLabel">Left orientation ring label</param>
      <param name="rightRingLabel">Right orientation ring label</param>
      <param name="showRing">If true, shows the ring under the view cube</param>
      <param name="font">The font used to draw the texts on the cube faces and the labels on the ring</param>
      <param name="textColor">The color used to draw the texts on the cube faces</param>
      <param name="edgeColor">The color used to draw the cube edges</param>
      <param name="size">The size in pixels</param>
      <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
      <param name="enabled">The enabled status</param>
      <param name="frontImage">The front face image</param>
      <param name="backImage">The back face image</param>
      <param name="leftImage">The left face image</param>
      <param name="rightImage">The right face image</param>
      <param name="topImage">The top face image</param>
      <param name="bottomImage">The bottom face image</param>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="position">Position</param>
      <param name="visible">Visibility status</param>
      <param name="highlightColor">Color of highlight</param>
      <param name="animateCamera">If true, animates the camera when changing the orientation</param>
      <param name="animateCameraDuration">Deprecated, see <see cref="!:Design.AnimateCameraDuration" /></param>
      <param name="frontText">Text of the front face</param>
      <param name="backText">Text of the back face</param>
      <param name="leftText">Text of the left face</param>
      <param name="rightText">Text of the right face</param>
      <param name="topText">Text of the top face</param>
      <param name="bottomText">Text of the bottom face</param>
      <param name="frontColor">The color of the front face</param>
      <param name="backColor">The color of the back face</param>
      <param name="leftColor">The color of the left face</param>
      <param name="rightColor">The color of the right face</param>
      <param name="topColor">The color of the top face</param>
      <param name="bottomColor">The color of the bottom face</param>
      <param name="frontRingLabel">Front orientation ring label</param>
      <param name="backRingLabel">Back orientation ring label</param>
      <param name="leftRingLabel">Left orientation ring label</param>
      <param name="rightRingLabel">Right orientation ring label</param>
      <param name="showRing">If true, shows the ring under the view cube</param>
      <param name="font">The font used to draw the texts on the cube faces and the labels on the ring</param>
      <param name="textColor">The color used to draw the texts on the cube faces</param>
      <param name="edgeColor">The color used to draw the cube edges</param>
      <param name="size">The size in pixels</param>
      <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
      <param name="enabled">The enabled status</param>
      <param name="frontImage">The front face image</param>
      <param name="backImage">The back face image</param>
      <param name="leftImage">The left face image</param>
      <param name="rightImage">The right face image</param>
      <param name="topImage">The top face image</param>
      <param name="bottomImage">The bottom face image</param>
      <param name="lighting">The lighting status</param>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="position">Position</param>
      <param name="visible">Visibility status</param>
      <param name="highlightColor">Color of highlight</param>
      <param name="animateCamera">If true, animates the camera when changing the orientation</param>
      <param name="frontText">Text of the front face</param>
      <param name="backText">Text of the back face</param>
      <param name="leftText">Text of the left face</param>
      <param name="rightText">Text of the right face</param>
      <param name="topText">Text of the top face</param>
      <param name="bottomText">Text of the bottom face</param>
      <param name="frontColor">The color of the front face</param>
      <param name="backColor">The color of the back face</param>
      <param name="leftColor">The color of the left face</param>
      <param name="rightColor">The color of the right face</param>
      <param name="topColor">The color of the top face</param>
      <param name="bottomColor">The color of the bottom face</param>
      <param name="frontRingLabel">Front orientation ring label</param>
      <param name="backRingLabel">Back orientation ring label</param>
      <param name="leftRingLabel">Left orientation ring label</param>
      <param name="rightRingLabel">Right orientation ring label</param>
      <param name="showRing">If true, shows the ring under the view cube</param>
      <param name="font">The font used to draw the texts on the cube faces and the labels on the ring</param>
      <param name="textColor">The color used to draw the texts on the cube faces</param>
      <param name="edgeColor">The color used to draw the cube edges</param>
      <param name="size">The size in pixels</param>
      <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
      <param name="enabled">The enabled status</param>
      <param name="frontImage">The front face image</param>
      <param name="backImage">The back face image</param>
      <param name="leftImage">The left face image</param>
      <param name="rightImage">The right face image</param>
      <param name="topImage">The top face image</param>
      <param name="bottomImage">The bottom face image</param>
      <param name="lighting">The lighting status</param>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Boolean,devDept.Geometry.Quaternion)">
      <summary>Deprecated Constructor.</summary>
      <param name="position">Position</param>
      <param name="visible">Visibility status</param>
      <param name="highlightColor">Color of highlight</param>
      <param name="animateCamera">If true, animates the camera when changing the orientation</param>
      <param name="frontText">Text of the front face</param>
      <param name="backText">Text of the back face</param>
      <param name="leftText">Text of the left face</param>
      <param name="rightText">Text of the right face</param>
      <param name="topText">Text of the top face</param>
      <param name="bottomText">Text of the bottom face</param>
      <param name="frontColor">The color of the front face</param>
      <param name="backColor">The color of the back face</param>
      <param name="leftColor">The color of the left face</param>
      <param name="rightColor">The color of the right face</param>
      <param name="topColor">The color of the top face</param>
      <param name="bottomColor">The color of the bottom face</param>
      <param name="frontRingLabel">Front orientation ring label</param>
      <param name="backRingLabel">Back orientation ring label</param>
      <param name="leftRingLabel">Left orientation ring label</param>
      <param name="rightRingLabel">Right orientation ring label</param>
      <param name="showRing">If true, shows the ring under the view cube</param>
      <param name="font">The font used to draw the texts on the cube faces and the labels on the ring</param>
      <param name="textColor">The color used to draw the texts on the cube faces</param>
      <param name="edgeColor">The color used to draw the cube edges</param>
      <param name="size">The size in pixels</param>
      <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
      <param name="enabled">The enabled status</param>
      <param name="frontImage">The front face image</param>
      <param name="backImage">The back face image</param>
      <param name="leftImage">The left face image</param>
      <param name="rightImage">The right face image</param>
      <param name="topImage">The top face image</param>
      <param name="bottomImage">The bottom face image</param>
      <param name="lighting">The lighting status</param>
      <param name="initialRotation">Initial rotation of the viewcube</param>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="position">Position</param>
      <param name="visible">Visibility status</param>
      <param name="highlightColor">Color of highlight</param>
      <param name="animateCamera">If true, animates the camera when changing the orientation</param>
      <param name="frontText">Text of the front face</param>
      <param name="backText">Text of the back face</param>
      <param name="leftText">Text of the left face</param>
      <param name="rightText">Text of the right face</param>
      <param name="topText">Text of the top face</param>
      <param name="bottomText">Text of the bottom face</param>
      <param name="frontColor">The color of the front face</param>
      <param name="backColor">The color of the back face</param>
      <param name="leftColor">The color of the left face</param>
      <param name="rightColor">The color of the right face</param>
      <param name="topColor">The color of the top face</param>
      <param name="bottomColor">The color of the bottom face</param>
      <param name="frontRingLabel">Front orientation ring label</param>
      <param name="backRingLabel">Back orientation ring label</param>
      <param name="leftRingLabel">Left orientation ring label</param>
      <param name="rightRingLabel">Right orientation ring label</param>
      <param name="showRing">If true, shows the ring under the view cube</param>
      <param name="textColor">The color used to draw the texts on the cube faces</param>
      <param name="edgeColor">The color used to draw the cube edges</param>
      <param name="size">The size in pixels</param>
      <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
      <param name="enabled">The enabled status</param>
      <param name="frontImage">The front face image</param>
      <param name="backImage">The back face image</param>
      <param name="leftImage">The left face image</param>
      <param name="rightImage">The right face image</param>
      <param name="topImage">The top face image</param>
      <param name="bottomImage">The bottom face image</param>
      <param name="lighting">The lighting status</param>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Boolean,devDept.Geometry.Quaternion,System.Boolean)">
      <summary>Constructor for WinForms designer.</summary>
      <param name="position">Position</param>
      <param name="visible">Visibility status</param>
      <param name="highlightColor">Color of highlight</param>
      <param name="animateCamera">If true, animates the camera when changing the orientation</param>
      <param name="frontText">Text of the front face</param>
      <param name="backText">Text of the back face</param>
      <param name="leftText">Text of the left face</param>
      <param name="rightText">Text of the right face</param>
      <param name="topText">Text of the top face</param>
      <param name="bottomText">Text of the bottom face</param>
      <param name="frontColor">The color of the front face</param>
      <param name="backColor">The color of the back face</param>
      <param name="leftColor">The color of the left face</param>
      <param name="rightColor">The color of the right face</param>
      <param name="topColor">The color of the top face</param>
      <param name="bottomColor">The color of the bottom face</param>
      <param name="frontRingLabel">Front orientation ring label</param>
      <param name="backRingLabel">Back orientation ring label</param>
      <param name="leftRingLabel">Left orientation ring label</param>
      <param name="rightRingLabel">Right orientation ring label</param>
      <param name="showRing">If true, shows the ring under the view cube</param>
      <param name="font">The font used to draw the texts on the cube faces and the labels on the ring</param>
      <param name="textColor">The color used to draw the texts on the cube faces</param>
      <param name="edgeColor">The color used to draw the cube edges</param>
      <param name="size">The size in pixels</param>
      <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
      <param name="enabled">The enabled status</param>
      <param name="frontImage">The front face image</param>
      <param name="backImage">The back face image</param>
      <param name="leftImage">The left face image</param>
      <param name="rightImage">The right face image</param>
      <param name="topImage">The top face image</param>
      <param name="bottomImage">The bottom face image</param>
      <param name="lighting">The lighting status</param>
      <param name="initialRotation">Initial rotation of the viewcube</param>
      <param name="showShadow">If true, shows the shadow under the view cube</param>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.coordinateSystemPositionType,System.Boolean,System.Drawing.Color,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Boolean,System.Boolean,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Boolean,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="position">Position</param>
      <param name="visible">Visibility status</param>
      <param name="highlightColor">Color of highlight</param>
      <param name="animateCamera">If true, animates the camera when changing the orientation</param>
      <param name="frontText">Text of the front face</param>
      <param name="backText">Text of the back face</param>
      <param name="leftText">Text of the left face</param>
      <param name="rightText">Text of the right face</param>
      <param name="topText">Text of the top face</param>
      <param name="bottomText">Text of the bottom face</param>
      <param name="frontColor">The color of the front face</param>
      <param name="backColor">The color of the back face</param>
      <param name="leftColor">The color of the left face</param>
      <param name="rightColor">The color of the right face</param>
      <param name="topColor">The color of the top face</param>
      <param name="bottomColor">The color of the bottom face</param>
      <param name="frontRingLabel">Front orientation ring label</param>
      <param name="backRingLabel">Back orientation ring label</param>
      <param name="leftRingLabel">Left orientation ring label</param>
      <param name="rightRingLabel">Right orientation ring label</param>
      <param name="showRing">If true, shows the ring under the view cube</param>
      <param name="textColor">The color used to draw the texts on the cube faces</param>
      <param name="edgeColor">The color used to draw the cube edges</param>
      <param name="size">The size in pixels</param>
      <param name="fitAfterViewChange">If true, fits the view when the view orientation changes</param>
      <param name="enabled">The enabled status</param>
      <param name="frontImage">The front face image</param>
      <param name="backImage">The back face image</param>
      <param name="leftImage">The left face image</param>
      <param name="rightImage">The right face image</param>
      <param name="topImage">The top face image</param>
      <param name="bottomImage">The bottom face image</param>
      <param name="lighting">The lighting status</param>
      <param name="showShadow">If true, shows the shadow under the view cube</param>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.#ctor(devDept.Eyeshot.ViewCubeIcon)">
      <summary>
            Copy constructor.
            </summary>
      <param name="other">The ViewCubeIcon to copy data from</param>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.TextColor">
      <summary>
            Gets or sets the color of the texts on the cube faces.
            </summary>
      <remarks>This value is used only if <see cref="P:devDept.Eyeshot.ViewCubeIcon.Lighting" /> is true, else it depends on the <see cref="P:devDept.Graphics.BackgroundSettings.ColorTheme" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.EdgeColor">
      <summary>
            Gets or sets the edge color.
            </summary>
      <remarks>In use when <see cref="P:devDept.Eyeshot.ViewCubeIcon.Lighting" /> is false only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.FontFamily">
      <summary>
            Gets or sets the Font Family used to draw the texts on the cube faces and the labels on the ring
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.InitialRotation">
      <summary>
            Gets or sets the initial rotation of the ViewCubeIcon.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.Dispose">
      <summary>
            Releases unmanaged resources.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.GetProjectionMatrix(devDept.Eyeshot.Workspace.DrawSceneParams,System.Double)">
      <summary>
            Gets the projection matrix.
            </summary>
      <param name="data">The draw data</param>
      <param name="dist">The distance of the camera from the viewcube</param>
      <returns>The projection matrix</returns>
      <remarks>Override to set an orthographic projection.</remarks>
      <example>
            Set an orthographic projection.
            	<code lang="CS" title="[New Example]">
            return Camera.myOrtho(myParams.RenderContext, -80, 80, -80, 80, dist - 150, dist + 150);
            </code><code lang="VB" title="[New Example]">
            return Camera.myOrtho(myParams.RenderContext, -80, 80, -80, 80, dist - 150, dist + 150)
            </code></example>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.GetPosition(devDept.Eyeshot.Viewport,System.Int32[],System.Int32@,System.Int32@)">
      <summary>
            Gets the position of the ViewCube in camera viewport coordinates (0 on bottom).
            </summary>
      <param name="viewport">The viewport</param>
      <param name="viewFrame">The viewport bounds</param>
      <param name="x">The x position in camera viewport coordinates&gt;</param>
      <param name="y">The y position in camera viewport coordinates</param>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.Draw(devDept.Eyeshot.RenderParams)">
      <summary>
            Draws the origin symbol.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.Enabled">
      <summary>
            Gets or sets the enabled status.
            </summary>
      <remarks>If false and <see cref="!:ViewCubeIcon.Visible" /> is true, the ViewCubeICon is drawn with transparency and is not selectable.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.Contains(System.Drawing.Point)">
      <summary>
            Tells if a point in screen coordinates is over the ViewCube.
            </summary>
      <param name="mousePos">Mouse cursor position (zero on top)</param>
      <returns>True if the point is over the ViewCube rectangle, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.OnMouseMove(System.Windows.Input.MouseEventArgs,devDept.Eyeshot.Viewport,System.Boolean)">
      <summary>
            Occurs when the mouse moves over the ViewCubeIcon.
            </summary>
      <param name="e">The mouse event argument in screen coordinates</param>
      <param name="viewport">The viewport</param>
      <param name="overButtons">Tells if the mouse is over a <see cref="T:devDept.Eyeshot.ToolBarButton" /> or <see cref="T:devDept.Eyeshot.ProgressBar" /> button</param>
      <returns>True if the selected part of the ViewCubeIcon changes.</returns>
      <remarks>Override this method and return false to disable VewCubeIcon selection.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.ViewCubeIcon.ViewCubeClickEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:devDept.Eyeshot.ViewCubeIcon.Click" /> event.
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">A <see cref="T:devDept.Eyeshot.Workspace.ViewChangedEventArgs" /> object that contains the event data</param>
    </member>
    <member name="E:devDept.Eyeshot.ViewCubeIcon.Click">
      <summary>
            Occurs when the <see cref="T:devDept.Eyeshot.ViewCubeIcon" /> is clicked.
            </summary>
      <remarks>In the event handler set <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> = true in order to prevent the automatic view change.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.SetView(devDept.Eyeshot.Viewport,devDept.Eyeshot.viewType)">
      <summary>
            Sets the viewport orientation.
            </summary>
      <param name="viewport">The viewport</param>
      <param name="viewOrientation">The view orientation</param>
      <remarks>This method is called after clicking on the ViewCubeIcon, only if the <see cref="E:devDept.Eyeshot.ViewCubeIcon.Click" /> event was not subscribed.</remarks>
      <seealso cref="M:devDept.Eyeshot.Viewport.SetView(devDept.Eyeshot.viewType)" />
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.Position">
      <summary>
            The position on sceeen.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.FrontImage">
      <summary>
            Gets or sets the front face image.
            </summary>
      <remarks>If null, the <see cref="P:devDept.Eyeshot.ViewCubeIcon.FrontText" /> is used instead.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.BackImage">
      <summary>
            Gets or sets the left face image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.LeftImage">
      <summary>
            Gets or sets the left face image.
            </summary>
      <remarks>
            If null, the <see cref="P:devDept.Eyeshot.ViewCubeIcon.LeftText" /> is used instead.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.RightImage">
      <summary>
            Gets or sets the top face image.
            </summary>
      <remarks>If null, the <see cref="P:devDept.Eyeshot.ViewCubeIcon.TopText" /> is used instead.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.TopImage">
      <summary>
            Gets or sets the top face image.
            </summary>
      <remarks>If null, the <see cref="P:devDept.Eyeshot.ViewCubeIcon.TopText" /> is used instead.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ViewCubeIcon.BottomImage">
      <summary>
            Gets or sets the bottom face image.
            </summary>
      <remarks>If null, the <see cref="P:devDept.Eyeshot.ViewCubeIcon.BottomText" /> is used instead.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.ResetImages">
      <summary>
            Resets the images for all the faces.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ViewCubeIcon.SetImages(System.Windows.Media.ImageSource[])">
      <summary>
            Sets the images for all the faces.
            </summary>
      <param name="images">The array containing the images for each face (Front, Back, Top, Bottom, Left, Right), can be null/Nothing.</param>
      <remarks>If the input array is null/Nothing then all the images will be set to null/Nothing, otherwise it must contain 6 elements. Each element of the array can be null/Nothing.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.BorderSettings">
      <summary>
            Viewport border settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.BorderSettings.Color">
      <summary>
            Gets or sets the color.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.BorderSettings.Visible">
      <summary>
            Gets or sets visibility status.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.BorderSettings.CornerRadius">
      <summary>
            Gets or sets the corner radius.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.BorderSettings.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.BorderSettings.#ctor(System.Drawing.Color,System.Int32,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="color">Border's color</param>
      <param name="cornerRadius">Border's corner radius</param>
      <param name="visible">Border's visibility status</param>
    </member>
    <member name="F:devDept.Eyeshot.BorderSettings.PropertyChangedEvent">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.BorderSettings.PropertyChanged">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.BorderSettings.RaisePropertyChangedEvent(System.Object,System.Windows.DependencyProperty)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.BorderSettings.ObservableCollectionPropertyChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.EnumDescription">
      <summary>
            EnumConverter supporting System.ComponentModel.DescriptionAttribute
            </summary>
      <exclude />
      <excludetoc />
    </member>
    <member name="M:devDept.Eyeshot.EnumDescription.GetDescription(System.Enum)">
      <summary>
            Gets Enum Value's Description Attribute
            </summary>
      <param name="value">The value you want the description attribute for</param>
      <returns>The description, if any, else it's .ToString()</returns>
    </member>
    <member name="M:devDept.Eyeshot.EnumDescription.GetDescription(System.Type,System.String)">
      <summary>
            Gets the description for certaing named value in an Enumeration
            </summary>
      <param name="value">The type of the Enumeration</param>
      <param name="name">The name of the Enumeration value</param>
      <returns>The description, if any, else the passed name</returns>
    </member>
    <member name="M:devDept.Eyeshot.EnumDescription.GetValue(System.Type,System.String)">
      <summary>
            Gets the value of an Enum, based on it's Description Attribute or named value
            </summary>
      <param name="value">The Enum type</param>
      <param name="description">The description or name of the element</param>
      <returns>The value, or the passed in description, if it was not found</returns>
    </member>
    <member name="T:devDept.Eyeshot.mouseButtonsZPR">
      <summary>
            Mouse buttons and their combinations for Zoom / Pan / Rotate.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.mouseButtonsZPR.None">
      <summary>
            None mouse button.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.mouseButtonsZPR.Left">
      <summary>
            Left mouse button.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.mouseButtonsZPR.Right">
      <summary>
            Right mouse button.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.mouseButtonsZPR.Middle">
      <summary>
            Middle mouse button.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.mouseButtonsZPR.XButton1">
      <summary>
            Xbutton1.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.mouseButtonsZPR.XButton2">
      <summary>
            XButton2.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.mouseButtonsZPR.LeftRight">
      <summary>
            Left + Right mouse buttons.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.mouseButtonsZPR.LeftMiddle">
      <summary>
            Left + Middle mouse buttons.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.mouseButtonsZPR.MiddleRight">
      <summary>
            Middle + Right mouse buttons.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.mouseButtonsZPR.LeftMiddleRight">
      <summary>
            Left + Middle + Right mouse buttons.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.modifierKeys">
      <summary>
            ModifierKeys and their combinations.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.modifierKeys.None">
      <summary>
            None key.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.modifierKeys.Shift">
      <summary>
            Shift key.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.modifierKeys.Alt">
      <summary>
            Alt key.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.modifierKeys.Ctrl">
      <summary>
            Ctrl key.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.modifierKeys.CtrlAlt">
      <summary>
            Ctrl + Alt keys.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.modifierKeys.CtrlShift">
      <summary>
            Ctrl + Shift keys.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.modifierKeys.ShiftAlt">
      <summary>
            Ctrl + Alt keys.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.modifierKeys.CtrlShiftAlt">
      <summary>
            Ctrl + Shift + Alt keys.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.cursorType">
      <summary>
            Cursor types
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.Default">
      <summary>
            The default cursor, which is usually an arrow cursor.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.ZoomWindow">
      <summary>
            The cursor that appears when the zoom window action mode is enabled.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.Zoom">
      <summary>
            The cursor that appears when the zoom action mode is enabled.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.Pan">
      <summary>
            The cursor that appears when the pan action mode is enabled.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.Rotate">
      <summary>
            The cursor that appears when the rotate action mode is enabled.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.Pick">
      <summary>
            The cursor that appears when the selection by pick is enabled.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.Cross">
      <summary>
            The crosshair cursor.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.Arrow">
      <summary>
            The arrow cursor.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.Hand">
      <summary>
            The hand cursor.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.Help">
      <summary>
            The Help cursor, which is a combination of an arrow and a question mark.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.AppStarting">
      <summary>
            The cursor that appears when an application starts.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.IBeam">
      <summary>
            The I-beam cursor, which is used to show where the text cursor appears when the mouse is clicked.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.No">
      <summary>
            The cursor that indicates that a particular region is invalid for the current operation.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.UpArrow">
      <summary>
            The up arrow cursor, typically used to identify an insertion point.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.Wait">
      <summary>
            The wait cursor, typically an hourglass shape.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.PanEast">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally to the right.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.ScrollE">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally to the right.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.PanNE">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically upward and to the right.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.ScrollNE">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically upward and to the right.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.PanNorth">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling vertically in an upward direction.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.ScrollN">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling vertically in an upward direction.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.PanNW">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically upward and to the left.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.ScrollNW">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically upward and to the left.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.PanSE">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically downward and to the right.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.ScrollSE">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically downward and to the right.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.PanSouth">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling vertically in a downward direction.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.ScrollSouth">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling vertically in a downward direction.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.PanSW">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically downward and to the left.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.ScrollSW">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally and vertically downward and to the left.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.PanWest">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally to the left.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.ScrollW">
      <summary>
            The cursor that appears during wheel operations when the mouse is moving and the window is scrolling horizontally to the left.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.SizeAll">
      <summary>
            The four-headed sizing cursor, which consists of four joined arrows that point north, south, east, and west.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.SizeNESW">
      <summary>
            The two-headed diagonal (northeast/southwest) sizing cursor.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.SizeNS">
      <summary>
            The two-headed vertical (north/south) sizing cursor.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.SizeNWSE">
      <summary>
            The two-headed diagonal (northwest/southeast) sizing cursor.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.cursorType.SizeWE">
      <summary>
            The two-headed horizontal (west/east) sizing cursor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MouseButton">
      <summary>MouseButton class.</summary>
    </member>
    <member name="M:devDept.Eyeshot.MouseButton.#ctor(devDept.Eyeshot.mouseButtonsZPR,devDept.Eyeshot.modifierKeys)">
      <summary>Constructor.
            </summary>
      <param name="button">The mouse button</param>
      <param name="modifierKey">The modifier key</param>
    </member>
    <member name="P:devDept.Eyeshot.MouseButton.Button">
      <summary>
            The mouse button.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MouseButton.ModifierKey">
      <summary>
            The modifier key.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MouseButton.ToString">
      <summary>
            Converts this MouseButton to a human readable string.
            </summary>
      <returns>A string that represents this MouseButton.</returns>
    </member>
    <member name="T:devDept.Eyeshot.MovementSettingsBase">
      <summary>
            Base class for Zoom/Pan/Rotate settings.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MovementSettingsBase.#ctor(devDept.Eyeshot.MouseButton,System.Int32,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="mouseButton">Mouse button and modifier key</param>
      <param name="keysStep">Arrow keys step (in pixels)</param>
      <param name="enabled">A value indicating whether the movement is enabled</param>
    </member>
    <member name="P:devDept.Eyeshot.MovementSettingsBase.MouseButton">
      <summary>
            Mouse button and modifier key.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MovementSettingsBase.KeysStep">
      <summary>
            Gets or sets the movement by keys step (in pixels).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MovementSettingsBase.Enabled">
      <summary>
            Gets or sets a value indicating whether the command is enabled.
            </summary>
      <remarks>For rotate command it can be used to avoid accidental rotations in 2D views.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.RotateSettings">
      <summary>Rotate command settings.</summary>
    </member>
    <member name="P:devDept.Eyeshot.RotateSettings.KeysStep">
      <summary>
            Gets or sets the rotate by arrow keys step (in degrees).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.RotateSettings.Speed">
      <summary>
            Gets or sets the rotation speed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.RotateSettings.RotationMode">
      <summary>
            Gets or sets a value indicating whether rotation around model Z axis is preferred.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.RotateSettings.RotationCenter">
      <summary>
            Rotation center mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.RotateSettings.Center">
      <summary>
            Rotation center point (used only when <see cref="P:devDept.Eyeshot.RotateSettings.RotationCenter" /> is <see cref="F:devDept.Eyeshot.rotationCenterType.Point" />).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.RotateSettings.ShowCenter">
      <summary>
            Gets or sets the rotation center visibility during the rotation.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.RotateSettings.#ctor(devDept.Eyeshot.MouseButton,System.Double,System.Boolean,System.Double,devDept.Eyeshot.rotationType,devDept.Eyeshot.rotationCenterType)">
      <summary>Standard constructor.</summary>
      <param name="mouseButton">Rotate mouse button and modifier key</param>
      <param name="step">Rotate by arrow keys step in degrees</param>
      <param name="enabled">False to disable view rotation</param>
      <param name="speed">Rotate speed</param>
      <param name="rotationMode">Rotation mode</param>
      <param name="rotationCenter">Rotation center mode</param>
    </member>
    <member name="M:devDept.Eyeshot.RotateSettings.#ctor(devDept.Eyeshot.MouseButton,System.Double,System.Boolean,System.Double,devDept.Eyeshot.rotationType,devDept.Eyeshot.rotationCenterType,devDept.Geometry.Point3D)">
      <summary>Standard constructor.</summary>
      <param name="mouseButton">Rotate mouse button and modifier key</param>
      <param name="step">Rotate by arrow keys step in degrees</param>
      <param name="enabled">False to disable view rotation</param>
      <param name="speed">Rotate speed</param>
      <param name="rotationMode">Rotation mode</param>
      <param name="rotationCenter">Rotation center mode</param>
      <param name="center">Rotation center point</param>
    </member>
    <member name="M:devDept.Eyeshot.RotateSettings.#ctor(devDept.Eyeshot.MouseButton,System.Double,System.Boolean,System.Double,devDept.Eyeshot.rotationType,devDept.Eyeshot.rotationCenterType,devDept.Geometry.Point3D,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="mouseButton">Rotate mouse button and modifier key</param>
      <param name="step">Rotate by arrow keys step in degrees</param>
      <param name="enabled">False to disable view rotation</param>
      <param name="speed">Rotate speed</param>
      <param name="rotationMode">Rotation mode</param>
      <param name="rotationCenter">Rotation center mode</param>
      <param name="center">Rotation center point</param>
    </member>
    <member name="T:devDept.Eyeshot.ShortcutKeysSettings">
      <summary>
            Keyboard shortcut settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.SelectAll">
      <summary>
            Gets or sets the select all shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.InvertSelection">
      <summary>
            Gets or sets the invert selection shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.DeleteSelection">
      <summary>
            Gets or sets the delete selection shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.ZoomFit">
      <summary>
            Gets or sets the zoom fit shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.CopySelection">
      <summary>
            Gets or sets the copy selection shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.PasteSelection">
      <summary>
            Gets or sets the paste selection shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.CutSelection">
      <summary>
            Gets or sets the cut selection shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.GroupSelection">
      <summary>
            Gets or sets the group selection shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.UngroupSelection">
      <summary>
            Gets or sets the ungroup selection shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.ZoomIn">
      <summary>
            Gets or sets the zoom in shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.ZoomOut">
      <summary>
            Gets or sets the zoom out key shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.RotateRight">
      <summary>
            Gets or sets the rotate right shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.RotateUp">
      <summary>
            Gets or sets the rotate up shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.RotateLeft">
      <summary>
            Gets or sets the rotate left shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.RotateDown">
      <summary>
            Gets or sets the rotate down shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.PanRight">
      <summary>
            Gets or sets the pan right shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.PanUp">
      <summary>
            Gets or sets the pan up shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.PanLeft">
      <summary>
            Gets or sets the pan left shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.PanDown">
      <summary>
            Gets or sets the pan down shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.CancelBackgroundWork">
      <summary>
            Gets or sets the cancel background work shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.NavigationRight">
      <summary>
            Gets or sets the right navigation movement shortcut (for <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk" /> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly" /> camera navigation modes).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.NavigationLeft">
      <summary>
            Gets or sets the left navigation movement shortcut (for <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk" /> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly" /> camera navigation modes).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.NavigationUp">
      <summary>
            Gets or sets the up navigation movement shortcut (for <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk" /> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly" /> camera navigation modes).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.NavigationDown">
      <summary>
            Gets or sets the down navigation movement shortcut (for <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk" /> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly" /> camera navigation modes).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.NavigationForward">
      <summary>
            Gets or sets the forward navigation movement shortcut (for <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk" /> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly" /> camera navigation modes).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ShortcutKeysSettings.NavigationBackward">
      <summary>
            Gets or sets the backward navigation movement shortcut (for <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk" /> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly" /> camera navigation modes).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ShortcutKeysSettings.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ShortcutKeysSettings.#ctor(System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
      <summary>
            Constructor (deprecated).
            </summary>
      <param name="selectAll">The select all shortcut</param>
      <param name="invertSelection">The invert selection shortcut</param>
      <param name="deleteSelection">The delete selection shortcut</param>
      <param name="zoomFit">The zoom fit shortcut</param>
      <param name="zoomIn">The zoom in shortcut</param>
      <param name="zoomOut">The zoom out shortcut</param>
      <param name="copySelection">The copy selection shortcut</param>
      <param name="pasteSelection">The paste selection shortcut</param>
      <param name="cutSelection">The cut selection shortcut</param>
      <param name="groupSelection">The group selection shortcut</param>
      <param name="ungroupSelection">The ungroup selection shortcut</param>
      <param name="rotateRight">The rotate right shortcut</param>
      <param name="rotateUp">The rotate up shortcut</param>
      <param name="rotateLeft">The rotate left shortcut</param>
      <param name="rotateDown">The rotate down shortcut</param>
      <param name="panRight">The pan right shortcut</param>
      <param name="panUp">The pan up shortcut</param>
      <param name="panLeft">The pan left shortcut</param>
      <param name="panDown">The pan down shortcut</param>
      <param name="cancelBackgroundWork">The cancel background work shortcut</param>
    </member>
    <member name="M:devDept.Eyeshot.ShortcutKeysSettings.#ctor(System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
      <summary>
            Constructor.
            </summary>
      <param name="selectAll">The select all shortcut</param>
      <param name="invertSelection">The invert selection shortcut</param>
      <param name="deleteSelection">The delete selection shortcut</param>
      <param name="zoomFit">The zoom fit shortcut</param>
      <param name="zoomIn">The zoom in shortcut</param>
      <param name="zoomOut">The zoom out shortcut</param>
      <param name="copySelection">The copy selection shortcut</param>
      <param name="pasteSelection">The paste selection shortcut</param>
      <param name="cutSelection">The cut selection shortcut</param>
      <param name="groupSelection">The group selection shortcut</param>
      <param name="ungroupSelection">The ungroup selection shortcut</param>
      <param name="rotateRight">The rotate right shortcut</param>
      <param name="rotateUp">The rotate up shortcut</param>
      <param name="rotateLeft">The rotate left shortcut</param>
      <param name="rotateDown">The rotate down shortcut</param>
      <param name="panRight">The pan right shortcut</param>
      <param name="panUp">The pan up shortcut</param>
      <param name="panLeft">The pan left shortcut</param>
      <param name="panDown">The pan down shortcut</param>
      <param name="cancelBackgroundWork">The cancel background work shortcut</param>
      <param name="navigationRight">The right navigation movement shortcut</param>
      <param name="navigationLeft">The left navigation movement shortcut</param>
      <param name="navigationUp">The up navigation movement shortcut</param>
      <param name="navigationDown">The down navigation movement shortcut</param>
      <param name="navigationForward">The forward navigation movement shortcut</param>
      <param name="navigationBackward">The backward navigation movement shortcut</param>
    </member>
    <member name="T:devDept.Eyeshot.ManufactureShortcutKeysSettings">
      <summary>
            Additional Manufacture keyboard shortcut settings.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ManufactureShortcutKeysSettings.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ManufactureShortcutKeysSettings.#ctor(System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
      <summary>
            Constructor.
            </summary>
      <param name="start"> The start simulation shortcut</param>
      <param name="pause">The pause simulation shortcut</param>
      <param name="next">The go to next shortcut</param>
      <param name="previous">The go to previous  shortcut</param>
    </member>
    <member name="M:devDept.Eyeshot.ManufactureShortcutKeysSettings.#ctor(System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys,System.Windows.Forms.Keys)">
      <summary>
            Constructor.
            </summary>
      <param name="selectAll">The select all shortcut</param>
      <param name="invertSelection">The invert selection shortcut</param>
      <param name="deleteSelection">The delete selection shortcut</param>
      <param name="zoomFit">The zoom fit shortcut</param>
      <param name="zoomIn">The zoom in shortcut</param>
      <param name="zoomOut">The zoom out shortcut</param>
      <param name="copySelection">The copy selection shortcut</param>
      <param name="pasteSelection">The paste selection shortcut</param>
      <param name="cutSelection">The cut selection shortcut</param>
      <param name="groupSelection">The group selection shortcut</param>
      <param name="ungroupSelection">The ungroup selection shortcut</param>
      <param name="rotateRight">The rotate right shortcut</param>
      <param name="rotateUp">The rotate up shortcut</param>
      <param name="rotateLeft">The rotate left shortcut</param>
      <param name="rotateDown">The rotate down shortcut</param>
      <param name="panRight">The pan right shortcut</param>
      <param name="panUp">The pan up shortcut</param>
      <param name="panLeft">The pan left shortcut</param>
      <param name="panDown">The pan down shortcut</param>
      <param name="cancelBackgroundWork">The cancel background work shortcut</param>
      <param name="navigationRight">The right navigation movement shortcut</param>
      <param name="navigationLeft">The left navigation movement shortcut</param>
      <param name="navigationUp">The up navigation movement shortcut</param>
      <param name="navigationDown">The down navigation movement shortcut</param>
      <param name="navigationForward">The forward navigation movement shortcut</param>
      <param name="navigationBackward">The backward navigation movement shortcut</param>
      <param name="start"> The start simulation shortcut</param>
      <param name="pause">The pause simulation shortcut</param>
      <param name="next">The go to next shortcut</param>
      <param name="previous">The go to previous  shortcut</param>
    </member>
    <member name="P:devDept.Eyeshot.ManufactureShortcutKeysSettings.Start">
      <summary>
            Gets or sets the start shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ManufactureShortcutKeysSettings.Pause">
      <summary>
            Gets or sets the pause shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ManufactureShortcutKeysSettings.Previous">
      <summary>
            Gets or sets the previous shortcut.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ManufactureShortcutKeysSettings.Next">
      <summary>
            Gets or sets the next shortcut.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ZoomSettings">
      <summary>Zoom command settings.</summary>
    </member>
    <member name="P:devDept.Eyeshot.ZoomSettings.BoxColor">
      <summary>
            Gets or sets the zoom window box color.
            </summary>
      <remarks>When set to <see cref="F:System.Drawing.Color.Empty" /> (default value) it is drawn with a contrast color (white or black) according to the background color.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ZoomSettings.BorderXOR">
      <summary>
            When true the border is drawn in XOR, otherwise it is drawn according to the <see cref="P:devDept.Eyeshot.ZoomSettings.BoxColor" />.
            </summary>
      <seealso cref="P:devDept.Eyeshot.ZoomSettings.BoxColor" />
    </member>
    <member name="P:devDept.Eyeshot.ZoomSettings.ZoomStyle">
      <summary>
            Zoom mode, affects only zoom by mouse wheel.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ZoomSettings.ReverseMouseWheel">
      <summary>
            Revertes the zoom by mouse wheel direction.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ZoomSettings.Speed">
      <summary>
            Gets or sets the <see cref="!:Design.ZoomCamera(int)" /> speed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ZoomSettings.PerspectiveFitMode">
      <summary>
            Gets or sets the zoom fit accuracy in perspective projection mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ZoomSettings.FitLabels">
      <summary>
            Gets or sets the zoom fit mode for labels. When true, approximates the zoom to
            try to include the labels.
            </summary>
      <remarks>
            Labels are drawn in screen coordinates with a fixed size, it's not possible
            to fit them perfectly.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ZoomSettings.FitMargin">
      <summary>
            Gets or sets the zoom fit margin.
            </summary>
      <see cref="!:Design.ZoomFit()" />
    </member>
    <member name="M:devDept.Eyeshot.ZoomSettings.#ctor(devDept.Eyeshot.MouseButton,System.Int32,System.Boolean,devDept.Eyeshot.zoomStyleType,System.Boolean,System.Double,System.Drawing.Color)">
      <summary>Standard constructor.</summary>
      <param name="mouseButton">Zoom mouse button and modifier key</param>
      <param name="keysStep">Zoom by arrow keys step (in pixels)</param>
      <param name="enabled">False to disable view zoom</param>
      <param name="mode">Zoom mode</param>
      <param name="reverse">Zoom by mouse wheel direction</param>
      <param name="speed">Zoom speed</param>
      <param name="boxColor">Color of the zoom window box</param>
    </member>
    <member name="M:devDept.Eyeshot.ZoomSettings.#ctor(devDept.Eyeshot.MouseButton,System.Int32,System.Boolean,devDept.Eyeshot.zoomStyleType,System.Boolean,System.Double,System.Drawing.Color,devDept.Eyeshot.Camera.perspectiveFitType)">
      <summary>Standard constructor.</summary>
      <param name="mouseButton">Zoom mouse button and modifier key</param>
      <param name="keysStep">Zoom by arrow keys step (in pixels)</param>
      <param name="enabled">False to disable view zoom</param>
      <param name="mode">Zoom mode</param>
      <param name="reverse">Zoom by mouse wheel direction</param>
      <param name="speed">Zoom speed</param>
      <param name="boxColor">Color of the zoom window box</param>
      <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
    </member>
    <member name="M:devDept.Eyeshot.ZoomSettings.#ctor(devDept.Eyeshot.MouseButton,System.Int32,System.Boolean,devDept.Eyeshot.zoomStyleType,System.Boolean,System.Double,System.Drawing.Color,devDept.Eyeshot.Camera.perspectiveFitType,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="mouseButton">Zoom mouse button and modifier key</param>
      <param name="keysStep">Zoom by arrow keys step (in pixels)</param>
      <param name="enabled">False to disable view zoom</param>
      <param name="mode">Zoom mode</param>
      <param name="reverse">Zoom by mouse wheel direction</param>
      <param name="speed">Zoom speed</param>
      <param name="boxColor">Color of the zoom window box</param>
      <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
      <param name="fitLabels">Zoom fit mode for labels</param>
    </member>
    <member name="M:devDept.Eyeshot.ZoomSettings.#ctor(devDept.Eyeshot.MouseButton,System.Int32,System.Boolean,devDept.Eyeshot.zoomStyleType,System.Boolean,System.Double,System.Drawing.Color,devDept.Eyeshot.Camera.perspectiveFitType,System.Boolean,System.Int32)">
      <summary>Standard constructor.</summary>
      <param name="mouseButton">Zoom mouse button and modifier key</param>
      <param name="keysStep">Zoom by arrow keys step (in pixels)</param>
      <param name="enabled">False to disable view zoom</param>
      <param name="mode">Zoom mode</param>
      <param name="reverse">Zoom by mouse wheel direction</param>
      <param name="speed">Zoom speed</param>
      <param name="boxColor">Color of the zoom window box</param>
      <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
      <param name="fitLabels">Zoom fit mode for labels</param>
      <param name="fitMargin">Zoom fit margin</param>
    </member>
    <member name="M:devDept.Eyeshot.ZoomSettings.#ctor(devDept.Eyeshot.MouseButton,System.Int32,System.Boolean,devDept.Eyeshot.zoomStyleType,System.Boolean,System.Double,System.Drawing.Color,devDept.Eyeshot.Camera.perspectiveFitType,System.Boolean,System.Int32,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="mouseButton">Zoom mouse button and modifier key</param>
      <param name="keysStep">Zoom by arrow keys step (in pixels)</param>
      <param name="enabled">False to disable view zoom</param>
      <param name="mode">Zoom mode</param>
      <param name="reverse">Zoom by mouse wheel direction</param>
      <param name="speed">Zoom speed</param>
      <param name="boxColor">Color of the zoom window box</param>
      <param name="perspectiveFitMode">Zoom fit accuracy in perspective projection mode</param>
      <param name="fitLabels">Zoom fit mode for labels</param>
      <param name="fitMargin">Zoom fit margin</param>
      <param name="borderXOR">When true the border is drawn in XOR, otherwise it is drawn according to the <see cref="P:devDept.Eyeshot.ZoomSettings.BoxColor" />.</param>
    </member>
    <member name="T:devDept.Eyeshot.PanSettings">
      <summary>Pan command settings.</summary>
    </member>
    <member name="M:devDept.Eyeshot.PanSettings.#ctor(devDept.Eyeshot.MouseButton,System.Int32,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="mouseButton">Pan mouse button and modifier key</param>
      <param name="keysStep">Pan by arrow keys step (in pixels)</param>
      <param name="enabled">False to disable view pan</param>
    </member>
    <member name="T:devDept.Eyeshot.BoundingBoxSettings">
      <summary>Bounding box settings.</summary>
    </member>
    <member name="P:devDept.Eyeshot.BoundingBoxSettings.LabelFont">
      <summary>
            Gets the label font.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.BoundingBoxSettings.LinePattern">
      <summary>
            Gets or sets the pattern used to draw the wireframe box.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.BoundingBoxSettings.Visible">
      <summary>
            Gets or sets the visibility status.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.BoundingBoxSettings.OverrideSceneExtents">
      <summary>
            When true, the BoundingBox.Min and BoundingBox.Max properties override the scene extension.
            </summary>
      <remarks>
            The <see cref="M:devDept.Eyeshot.Viewport.ZoomFit" /> will zoom on the box defined by the <see cref="P:devDept.Eyeshot.BoundingBoxSettings.Min" /> and <see cref="P:devDept.Eyeshot.BoundingBoxSettings.Max" /> properties.
            This property is useful when doing animations by moving the entities in the <see cref="M:devDept.Eyeshot.Entities.BlockReference.MoveTo(devDept.Eyeshot.DrawParams)" /> method.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.BoundingBoxSettings.Min" />
      <seealso cref="P:devDept.Eyeshot.BoundingBoxSettings.Max" />
      <seealso cref="M:devDept.Eyeshot.Design.StartAnimation" />
    </member>
    <member name="P:devDept.Eyeshot.BoundingBoxSettings.Min">
      <summary>
            Defines the minimum extension of the scene (for viewport fitting and visualization purposes).
            </summary>
      <remarks>Valid only if <see cref="P:devDept.Eyeshot.BoundingBoxSettings.OverrideSceneExtents" /> is true.</remarks>
      <seealso cref="P:devDept.Eyeshot.BoundingBoxSettings.OverrideSceneExtents" />
      <seealso cref="P:devDept.Eyeshot.BoundingBoxSettings.Max" />
    </member>
    <member name="P:devDept.Eyeshot.BoundingBoxSettings.Max">
      <summary>
            Defines the maximum extension of the scene (for viewport fitting and visualization purposes).
            </summary>
      <remarks>Valid only if <see cref="P:devDept.Eyeshot.BoundingBoxSettings.OverrideSceneExtents" /> is true.</remarks>
      <seealso cref="P:devDept.Eyeshot.BoundingBoxSettings.OverrideSceneExtents" />
      <seealso cref="P:devDept.Eyeshot.BoundingBoxSettings.Min" />
    </member>
    <member name="P:devDept.Eyeshot.BoundingBoxSettings.FormatString">
      <summary>
            Gets or sets the format string used for the bounding box's label.
            </summary>
      <remarks>
            The supported placeholders are <c>{0}</c>, <c>{1}</c>, <c>{2}</c>, and <c>{3}</c>. They are meant to be used for the bounding box's width, depth, height, and unit of measurement.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.BoundingBoxSettings.NotApplicableText">
      <summary>
            Gets or sets the text displayed when the <see cref="P:devDept.Eyeshot.Workspace.Entities" /> collection is empty.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.#ctor(System.Drawing.Font,System.UInt16,System.Boolean,System.Boolean,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>Standard constructor.</summary>
      <param name="labelFont">Label font</param>
      <param name="linePattern">Pattern used to draw the wire-frame box</param>
      <param name="visible">Visibility status</param>
      <param name="overrideSceneExtents">IF true, considers the BoundingBox.Min and BoundingBox.Max as the extension of the scene</param>
      <param name="min">Defines the minimum extension of the scene</param>
      <param name="max">Defines the maximum extension of the scene</param>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.#ctor(System.Drawing.Font)">
      <summary>Constructor with font.</summary>
      <param name="labelFont">The label font to use.</param>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.#ctor(System.Drawing.Font,System.UInt16)">
      <summary>Constructor with font and line pattern.</summary>
      <param name="labelFont">The label font to use.</param>
      <param name="linePattern">Pattern used to draw the wire-frame box.</param>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.UInt16,System.Boolean,System.Boolean,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>Deprecated constructor.</summary>
      <param name="labelFont">Label font</param>
      <param name="labelColor">Label color</param>
      <param name="lineColor">Color used to draw the wireframe box</param>
      <param name="linePattern">Pattern used to draw the wireframe box</param>
      <param name="visible">Visibility status</param>
      <param name="overrideSceneExtents">IF true, considers the BoundingBox.Min and BoundingBox.Max as the extension of the scene</param>
      <param name="min">Defines the minimum extension of the scene</param>
      <param name="max">Defines the maximum extension of the scene</param>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.UInt16,System.Boolean,System.Boolean,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String,System.String)">
      <summary>Deprecated constructor.</summary>
      <param name="labelFont">Label font</param>
      <param name="labelColor">Label color</param>
      <param name="lineColor">Color used to draw the wireframe box</param>
      <param name="linePattern">Pattern used to draw the wireframe box</param>
      <param name="visible">Visibility status</param>
      <param name="overrideSceneExtents">IF true, considers the BoundingBox.Min and BoundingBox.Max as the extension of the scene</param>
      <param name="min">Defines the minimum extension of the scene</param>
      <param name="max">Defines the maximum extension of the scene</param>
      <param name="textSuffix">Text label suffix</param>
      <param name="notApplicableText">The text showed when the <see cref="T:devDept.Eyeshot.EntityList" /> is empty.</param>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.#ctor(System.Drawing.Color,System.Drawing.Color,System.UInt16,System.Boolean,System.Boolean,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String,System.String)">
      <summary>Deprecated constructor.</summary>
      <param name="labelColor">Label color (deprecated parameter)</param>
      <param name="lineColor">Color used to draw the wireframe box (deprecated parameter)</param>
      <param name="linePattern">Pattern used to draw the wireframe box</param>
      <param name="visible">Visibility status</param>
      <param name="overrideSceneExtents">IF true, considers the BoundingBox.Min and BoundingBox.Max as the extension of the scene</param>
      <param name="min">Defines the minimum extension of the scene</param>
      <param name="max">Defines the maximum extension of the scene</param>
      <param name="textSuffix">Text label suffix</param>
      <param name="notApplicableText">The text showed when the <see cref="T:devDept.Eyeshot.EntityList" /> is empty.</param>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.UInt16,System.Boolean,System.Boolean,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String,System.String,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="labelFont">Label font</param>
      <param name="labelColor">Label color</param>
      <param name="lineColor">Color used to draw the wireframe box</param>
      <param name="linePattern">Pattern used to draw the wireframe box</param>
      <param name="visible">Visibility status</param>
      <param name="overrideSceneExtents">IF true, considers the BoundingBox.Min and BoundingBox.Max as the extension of the scene</param>
      <param name="min">Defines the minimum extension of the scene</param>
      <param name="max">Defines the maximum extension of the scene</param>
      <param name="textSuffix">Text label suffix</param>
      <param name="notApplicableText">The text showed when the <see cref="T:devDept.Eyeshot.EntityList" /> is empty.</param>
      <param name="lighting">When false the UI element is drawn with flat color</param>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.#ctor(System.Drawing.Color,System.Drawing.Color,System.UInt16,System.Boolean,System.Boolean,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String,System.String,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="labelColor">Label color (deprecated parameter)</param>
      <param name="lineColor">Color used to draw the wireframe box (deprecated parameter)</param>
      <param name="linePattern">Pattern used to draw the wireframe box</param>
      <param name="visible">Visibility status</param>
      <param name="overrideSceneExtents">IF true, considers the BoundingBox.Min and BoundingBox.Max as the extension of the scene</param>
      <param name="min">Defines the minimum extension of the scene</param>
      <param name="max">Defines the maximum extension of the scene</param>
      <param name="textSuffix">Text label suffix</param>
      <param name="notApplicableText">The text showed when the <see cref="T:devDept.Eyeshot.EntityList" /> is empty.</param>
      <param name="lighting">When false the UI element is drawn with flat color (deprecated parameter)</param>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.#ctor(System.UInt16,System.Boolean,System.Boolean,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String,System.String)">
      <summary>Standard constructor.</summary>
      <param name="linePattern">Pattern used to draw the wireframe box</param>
      <param name="visible">Visibility status</param>
      <param name="overrideSceneExtents">IF true, considers the BoundingBox.Min and BoundingBox.Max as the extension of the scene</param>
      <param name="min">Defines the minimum extension of the scene</param>
      <param name="max">Defines the maximum extension of the scene</param>
      <param name="formatString">An initializer for the format string used in the bounding box's label.</param>
      <param name="notApplicableText">The text showed when the <see cref="T:devDept.Eyeshot.EntityList" /> is empty.</param>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.Draw(devDept.Eyeshot.Viewport,devDept.Graphics.RenderContextBase,System.Single,devDept.Geometry.Point3D,devDept.Geometry.Point3D)">
      <summary>
            Draws the scene bounding box.
            </summary>
      <param name="viewport">The viewport</param>
      <param name="context">The render context</param>
      <param name="lineSize">The line size</param>
      <param name="min">The minimum point of the scene</param>
      <param name="max">The maximum point of the scene</param>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.DrawLabel(devDept.Eyeshot.Workspace.DrawSceneParams)">
      <summary>
            Draws the text label.
            </summary>
      <param name="myParams">The draw parameters</param>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.DrawLabelGdi(devDept.Eyeshot.Workspace.DrawSceneParams,System.Single,System.Drawing.Graphics)">
      <summary>
            Draws the text label in GDI.
            </summary>
      <param name="myParams">The draw parameters</param>
      <param name="drawScaleFactor">The draw scale factor</param>/
            <param name="g">Active GDI+ drawing surface</param></member>
    <member name="F:devDept.Eyeshot.BoundingBoxSettings.PropertyChangedEvent">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.BoundingBoxSettings.PropertyChanged">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.BoundingBoxSettings.RaisePropertyChangedEvent(System.Object,System.Windows.DependencyProperty)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Mouse3DSettings">
      <summary>
            Mouse 3D settings.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Mouse3DSettings.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="panSpeed">Pan speed</param>
      <param name="zoomSpeed">Zoom speed</param>
      <param name="rotateSpeed">Rotation speed</param>
    </member>
    <member name="M:devDept.Eyeshot.Mouse3DSettings.#ctor(System.Double,System.Double,System.Double,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="panSpeed">Pan speed</param>
      <param name="zoomSpeed">Zoom speed</param>
      <param name="rotateSpeed">Rotation speed</param>
      <param name="enableViewportMovements">If true, enables the viewport movements</param>
    </member>
    <member name="P:devDept.Eyeshot.Mouse3DSettings.PanSpeed">
      <summary>
            Gets or sets the 3D mouse pan speed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Mouse3DSettings.RotateSpeed">
      <summary>
            Gets or sets the 3D mouse rotation speed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Mouse3DSettings.ZoomSpeed">
      <summary>
            Gets or sets the 3D mouse zoom speed.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Mouse3DSettings.Enabled">
      <summary>
            Gets or sets a value indicating whether the movements are enabled.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MultiTouchSettings">
      <summary>
            Multi Touch settings
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouchSettings.#ctor(System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="enableMultiTouchMovements">If true, the movements are enabled</param>
    </member>
    <member name="M:devDept.Eyeshot.MultiTouchSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="enableMultiTouchMovements">If true, the movements are enabled</param>
      <param name="zoom">Enables or disables the zoom with two fingers</param>
      <param name="pan">Enables or disables the pan with two fingers</param>
      <param name="rotate">Enables or disables the rotation with two fingers</param>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouchSettings.OverlappingElements">
      <summary>
            Gets the list of the elements that must be considered overlapping the Eyeshot control during the touch gestures handling.
            </summary>
      <remarks>This property has no effect when <see cref="P:devDept.Eyeshot.Workspace.IsImmediateMode" /> is true or <see cref="F:devDept.Eyeshot.MultiTouchSettings.UseWindowsMessages" /> is set to false.</remarks>
      <seealso cref="F:devDept.Eyeshot.MultiTouchSettings.UseWindowsMessages" />
      <seealso cref="P:devDept.Eyeshot.Workspace.IsImmediateMode" />
    </member>
    <member name="F:devDept.Eyeshot.MultiTouchSettings.UseWindowsMessages">
      <summary>
            Indicates whether windows messages are used to handle touch gestures. <b>It must
            be set in the Window constructor.</b></summary>
      <remarks>
            When true or <see cref="P:devDept.Eyeshot.Workspace.IsImmediateMode" /> is true, the Eyeshot
            control uses WM_TOUCH to receive touch messages from a WPF window, otherwise it
            uses the WPF touch events.
            </remarks>
      <seealso cref="P:devDept.Eyeshot.Workspace.IsImmediateMode" />
      <seealso cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" />
      <seealso cref="M:devDept.Eyeshot.WorkspaceBase.DisableWpfTabletSupport" />
      <seealso cref="P:devDept.Eyeshot.MultiTouchSettings.OverlappingElements" />
    </member>
    <member name="P:devDept.Eyeshot.MultiTouchSettings.Enabled">
      <summary>
            Gets or sets a value indicating whether the movements are enabled.
            </summary>
      <remarks>It must be set before the control handle is created (in the Form or Window constructor).</remarks>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouchSettings.Rotate">
      <summary>
            Enables or disables the rotation with two fingers.
            </summary>
      <remarks>
            If <see cref="P:devDept.Eyeshot.MovementSettingsBase.Enabled" /> is false, the 2 fingers rotation is also disabled.
            When the <see cref="!:Design.ActionMode" /> is set to <see cref="F:devDept.Eyeshot.actionType.Rotate" />, you can use 1 finger to rotate.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouchSettings.Zoom">
      <summary>
            Enables or disables the zoom with two fingers.
            </summary>
      <remarks>
            If <see cref="!:RotateSettings.Enabled" /> is false, the 2 fingers zoom is also disabled.
            When the <see cref="!:Design.ActionMode" /> is set to <see cref="F:devDept.Eyeshot.actionType.Zoom" />, you can use 1 finger to zoom.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.MultiTouchSettings.Pan">
      <summary>
            Enables or disables the pan with two fingers.
            </summary>
      <remarks>
            If <see cref="!:ZoomSettings.Enabled" /> is false, the 2 fingers pan is also disabled.
            When the <see cref="!:Design.ActionMode" /> is set to <see cref="F:devDept.Eyeshot.actionType.Pan" />, you can use 1 finger to pan.
            </remarks>/// 
        </member>
    <member name="T:devDept.Eyeshot.NavigationSettings">
      <summary>
            Settings for the <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk" /> and <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly" /> camera navigation modes.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.NavigationSettings.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.NavigationSettings.#ctor(devDept.Eyeshot.Camera.navigationType,devDept.Eyeshot.MouseButton,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double,System.Double,System.Double)">
      <summary>
            Standard cosntructor.
            </summary>
      <param name="mouseButton">The mouse button used for the navigation</param>
      <param name="min">The minimum limit of the navigation volume</param>
      <param name="max">The maximum limit of the navigation volume</param>
      <param name="acceleration">The acceleration of the camera movement</param>
      <param name="speed">THe maximum velocity of the camera movement</param>
    </member>
    <member name="P:devDept.Eyeshot.NavigationSettings.Mode">
      <summary>
            Gets or sets the navigation mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.NavigationSettings.MouseButton">
      <summary>
            Gets or sets the mouse button used for the navigation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.NavigationSettings.Max">
      <summary>
            Gets or sets the maximum limit of the navigation volume.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.NavigationSettings.Min">
      <summary>
            Gets or sets the minimum limit of the navigation volume.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.NavigationSettings.Acceleration">
      <summary>
            Gets or sets the acceleration of the camera movement.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.NavigationSettings.Speed">
      <summary>
            Gets or sets the speed of the camera movement.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.NavigationSettings.RotationSpeed">
      <summary>
            Gets or sets the rotation speed of the camera movement.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.SelectionBoxColorsSettings">
      <summary>
            Class that holds the colors used to draw the selection box and polygon.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SelectionBoxColorsSettings.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SelectionBoxColorsSettings.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
      <summary>
            Deprecated constructor. Use the overload with the borderXOR parameter.
            </summary>
      <param name="crossing">The color used to draw the box and polygon for crossing selection mode</param>
      <param name="enclosed">The color used to draw the box and polygon for enclosed selection mode</param>
      <param name="visible">The color used to draw the box and polygon for visible selection mode</param>
    </member>
    <member name="M:devDept.Eyeshot.SelectionBoxColorsSettings.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="crossing">The color used to draw the box and polygon for crossing selection mode</param>
      <param name="enclosed">The color used to draw the box and polygon for enclosed selection mode</param>
      <param name="visible">The color used to draw the box and polygon for visible selection mode</param>
    </member>
    <member name="P:devDept.Eyeshot.SelectionBoxColorsSettings.Crossing">
      <summary>
            Gets or sets the color used to draw the box and polygon for crossing selection modes (<see cref="F:devDept.Eyeshot.actionType.SelectByBox" />, <see cref="F:devDept.Eyeshot.actionType.SelectByPolygon" />).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SelectionBoxColorsSettings.Enclosed">
      <summary>
            Gets or sets the color used to draw the box and polygon for enclosed selection modes (<see cref="F:devDept.Eyeshot.actionType.SelectByBoxEnclosed" />, <see cref="F:devDept.Eyeshot.actionType.SelectByPolygonEnclosed" />).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SelectionBoxColorsSettings.Visible">
      <summary>
            Gets or sets the color used to draw the box and polygon for visible selection modes (<see cref="F:devDept.Eyeshot.actionType.SelectVisibleByBox" />, <see cref="F:devDept.Eyeshot.actionType.SelectVisibleByPolygon" />).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SelectionBoxColorsSettings.BorderXOR">
      <summary>
            When true the border is drawn in XOR, otherwise it is drawn according to the box color.
            </summary>
      <seealso cref="P:devDept.Eyeshot.SelectionBoxColorsSettings.Crossing" />
      <seealso cref="P:devDept.Eyeshot.SelectionBoxColorsSettings.Enclosed" />
      <seealso cref="P:devDept.Eyeshot.SelectionBoxColorsSettings.Visible" />
    </member>
    <member name="T:devDept.Eyeshot.MagnifyingGlassSettings">
      <summary>
            Class that holds the settings for the magnifying glass feature.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MagnifyingGlassSettings.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MagnifyingGlassSettings.#ctor(System.Boolean,System.Drawing.Size,System.Double)">
      <summary>
            Deprecated constructor.
            </summary>
      <param name="enabled">The enable status. Deprecated, use <see cref="F:devDept.Eyeshot.actionType.MagnifyingGlass" /> to enable the magnifying glass instead.</param>
      <param name="size">The lens size</param>
      <param name="factor">The lens magnifying factor</param>
    </member>
    <member name="M:devDept.Eyeshot.MagnifyingGlassSettings.#ctor(System.Boolean,System.Drawing.Size,System.Double,System.Boolean)">
      <summary>
            Deprecated constructor.
            </summary>
      <param name="enabled">The enable status. Deprecated, use <see cref="F:devDept.Eyeshot.actionType.MagnifyingGlass" /> to enable the magnifying glass instead.</param>
      <param name="size">The lens size</param>
      <param name="factor">The lens magnifying factor</param>
      <param name="scaleLineWeight">If true, the line weights of the wireframe entities are scaled by the <see cref="P:devDept.Eyeshot.MagnifyingGlassSettings.Factor" />, else they keep their size on screen in the magnified drawing.</param>
    </member>
    <member name="M:devDept.Eyeshot.MagnifyingGlassSettings.#ctor(System.Drawing.Size,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="size">The lens size</param>
      <param name="factor">The lens magnifying factor</param>
    </member>
    <member name="M:devDept.Eyeshot.MagnifyingGlassSettings.#ctor(System.Drawing.Size,System.Double,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="size">The lens size</param>
      <param name="factor">The lens magnifying factor</param>
      <param name="scaleLineWeight">If true, the line weights of the wireframe entities are scaled by the <see cref="P:devDept.Eyeshot.MagnifyingGlassSettings.Factor" />, else they keep their size on screen in the magnified drawing.</param>
    </member>
    <member name="M:devDept.Eyeshot.MagnifyingGlassSettings.#ctor(System.Drawing.Size,System.Double,System.Boolean,System.Drawing.Point)">
      <summary>
            Standard constructor.
            </summary>
      <param name="size">The lens size</param>
      <param name="factor">The lens magnifying factor</param>
      <param name="scaleLineWeight">If true, the line weights of the wireframe entities are scaled by the <see cref="P:devDept.Eyeshot.MagnifyingGlassSettings.Factor" />, else they keep their size on screen in the magnified drawing.</param>
      <param name="offset">The offset between the mouse position and the lens.</param>
    </member>
    <member name="P:devDept.Eyeshot.MagnifyingGlassSettings.Size">
      <summary>
            Gets or sets the size of the magnifying glass lens.
            </summary>
      <remarks>Call <see cref="!:Design.CompileUserInterfaceElements()" /> to update the magnyfying glass shape.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.MagnifyingGlassSettings.Offset">
      <summary>
            Gets or sets the offset between the mouse position and the magnifying glass lens.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MagnifyingGlassSettings.Factor">
      <summary>
            Gets or sets the magnifying factor of the lens.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.MagnifyingGlassSettings.ScaleLineWeight">
      <summary>
            If true, the line weights of the wireframe entities are scaled by the <see cref="P:devDept.Eyeshot.MagnifyingGlassSettings.Factor" />, else they keep their size on screen in the magnified drawing.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.SelectionSettings">
      <summary>Selection settings.</summary>
    </member>
    <member name="P:devDept.Eyeshot.SelectionSettings.Color">
      <summary>
            Gets or sets the color of selected entities, shared by all viewports.
            </summary>
      <remarks>The <see cref="P:devDept.Graphics.Material.Ambient" />, <see cref="P:devDept.Graphics.Material.Specular" /> and <see cref="P:devDept.Graphics.Material.Shininess" /> components are taken from the <see cref="P:devDept.Eyeshot.Design.DefaultMaterial" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.SelectionSettings.ColorDynamic">
      <summary>
            Gets or sets the color for dynamic selection, shared by all viewports.
            </summary>
      <remarks>
            For opaque colors the <see cref="P:devDept.Graphics.Material.Ambient" />, <see cref="P:devDept.Graphics.Material.Specular" /> and <see cref="P:devDept.Graphics.Material.Shininess" /> components are taken from the <see cref="P:devDept.Eyeshot.Design.DefaultMaterial" />.
            For transparent colors selected entities are highlighted with an halo effect.
            </remarks>
      <see cref="F:devDept.Eyeshot.actionType.SelectVisibleByPickDynamic" />
    </member>
    <member name="P:devDept.Eyeshot.SelectionSettings.HaloInnerColor">
      <summary>
            Gets or sets the inner halo color for dynamic selection, shared by all viewports.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SelectionSettings.HaloOuterColor">
      <summary>
            Gets or sets the outer halo color for dynamic selection, shared by all viewports.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SelectionSettings.LineWeightScaleFactor">
      <summary>
            Gets or sets the factor applied to the line weight for the selected wireframe entities or <see cref="P:devDept.Eyeshot.Entities.Brep.Edges" />.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.LineWeight" />
    </member>
    <member name="P:devDept.Eyeshot.SelectionSettings.HaloWidthPolygons">
      <summary>
            Gets or sets the halo width in pixels for the dynamically selected polygonal entities, shared by all viewports.
            </summary>
      <remarks>Values are clamped to the range [0, 4].</remarks>
    </member>
    <member name="P:devDept.Eyeshot.SelectionSettings.HaloWidthWires">
      <summary>
            Gets or sets the halo width in pixels for the dynamically selected wireframe entities or <see cref="P:devDept.Eyeshot.Entities.Brep.Edges" />, shared by all viewports.
            </summary>
      <remarks>Values are clamped to the range [0, 4].</remarks>
    </member>
    <member name="M:devDept.Eyeshot.SelectionSettings.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single,System.Int32,System.Int32)">
      <summary>Standard constructor.</summary>
      <param name="color"> The selection color.</param>
      <param name="colorDynamic"> The dynamic selection color.The highlight effect is determined by the alpha value of the color, see <see cref="P:devDept.Eyeshot.SelectionSettings.ColorDynamic" />. </param>
      <param name="haloInnerColor"> The inner color of the halo effect.</param>
      <param name="haloOuterColor"> The outer color of the halo effect.</param>
      <param name="lineWeightScaleFactor"> The factor applied to the line weight.</param>
      <param name="haloWidthPolygons"> The width of the halo effect for polygonal entities. </param>
      <param name="haloWidthWires"> The width of the halo effect for wireframe entities.</param>
    </member>
    <member name="T:devDept.Eyeshot.DisplayModeSettings">
      <summary>Display Mode settings for Wirefame mode.</summary>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettings.ShowEdges">
      <summary>Gets or sets the entity edges visibility status.</summary>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettings.EdgeColor">
      <summary>Gets or sets the entity edges color, applies only to single color style mode.</summary>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettings.EdgeThickness">
      <summary>Gets or sets the entity edges thickness.</summary>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettings.SilhouettesDrawingMode">
      <summary>Gets or sets the silhouettes drawing mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettings.SilhouetteThickness">
      <summary>Gets or sets the Silhouettes thickness.</summary>
    </member>
    <member name="M:devDept.Eyeshot.DisplayModeSettings.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.DisplayModeSettings.#ctor(System.Boolean,devDept.Eyeshot.edgeColorMethodType,System.Drawing.Color,System.Single,System.Single,devDept.Eyeshot.silhouettesDrawingType,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="showEdges">Edges Visibility flag</param>
      <param name="edgeColorMethod">Edges Color mode</param>
      <param name="edgeColor">Edges color</param>
      <param name="edgeThickness">Edges Thickness</param>
      <param name="silhouetteThickness">Thickness used to draw the silhouettes</param>
      <param name="silhouettesDrawingMode">Silhouettes drawing mode</param>
      <param name="showInternalWires">Internal wireframe visibility</param>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettings.EdgeColorMethod">
      <summary>
            Gets or sets the entity edges color method.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettings.ShowInternalWires">
      <summary>Gets or sets the visualization of internal wireframe.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.DisplayModeSettingsFlat">
      <summary>Display Mode settings for Flat mode.</summary>
      <remarks>There is no option for EdgeColorMethod and for ShowInternalWires because they would not be visible due to the flat shading.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.DisplayModeSettingsFlat.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.DisplayModeSettingsFlat.#ctor(System.Boolean,System.Drawing.Color,System.Single,System.Single,devDept.Eyeshot.silhouettesDrawingType)">
      <summary>Standard constructor.</summary>
      <param name="showEdges">Edges Visibility flag</param>
      <param name="edgeColor">Edges color</param>
      <param name="edgeThickness">Edges Thickness</param>
      <param name="silhouetteThickness">Thickness used to draw the silhouettes</param>
      <param name="silhouettesDrawingMode">Silhouettes drawing mode</param>
    </member>
    <member name="M:devDept.Eyeshot.DisplayModeSettingsFlat.#ctor(System.Boolean,devDept.Eyeshot.edgeColorMethodType,System.Drawing.Color,System.Single,System.Single,devDept.Eyeshot.silhouettesDrawingType,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="showEdges">Edges Visibility flag</param>
      <param name="edgeColorMethod">Edges Color mode</param>
      <param name="edgeColor">Edges color</param>
      <param name="edgeThickness">Edges Thickness</param>
      <param name="silhouetteThickness">Thickness used to draw the silhouettes</param>
      <param name="silhouettesDrawingMode">Silhouettes drawing mode</param>
      <param name="showInternalWires">Internal wireframe visibility</param>
    </member>
    <member name="M:devDept.Eyeshot.DisplayModeSettingsFlat.#ctor(System.Boolean,devDept.Eyeshot.edgeColorMethodType,System.Drawing.Color,System.Single,System.Single,devDept.Eyeshot.silhouettesDrawingType,System.Boolean,devDept.Eyeshot.flatColorMethodType)">
      <summary>Standard constructor.</summary>
      <param name="showEdges">Edges Visibility flag</param>
      <param name="edgeColorMethod">Edges Color mode</param>
      <param name="edgeColor">Edges color</param>
      <param name="edgeThickness">Edges Thickness</param>
      <param name="silhouetteThickness">Thickness used to draw the silhouettes</param>
      <param name="silhouettesDrawingMode">Silhouettes drawing mode</param>
      <param name="showInternalWires">Internal wireframe visibility</param>
      <param name="colorMethod">Color used to draw the entities</param>
    </member>
    <member name="M:devDept.Eyeshot.DisplayModeSettingsFlat.#ctor(System.Boolean,System.Drawing.Color,System.Single,System.Single,devDept.Eyeshot.silhouettesDrawingType,devDept.Eyeshot.flatColorMethodType)">
      <summary>Standard constructor.</summary>
      <param name="showEdges">Edges Visibility flag</param>
      <param name="edgeColor">Edges color</param>
      <param name="edgeThickness">Edges Thickness</param>
      <param name="silhouetteThickness">Thickness used to draw the silhouettes</param>
      <param name="silhouettesDrawingMode">Silhouettes drawing mode</param>
      <param name="colorMethod">Color used to draw the entities</param>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettingsFlat.ColorMethod">
      <summary>Gets or sets the color used for the polygonal entities.</summary>
      <seealso cref="P:devDept.Eyeshot.DisplayModeSettings.EdgeColorMethod" />
    </member>
    <member name="T:devDept.Eyeshot.DisplayModeSettingsShaded">
      <summary>Display Mode settings for Shaded mode.</summary>
    </member>
    <member name="M:devDept.Eyeshot.DisplayModeSettingsShaded.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettingsShaded.ShadowMode">
      <summary>
            Gets or sets the shadow mode.
            </summary>
      <remarks>The <see cref="F:devDept.Graphics.shadowType.Planar" /> shadows plane position is determined by the scene bounding box and the <see cref="P:devDept.Eyeshot.Design.GroundPlaneDistance" />.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.DisplayModeSettingsRendered">
      <summary>Display Mode settings for Rendered mode.</summary>
    </member>
    <member name="M:devDept.Eyeshot.DisplayModeSettingsRendered.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettingsRendered.EnvironmentMappingImage">
      <summary>
            Gets or sets the environment map.
            </summary>
      <remarks>The environment intensity can be changed for all entities with the <see cref="P:devDept.Graphics.Material.Environment" /> property of <see cref="P:devDept.Eyeshot.Design.DefaultMaterial" />, or can
            be changed individually for each entity <see cref="T:devDept.Graphics.Material" /></remarks>
      <remarks>If the image is changed after the <see cref="T:devDept.Eyeshot.Design" /> was loaded, call <see cref="!:Design.CompileUserInterfaceElements()" /> to load the new image.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettingsRendered.EnvironmentMapping">
      <summary>
            Gets or sets the environment map visibility status.
            </summary>
      <remarks>The environment intensity can be changed for all entities with the <see cref="P:devDept.Graphics.Material.Environment" /> property of <see cref="P:devDept.Eyeshot.Design.DefaultMaterial" />, or can
            be changed individually for each entity <see cref="T:devDept.Graphics.Material" /></remarks>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettingsRendered.PlanarReflections">
      <summary>
            Gets or sets the planar reflections visibility status
            </summary>
      <remarks>The reflection plane position is determined by the scene bounding box and the <see cref="P:devDept.Eyeshot.Design.GroundPlaneDistance" />.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettingsRendered.PlanarReflectionsIntensity">
      <summary>
            Gets or sets the planar reflections visibility status
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DisplayModeSettingsRendered.RealisticShadowQuality">
      <summary>
            Gets or sets the quality of realistic shadows.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesSettings">
      <summary>
            Viewport Hidden Lines settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesSettings.Lighting">
      <summary>Gets or sets the Lighting status.</summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesSettings.ColorMethod">
      <summary>Gets or sets the color used for the polygonal entities.</summary>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesSettings.WireColorMethod" />
      <seealso cref="P:devDept.Eyeshot.DisplayModeSettings.EdgeColorMethod" />
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesSettings.SilhouetteColor">
      <summary>Gets or sets the Silhouettes color used when the <see cref="P:devDept.Eyeshot.DisplayModeSettings.EdgeColorMethod" /> is <see cref="F:devDept.Eyeshot.edgeColorMethodType.SingleColor" />.</summary>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesSettings.PolygonColor" />
      <seealso cref="P:devDept.Eyeshot.HiddenLinesSettings.WireColor" />
      <seealso cref="!:DisplayModeSettingsBase.EdgeColor" />
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesSettings.WireColorMethod">
      <summary>
            Gets or sets the color used for the wire entities.
            </summary>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesSettings.ColorMethod" />
      <seealso cref="P:devDept.Eyeshot.DisplayModeSettings.EdgeColorMethod" />
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesSettings.PolygonColor">
      <summary>
            Gets or sets the color used to draw the polygons when <see cref="P:devDept.Eyeshot.HiddenLinesSettings.ColorMethod" /> is <see cref="F:devDept.Eyeshot.hiddenLinesColorMethodType.SingleColor" />.
            </summary>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesSettings.WireColor" />
      <seealso cref="P:devDept.Eyeshot.HiddenLinesSettings.SilhouetteColor" />
      <seealso cref="!:DisplayModeSettingsBase.EdgeColor" />
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesSettings.WireColor">
      <summary>Gets or sets the wires color used when <see cref="P:devDept.Eyeshot.HiddenLinesSettings.WireColorMethod" /> is <see cref="F:devDept.Eyeshot.edgeColorMethodType.SingleColor" />.</summary>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesSettings.PolygonColor" />
      <seealso cref="P:devDept.Eyeshot.HiddenLinesSettings.SilhouetteColor" />
      <seealso cref="!:DisplayModeSettingsBase.EdgeColor" />
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesSettings.WireThickness">
      <summary>Gets or sets the Wires thickness.</summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesSettings.DashedHiddenLines">
      <summary>Gets or sets the dashed hidden lines visualization.</summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesSettings.DashedHiddenLinesColor">
      <summary>Gets or sets the dashed hidden lines color.</summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesSettings.DashedHiddenLinesThickness">
      <summary>Gets or sets the dashed hidden lines thickness.</summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesSettings.DashedHiddenLinesPattern">
      <summary>Gets or sets the dashed hidden lines pattern.</summary>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesSettings.#ctor(System.Boolean,devDept.Eyeshot.hiddenLinesColorMethodType,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.Boolean,devDept.Eyeshot.silhouettesDrawingType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.UInt16)">
      <summary>Standard constructor.</summary>
      <param name="lighting">Enable/Disable lighting in hidden lines mode</param>
      <param name="colorMethod">Color used to draw the entities</param>
      <param name="showEdges">Enable/disable the edges visualization</param>
      <param name="silhouetteThickness">Thickness used to draw the silhouettes</param>
      <param name="edgeThickness">Thickness used to draw the edges</param>
      <param name="wireThickness">Thickness used to draw the wireframe entities</param>
      <param name="dashedHiddenLinesThickness">Thickness used to draw the dashed hidden lines</param>
      <param name="dashedHiddenLines">Enable/disable the dashed hidden lines visualization</param>
      <param name="silhouettesDrawingMode">Silhouettes drawing mode</param>
      <param name="silhouetteColor">Color used to draw the silhouettes</param>
      <param name="edgeColor">Color used to draw the edges</param>
      <param name="wireColor">Color used to draw the wireframe entities</param>
      <param name="dashedHiddenLinesColor">Color used to draw the dashed hidden lines</param>
      <param name="dashedHiddenLinesPattern">Pattern used to draw the dashed hidden lines</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesSettings.#ctor(System.Boolean,devDept.Eyeshot.hiddenLinesColorMethodType,System.Boolean,devDept.Eyeshot.edgeColorMethodType,System.Single,System.Single,System.Single,System.Single,System.Boolean,devDept.Eyeshot.silhouettesDrawingType,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.UInt16)">
      <summary>Standard constructor.</summary>
      <param name="lighting">Enable/Disable lighting in hidden lines mode</param>
      <param name="colorMethod">Color used to draw the entities</param>
      <param name="showEdges">Enable/disable the edges visualization</param>
      <param name="edgeColorMethod">Edges Color mode</param>
      <param name="silhouetteThickness">Thickness used to draw the silhouettes</param>
      <param name="edgeThickness">Thickness used to draw the edges</param>
      <param name="wireThickness">Thickness used to draw the wireframe entities</param>
      <param name="dashedHiddenLinesThickness">Thickness used to draw the dashed hidden lines</param>
      <param name="dashedHiddenLines">Enable/disable the dashed hidden lines visualization</param>
      <param name="silhouettesDrawingMode">Silhouettes drawing mode</param>
      <param name="showInternalWires">Internal wireframe visibility</param>
      <param name="silhouetteColor">Color used to draw the silhouettes</param>
      <param name="edgeColor">Color used to draw the edges</param>
      <param name="wireColor">Color used to draw the wireframe entities</param>
      <param name="dashedHiddenLinesColor">Color used to draw the dashed hidden lines</param>
      <param name="dashedHiddenLinesPattern">Pattern used to draw the dashed hidden lines</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesSettings.#ctor(System.Boolean,devDept.Eyeshot.hiddenLinesColorMethodType,System.Boolean,devDept.Eyeshot.edgeColorMethodType,System.Single,System.Single,System.Single,System.Single,System.Boolean,devDept.Eyeshot.silhouettesDrawingType,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.UInt16,devDept.Eyeshot.edgeColorMethodType,System.Drawing.Color)">
      <summary>Standard constructor.</summary>
      <param name="lighting">Enable/Disable lighting in hidden lines mode</param>
      <param name="colorMethod">Color used to draw the entities</param>
      <param name="showEdges">Enable/disable the edges visualization</param>
      <param name="edgeColorMethod">Edges Color mode</param>
      <param name="silhouetteThickness">Thickness used to draw the silhouettes</param>
      <param name="edgeThickness">Thickness used to draw the edges</param>
      <param name="wireThickness">Thickness used to draw the wireframe entities</param>
      <param name="dashedHiddenLinesThickness">Thickness used to draw the dashed hidden lines</param>
      <param name="dashedHiddenLines">Enable/disable the dashed hidden lines visualization</param>
      <param name="silhouettesDrawingMode">Silhouettes drawing mode</param>
      <param name="showInternalWires">Internal wireframe visibility</param>
      <param name="silhouetteColor">Color used to draw the silhouettes</param>
      <param name="edgeColor">Color used to draw the edges when <paramref name="edgeColorMethod" /> is <see cref="F:devDept.Eyeshot.edgeColorMethodType.SingleColor" /></param>
      <param name="wireColor">Color used to draw the wireframe entities when <paramref name="wireColorMethod" /> is <see cref="F:devDept.Eyeshot.edgeColorMethodType.SingleColor" /></param>
      <param name="dashedHiddenLinesColor">Color used to draw the dashed hidden lines</param>
      <param name="dashedHiddenLinesPattern">Pattern used to draw the dashed hidden lines</param>
      <param name="wireColorMethod">Wires color method</param>
      <param name="polygonColor">Color used to draw the polygons when <paramref name="colorMethod" /> is <see cref="F:devDept.Eyeshot.hiddenLinesColorMethodType.SingleColor" /></param>
    </member>
    <member name="T:devDept.Eyeshot.GfxDrawForSelectionParams">
      <summary>
            Data for the selection methods (<see cref="M:devDept.Eyeshot.Entities.Entity.DrawForSelection(devDept.Eyeshot.GfxDrawForSelectionParams)" />, <see cref="M:devDept.Eyeshot.Entities.Entity.DrawForSelectionEdges(devDept.Eyeshot.GfxDrawForSelectionParams)" />, <see cref="M:devDept.Eyeshot.Entities.Entity.DrawForSelectionFaces(devDept.Eyeshot.GfxDrawForSelectionParams)" />, <see cref="M:devDept.Eyeshot.Entities.Entity.DrawForSelectionVertices(devDept.Eyeshot.GfxDrawForSelectionParams)" />, <see cref="M:devDept.Eyeshot.Entities.Entity.DrawForSelectionWireframe(devDept.Eyeshot.GfxDrawForSelectionParams)" />)
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.GfxDrawForSelectionParams.LeafSelection">
      <summary>
            When true, the selection is performed inside the BlockReferences down to the leaf level.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.GfxDrawForSelectionParams.InternalSelection">
      <summary>
            When true, the selection is being performed inside the Entity (edge, face or vertex)
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.GfxDrawForSelectionParams.IdItemsMap">
      <summary>
            Dictionary that maps a false color id to the item with the parents needed to reach the entity instance through the BlockReference hierarchy.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.GfxDrawForSelectionParams.FalseColorIndex">
      <summary>
            Index for the color coding of the entities.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.DrawParams">
      <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.Draw(devDept.Eyeshot.DrawParams)" /> and other draw methods.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.DrawParams.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.BlockKeyedCollection,devDept.Graphics.ShaderParameters)">
      <summary>
            Constructor.
            </summary>
      <param name="viewport">The viewport.</param>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.Viewport">
      <summary>
            Gets the Viewport.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.ViewFrame">
      <summary>
            Gets the viewport bounds.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.ViewNormal">
      <summary>
            Gets the view normal.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.Height">
      <summary>
            Gets the height of the Workspace control.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.Width">
      <summary>
            Gets the width of the Workspace control.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.ScreenToWorld">
      <summary>
            Gets or sets the screen to world conversion factor.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.FontDefs">
      <summary>
            Gets or sets the fonts definitions.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.TextStyles">
      <summary>
            Gets or sets The text style collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.LineTypes">
      <summary>
            Gets or sets the line types collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.Transformation">
      <summary>
            Gets or sets the transformation applied to the object.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.ShaderParams">
      <summary>
            Gets or sets the shader parameters.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.Blocks">
      <summary>
            The Blocks collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.Layers">
      <summary>
            The layers collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.ForceGray">
      <summary>
            When true, the entity is drawn with a grayed/semi-transparent color because another component in the assembly tree was set as current.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DrawParams.ParentSelected">
      <summary>
            Tells if the parent entity is selected.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.Selected">
      <summary>
            The selected status.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DrawParams.ColorMode">
      <summary>
            The type of Color to set.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DrawParams.InsideColor">
      <summary>
            Color for not selected inner parts.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DrawParams.InsideSelectionColor">
      <summary>
            Color for selected inner parts.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DrawParams.InsideSelectionMaterial">
      <summary>
            Material for selected inner parts.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DrawParams.InsideMaterial">
      <summary>
            Material for not selected inner parts.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.SelectionStatus">
      <summary>
            Gets or sets the selection status.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.ActionMode">
      <summary>
            Gets or sets the action mode.
            </summary>
      <seealso cref="!:Design.ActionMode" />
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.PlanarReflections">
      <summary>
            Tells if the planar reflections are being drawn.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.Parents">
      <summary>
            Parents list.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawParams.Isocurves">
      <summary>
            Gets or sets the visualization of the internal wireframe.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DrawParams.LineWeightFactor">
      <summary>
            The scale factor applied to the line weights for the printing scale.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DrawParams.SelectionLineWeightScaleFactor">
      <summary>
            The scale factor applied to the line weight of selected entities.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DrawParams.EdgeThickness">
      <summary>
            Gets or sets the Edge thickness.
            </summary>
      <remarks>
            The thickness of edges, used to draw the silhouettes of <see cref="T:devDept.Eyeshot.Entities.Brep" /> when their <see cref="P:devDept.Eyeshot.Entities.Brep.SilhouettesDrawingMode" /> is not <see cref="F:devDept.Eyeshot.Entities.Brep.silhouettesDrawingType.Standard" /></remarks>
    </member>
    <member name="F:devDept.Eyeshot.DrawParams.DirectionArrowPoints">
      <summary>
            Gets or sets the points of the curve direction arrow.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.DimensionPreviewDrawParams">
      <summary>
            Data for drawing the dimension preview.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.TextHeight">
      <summary>
            The text height.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.TextGap">
      <summary>
            The text height.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.LineSize">
      <summary>
            The dimension's line width.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.Color">
      <summary>
            The dimension's color.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.DistancesScaleFactor">
      <summary>
            The scale factor distances' numeric values will be multiplied by in the actual dimension.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.LinearDimensionUnits">
      <summary>
            The units format for linear dimension.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.Precision">
      <summary>
            The precision for primary units dimension.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.TextOverride">
      <summary>
            The dimension text override.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.TextSuffix">
      <summary>
            The dimension text suffix.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.TextPrefix">
      <summary>
            The dimension text prefix.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.SuppressLeadingZeros">
      <summary>
            Hides or shows the leading zeros.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.SuppressTrailingZeros">
      <summary>
            Hides or shows the trailing zeros.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.WidthFactor">
      <summary>
            The text width factor.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.ToleranceMode">
      <summary>
            The tolerance mode.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.ToleranceSuppressLeadingZeros">
      <summary>
            Hides or shows tolerance leading zeros.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.ToleranceSuppressTrailingZeros">
      <summary>
            Hides or shows tolerance trailing zeros.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DimensionPreviewDrawParams.TolerancePrecision">
      <summary>
            The tolerance precision for primary units dimension.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.DimensionPreviewDrawParams.#ctor(System.Drawing.Color)">
      <summary>
            Color constructor.
            </summary>
      <param name="color">The dimension's color.</param>
    </member>
    <member name="M:devDept.Eyeshot.DimensionPreviewDrawParams.#ctor(System.Double,System.Drawing.Color)">
      <summary>
            Standard constructor.
            </summary>
      <param name="textHeight">The text height.</param>
      <param name="color">The dimension's color.</param>
    </member>
    <member name="M:devDept.Eyeshot.DimensionPreviewDrawParams.#ctor(System.Double,System.Drawing.Color,System.Single)">
      <summary>
             Standard constructor.
            </summary>
      <param name="textHeight">The text height.</param>
      <param name="color">The dimension's color.</param>
      <param name="lineSize">The dimension's line width.</param>
    </member>
    <member name="M:devDept.Eyeshot.DimensionPreviewDrawParams.#ctor(System.Double,System.Drawing.Color,System.Single,devDept.Eyeshot.Entities.linearDimensionUnitsType,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="textHeight">The text height.</param>
      <param name="color">The dimension's color.</param>
      <param name="lineSize">The dimension's line width.</param>
      <param name="linearDimensionUnits">The units format for linear dimension.</param>
      <param name="precision">The precision for primary units dimension.</param>
      <param name="textOverride">The dimension text override.</param>
      <param name="textSuffix">The dimension text suffix.</param>
      <param name="textPrefix">The dimension text prefix.</param>
      <param name="suppressLeadingZeros">Hides or shows the leading zeros.</param>
      <param name="suppressTrailingZeros">Hides or shows the trailing zeros.</param>
    </member>
    <!-- Badly formed XML comment ignored for member "M:devDept.Eyeshot.DimensionPreviewDrawParams.#ctor(System.Double,System.Drawing.Color,System.Single,devDept.Eyeshot.Entities.linearDimensionUnitsType,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,devDept.Eyeshot.Entities.toleranceType,System.Boolean,System.Boolean,System.Int32)" -->
    <member name="T:devDept.Eyeshot.colorType">
      <summary>
            The type of color that needs to be set.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.colorType.Wireframe">
      <summary>
            Sets <see cref="F:devDept.Eyeshot.DrawParams.InsideColor" /> as wireframe color (no lighting) for not selected entities and <see cref="F:devDept.Eyeshot.DrawParams.InsideSelectionColor" /> for selected entities.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.colorType.Shaded">
      <summary>
            Sets <see cref="F:devDept.Eyeshot.DrawParams.InsideColor" /> as shaded color for not selected entities and <see cref="F:devDept.Eyeshot.DrawParams.InsideSelectionColor" /> for selected entities.        
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.colorType.Rendered">
      <summary>
            Sets the material using <see cref="F:devDept.Eyeshot.DrawParams.InsideMaterial" /> for not selected entities and <see cref="F:devDept.Eyeshot.DrawParams.InsideSelectionMaterial" /> for selected entities.        
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.colorType.ColorWireFrameSelected_ColorFrontMaterialAmbientDiffuse_ColorBackMaterialDiffuseNotSelected">
      <summary>
            Sets <see cref="F:devDept.Eyeshot.DrawParams.InsideSelectionColor" /> as wireframe color (no lighting) for selected entities.
            Sets <see cref="F:devDept.Eyeshot.DrawParams.InsideColor" /> on the Ambient and Diffuse components of the front material and the Diffuse component of the back material for not selected entities.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.colorType.ColorFrontMaterialAmbientAndDiffuse">
      <summary>
            Sets the <see cref="F:devDept.Eyeshot.DrawParams.InsideColor" /> and <see cref="F:devDept.Eyeshot.DrawParams.InsideSelectionColor" /> on the Ambient and Diffuse components of the front material for both selected and not selected entities.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.colorType.ColorFrontMaterialAmbient">
      <summary>
            Sets the <see cref="F:devDept.Eyeshot.DrawParams.InsideColor" /> and <see cref="F:devDept.Eyeshot.DrawParams.InsideSelectionColor" /> on the Ambient component of the front material for both selected and not selected entities.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.colorType.ColorWireFrameSelected_ColorFrontMaterialAmbientNotSelected">
      <summary>
            Sets the wireframe color (no lighting) using <see cref="F:devDept.Eyeshot.DrawParams.InsideSelectionColor" /> for selected entities and the front material Ambient component
            using <see cref="F:devDept.Eyeshot.DrawParams.InsideColor" /> for not selected entities.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.RenderParams">
      <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.Render(devDept.Eyeshot.RenderParams)" />.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.RenderParams.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.BlockKeyedCollection,devDept.Graphics.ShaderParameters)">
      <summary>
            Constructor.
            </summary>
      <param name="viewport">The Viewport.</param>
    </member>
    <member name="P:devDept.Eyeshot.RenderParams.materials">
      <summary>
            Gets or sets the materials dictionary.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.RenderParams.hqrData">
      <summary>
            Gets or sets the 
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.DrawSilhouettesParams">
      <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.DrawSilhouettes(devDept.Eyeshot.DrawSilhouettesParams)" />.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.DrawSilhouettesParams.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.BlockKeyedCollection,devDept.Graphics.projectionType,System.Double[],System.Single,devDept.Graphics.ShaderParameters)">
      <summary>
            Standard constructor.
            </summary>
      <param name="viewport">
      </param>
      <param name="projectionMode">The camera projection mode.</param>
      <param name="modelViewProj">The modelViewProjection matrix.</param>
      <param name="screenToWorld">The screen to world conversion factor.</param>
      <param name="blocks">The blocks collection.</param>
      <param name="viewport">The Viewport.</param>
    </member>
    <member name="P:devDept.Eyeshot.DrawSilhouettesParams.ProjectionMode">
      <summary>
            Gets or sets the camera projection mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawSilhouettesParams.ModelViewProj">
      <summary>
            Gets or sets the modelViewProjection matrix.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawSilhouettesParams.SkipBorderEdges">
      <summary>
            If true, skips the drawing of the silhouettes on the edges with just one adjacent triangle.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawSilhouettesParams.SilhoThickness">
      <summary>
            The thickness of silhouettes.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.CompileParams">
      <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.Compile(devDept.Eyeshot.CompileParams)" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CompileParams.Legend">
      <summary>
            Gets or sets the Legend object.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CompileParams.Layers">
      <summary>
            Gets or sets the layers collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CompileParams.LineTypes">
      <summary>
            Gets or sets the line types collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CompileParams.Blocks">
      <summary>
            Gets or sets the blocks collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CompileParams.Materials">
      <summary>
            Gets or sets the materials collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CompileParams.TextStyles">
      <summary>
            Gets or sets the text styles collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CompileParams.Units">
      <summary>
            Gets or sets the linear units of the enclosing <see cref="T:devDept.Eyeshot.Block" />.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.CompileParams.#ctor(devDept.Eyeshot.Workspace)">
      <summary>
            Standard constructor.
            </summary>
      <param name="workspace">The workspace control.</param>
    </member>
    <member name="M:devDept.Eyeshot.CompileParams.#ctor(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.Workspace)">
      <summary>
            Constructor.
            </summary>
      <param name="entity">The entity.</param>
      <param name="workspace">The workspace control.</param>
    </member>
    <member name="M:devDept.Eyeshot.CompileParams.UpdateLineType(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Updates the current line type with the line type of the entity.
            </summary>
      <param name="entity">The entity</param>
    </member>
    <member name="M:devDept.Eyeshot.CompileParams.UpdateLineType(devDept.Eyeshot.Entities.Entity,devDept.Eyeshot.LineTypeKeyedCollection,devDept.Eyeshot.LayerKeyedCollection)">
      <summary>
            Updates the current line type with the line type of the entity.
            </summary>
      <param name="entity">The entity</param>
      <param name="lineTypes">The line types collection</param>
      <param name="layers">The layers list</param>
    </member>
    <member name="P:devDept.Eyeshot.CompileParams.LineType">
      <summary>
            Gets or sets the line type.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.DrawOnScreenWireframeParams">
      <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.DrawOnScreenWireframe(devDept.Eyeshot.DrawOnScreenWireframeParams)" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawOnScreenWireframeParams.Camera">
      <summary>
            Gets of set the Camera.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawOnScreenWireframeParams.ViewFrame">
      <summary>
            Gets or sets the viewport bounds.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawOnScreenWireframeParams.DigitsTexture">
      <summary>
            Gets or sets the texture used to draw the vertices numbers.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawOnScreenWireframeParams.RenderContext">
      <summary>
            Gets or sets the render context.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawOnScreenWireframeParams.ModelViewProj">
      <summary>
            Gets the ModelView projection matrix.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.DrawOnScreenWireframeParams.#ctor(devDept.Eyeshot.Camera,System.Int32[],devDept.Graphics.TextureMosaic)">
      <summary>
            Constructor.
            </summary>
      <param name="camera">The camera</param>
      <param name="viewFrame">The viewport bounds</param>
      <param name="digitsTexture">The <see cref="T:devDept.Graphics.TextureMosaic" /> used to draw the vertices numbers</param>
    </member>
    <member name="T:devDept.Eyeshot.DrawOnScreenParams">
      <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.DrawOnScreen(devDept.Eyeshot.DrawOnScreenParams)" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawOnScreenParams.DepthValues">
      <summary>
            Gets or sets the depth values of the scene.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawOnScreenParams.Stride">
      <summary>
            Gets or sets the stride of each row of depth values.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawOnScreenParams.LeftBorder">
      <summary>
            Gets or sets the viewport left border minus the vertex size.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawOnScreenParams.RightBorder">
      <summary>
            Gets or sets the viewport right border minus the vertex size.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawOnScreenParams.BottomBorder">
      <summary>
            Gets or sets the viewport bottom border minus the vertex size.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DrawOnScreenParams.TopBorder">
      <summary>
            Gets or sets the viewport top border minus the vertex size.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.DrawOnScreenParams.#ctor(devDept.Graphics.RenderContextBase,devDept.Eyeshot.Camera,System.Int16[],System.Int32,System.Int32[],devDept.Graphics.TextureMosaic,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructor.
            </summary>
      <param name="renderContext">The render context</param>
      <param name="camera">The viewport camera</param>
      <param name="depthValues">The depth values of the scene</param>
      <param name="stride">The stride of each row of depth values</param>
      <param name="viewFrame">The viewport bounds</param>
      <param name="digitsTexture">The <see cref="T:devDept.Graphics.TextureMosaic" /> used to draw the vertices numbers</param>
      <param name="leftBorder">The viewport left border minus the vertex size</param>
      <param name="rightBorder">The viewport right border minus the vertex size</param>
      <param name="bottomBorder">The viewport bottom border minus the vertex size</param>
      <param name="topBorder">The viewport top border minus the vertex size</param>
    </member>
    <member name="T:devDept.Eyeshot.RegenParams">
      <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.Regen(devDept.Eyeshot.RegenParams)" />.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.RegenParams.#ctor(System.Double,devDept.Eyeshot.Workspace)">
      <summary>
            Deviation and <see cref="T:devDept.Eyeshot.Workspace" /> control constructor.
            </summary>
      <param name="deviation">The maximum deviation.</param>
      <param name="workspace">The workspace control.</param>
    </member>
    <member name="M:devDept.Eyeshot.RegenParams.#ctor(System.Double,System.Double,devDept.Eyeshot.Workspace)">
      <summary>
            Deviation and angle constructor.
            </summary>
      <param name="deviation">The maximum deviation</param>
      <param name="angle">The maximum angular deflection in radians. Ignored when zero.</param>
      <param name="workspace">The workspace control. Can be null/Nothing when annotation entities (<see cref="T:devDept.Eyeshot.Entities.Text" />, <see cref="T:devDept.Eyeshot.Entities.Dimension" />, etc.) are not involved.</param>
    </member>
    <member name="M:devDept.Eyeshot.RegenParams.#ctor(System.Double,System.Double,System.Double,devDept.Eyeshot.Workspace)">
      <summary>
            Deviation, angle and maxLength constructor.
            </summary>
      <param name="deviation">The maximum deviation</param>
      <param name="angle">The maximum angular deflection in radians. Ignored when zero.</param>
      <param name="maxLength">The maximum segment or triangle side length. Ignored when zero.</param>
      <param name="workspace">The workspace control. Can be null/Nothing when annotation entities (<see cref="T:devDept.Eyeshot.Entities.Text" />, <see cref="T:devDept.Eyeshot.Entities.Dimension" />, etc.) are not involved.</param>
    </member>
    <member name="P:devDept.Eyeshot.RegenParams.Deviation">
      <summary>
            Gets the maximum deviation. Determines the value between the analytical surface and its triangulation. The lower is the deviation value, the more accurate is the result.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.RegenParams.Angle">
      <summary>
            Gets the maximum angular deflection in radians, ignored when zero.
            </summary>
      <remarks>This setting dictates the minimum number of facets around a smaller circle or cylinder regardless of the <see cref="P:devDept.Eyeshot.RegenParams.Deviation" /> setting, and gives you added control over faces with very small radii. Lower values result in finer tessellations, while higher values give coarser tessellations.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.RegenParams.MaxLength">
      <summary>
            Gets the maximum segment or triangle side length, ignored when zero.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.RegenParams.FontDefs">
      <summary>
            Gets or sets The text style collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.RegenParams.TextStyles">
      <summary>
            Gets or sets The text style collection.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.TraversalParams">
      <summary>
            Base class that holds the data for many Entity methods.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.TraversalParams.Blocks">
      <summary>
            Gets blocks collection.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.TraversalParams.#ctor(devDept.Geometry.Transformation)">
      <summary>
            Standard constructor.
            </summary>
      <param name="transform">The initial transformation to apply to the vertices</param>
    </member>
    <member name="M:devDept.Eyeshot.TraversalParams.#ctor(devDept.Eyeshot.Workspace,devDept.Geometry.Transformation)">
      <summary>
            Standard constructor.
            </summary>
      <param name="workspace">The workspace</param>
      <param name="transform">The initial transformation to apply to the vertices</param>
    </member>
    <member name="M:devDept.Eyeshot.TraversalParams.#ctor(devDept.Eyeshot.BlockKeyedCollection,devDept.Geometry.Transformation)">
      <summary>
            Standard constructor with blocks.
            </summary>
      <param name="blocks">The blocks collection</param>
      <param name="transform">The initial transformation to apply to the vertices</param>
      <remarks>You can use this constructor to call the <see cref="M:devDept.Eyeshot.Entities.Entity.UpdateBoundingBox(devDept.Eyeshot.TraversalParams)" /> method for a single <see cref="T:devDept.Eyeshot.Entities.BlockReference" />.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.TraversalParams.#ctor(devDept.Eyeshot.Entities.BlockReference,devDept.Eyeshot.BlockKeyedCollection,devDept.Eyeshot.Workspace)">
      <summary>
            Standard constructor.
            </summary>
      <param name="blockRef">The BlockReference whose transformation is applied to the vertices</param>
      <param name="blocks">The blocks collection</param>
    </member>
    <member name="P:devDept.Eyeshot.TraversalParams.Transformation">
      <summary>
            Gets the transformation to apply to the vertices.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.TraversalParams.PushTransformation(devDept.Eyeshot.Entities.BlockReference)">
      <summary>
            Multiplies the transformation of the blockReference by the current transformation and pushes the resulting transformation on the stack.
            </summary>
      <param name="blockReference">The BlockReference</param>
    </member>
    <member name="M:devDept.Eyeshot.TraversalParams.PushTransformation(devDept.Geometry.Transformation)">
      <summary>
            Multiplies the transformation by the current transformation and pushes the resulting transformation on the stack.
            </summary>
      <param name="transform">The transformation</param>
      <remarks>If <param name="transform" /> is null, pushes the current transformation on the stack and puts a null transformation on top of it.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.TraversalParams.PopTransformation">
      <summary>
            Pops the last transformation from the stack.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.TraversalParams.Workspace">
      <summary>
            Gets the Workspace control.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.TraversalParams.SkipTexts">
      <summary>
            When true the Text entities are not regenerated.
            </summary>
      <remarks>This can be useful when the <see cref="P:devDept.Eyeshot.TraversalParams.Workspace" /> is null.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.TraversalParams.Parents">
      <summary>
            Parents list.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.FrustumParams">
      <summary>
            Data for Entity methods doing operations based on the camera frustum.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.FrustumParams.#ctor(devDept.Geometry.PlaneEquation[],devDept.Geometry.Segment3D[],devDept.Eyeshot.displayType,System.Single,devDept.Eyeshot.LineType,System.Int32,devDept.Eyeshot.Workspace,devDept.Geometry.Transformation)">
      <summary>
            Standard constructor.
            </summary>
      <param name="frustum">The six frustum planes</param>
      <param name="selectionEdges">The four edges surrounding the selection area</param>
      <param name="displayMode">The display mode</param>
      <param name="screenToWorld">The screen to world conversion factor</param>
      <param name="lineType">The line type</param>
      <param name="maxPatternRepetitions">The maximum number of pattern repetitions allowed between two vertices of a curve</param>
      <param name="workspace">The workspace control</param>
      <param name="transformation">The transformation to apply to the entities</param>
    </member>
    <member name="M:devDept.Eyeshot.FrustumParams.#ctor(devDept.Geometry.PlaneEquation[],devDept.Eyeshot.Workspace)">
      <summary>
            Constructor with frustum planes.
            </summary>
      <param name="frustum">The six frustum planes</param>
      <param name="workspace">The workspace control</param>
    </member>
    <member name="M:devDept.Eyeshot.FrustumParams.#ctor(devDept.Geometry.PlaneEquation[],System.Boolean,devDept.Eyeshot.Workspace)">
      <summary>
            Constructor with frustum planes and quick option.
            </summary>
      <param name="frustum">The six frustum planes</param>
      <param name="quick">When true a quick test is done, otherwise a more accurate one is performed.</param>
      <param name="workspace">The workspace control</param>
    </member>
    <member name="P:devDept.Eyeshot.FrustumParams.SelectionEdges">
      <summary>
            Gets or sets the four edges surrounding the selection area.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.FrustumParams.Frustum">
      <summary>
            Gets or sets the six planes surrounding the selection area.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.FrustumParams.DisplayMode">
      <summary>
            Gets or sets the display mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.FrustumParams.ScreenToWorld">
      <summary>
            Gets or sets the screen to world conversion factor.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.FrustumParams.LineType">
      <summary>
            Gets or sets the line type.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.FrustumParams.MaxPatternRepetitions">
      <summary>
            Gets or sets the maximum number of pattern repetitions allowed between two vertices of a curve.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.FrustumParams.Quick">
      <summary>
            If true, a quick test is done, else a more accurate one is performed.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.FrustumParams.SmallParams">
      <summary>
            Gets or sets the IsSmallParams
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.FrustumParams.Scale">
      <summary>
            Gets the scale to apply to the sphere radius by the <see cref="T:devDept.Geometry.Transformation" />.
            </summary>
      <remarks>In case of non uniform scale, the maximum scale is used.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.ScreenPolygonParams">
      <summary>
            Data for Entity methods doing operations based on a screen polygon.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ScreenPolygonParams.#ctor(System.Int32[],System.Double[],System.Collections.Generic.IList{devDept.Geometry.Point2D},System.Collections.Generic.IList{devDept.Geometry.Segment2D},devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Eyeshot.displayType,System.Single,devDept.Eyeshot.Workspace,devDept.Geometry.Transformation)">
      <summary>
            Standard constructor.
            </summary>
      <param name="viewFrame">Tee viewport bounds</param>
      <param name="modelViewProj">The modelview projection matrix</param>
      <param name="screenPolygon">The 2D points defining the screen polygon</param>
      <param name="screenSegments">The segments defining the polygon in screen coordinates</param>
      <param name="min">The minimum value of the polygon points</param>
      <param name="max">The maximum value of the polygon points</param>
      <param name="displayMode">The display mode</param>
      <param name="screenToWorld">The screen to world conversion factor</param>
      <param name="workspace">The workspace control</param>
      <param name="transform">The transformation to apply to the entities</param>
    </member>
    <member name="P:devDept.Eyeshot.ScreenPolygonParams.ViewportSize">
      <summary>
            Gets or sets the size of the viewport.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ScreenPolygonParams.ScreenPolygon">
      <summary>
            Gets or sets the 2D points defining the screen polygon (0 on bottom).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ScreenPolygonParams.ScreenSegments">
      <summary>
            Gets or sets the segments defining the polygon in screen coordinates.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ScreenPolygonParams.Min">
      <summary>
            Gets or sets the minimum value of the polygon points.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ScreenPolygonParams.Max">
      <summary>
            Gets or sets the maximum value of the polygon points.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ScreenPolygonParams.ViewFrame">
      <summary>
            Gets or sets the viewport bounds.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ScreenPolygonParams.ModelViewProj">
      <summary>
            Gets or sets the modelView projection matrix.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.OffsetOnCameraAxesParams">
      <summary>
            Data for <see cref="M:devDept.Eyeshot.Entities.Entity.ComputeOffsetOnCameraAxes(devDept.Eyeshot.OffsetOnCameraAxesParams)" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.OffsetOnCameraAxesParams.m1">
      <summary>
            Gets or sets the angular coefficients of right and top frustum lines.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.OffsetOnCameraAxesParams.m2">
      <summary>
            Gets or sets the angular coefficients of left and bottom frustum lines.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.OffsetOnCameraAxesParams.MinQ">
      <summary>
            Gets or sets the minimum offset of the lines intersections on X and Y camera axes;
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.OffsetOnCameraAxesParams.MaxQ">
      <summary>
            Gets or sets the maximum offset of the lines intersections on X and Y camera axes.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.IsSmallParams">
      <summary>
            Data for the <see cref="M:devDept.Eyeshot.Entities.Entity.IsSmall(devDept.Eyeshot.IsSmallParams)" /> method.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.IsSmallParams.Transformation">
      <summary>
            Gets or sets the accumulated parents transformation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.IsSmallParams.ModelViewProj">
      <summary>
            Gets or sets the modelview projection matrix.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.IsSmallParams.ViewFrame">
      <summary>
            Gets or sets the viewport bounds.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.IsSmallParams.SmallSize">
      <summary>
            Gets or sets the <see cref="P:devDept.Eyeshot.Viewport.SmallSizeRatioMoving" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.IsSmallParams.RenderContext">
      <summary>
            Gets or sets the render context.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.PreProcessSilhouettesParams">
      <summary>
            Data for the <see cref="M:devDept.Eyeshot.HiddenLinesView.PreProcessHDL``1(devDept.Eyeshot.PreProcessSilhouettesParams)" /> method.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.PreProcessSilhouettesParams.Blocks">
      <summary>
            The blocks collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.PreProcessSilhouettesParams.Parents">
      <summary>
            The parents.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.selectionStatusType">
      <summary>
            The selection status type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.selectionStatusType.None">
      <summary>
            The item is not selected.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.selectionStatusType.Permanent">
      <summary>
            The item is selected.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.selectionStatusType.Temporary">
      <summary>
            The item is temporarily selected during a dynamic selection session.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ISelectableItem">
      <summary>
            Interface for selectable items.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ISelectableItem.Selected">
      <summary>
            Gets or sets the selection status.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ISelectableItem.Selectable">
      <summary>
            Gets or sets the value that tells if the item can be selected.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ISelectableItem.IsSelected(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Tells if the instance referred by the stack of parents is selected.
            </summary>
      <param name="parents">The parents stack that identifies the component instance</param>
      <returns>True if the instance is selected, false otherwise</returns>
    </member>
    <member name="M:devDept.Eyeshot.ISelectableItem.GetSelection(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Tells if the instance referred by the stack of parents is selected.
            </summary>
      <param name="parents">The parents stack that identifies the component instance (not used for Labels)</param>
      <returns>True if the instance is selected, false otherwise</returns>
    </member>
    <member name="M:devDept.Eyeshot.ISelectableItem.IsAnyInstanceSelected">
      <summary>
            Tells if there is at least an instance selected.
            </summary>
      <returns>True if there is at least an instance selected.</returns>
    </member>
    <member name="M:devDept.Eyeshot.ISelectableItem.ClearSelectionForAllInstances">
      <summary>
            Clears the selection info for all instances.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "P:devDept.Eyeshot.Properties.Resource.ThreeJsTemplate" -->
    <member name="T:devDept.Eyeshot.edgeColorMethodType">
      <summary>Edge color type.</summary>
    </member>
    <member name="F:devDept.Eyeshot.edgeColorMethodType.SingleColor">
      <summary>
            The color is defined <see cref="P:devDept.Eyeshot.DisplayModeSettings.EdgeColorMethod" /></summary>
    </member>
    <member name="F:devDept.Eyeshot.edgeColorMethodType.EntityColor">
      <summary>
            The color is defined by the entity color
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.hiddenLinesColorMethodType">
      <summary>Hidden Lines color type.</summary>
    </member>
    <member name="F:devDept.Eyeshot.hiddenLinesColorMethodType.SingleColor">
      <summary>
            The color is defined <see cref="P:devDept.Eyeshot.HiddenLinesSettings.WireColor" /></summary>
    </member>
    <member name="F:devDept.Eyeshot.hiddenLinesColorMethodType.EntityColor">
      <summary>
            The color is defined by the entity color
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.hiddenLinesColorMethodType.EntityMaterial">
      <summary>
            The color is defined by the entity material
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.flatColorMethodType">
      <summary>Flat color method type.</summary>
    </member>
    <member name="F:devDept.Eyeshot.flatColorMethodType.EntityColor">
      <summary>
            The color is defined by the entity color
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.flatColorMethodType.EntityMaterial">
      <summary>
            The color is defined by the entity material
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.rotationType">
      <summary>
            Rotation mode type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.rotationType.Trackball">
      <summary>
            Trackball
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.rotationType.Turntable">
      <summary>
            Turntable
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.zoomStyleType">
      <summary>
            Zoom type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.zoomStyleType.Centered">
      <summary>
            At viewport center.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.zoomStyleType.AtCursorLocation">
      <summary>
            At current mouse cursor location.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.zoomFitType">
      <summary>
            Zoom Fit type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.zoomFitType.Standard">
      <summary>
            No optimization applied during zoom fit.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.zoomFitType.ConvexHull">
      <summary>
            Build 3D ConvexHull at the first ZoomFit call to speed up the next zoom fits (useful for heavy 3D models).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.zoomFitType.ConvexHull2D">
      <summary>
            Build 2D ConvexHull at the first ZoomFit call to speed up the next zoom fits (useful for heavy 2D drawings).
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.rotationCenterType">
      <summary>
            Rotation center type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.rotationCenterType.ViewportCenter">
      <summary>
            Viewport center.
            If the model is all inside the camera frustum, it rotates around its bounding box center.
            Else it rotates around the viewport center at a mean depth of the current visible scene.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.rotationCenterType.CursorLocation">
      <summary>
            Current mouse cursor location.
            If the model is all inside the camera frustum, it rotates around its bounding box center. 
            Else it rotates around the point under the mouse. If under the mouse there is no depth, the rotation happens around the viewport center at a mean depth of the current visible scene.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.rotationCenterType.Point">
      <summary>
            Rotates around the <see cref="P:devDept.Eyeshot.RotateSettings.Center" />.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.silhouettesDrawingType">
      <summary>
            Silhouettes drawing type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.silhouettesDrawingType.Never">
      <summary>
            Never draws the silhouettes.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.silhouettesDrawingType.Always">
      <summary>
            Draws the silhouettes at each frame (slower).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.silhouettesDrawingType.LastFrame">
      <summary>
            Draws the silhouettes only in the last frame of a zoom / pan / rotation sequence.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.actionType">
      <summary>
            Viewport action type.
            </summary>
      <seealso cref="!:Design.ActionMode" />
    </member>
    <member name="F:devDept.Eyeshot.actionType.None">
      <summary>
            None
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.Zoom">
      <summary>
            Zoom +/-
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.Pan">
      <summary>
            Pan
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.Rotate">
      <summary>
            Rotate
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.ZoomWindow">
      <summary>
            Zoom Window
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.MagnifyingGlass">
      <summary>
            Magnifying glass view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.SelectByPick">
      <summary>
            Entity selection by pick. A single random item crossing the pick box.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.SelectByBox">
      <summary>
            Entity selection by box. All items crossing the selection box.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.SelectByPolygon">
      <summary>
            Entity selection by polygon. All items crossing the selection polygon.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.SelectVisibleByPick">
      <summary>
            Entity selection by pick on visible only. The single item (closest to the user) crossing the pick box.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.SelectVisibleByPickDynamic">
      <summary>
            Entity selection by pick on visible only. The single item (closest to the user) crossing the pick box. Performed dynamically during the mouse movement.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.SelectVisibleByBox">
      <summary>
            Entity selection by box on visible only. All items (closest to the user) crossing the selection box.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.SelectVisibleByPolygon">
      <summary>
            Entity selection by polygon on visible only. All items (closest to the user) crossing the selection polygon.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.SelectByBoxEnclosed">
      <summary>
            Entity selection by box on enclosed items only. All items entirely enclosed in the selection box.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.SelectByPolygonEnclosed">
      <summary>
            Entity selection by polygon on enclosed only. All items entirely enclosed in the selection polygon.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.actionType.SelectVisibleByPickLabel">
      <summary>
            Label selection by pick on visible only.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.selectionFilterType">
      <summary>
            The selection filter type.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Design.SelectionFilterMode" />
    </member>
    <member name="F:devDept.Eyeshot.selectionFilterType.Entity">
      <summary>
            Selects the whole entity.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.selectionFilterType.Vertex">
      <summary>
            Selects the vertex (only for Brep).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.selectionFilterType.Edge">
      <summary>
            Selects the edge (only for Brep).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.selectionFilterType.Face">
      <summary>
            Selects the face (only for Brep, Solid, Mesh).
            </summary>
      <remarks>Not supported by <see cref="!:Design.AccurateTransparency" /></remarks>
    </member>
    <member name="F:devDept.Eyeshot.selectionFilterType.SubCurve">
      <summary>
            Selects the subCurve (only for CompositeCurve).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.selectionFilterType.Contour">
      <summary>
            Selects the contours (only for Region).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.selectionFilterType.SketchPoint">
      <summary>
            Selects the point  (only for Sketch).
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.selectionFilterType.SketchCurve">
      <summary>
            Selects the curve (only for Sketch).
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.viewportLayoutType">
      <summary>
            Viewports layout type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewportLayoutType.None">
      <summary>
            No viewports
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewportLayoutType.SingleViewport">
      <summary>
            One viewport
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewportLayoutType.TwoViewportsVertical">
      <summary>
            Two viewports, split vertically
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewportLayoutType.TwoViewportsHorizontal">
      <summary>
            Two viewports split horizontally
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewportLayoutType.ThreeViewportsWithOneOnLeft">
      <summary>
            One viewport on the left and two on the right
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewportLayoutType.ThreeViewportsWithOneOnTop">
      <summary>
            One viewport on top and two on bottom
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewportLayoutType.ThreeViewportsWithOneOnRight">
      <summary>
            One viewport on the right and two on the left
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewportLayoutType.ThreeViewportsWithOneOnBottom">
      <summary>
            One viewport on bottom and two on top
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewportLayoutType.FourViewports">
      <summary>
            Four viewports
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewportLayoutType.Stacked">
      <summary>
            Vertical stack layout
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.attributeReferenceVisibilityType">
      <summary>
            AttributeReference visibility type.
            </summary>
      <seealso cref="T:devDept.Eyeshot.AttributeReference" />
    </member>
    <member name="F:devDept.Eyeshot.attributeReferenceVisibilityType.Off">
      <summary>
            All AttributeReferences are invisible
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.attributeReferenceVisibilityType.Normal">
      <summary>
            Retains current visibility of each AttributeReference; visible ones are displayed; invisible ones are not
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.attributeReferenceVisibilityType.On">
      <summary>
            All AttributeReferences are visible
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesViewOnClipboard">
      <summary>Class that copies a vectorial image of the current scene of the active viewport into the clipboard.</summary>
      <example>
                 The following code fragment demonstrates how to use this class to copy a vectorial image of the current scene of the active viewport into the clipboard.
                 <code lang="CS" title="[New Example]">
                        HiddenLinesViewOnClipboard hdlView = new HiddenLinesViewOnClipboard(new HiddenLinesViewSettings(viewport1));
                        viewport1.StartWork(hdlView);
                 </code><code lang="VB" title="[New Example]">
                        Dim hdlView As New HiddenLinesViewOnClipboard(new HiddenLinesViewSettings(Viewport1))
                        Viewport1.StartWork(hdlView)
             </code></example>
      <seealso cref="!:Design.CopyToClipboardVector" />
    </member>
    <member name="F:devDept.Eyeshot.HiddenLinesViewOnClipboard.FileName">
      <summary>
            The name of the file to save.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.HiddenLinesViewOnClipboard.Scale">
      <summary>
            The scale of the drawing
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewOnClipboard.#ctor(devDept.Eyeshot.HiddenLinesViewSettings)">
      <summary>Constructor.
            </summary>
      <param name="viewSettings">Hidden Lines computation settings</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewOnClipboard.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.Double)">
      <summary>Constructor.
            </summary>
      <param name="viewSettings">Hidden Lines computation settings</param>
      <param name="scale">The scale of the drawing</param>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesViewOnFile">
      <summary>Class that saves a vectorial image of the current scene of the active viewport on disk in EMF format.</summary>
      <example>
                The following code fragment demonstrates how to save a vectorial image of the current scene of the active viewport on disk.
                <code lang="CS" title="[New Example]">
                       HiddenLinesViewOnFile hdlView = new HiddenLinesViewOnFile(new HiddenLinesViewSettings(viewport1), fileName);
                       viewport1.StartWork(hdlView);
                </code><code lang="VB" title="[New Example]">
                       Dim hdlView As New HiddenLinesViewOnFile(new HiddenLinesViewSettings(Viewport1), FileName)
                       Viewport1.StartWork(hdlView)
            </code></example>
      <seealso cref="!:Design.WriteToFileVector" />
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewOnFile.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.String)">
      <summary>Constructor.
            </summary>
      <param name="viewSettings">Hidden Lines computation settings</param>
      <param name="filename">The name of the file to save</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewOnFile.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.String,System.Double)">
      <summary>Constructor.
            </summary>
      <param name="viewSettings">Hidden Lines computation settings</param>
      <param name="filename">The name of the file to save</param>
      <param name="scale">The scale of the drawing</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesViewOnPaper">
      <summary>Class that prints a vectorial image of the current scene.</summary>
      <example>
                The following code fragment demonstrates how to print a vectorial image of the current scene of the active viewport.
                <code lang="CS" title="[New Example]">
                       HiddenLinesViewOnPaper hdlView = new HiddenLinesViewOnPaper(new HiddenLinesViewSettings(viewport1));
                       viewport1.StartWork(hdlView);
                </code><code lang="VB" title="[New Example]">
                       Dim hdlView As New HiddenLinesViewOnPaper(new HiddenLinesViewSettings(Viewport1))
                       Viewport1.StartWork(hdlView)
            </code></example>
      <seealso cref="!:Design.WriteToFileVector" />
      <seealso cref="M:devDept.Eyeshot.Design.Print(System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Design.PrintPreview(System.Drawing.Size,System.Boolean)" />
    </member>
    <member name="F:devDept.Eyeshot.HiddenLinesViewOnPaper.PrintRect">
      <summary>
            The print rectangle in page units.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewOnPaper.OrthographicScale">
      <summary>
            The scale of the printed drawing (orthographic camera only).
            </summary>
      <remarks>If 0, the view is fitted in the printing rectangle.</remarks>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesViewOnPaper.Units" />
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewOnPaper.Units">
      <summary>
            Gets or sets the units of the design.
            </summary>
      <remarks>Affects the size of the design on paper with Orthographic camera projection mode.</remarks>
      <see cref="P:devDept.Eyeshot.HiddenLinesViewOnPaper.OrthographicScale" />
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewOnPaper.LineWeightUnits">
      <summary>
            Gets or sets the line weight units used for printing.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.Entity.LineWeight" />
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaper.#ctor(devDept.Eyeshot.HiddenLinesViewSettings)">
      <summary>Extents mode constructor.</summary>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaper.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.Double)">
      <summary>Constructor.</summary>
      <param name="viewSettings">Hidden Lines computation settings</param>
      <param name="orthographicScale">The scale of the printed drawing (orthographic camera only)</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaper.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.Double,System.Drawing.RectangleF)">
      <summary>Constructor.</summary>
      <param name="viewSettings">Hidden Lines computation settings</param>
      <param name="orthographicScale">The scale of the printed drawing (orthographic camera only)</param>
      <param name="printRect">The print rectangle in page units</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaper.Print(System.Drawing.Printing.PrintPageEventArgs)">
      <summary>Prints the computed lines.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesViewOnPaper.ScaleViewToPageUnits">
      <summary>
            Gets the factors to scale the view coordinates to page coordinates.
            </summary>
      <remarks>This data is available after the <see cref="M:devDept.Eyeshot.HiddenLinesViewOnPaper.Print(System.Drawing.Printing.PrintPageEventArgs)" /> method has been called.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesViewOnPaperPreview">
      <summary>Class that prints a vectorial image of the current scene of the active viewport, opening a Print Preview dialog.</summary>
      <example>
                The following code fragment demonstrates how to print a vectorial image of the current scene of the active viewport.
                <code lang="CS" title="[New Example]">
                       HiddenLinesViewOnPaperPreview hdlView = new HiddenLinesViewOnPaperPreview(new HiddenLinesViewSettings(viewport1));
                       viewport1.StartWork(hdlView);
                </code><code lang="VB" title="[New Example]">
                       Dim hdlView As New HiddenLinesViewOnPaperPreview(new HiddenLinesViewSettings(Viewport1))
                       Viewport1.StartWork(hdlView)
            </code></example>
      <seealso cref="!:Design.WriteToFileVector" />
      <seealso cref="M:devDept.Eyeshot.Design.Print(System.Boolean)" />
      <seealso cref="M:devDept.Eyeshot.Design.PrintPreview(System.Drawing.Size,System.Boolean)" />
    </member>
    <member name="F:devDept.Eyeshot.HiddenLinesViewOnPaperPreview.PrintPreviewDlgClientSize">
      <summary>
            Size of the Print Preview form client area.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaperPreview.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.Drawing.Size)">
      <summary>Constructor.</summary>
      <param name="viewSettings">Hidden Lines computation settings</param>
      <param name="printPreviewDlgClientSize">Size of the Print Preview form client area</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaperPreview.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.Drawing.Size,System.Double)">
      <summary>Constructor.</summary>
      <param name="viewSettings">Hidden Lines computation settings</param>
      <param name="printPreviewDlgClientSize">Size of the Print Preview form client area</param>
      <param name="orthographicScale">The scale of the printed drawing (orthographic camera only)</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesViewOnPaperPreview.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.Drawing.Size,System.Double,System.Drawing.RectangleF)">
      <summary>Constructor.</summary>
      <param name="viewSettings">Hidden Lines computation settings</param>
      <param name="printPreviewDlgClientSize">Size of the Print Preview form client area</param>
      <param name="orthographicScale">The scale of the printed drawing (orthographic camera only)</param>
      <param name="printRect">The print rectangle in page units</param>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesView">
      <summary>Class that computes silhouettes and hidden lines.
            </summary>
      <example>
             Usage example.
             	<code lang="CS" title="[HiddenLines computation]">
             var hdls = new HiddenLinesViewSettings(environment1.Viewports[0], environment1, 0.1);
             
             hdls.KeepHiddenSegments = true; // in order to keep the hidden segments
             
             var hdl = new HiddenLinesView(hdls);
             environment1.DoWork(hdl);
             
             var silho = hdl.GetSilhouettes();
             var hiddenSilho = hdl.GetHiddenSilhouettes();
             
             var edges = hdl.GetEdges();
             var hiddenEdges = hdl.GetHiddenEdges();
             
             var wires = hdl.GetWires();
             var hiddenWires = hdl.GetHiddenWires();
             </code><code lang="VB" title="[HiddenLines computation]">
             Dim hdls as HiddenLinesViewSettings = New HiddenLinesViewSettings(environment1.Viewports(0), environment1, 0.1)
             hdls.KeepHiddenSegments = True ' in order to keep the hidden segments
             Dim hdl = New HiddenLinesView(hdls)
             environment1.DoWork(hdl)
             
             Dim silho As IList(Of Segment2D) = hdl.GetSilhouettes()
             Dim hiddenSilho As IList(Of Segment2D) = hdl.GetHiddenSilhouettes()
             
             Dim edges As IList(Of Segment2D) = hdl.GetEdges()
             Dim hiddenEdges As IList(Of Segment2D) = hdl.GetHiddenEdges()
             
             Dim wires As IList(Of Segment2D) = hdl.GetWires()
             Dim hiddenWires As IList(Of Segment2D) = hdl.GetHiddenWires()
             </code></example>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesView.HdlResult">
      <summary>
            Base class for data resulting from HiddenLinesView computation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlResult.Entity">
      <summary>
            Gets the entity the result belongs to.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlResult.Attributes">
      <summary>
            Gets the attributes inherited from the parent entity.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlResult.Parents">
      <summary>
            Gets the nested <see cref="T:devDept.Eyeshot.Entities.BlockReference" /> parents chain.
            </summary>
      <remarks>On top of the stack is the root of the hierarchy.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesView.HdlCurve">
      <summary>
            Base class for curves resulting from HiddenLinesView computation.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlCurve.EdgeIndex">
      <summary>
            Gets the associated <see cref="T:devDept.Eyeshot.Entities.Brep" /> edge index.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesView.HdlLinearPath">
      <summary>
            Defines a 2D piecewise linear curve along with information about the entity it belongs to.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlLinearPath.Vertices">
      <summary>
            Gets the LinearPath vertices.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesView.HdlArc">
      <summary>
            Defines an 2D Arc along with information about the entity it belongs to.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlArc.Center">
      <summary>
            Gets the arc's center.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlArc.Radius">
      <summary>
            Gets the arc's radius.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlArc.Angle">
      <summary>
            Gets the arc's angle.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesView.HdlMesh">
      <summary>
            Defines a mesh along with information about the entity it belongs to.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlMesh.Mesh">
      <summary>
            Gets the mesh object.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesView.HdlText">
      <summary>
            Defines a class representing text data along with information about the entity it belongs to.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlText.Text">
      <summary>
            Gets the text string.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlText.FontFamilyName">
      <summary>
            Gets the font family name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlText.FontStyle">
      <summary>
            Gets the font style.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlText.RectangleText">
      <summary>
            Gets the rectangle surrounding the text.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HdlText.IsFlipped">
      <summary>
            Indicates whether the dimension's text is flipped or not according to the
            quadrant on the two-dimensional Cartesian system.
            </summary>
      <remarks>
            This is relevant for radial, diametrical and angular dimensions.
            </remarks>
    </member>
    <member name="T:devDept.Eyeshot.HiddenLinesView.HdlPicture">
      <summary>
            Defines a class representing picture with information about the entity it belongs to.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesView.#ctor(devDept.Eyeshot.Workspace)">
      <summary>Constructor.</summary>
      <param name="workspace">The workspace control to process</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesView.#ctor(devDept.Eyeshot.Workspace,System.Double)">
      <summary>Constructor.</summary>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesView.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace)">
      <summary>Extents mode constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesView.#ctor(devDept.Eyeshot.Viewport,devDept.Eyeshot.Workspace,System.Double)">
      <summary>Extents mode constructor.
            </summary>
      <param name="viewport">The viewport to process</param>
      <param name="workspace">The workspace control to process</param>
      <param name="fontTolerance">This tolerance controls the font accuracy</param>
      <param name="parallel">Enables or disables the usage of the Parallel Extension for .NET</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesView.#ctor(devDept.Eyeshot.HiddenLinesViewSettings)">
      <summary>Constructor.
            </summary>
      <param name="viewSettings">Hidden Lines computation settings</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesView.#ctor(devDept.Eyeshot.HiddenLinesViewSettings,System.Boolean)">
      <summary>
            Constructor for internal use only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesView.DoWork">
      <summary>Executes the work synchronously.</summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.Silhouettes">
      <summary>
            Gets the 2D curves representing the view's silhouettes.
            </summary>
      <returns>An array of <see cref="T:devDept.Eyeshot.HiddenLinesView.HdlCurve" /></returns>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.Edges">
      <summary>
            Gets the 2D curves representing the view's edges.
            </summary>
      <returns>An array of <see cref="T:devDept.Eyeshot.HiddenLinesView.HdlCurve" /></returns>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.Wires">
      <summary>
            Gets the 2D curves representing the view's wires.
            </summary>
      <returns>An array of <see cref="T:devDept.Eyeshot.HiddenLinesView.HdlCurve" /></returns>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HiddenSilhouettes">
      <summary>
            Gets the 2D curves representing the view's hidden silhouettes.
            </summary>
      <returns>An array of <see cref="T:devDept.Eyeshot.HiddenLinesView.HdlCurve" /></returns>
      <remarks>They are available only if the <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepHiddenSegments" /> property is true</remarks>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HiddenEdges">
      <summary>
            Gets the 2D curves representing the view's hidden edges.
            </summary>
      <returns>An array of <see cref="T:devDept.Eyeshot.HiddenLinesView.HdlCurve" /></returns>
      <remarks>They are available only if the <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepHiddenSegments" /> property is true</remarks>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.HiddenWires">
      <summary>
            Gets the 2D curves representing the view's hidden wires.
            </summary>
      <returns>An array of <see cref="T:devDept.Eyeshot.HiddenLinesView.HdlCurve" /></returns>
      <remarks>They are available only if the <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.KeepHiddenSegments" /> property is true</remarks>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.Texts">
      <summary>
            Gets the meshes generated from dimensions arrows and texts (if <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.FillTexts" /> is true, excluded readible text that are parallel to the screen).
            </summary>
      <returns>An array of <see cref="T:devDept.Eyeshot.HiddenLinesView.HdlMesh" /></returns>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesViewSettings.FillTexts" />
      <seealso cref="P:devDept.Eyeshot.HiddenLinesView.TextStrings" />
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.TextStrings">
      <summary>
            Gets the text's strings generated from the texts when 
            <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.FillTexts" /> is true and the text is readable and parallel to the screen.
            </summary>
      <returns>An array of <see cref="T:devDept.Eyeshot.HiddenLinesView.HdlText" /></returns>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesViewSettings.FillTexts" />
      <seealso cref="P:devDept.Eyeshot.HiddenLinesView.Texts" />
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.Pictures">
      <summary>
            Gets the pictures generated.
            </summary>
      <returns>An array of <see cref="T:devDept.Eyeshot.HiddenLinesView.HdlPicture" /></returns>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.Regions">
      <summary>
            Gets the meshes generated from the regions and hatches (if <see cref="P:devDept.Eyeshot.HiddenLinesViewSettings.FillRegions" /> is true).
            </summary>
      <returns>An array of <see cref="T:devDept.Eyeshot.HiddenLinesView.HdlMesh" /></returns>
      <seealso cref="P:devDept.Eyeshot.HiddenLinesViewSettings.FillRegions" />
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesView.GetComputedLines(devDept.Eyeshot.HiddenLinesView.HdlCurve[]@,devDept.Eyeshot.HiddenLinesView.HdlCurve[]@,devDept.Eyeshot.HiddenLinesView.HdlCurve[]@,devDept.Eyeshot.HiddenLinesView.HdlCurve[]@,devDept.Eyeshot.HiddenLinesView.HdlCurve[]@,devDept.Eyeshot.HiddenLinesView.HdlCurve[]@,devDept.Eyeshot.HiddenLinesView.HdlPicture[]@,devDept.Eyeshot.HiddenLinesView.HdlText[]@)">
      <summary>
            Gets the computed curves for export.
            </summary>
      <param name="silho">The silhouettes</param>
      <param name="edges">The edges</param>
      <param name="wires">The wires</param>
      <param name="hiddenSilho">The hidden silhouettes</param>
      <param name="hiddenEdges">The hidden edges</param>
      <param name="hiddenWires">The hidden wires</param>
      <param name="pictures">The pictures</param>
      <param name="texts">The text printed as string</param>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesView.FilterLinesToExport(devDept.Eyeshot.HiddenLinesView.HdlCurve[])">
      <summary>
            Filters the curves to export.
            </summary>
      <param name="lines">The lines to filter/</param>
      <returns>The filtered lines.</returns>
      <remarks>Override this method to apply custom logic on the lines to be exported (for instance, export only the lines belonging to entities on a given layer).</remarks>
    </member>
    <member name="M:devDept.Eyeshot.HiddenLinesView.ScaleLinesToWorld(System.Single)">
      <summary>
            Scales the computed lines to world coordinates and applies an extra scale factor.
            </summary>
      <param name="scale">The extra scale factor applied to the lines once they are converted to world coordinates.</param>
      <remarks>The <see cref="T:devDept.Eyeshot.Camera" /> ProjectionMode must be <see cref="F:devDept.Graphics.projectionType.Orthographic" /> to convert the lines to world.</remarks>
      <seealso cref="!:ViewToWorldConversion" />
    </member>
    <member name="F:devDept.Eyeshot.HiddenLinesView.HdlViewSettings">
      <summary>
            Class that holds the settings and the result of hidden lines computation
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.ComputingVisibilityText">
      <summary>
            Gets or sets the progress bar text displayed while computing lines visibility when executed asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.ComputingSilhouettesText">
      <summary>
            Gets or sets the progress bar text displayed while computing silhouettes when executed asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.RemovingOverlappingLinesText">
      <summary>
            Gets or sets the progress bar text displayed while removing overlapped lines when executed asynchronously.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.HiddenLinesView.ComputingCirclesText">
      <summary>
            Gets or sets the progress bar text displayed while computing circles when executed asynchronously.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.silhoDataType">
      <summary>
            The type of data of the <see cref="T:devDept.Eyeshot.SilhoWireData" /> element.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.silhoDataType.LineStrip">
      <summary>
            A set of continuous vertices
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.silhoDataType.LineList">
      <summary>
            A set of lines vertices
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.silhoDataType.TriangleList">
      <summary>
            A set of triangles
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.SilhoWireData">
      <summary>
            Class with the data to compute silhouettes.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="F:devDept.Eyeshot.SilhoWireData.DataMode">
      <summary>
            Gets or sets the type of data.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.SilhoWireData.startPointVertices">
      <summary>
            vertices[0, ]... vertices[startPointVertices-1, ] are the vertices of the lines
            vertices[startPointVertices, vertices.GetLength(0)] are the vertices of the points
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SilhoWireData.Attributes">
      <summary>
            Holds the attributes of the data for an entity and is also used to avoid visibility checks of a line with its sharing triangles in the same entity
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SilhoWireData.ComputeScreenVertices(devDept.Graphics.RenderContextBase,System.Double[],System.Int32[])">
      <summary>
            Computes the vertices in screen coordinates.
            </summary>
      <param name="renderContext">
      </param>
      <param name="modelViewProj">
      </param>
      <param name="viewFrame">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.SilhoTextData.ComputeRectangleScreenVertices(devDept.Graphics.RenderContextBase,System.Double[],System.Int32[])">
      <summary>
            Computes the vertices of text rectangle in screen coordinates.
            </summary>
      <param name="renderContext">
      </param>
      <param name="modelViewProj">
      </param>
      <param name="viewFrame">
      </param>
    </member>
    <member name="T:devDept.Eyeshot.SilhoPolygonData">
      <summary>
            Class with 3D polygon data to compute silhouettes.
            </summary>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.BarBase">
      <exclude />
      <excludetoc />
    </member>
    <member name="M:devDept.Eyeshot.BarBase.Contains(System.Drawing.Point)">
      <summary>
            Tells if a point in viewport coordinates is over one of the buttons.
            </summary>
      <param name="mousePos">Mouse cursor position (zero on top) in screen coordinates</param>
      <returns>True if the point is over the button</returns>
    </member>
    <member name="T:devDept.Eyeshot.ToolBar">
      <summary>
            Viewport ToolBar.
            </summary>
      <remarks>Call <see cref="!:Design.CompileUserInterfaceElements" /> to apply the changes</remarks>
    </member>
    <member name="T:devDept.Eyeshot.ToolBar.positionType">
      <summary>
            Toolbar position/orientation.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.positionType.HorizontalTopLeft">
      <summary>
            Horizontal at the top-left corner of the viewport.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.positionType.HorizontalTopCenter">
      <summary>
            Centered at the top side of the viewport.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.positionType.HorizontalTopRight">
      <summary>
            Horizontal at the top-right corner of the viewport.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.positionType.VerticalTopRight">
      <summary>
            Vertical at the top-right corner of the viewport.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.positionType.VerticalMiddleRight">
      <summary>
            Centered on the right side of the viewport.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.positionType.VerticalBottomRight">
      <summary>
            Vertical at the bottom-right corner of the viewport.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.positionType.HorizontalBottomRight">
      <summary>
            Horizontal at the bottom-right corner of the viewport.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.positionType.HorizontalBottomCenter">
      <summary>
            Centered at the bottom side of the viewport.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.positionType.HorizontalBottomLeft">
      <summary>
            Horizontal at the bottom-left corner of the viewport.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.positionType.VerticalBottomLeft">
      <summary>
            Vertical at the bottom-left corner of the viewport.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.positionType.VerticalMiddleLeft">
      <summary>
            Centered on the left side of the viewport.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.positionType.VerticalTopLeft">
      <summary>
            Vertical at the top-left corner of the viewport.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ToolBar.styleType">
      <summary>
            Toolbar style type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.styleType.Legacy">
      <summary>
            Legacy toolbar style.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBar.styleType.Win10">
      <summary>
            Windows 10 toolbar style.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ToolBar.GetDefaultToolBar">
      <summary>
            Gets the default <see cref="T:devDept.Eyeshot.ToolBar" />.
            </summary>
      <returns>The default <see cref="T:devDept.Eyeshot.ToolBar" />.</returns>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ToolBar.Visible">
      <summary>
            Gets or sets the ToolBar visibility status.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ToolBar.Position">
      <summary>
            Gets or sets the toolbar position.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ToolBar.Buttons">
      <summary>
            Gets or sets the list of toolbar buttons.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ToolBar.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ToolBar.#ctor(devDept.Eyeshot.ToolBar.positionType,System.Boolean,System.Collections.ObjectModel.ObservableCollection{devDept.Eyeshot.ToolBarButton})">
      <summary>
            Standard constructor (WPF).
            </summary>
      <param name="position">Toolbar position</param>
      <param name="visible">Toolbar visibility status</param>
      <param name="buttons">Toolbar buttons</param>
    </member>
    <member name="M:devDept.Eyeshot.ToolBar.#ctor(devDept.Eyeshot.ToolBar)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other ToolBar object</param>
    </member>
    <member name="T:devDept.Eyeshot.ButtonSettings">
      <summary>
            Settings for <see cref="T:devDept.Eyeshot.ToolBar" /> buttons and <see cref="T:devDept.Eyeshot.ProgressBar" /> buttons.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ButtonSettings.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ButtonSettings.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Standard constructor.
            </summary>
      <param name="buttonSize">The buttons size</param>
      <param name="buttonCornerRadius">The buttons corner radius</param>
      <param name="gap">Distance between the buttons</param>
      <param name="buttonHighlightColor">The buttons highlight color</param>
      <remarks>You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ButtonSettings.Size">
      <summary>
            Gets or sets the button size.
            </summary>
      <remarks>You need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ButtonSettings.CornerRadius">
      <summary>
            Gets or sets the button corner radius.
            </summary>
      <remarks>You need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ButtonSettings.HighlightColor">
      <summary>
            Gets or sets the button highlight color.
            </summary>
      <remarks>You need to call the <see cref="M:devDept.Eyeshot.Workspace.CompileUserInterfaceElements" /> to see the effect of this command.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ButtonSettings.Gap">
      <summary>
            Gets or sets the distance between ToolBar Buttons.
            </summary>
      <remarks>You need to call the Viewport.CompileUserInterfaceElements() to see the effect of this command.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.ToolBarButton">
      <summary>
            The ToolBarButton class that raises the Click event.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ToolBarButton.ClickEventHandler">
      <summary>
             Represents the method that will handle the <see cref="E:devDept.Eyeshot.ToolBarButton.Click" /> event. 
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">The event data</param>
    </member>
    <member name="E:devDept.Eyeshot.ToolBarButton.Click">
      <summary>
            Occurs when the button is clicked.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ToolBarButton.#ctor(System.Windows.Media.ImageSource,System.String,System.String,devDept.Eyeshot.ToolBarButton.styleType,System.Boolean)">
      <summary>
            Constructor.
            </summary>
      <param name="buttonImage">The ToolBarButton image</param>
      <param name="name">The ToolBarButton name</param>
      <param name="toolTipText">The ToolBarButton tooltip text</param>
      <param name="style">The ToolBarButton style mode</param>
      <param name="visible">The ToolBarButton visibility status</param>
    </member>
    <member name="M:devDept.Eyeshot.ToolBarButton.#ctor(System.Windows.Media.ImageSource,System.String,System.String,devDept.Eyeshot.ToolBarButton.styleType,System.Boolean,System.Boolean)">
      <summary>Constructor.
            </summary>
      <param name="buttonImage">The ToolBarButton image</param>
      <param name="name">The ToolBarButton name</param>
      <param name="toolTipText">The ToolBarButton tooltip text</param>
      <param name="style">The ToolBarButton style mode</param>
      <param name="visible">The ToolBarButton visibility status</param>
      <param name="enabled">The ToolBarButton enabled status</param>
    </member>
    <member name="M:devDept.Eyeshot.ToolBarButton.#ctor(System.Windows.Media.ImageSource,System.String,System.String,devDept.Eyeshot.ToolBarButton.styleType,System.Boolean,System.Boolean,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource)">
      <summary>Deprecated constructor.
            </summary>
      <param name="buttonImage">The ToolBarButton image</param>
      <param name="name">The ToolBarButton name</param>
      <param name="toolTipText">The ToolBarButton tooltip text</param>
      <param name="style">The ToolBarButton style mode</param>
      <param name="visible">The ToolBarButton visibility status</param>
      <param name="enabled">The ToolBarButton enabled status</param>
      <param name="downImage">The ToolBarButton bitmap for the down state (optional)</param>
      <param name="hoverImage">The ToolBarButton bitmap for the mouse hover state (optional)</param>
      <param name="disabledImage">The ToolBarButton bitmap for the disabled state (DEPRECATED)</param>
      <param name="disabledDownImage">The ToolBarButton bitmap for the disabled down state (DEPRECATED)</param>
    </member>
    <member name="M:devDept.Eyeshot.ToolBarButton.#ctor(System.Windows.Media.ImageSource,System.String,System.String,devDept.Eyeshot.ToolBarButton.styleType,System.Boolean,System.Boolean,System.Windows.Media.ImageSource,System.Windows.Media.ImageSource)">
      <summary>Standard constructor.
            </summary>
      <param name="buttonImage">The ToolBarButton image</param>
      <param name="name">The ToolBarButton name</param>
      <param name="toolTipText">The ToolBarButton tooltip text</param>
      <param name="style">The ToolBarButton style mode</param>
      <param name="visible">The ToolBarButton visibility status</param>
      <param name="enabled">The ToolBarButton enabled status</param>
      <param name="downImage">The ToolBarButton bitmap for the down state (optional)</param>
      <param name="hoverImage">The ToolBarButton bitmap for the mouse hover state (optional)</param>
    </member>
    <member name="P:devDept.Eyeshot.ToolBarButton.StyleMode">
      <summary>
            Gets or sets the style of the toolbar button (DropDownButton is not supported).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ToolBarButton.Visible">
      <summary>
            Gets or sets the visibility status. 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ToolBarButton.Enabled">
      <summary>
            Gets or sets the button status. 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ToolBarButton.Pushed">
      <summary>
            Gets or sets a value indicating whether a toggle-style toolbar button is currently in the pushed state.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ToolBarButton.styleType">
      <summary>
            Specifies the button style type within a ToolBarButton.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBarButton.styleType.PushButton">
      <summary>
            A standard, three-dimensional button.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBarButton.styleType.ToggleButton">
      <summary>
            A toggle button that appears sunken when clicked and retains the sunken appearance until clicked again.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ToolBarButton.styleType.Separator">
      <summary>
            A space or line between toolbar buttons.       
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ToolBarButton.Rectangle">
      <summary>
            Gets button rectangle in screen coordinates (zero on the top-left corner of the viewport).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ToolBarButton.Image">
      <summary>
            Gets or sets the button image.
            </summary>
      <remarks>Call <see cref="!:Design.CompileUserInterfaceElements()" /> to apply the changes.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ToolBarButton.HoverImage">
      <summary>
            Gets or sets the mouse hover state button image.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.Workspace.CompileUserInterfaceElements" /> to apply the changes</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ToolBarButton.DownImage">
      <summary>
            Gets or sets the down state button image.
            </summary>
      <remarks>Call <see cref="!:Design.CompileUserInterfaceElements" /> to apply the changes</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ToolBarButton.DisabledImage">
      <summary>
            Deprecated property. Gets or sets the Image for the disabled state.
            </summary>
      <remarks>Call <see cref="!:Design.CompileUserInterfaceElements" /> to apply the changes</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ToolBarButton.DisabledDownImage">
      <summary>
            Gets or sets the Image for the disabled down state.
            </summary>
      <remarks>Call <see cref="!:Design.CompileUserInterfaceElements" /> to apply the changes</remarks>
    </member>
    <member name="M:devDept.Eyeshot.ToolBarButton.Contains(System.Drawing.Point)">
      <summary>
            Tells if a point in screen coordinates is inside the button.
            </summary>
      <param name="mousePos">Mouse cursor position (zero on top) in viewport coordinates (see <see cref="M:devDept.Eyeshot.Viewport.ScreenToViewport(System.Drawing.Point)" />) </param>
      <returns>True if the point is inside the button</returns>
    </member>
    <member name="M:devDept.Eyeshot.ToolBarButton.DrawImage(System.Drawing.Graphics,devDept.Eyeshot.Workspace,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Draws the button image.
            </summary>
      <param name="g">Graphics surface.</param>
      <param name="toolbar">
      </param>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="width">
      </param>
      <param name="height">
      </param>
      <param name="colorTheme">
      </param>
    </member>
    <member name="P:devDept.Eyeshot.ToolBarButton.ToolTipText">
      <summary>
            Gets or sets the text to show on the ToolTip.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ToolBarButtonList">
      <summary>
            Class that holds and manages the list of ToolBarButtons.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ToolBarButtonList.AddRange(System.Collections.Generic.IEnumerable{devDept.Eyeshot.ToolBarButton})">
      <summary> 
            Adds the elements of the specified collection to the end of the ObservableCollection(Of T). 
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ToolBarButtonList.RemoveRange(System.Collections.Generic.IEnumerable{devDept.Eyeshot.ToolBarButton})">
      <summary> 
            Removes the first occurence of each item in the specified collection from ObservableCollection(Of T). 
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.DefaultToolBarButton">
      <summary>
            Base class for default ToolBar buttons.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.DefaultToolBarButton.Image">
      <summary>
            Gets the bitmap of the button.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when you try to set the <see cref="P:devDept.Eyeshot.DefaultToolBarButton.Image" /> property on default buttons.</exception>
    </member>
    <member name="P:devDept.Eyeshot.DefaultToolBarButton.DownImage">
      <summary>
            Gets the Image for the down state.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when you try to set the <see cref="P:devDept.Eyeshot.DefaultToolBarButton.DownImage" /> property on default buttons.</exception>
    </member>
    <member name="P:devDept.Eyeshot.DefaultToolBarButton.HoverImage">
      <summary>
            Gets the Image for the mouse hover state.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when you try to set the <see cref="P:devDept.Eyeshot.DefaultToolBarButton.HoverImage" /> property on default buttons.</exception>
    </member>
    <member name="T:devDept.Eyeshot.ZoomFitToolBarButton">
      <summary>
            The ZoomFitToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ZoomFitToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ZoomToolBarButton">
      <summary>
            The ZoomToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ZoomToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ZoomWindowToolBarButton">
      <summary>
            The ZoomWindowToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ZoomWindowToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.MagnifyingGlassToolBarButton">
      <summary>
            The MagnifyingGlassToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.MagnifyingGlassToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.RotateToolBarButton">
      <summary>
            The RotateToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.RotateToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.PanToolBarButton">
      <summary>
            The PanToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.PanToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.HomeToolBarButton">
      <summary>
            The HomeToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.HomeToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ShareToolBarButton">
      <summary>
            The ShareToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ShareToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ToolBarSeparator">
      <summary>
            The ToolBarSeparator default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ToolBarSeparator.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.CancelToolBarButton">
      <summary>
            The CancelToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.CancelToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.BeginningToolBarButton">
      <summary>
            The BeginningToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.BeginningToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.PreviousToolBarButton">
      <summary>
            The PreviousToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.PreviousToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.StartToolBarButton">
      <summary>
            The StartToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.StartToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.PauseToolBarButton">
      <summary>
            The PauseToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.PauseToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.NextToolBarButton">
      <summary>
            The NextToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.NextToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.EndToolBarButton">
      <summary>
            The EndToolBarButton default class.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.EndToolBarButton.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Labels.Label">
      <summary>
            Base class for all labels.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Labels.Label.labelColor">
      <summary>
            Label color.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Labels.Label.Size">
      <summary>
            Gets the size of the label.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Labels.Label.Image">
      <summary>
            Gets the label image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Labels.Label.RegenMode">
      <summary>
            Gets or sets the label regeneration mode.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Labels.LabelList.Regen" />
    </member>
    <member name="P:devDept.Eyeshot.Labels.Label.Alignment">
      <summary>
            Gets or sets the label align mode.
            </summary>
      <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen" /> to apply the changes.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Labels.Label.Selected">
      <summary>
            Gets or sets the label selection status.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.IsAnyInstanceSelected">
      <summary>
            Tells if the label is selected.
            </summary>
      <returns>True if the label is selected.</returns>
      <seealso cref="P:devDept.Eyeshot.Labels.Label.Selected" />
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.ClearSelectionForAllInstances">
      <summary>
            Clears the selection status.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Labels.Label.Selected" />
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.IsSelected(System.Collections.Generic.Stack{devDept.Eyeshot.Entities.BlockReference})">
      <summary>
            Tells if the instance referred by the stack of parents is selected.
            </summary>
      <param name="parents">The parents stack that identifies the component instance</param>
      <returns>True if the instance is selected, false otherwise</returns>
    </member>
    <member name="P:devDept.Eyeshot.Labels.Label.Selectable">
      <summary>
            Gets or sets the value that tells if the item can be selected.
            </summary>
      <seealso cref="!:Design.UpdateVisibleSelection" />
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.#ctor(System.Drawing.Color)">
      <summary>
            Quick constructor, 3D attaching point is (0,0,0).
            </summary>
      <param name="color">A <see cref="P:devDept.Eyeshot.Labels.Label.Color" /> structure that indicates the color of this label.</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.#ctor(System.Double,System.Double,System.Double,System.Drawing.Color)">
      <summary>
            Standard constructor.
            </summary>
      <param name="x">Anchor point's X coordinate</param>
      <param name="y">Anchor point's Y coordinate</param>
      <param name="z">Anchor point's Z coordinate</param>
      <param name="color">A <see cref="P:devDept.Eyeshot.Labels.Label.Color" /> structure that indicates the color of this label</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.#ctor(devDept.Geometry.Point3D,System.Drawing.Color)">
      <summary>
            Standard constructor.
            </summary>
      <param name="anchorPoint">Anchor point</param>
      <param name="color">A <see cref="P:devDept.Eyeshot.Labels.Label.Color" /> structure that indicates the color of this label.</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.#ctor(devDept.Geometry.Point3D,System.Drawing.Color,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="anchorPoint">Anchor point</param>
      <param name="color">A <see cref="P:devDept.Eyeshot.Labels.Label.Color" /> structure that indicates the color of this label.</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.Dispose">
      <summary>
            Releases unmanaged resources.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.UpdatePos(devDept.Graphics.RenderContextBase,System.Double[],System.Int32[])">
      <summary>
            Update label position on screen.
            </summary>
      <param name="renderContext">The render context </param>
      <param name="modelViewProj">The modelview projection matrix</param>
      <param name="viewFrame">The viewport rectangle in camera coordinates ([0,0] at bottom left)</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.Regen(devDept.Graphics.RenderContextBase,System.Single)">
      <summary>
            Regenerates the label creating the internal data needed to draw the label.
            </summary>
      <param name="renderContext">The render context</param>
      <param name="drawScale">The drawing scale</param>
      <remarks>It must be called explicitly only for labels that are not in the <see cref="P:devDept.Eyeshot.Viewport.Labels" /> list.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Labels.Label.Color">
      <summary>
            Gets or sets the label color.
            </summary>
      <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen" /> to apply the changes.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Labels.Label.LabelData">
      <summary>
            Gets or sets the label custom data. If the type implements ICloneable it will be cloned when the Label is cloned.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Labels.Label.OnScreenPosition">
      <summary>
            Gets label position on screen.
            </summary>
      <remarks>This point is changed every time the end user ZoomPanRotate. The point coordinates refers to viewport <b>bottom</b>-left corner.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Labels.Label.AnchorPoint">
      <summary>
            Gets or sets the label anchor point.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.IsClipped(devDept.Graphics.ClippingPlaneBase[])">
      <summary>
            Tells if a label is clipped by the clipping planes.
            </summary>
      <param name="planes">The clipping planes</param>
      <returns>True if the label anchor point is clipped by any one of the clipping planes</returns>
      <remarks>Override this to avoid that a label is clipped by the clipping planes</remarks>
      <seealso cref="P:devDept.Eyeshot.Design.ClippingPlane1" />
      <seealso cref="P:devDept.Eyeshot.Design.ClippingPlane2" />
      <seealso cref="P:devDept.Eyeshot.Design.ClippingPlane3" />
      <seealso cref="P:devDept.Eyeshot.Design.ClippingPlane4" />
      <seealso cref="P:devDept.Eyeshot.Design.ClippingPlane5" />
      <seealso cref="P:devDept.Eyeshot.Design.ClippingPlane6" />
    </member>
    <member name="P:devDept.Eyeshot.Labels.Label.Visible">
      <summary>
            If <b>false</b> the label is not drawn.
            </summary>
      <seealso cref="!:Design.UpdateVisibleSelection" />
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.Draw(devDept.Graphics.RenderContextBase)">
      <summary>
            Standard draw method.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.DrawSelected(devDept.Graphics.RenderContextBase)">
      <summary>
            Draw method for selected labels.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.GetTexture(devDept.Graphics.RenderContextBase)">
      <summary>
            Gets the proper texture according to current selection status.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.GetBitmap">
      <summary>
            Gets the proper image according to current selection status.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.DrawGdi(System.Single,System.Single,System.Drawing.Graphics)">
      <summary>
            GDI draw method.
            </summary>
      <param name="drawScaleFactor">The draw scale factor</param>/
            <param name="lineWeightFactor">The factor applied to the line weight of the wire entities</param><param name="g">Active GDI+ drawing surface</param></member>
    <member name="M:devDept.Eyeshot.Labels.Label.DrawWithOffset(devDept.Graphics.RenderContextBase,System.Int32,System.Int32)">
      <summary>
            Draws the label with an offset from attaching point.
            </summary>
      <param name="dx">Horizontal distance</param>
      <param name="dy">Vertical distance</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.DrawWithOffsetGdi(System.Single,System.Single,System.Single,System.Drawing.Graphics)">
      <summary>
            Draws (GDI) the label with an offset from attaching point.
            </summary>
      <param name="dx">Horizontal distance</param>
      <param name="dy">Vertical distance</param>
      <param name="g">Active GDI+ drawing surface</param>
      <param name="scaleFactor">Scale factor</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.ConvertToSurrogate">
      <summary>
            Converts the label to its surrogate, for serialization purpose.
            </summary>
      <returns>The label surrogate.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.Label.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.LabelList">
      <summary>
            Label collection.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LabelList.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LabelList.#ctor(devDept.Eyeshot.Viewport)">
      <summary>
            Constructor.
            </summary>
      <param name="viewport">The viewport this label list belong to</param>
    </member>
    <member name="P:devDept.Eyeshot.Labels.LabelList.Item(System.Int32)">
      <summary>
            Gets or sets the label at the specified index.
            </summary>
      <param name="index">The zero-based index of the label to get or set</param>
      <returns>The label at the specified index</returns>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LabelList.Remove(devDept.Eyeshot.Labels.Label)">
      <summary>
            Removes the first occurrence of a specific label from this collection.
            </summary>
      <param name="item">The object to remove from this collection</param>
      <returns>True if label is successfully removed; otherwise, false. This method also
            returns false if label was not found in this collection.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LabelList.RemoveAt(System.Int32)">
      <summary>
            Removes the label at the specified index of this collection.
            </summary>
      <param name="index">The zero-based index of the label to remove</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LabelList.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of <see cref="T:devDept.Eyeshot.Labels.Label">labels</see> from this collection.
            </summary>
      <param name="index">The zero-based starting index of the range of <see cref="T:devDept.Eyeshot.Labels.Label">labels</see> to remove</param>
      <param name="count">The number of <see cref="T:devDept.Eyeshot.Labels.Label">labels</see> to remove</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LabelList.RemoveAll(System.Predicate{devDept.Eyeshot.Labels.Label})">
      <summary>Removes all the labels that match the conditions defined by the specified predicate.</summary>
      <param name="match">The predicate delegate that defines the conditions of the labels to remove.</param>
      <returns>The number of elements removed from this collection.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LabelList.Regen">
      <summary>
            Regenerates only the labels that need it. Each label is automatically regenerated
            when added to the <see cref="P:devDept.Eyeshot.Viewport.Labels" /> collection. 
            You need to call this function only when you modify a label <b>already</b> in
             this collection. 
            </summary>
      <seealso cref="P:devDept.Eyeshot.Labels.Label.RegenMode" />
    </member>
    <member name="M:devDept.Eyeshot.Labels.LabelList.CopySelection">
      <summary>
            Copies selected labels into the clipboard.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LabelList.CutSelection">
      <summary>
            Cut selected labels into the clipboard.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LabelList.Paste">
      <summary>
            Pastes copied labels from the clipboard.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Labels.ImageOnly">
      <summary>
            Image only label.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Labels.ImageOnly.HotSpot">
      <summary>
             Gets or sets the image hotspot (the point of the image that is drawn at the <see cref="P:devDept.Eyeshot.Labels.Label.AnchorPoint" /> position).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Labels.ImageOnly.Image">
      <summary>
            Gets or sets the label image.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Labels.ImageOnly.ImageForSelection">
      <summary>
            Gets or sets the image used when the label is selected.
            </summary>
      <remarks>If no image is provided, the label is drawn in negative colors when selected.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Labels.ImageOnly.#ctor(devDept.Geometry.Point3D,System.Drawing.Bitmap)">
      <summary>
            Standard constructor.
            </summary>
      <param name="anchorPoint">Attaching point coords.</param>
      <param name="bitmap">Label image.</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.ImageOnly.#ctor(devDept.Geometry.Point3D,System.Drawing.Bitmap,System.Int32,System.Int32)">
      <summary>
            Standard constructor.
            </summary>
      <param name="anchorPoint">Attaching point coords</param>
      <param name="bitmap">Label image</param>
      <param name="hotspotX">Image hotspot X position</param>
      <param name="hotspotY">Image hotspot Y position</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.ImageOnly.#ctor(System.Double,System.Double,System.Double,System.Drawing.Bitmap)">
      <summary>
            Standard constructor.
            </summary>
      <param name="x">Attaching point X coord.</param>
      <param name="y">Attaching point Y coord.</param>
      <param name="z">Attaching point Z coord.</param>
      <param name="bitmap">Label image.</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.ImageOnly.#ctor(System.Double,System.Double,System.Double,System.Drawing.Bitmap,System.Int32,System.Int32)">
      <summary>
            Standard constructor.
            </summary>
      <param name="x">Attaching point X coord.</param>
      <param name="y">Attaching point Y coord.</param>
      <param name="z">Attaching point Z coord.</param>
      <param name="bitmap">Label image.</param>
      <param name="hotspotX">Image hotspot X position</param>
      <param name="hotspotY">Image hotspot Y position</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.ImageOnly.Draw(devDept.Graphics.RenderContextBase)">
      <summary>
            Standard draw method.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.ImageOnly.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.ImageOnly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.StackedLabel">
      <summary>
            Stacked label to allow to stack multiple labels with the same AnchorPoint .
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Labels.StackedLabel.orientationType">
      <summary>
            Stack orientation type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Labels.StackedLabel.orientationType.Horizontal">
      <summary>
            Horizontal orientation.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Labels.StackedLabel.orientationType.Vertical">
      <summary>
            Vertical orientation.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.StackedLabel.#ctor(System.Double,System.Double,System.Double,System.Drawing.Bitmap,System.Int32)">
      <summary>
            Standard constructor.
            </summary>
      <param name="x">Attaching point X coord.</param>
      <param name="y">Attaching point Y coord.</param>
      <param name="z">Attaching point Z coord.</param>
      <param name="bitmap">Label image.</param>
      <param name="position">The position in the stack.</param>
    </member>
    <member name="P:devDept.Eyeshot.Labels.StackedLabel.OrientationMode">
      <summary>
            Gets or sets the stack alignment method.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.StackedLabel.Draw(devDept.Graphics.RenderContextBase)">
      <summary>
            Standard draw method.
            </summary>
      <param name="renderContext">The render context.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.EqualLabel">
      <summary>
            Equal label.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.EqualLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.EqualConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="equalConstraint">The equal constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.MirrorLabel">
      <summary>
            Mirror label.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.MirrorLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.MirrorConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="mirrorConstraint">The mirror constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.EqualRadiusLabel">
      <summary>
            Equal radius label.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.EqualRadiusLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.EqualConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="equalConstraint">The equal constraint.</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.PointOnLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.PointOnConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="pointOnConstraint">The PointOn constraint</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.PointAtLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.PointAtConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="pointAtConstraint">The PointAt constraint</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.JoinLabel">
      <summary>
            Join constraint label
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.JoinLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.CoincidentConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="joinConstraint">The Coincident constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.HorizontalLabel">
      <summary>
            Horizontal constraint label.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.HorizontalLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.HVConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="horConstraint">The horizontal constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.VerticalLabel">
      <summary>
            Vertical constraint label.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.VerticalLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.HVConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="horConstraint">the horizontal constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.ParallelLabel">
      <summary>
            Parallel constraint label.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.ParallelLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.ParallelConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="parallelConstraint">The parallel constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.PerpendicularLabel">
      <summary>
            Perpendicular label constraint.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.PerpendicularLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.PerpendicularConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="perpendicularConstraint">The perpendicular constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.FixLabel">
      <summary>
            Fix constraint label.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.FixLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.PointFixedConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="pointFixedConstraint">the PointFixed constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.PolygonLabel">
      <summary>
            Polygon label.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.PolygonLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.PolygonConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="polygonConstraint">The polygon constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.TangentLabel">
      <summary>
            Tangent constraint label.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.TangentLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.TangentConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="tangentConstraint">The tangent constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.CollinearLabel">
      <summary>
            Collinear constraint label.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.CollinearLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.CollinearPointsConstraint)">
      <summary>
            Standard constructor
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="collinearConstraint">The collinear constraint.</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.CollinearLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.CollinearConstraint)">
      <summary>
            Standard constructor
             </summary>
      <param name="curve">The sketch curve.</param>
      <param name="collinearConstraint">The tangent constraint.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.MidPointLabel">
      <summary>
            MidPoint constraint label.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.MidPointLabel.#ctor(devDept.Geometry.ConstraintSolver.SketchCurve,devDept.Geometry.ConstraintSolver.MidPointConstraint)">
      <summary>
            Standard constructor.
            </summary>
      <param name="curve">The sketch curve.</param>
      <param name="midPointConstraint">The mid-point constraint</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.LeaderAndImage">
      <summary>
            Leader and text image label.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LeaderAndImage.#ctor(devDept.Geometry.Point3D,System.Drawing.Bitmap,System.Drawing.Color,devDept.Geometry.Vector2D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="anchorPoint">Attaching point coords.</param>
      <param name="bitmap">Label image.</param>
      <param name="leaderColor">Color of the leader line</param>
      <param name="offset">Offset between the label and the attaching point</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LeaderAndImage.#ctor(devDept.Geometry.Point3D,System.Drawing.Bitmap,System.Drawing.Color,System.Int32,System.Int32,devDept.Geometry.Vector2D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="anchorPoint">Attaching point coords</param>
      <param name="bitmap">Label image</param>
      <param name="leaderColor">Color of the leader line</param>
      <param name="hotspotX">Image hotspot X position</param>
      <param name="hotspotY">Image hotspot Y position</param>
      <param name="offset">Offset between the label and the attaching point</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LeaderAndImage.#ctor(System.Double,System.Double,System.Double,System.Drawing.Bitmap,System.Drawing.Color,devDept.Geometry.Vector2D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="x">Attaching point X coord.</param>
      <param name="y">Attaching point Y coord.</param>
      <param name="z">Attaching point Z coord.</param>
      <param name="bitmap">Label image.</param>
      <param name="leaderColor">Color of the leader line</param>
      <param name="offset">Offset between the label and the attaching point</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LeaderAndImage.#ctor(System.Double,System.Double,System.Double,System.Drawing.Bitmap,System.Drawing.Color,System.Int32,System.Int32,devDept.Geometry.Vector2D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="x">Attaching point X coord.</param>
      <param name="y">Attaching point Y coord.</param>
      <param name="z">Attaching point Z coord.</param>
      <param name="bitmap">Label image.</param>
      <param name="leaderColor">Color of the leader line</param>
      <param name="hotspotX">Image hotspot X position</param>
      <param name="hotspotY">Image hotspot Y position</param>
      <param name="offset">Offset between the label and the attaching point</param>
    </member>
    <member name="P:devDept.Eyeshot.Labels.LeaderAndImage.Offset">
      <summary>
            Gets or sets the label screen offset from the 3D attaching point.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LeaderAndImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LeaderAndImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.LeaderAndText">
      <summary>
            Leader and text label attached to a 3D point.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LeaderAndText.#ctor(System.Double,System.Double,System.Double,System.String,System.Drawing.Font,System.Drawing.Color,devDept.Geometry.Vector2D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="x">Attaching point X coord.</param>
      <param name="y">Attaching point Y coord.</param>
      <param name="z">Attaching point Z coord.</param>
      <param name="text">Label text</param>
      <param name="textFont">Text font</param>
      <param name="textColor">A <see cref="T:System.Drawing.Color" /> structure that indicates the color of this label</param>
      <param name="offset">Offset between the label and the attaching point</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LeaderAndText.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color,devDept.Geometry.Vector2D)">
      <summary>
            Standard constructor.
            </summary>
      <param name="p">Attaching point coords.</param>
      <param name="text">Label text</param>
      <param name="textFont">Text font</param>
      <param name="textColor">A <see cref="T:System.Drawing.Color" /> structure that indicates the color of this label</param>
      <param name="offset">Offset between the label and the attaching point</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LeaderAndText.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color,System.Int32,System.Int32)">
      <summary>
            Standard constructor.
            </summary>
      <param name="p">Attaching point coords.</param>
      <param name="text">Label text</param>
      <param name="textFont">Text font</param>
      <param name="textColor">A <see cref="T:System.Drawing.Color" /> structure that indicates the color of this label</param>
      <param name="offsetX">X Offset between the label and the attaching point</param>
      <param name="offsetY">Y Offset between the label and the attaching point</param>
    </member>
    <member name="P:devDept.Eyeshot.Labels.LeaderAndText.Offset">
      <summary>
            Gets or sets the label offset from the 3D attaching point.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LeaderAndText.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.LeaderAndText.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.OutlinedText">
      <summary>
            Outlined text label.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.OutlinedText.#ctor(System.Double,System.Double,System.Double,System.String,System.Drawing.Font)">
      <summary>
            Standard constructor.
            </summary>
      <param name="x">Anchor point X coord.</param>
      <param name="y">Anchor point Y coord.</param>
      <param name="z">Anchor point Z coord.</param>
      <param name="text">Label text</param>
      <param name="textFont">Text font</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.OutlinedText.#ctor(System.Double,System.Double,System.Double,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment)">
      <summary>
            Standard constructor.
            </summary>
      <param name="x">Anchor point X coord</param>
      <param name="y">Anchor point Y coord</param>
      <param name="z">Anchor point Z coord</param>
      <param name="text">Label text</param>
      <param name="textFont">Text font</param>
      <param name="textColor">A <see cref="T:System.Drawing.Color" /> structure that indicates the text color of this label</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.OutlinedText.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>
            Standard constructor.
            </summary>
      <param name="p">Anchor point</param>
      <param name="text">Label text</param>
      <param name="textFont">Text font</param>
      <param name="textColor">A <see cref="T:System.Drawing.Color" /> structure that indicates the text color of this label</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.OutlinedText.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.ContentAlignment)">
      <summary>
        <see cref="T:devDept.Geometry.Point3D" /> constructor.
            </summary>
      <param name="p">Anchor point</param>
      <param name="text">Label text</param>
      <param name="textFont">Text font</param>
      <param name="textColor">A <see cref="T:System.Drawing.Color" /> structure that indicates the text color of this label</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="P:devDept.Eyeshot.Labels.OutlinedText.OutlineColor">
      <summary>
            Gets or sets the outline color.
            </summary>
      <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen" /> to apply the changes.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Labels.OutlinedText.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.OutlinedText.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Labels.TextOnly">
      <summary>
            Text only label.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Labels.TextOnly.labelFillColor">
      <summary>
            Background color.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Labels.TextOnly.#ctor(System.Double,System.Double,System.Double,System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>
            Individual anchor point coordinates constructor.
            </summary>
      <param name="x">Anchor point X coordinate</param>
      <param name="y">Anchor point Y coordinate</param>
      <param name="z">Anchor point Z coordinate</param>
      <param name="text">Label text</param>
      <param name="textFont">Text font</param>
      <param name="textColor">A <see cref="T:System.Drawing.Color" /> structure that indicates the text color of this label</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.TextOnly.#ctor(System.Double,System.Double,System.Double,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.ContentAlignment)">
      <summary>
            Text alignment constructor.
            </summary>
      <param name="x">Anchor point X coordinate</param>
      <param name="y">Anchor point Y coordinate</param>
      <param name="z">Anchor point Z coordinate</param>
      <param name="text">Label text</param>
      <param name="textFont">Text font</param>
      <param name="textColor">A <see cref="T:System.Drawing.Color" /> structure that indicates the text color of this label</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.TextOnly.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color)">
      <summary>
            3D point constructor.
            </summary>
      <param name="pt">Anchor point</param>
      <param name="text">Label text</param>
      <param name="textFont">Text font</param>
      <param name="textColor">A <see cref="T:System.Drawing.Color" /> structure that indicates the text color of this label</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.TextOnly.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.ContentAlignment)">
      <summary>
            3D point and text alignment constructor.
            </summary>
      <param name="pt">Anchor point</param>
      <param name="text">Label text</param>
      <param name="textFont">Text font</param>
      <param name="textColor">A <see cref="T:System.Drawing.Color" /> structure that indicates the text color of this label</param>
      <param name="alignment">Text alignment</param>
    </member>
    <member name="P:devDept.Eyeshot.Labels.TextOnly.CornerRadius">
      <summary>
            Get or sets the corner radius of the label
            </summary>
      <remarks>Allowed values: 0 (sharp rectangle), 1, 2, 3.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Labels.TextOnly.Text">
      <summary>
            Gets or sets the label text.
            </summary>
      <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen" /> to apply the changes.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Labels.TextOnly.Font">
      <summary>
            Gets or sets the label font.
            </summary>
      <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen" /> to apply the changes.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Labels.TextOnly.Vertical">
      <summary>
            If true, the text will be drawn vertically.
            </summary>
      <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen" /> to apply the changes.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Labels.TextOnly.FillColor">
      <summary>
            Gets or sets the label fill color.
            </summary>
      <remarks>Alpha channel is supported.</remarks>
      <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen" /> to apply the changes.</remarks>
      <remarks>Use <see cref="F:System.Drawing.Color.Empty"> for no fill color.</see>/&gt;</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Labels.TextOnly.FillColorForSelection">
      <summary>
            Gets or sets the fill color used when the label is selected.
            </summary>
      <remarks>Alpha channel is supported.</remarks>
      <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen" /> to apply the changes.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Labels.TextOnly.ColorForSelection">
      <summary>
            Gets or sets the color used when the label is selected.
            </summary>
      <remarks>Alpha channel is supported.</remarks>
      <remarks>You need to call <see cref="M:devDept.Eyeshot.Labels.LabelList.Regen" /> to apply the changes.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Labels.TextOnly.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Labels.TextOnly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="T:devDept.Eyeshot.Mouse3D.ButtonEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:devDept.Eyeshot.Workspace.Mouse3DButtonDown" /> or <see cref="E:devDept.Eyeshot.Workspace.Mouse3DButtonUp" /> event.
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">The event data</param>
    </member>
    <member name="T:devDept.Eyeshot.Mouse3D.MoveEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:devDept.Eyeshot.Workspace.Mouse3DMove" /> event.
            </summary>
      <param name="sender">The source of the event</param>
      <param name="e">The event data</param>
    </member>
    <member name="T:devDept.Eyeshot.Mouse3D.MoveEventArgs">
      <summary>
            Provides data for the <see cref="E:devDept.Eyeshot.Workspace.Mouse3DMove" /> event.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Mouse3D.MoveEventArgs.TranslationVector">
      <summary>
            Gets or sets the translation vector.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Mouse3D.MoveEventArgs.RotationVector">
      <summary>
            Gets or sets the rotation vector.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Mouse3D.MoveEventArgs.DeviceInfo">
      <summary>
            Gets or sets the device information.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Mouse3D.ButtonMask">
      <summary>
            ButtonMask from device
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Mouse3D.ButtonMask.Pressed">
      <summary>
            Gets a mask representing the pressed button.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Mouse3D.DeviceInfo">
      <summary>
            Class with the device information.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Mouse3D.DeviceInfo.DeviceName">
      <summary>
            Gets or sets the device name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Mouse3D.DeviceInfo.DeviceHandle">
      <summary>
            Gets or sets the device handle.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Mouse3D.ButtonEventArgs">
      <summary>
            Provides data for the <see cref="E:devDept.Eyeshot.Workspace.Mouse3DButtonDown" /> and <see cref="E:devDept.Eyeshot.Workspace.Mouse3DButtonUp" /> event.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Mouse3D.TranslationVector">
      <summary>
            Translation Vector from device.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Mouse3D.RotationVector">
      <summary>
            Rotation Vector from device.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.rendererType">
      <summary>
            Type of rendering engine.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.rendererType.OpenGL">
      <summary>
            OpenGL Renderer.
            </summary>
      <remarks>In WPF, it uses a hidden WinForms control losing the advantage of WPF composition for better performances.</remarks>
    </member>
    <member name="F:devDept.Eyeshot.rendererType.Direct3D">
      <summary>
            Direct3D Renderer.
            </summary>
      <remarks>In WPF, it uses a hidden WinForms control losing the advantage of WPF composition for better performances.</remarks>
    </member>
    <member name="F:devDept.Eyeshot.rendererType.Native">
      <summary>
            WPF native Direct3D renderer.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.rendererType.NativeExperimental">
      <summary>
            WPF native Direct3D renderer without listening to CompositionTarget.Rendering event.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.EnvironmentAutomationPeer">
      <summary>
            Provides methods to interact with Eyeshot controls during UIAutomation testing.
            </summary>
      <seealso cref="T:devDept.Eyeshot.UIAutomation.Actions" />
    </member>
    <member name="T:devDept.Eyeshot.displayType">
      <summary>
            Viewport display type.
            </summary>
      <seealso cref="!:Workspace.DisplayMode" />
    </member>
    <member name="F:devDept.Eyeshot.displayType.Wireframe">
      <summary>
            Wireframe
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.displayType.Shaded">
      <summary>
            Shaded
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.displayType.Rendered">
      <summary>
            Shaded applying materials
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.displayType.Flat">
      <summary>
            Flat Shading (entities are drawn with full colors, without lighting effects)
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.displayType.HiddenLines">
      <summary>
            Hidden lines
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.waitCursorType">
      <summary>
            Viewport wait cursor type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.waitCursorType.Never">
      <summary>
            Wait cursor will never be displayed
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.waitCursorType.RegenOnly">
      <summary>
            Wait cursor will only be displayed during entity regeneration
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.waitCursorType.BoundingBoxOnly">
      <summary>
            Wait cursor will only be displayed during design's bounding box update
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.waitCursorType.RegenAndBoundingBox">
      <summary>
            Wait cursor will be displayed during entity regeneration and design's bounding box update
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ClippingPlane">
      <summary>
            Clipping plane definition.
            </summary>
      <remarks>The scene is clipped on the positive side of the plane.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.ClippingPlane.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:devDept.Eyeshot.ClippingPlane.#ctor(devDept.Geometry.Vector3D,System.Double,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="normal">Plane normal</param>
      <param name="distance">Distance from the origin</param>
      <param name="active">Status</param>
    </member>
    <member name="M:devDept.Eyeshot.ClippingPlane.#ctor(devDept.Geometry.Vector3D,System.Double,System.Boolean,System.Boolean,System.Drawing.Color,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="normal">Plane normal</param>
      <param name="distance">Distance from the origin</param>
      <param name="active">Status</param>
      <param name="capping">When true, capping clipped solid is active during clipping plane editing.</param>
      <param name="cappingColor">Fill color during object clipping</param>
      <param name="showPlane">When true, clipping plane is drawn.</param>
    </member>
    <member name="M:devDept.Eyeshot.ClippingPlane.#ctor(devDept.Geometry.Plane,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="plane">The plane</param>
      <param name="active">Status</param>
    </member>
    <member name="M:devDept.Eyeshot.ClippingPlane.Edit(System.Nullable{System.Drawing.Color})">
      <summary>
            Edits a clipping plane.
            </summary>
      <param name="planeColor">The color of the clipping plane</param>
      <seealse cref="M:devDept.Eyeshot.ClippingPlane.Apply" />
      <seealso cref="M:devDept.Eyeshot.ClippingPlane.Cancel" />
    </member>
    <member name="M:devDept.Eyeshot.ClippingPlane.Apply">
      <summary>
            Applies the changes of the editing.
            </summary>
      <see cref="M:devDept.Eyeshot.ClippingPlane.Edit(System.Nullable{System.Drawing.Color})" />
      <seealso cref="M:devDept.Eyeshot.ClippingPlane.Cancel" />
    </member>
    <member name="M:devDept.Eyeshot.ClippingPlane.Cancel">
      <summary>
            Cancels the changes of the editing.
            </summary>
      <see cref="M:devDept.Eyeshot.ClippingPlane.Edit(System.Nullable{System.Drawing.Color})" />
      <seealso cref="M:devDept.Eyeshot.ClippingPlane.Apply" />
    </member>
    <member name="P:devDept.Eyeshot.ClippingPlane.Capping">
      <summary>
            When false, capping clipped solid is disabled.
            </summary>
      <seealso cref="M:devDept.Eyeshot.ClippingPlane.Edit(System.Nullable{System.Drawing.Color})" />
    </member>
    <member name="P:devDept.Eyeshot.ClippingPlane.CappingColor">
      <summary>
            Gets or sets capping color.
            </summary>
      <seealso cref="M:devDept.Eyeshot.ClippingPlane.Edit(System.Nullable{System.Drawing.Color})" />
    </member>
    <member name="P:devDept.Eyeshot.ClippingPlane.ShowPlane">
      <summary>
            When false, plane drawing is disabled during clipping plane editing.
            </summary>
      <seealso cref="M:devDept.Eyeshot.ClippingPlane.Edit(System.Nullable{System.Drawing.Color})" />
    </member>
    <member name="T:devDept.Eyeshot.viewType">
      <summary>
            View type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.Front">
      <summary>
            Front view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.Right">
      <summary>
            Right view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.Rear">
      <summary>
            Rear view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.Left">
      <summary>
            Left view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.Top">
      <summary>
            Top view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.Bottom">
      <summary>
            Bottom view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.Isometric">
      <summary>
            Isometric view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.Dimetric">
      <summary>
            Dimetric view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.Trimetric">
      <summary>
            Trimetric view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcFrontFaceBottom">
      <summary>
            View cube front face bottom view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcFrontFaceRight">
      <summary>
            View cube front face right view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcFrontFaceTop">
      <summary>
            View cube front face top view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcFrontFaceLeft">
      <summary>
            View cube front face left view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcRightFaceBottom">
      <summary>
            View cube right face bottom view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcRightFaceRight">
      <summary>
            View cube right face right view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcRightFaceTop">
      <summary>
            View cube right face top view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcRightFaceLeft">
      <summary>
            View cube right face left view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcBackFaceBottom">
      <summary>
            View cube back face bottom view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcBackFaceRight">
      <summary>
            View cube back face right view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcBackFaceTop">
      <summary>
            View cube back face top view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcBackFaceLeft">
      <summary>
            View cube back face left view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcLeftFaceBottom">
      <summary>
            View cube left face bottom view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcLeftFaceRight">
      <summary>
            View cube left face right view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcLeftFaceTop">
      <summary>
            View cube left face top view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcLeftFaceLeft">
      <summary>
            View cube left face left view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcBottomFaceBottom">
      <summary>
            View cube bottom face bottom view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcBottomFaceRight">
      <summary>
            View cube bottom face right view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcBottomFaceTop">
      <summary>
            View cube bottom face top view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcBottomFaceLeft">
      <summary>
            View cube front face left view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcTopFaceBottom">
      <summary>
            View cube top face bottom view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcTopFaceRight">
      <summary>
            View cube top face right view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcTopFaceTop">
      <summary>
            View cube top face top view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcTopFaceLeft">
      <summary>
            View cube top face left view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcFrontFaceBottomLeft">
      <summary>
            View cube front face bottom-left view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcFrontFaceBottomRight">
      <summary>
            View cube front face bottom-right view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcFrontFaceTopLeft">
      <summary>
            View cube front face top-left view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcFrontFaceTopRight">
      <summary>
            View cube front face top-right view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcBackFaceBottomLeft">
      <summary>
            View cube back face bottom-left view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcBackFaceBottomRight">
      <summary>
            View cube back face bottom-right view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcBackFaceTopLeft">
      <summary>
            View cube back face top-left view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.vcBackFaceTopRight">
      <summary>
            View cube back face top-right view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.viewType.Other">
      <summary>
            View orientation not belonging to the predefined ones
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.WorkspaceBase">
      <summary>
            Interaction logic for UserControl1.xaml
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.WorkspaceBase.RenderContext">
      <summary>
            Graphics rendering context. Available after window handle (HWND) initialization only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.GetScalingLevel">
      <summary>
            Gets the current display's scale factor.
            </summary>
      <remarks>The result value is returned in a coordinate system in which 96 corresponds to 1 that means 100%.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.GetScalingLevelRatio">
      <summary>
            Gets scaling level ratio among displays with different dpi scale factors.
            </summary>
      <remarks>Used to get the correct font size when per-monitor DPI is enabled.</remarks>
      <seealso cref="M:devDept.Geometry.UtilityEx.GetFont(System.Windows.Media.FontFamily,System.Windows.FontStyle,System.Windows.FontWeight,System.Double,System.Single)" />
    </member>
    <member name="P:devDept.Eyeshot.WorkspaceBase.Renderer">
      <summary>
            Gets or sets the Renderer mode.
            </summary>
      <remarks>Has no effect at runtime.</remarks>
      <remarks>The <see cref="F:devDept.Eyeshot.rendererType.OpenGL" /> and <see cref="F:devDept.Eyeshot.rendererType.Direct3D" /> renderer types require to use the methods that use a stream in order to get/set the Cursor.</remarks>
      <seealso cref="M:devDept.Eyeshot.WorkspaceBase.SetDefaultCursor(System.IO.Stream)" />
      <seealso cref="M:devDept.Eyeshot.WorkspaceBase.SetCursor(System.IO.Stream)" />
      <seealso cref="M:devDept.Eyeshot.WorkspaceBase.SetCursor(devDept.Eyeshot.cursorType,System.IO.Stream)" />
      <seealso cref="M:devDept.Eyeshot.WorkspaceBase.GetCursor(devDept.Eyeshot.cursorType)" />
      <seealso cref="M:devDept.Eyeshot.WorkspaceBase.GetMousePosition(System.Windows.Input.MouseEventArgs)" />
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.CreateControl">
      <summary>
            Forces the creation of the control, including the creation of the handle and any child controls.
            </summary>
      <remarks>It calls the same method called when the control is loaded.</remarks>
      <seealso cref="M:devDept.Eyeshot.WorkspaceBase.OnLoaded(System.Object,System.EventArgs)" />
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.ParentBackColor">
      <summary>
            Gets the Background color of the parent entity.
            </summary>
      <returns>The background color of the parent.</returns>
      <remarks>if <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> is <see cref="F:devDept.Eyeshot.rendererType.Native" /> and the parent background color is null or is not a SolidColorBrush, it returns a transparent color.
            If the <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> is not <see cref="F:devDept.Eyeshot.rendererType.Native" />, it goes up the hierarchy until it finds a valid background color.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.Refresh">
      <summary>
            Forces the control to invalidate its client area and immediately redraw itself and any child controls.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.Invalidate">
      <summary>
            Invalidates the entire surface of the control and causes the control to be redrawn.
            </summary>
      <remarks>Beware when the <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> is set to <see cref="F:devDept.Eyeshot.rendererType.NativeExperimental" />, this method performs the same operations than the <see cref="M:devDept.Eyeshot.WorkspaceBase.Refresh" />() method.</remarks>
    </member>
    <member name="E:devDept.Eyeshot.WorkspaceBase.InitializeScene">
      <summary>
            Occurs when the control is shown for the first time.
            </summary>
      <remark>Subscribe to this event to initialize the scene when the control is first displayed.</remark>
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
      <summary>
            This method is invoked after layout update, and before rendering, if the element's RenderSize has changed as a result of layout update.
            </summary>
      <param name="sizeInfo">The packaged parameters, which includes old and new sizes, and which dimension actually changes.</param>
    </member>
    <member name="P:devDept.Eyeshot.WorkspaceBase.IsInDesignMode">
      <summary>
            Gets a value indicating whether the control is in design mode
            (running in Blend or Visual Studio).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.GetMouseClicks(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Gets the number of mouse clicks from the event args.
            </summary>
      <param name="e">The event arguments</param>
      <returns>The number of mouse clicks</returns>
      <remarks>When using <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> different from <see cref="F:devDept.Eyeshot.rendererType.Native" />, use this method to get the mouse clicks in event handlers</remarks>
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.GetMousePosition(System.Windows.Input.MouseEventArgs)">
      <summary>
            Gets the mouse position from the event args.
            </summary>
      <remarks>
        <para>When using <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> different from <see cref="F:devDept.Eyeshot.rendererType.Native" />, use this method to get the mouse position in event handlers.</para>
        <para>The returned point is adjusted for DPI scaling.</para>
      </remarks>
      <param name="e">The event arguments</param>
      <returns>The mouse position</returns>
      <seealso cref="!:Utility.GetScalingLevel" />
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.GetMousePosition(System.Windows.DragEventArgs)">
      <summary>
            Gets the mouse position from the <see cref="T:System.Windows.DragEventArgs" />.
            </summary>
      <remarks>
        <para>When using <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> different from <see cref="F:devDept.Eyeshot.rendererType.Native" />, use this method to get the mouse position in event handlers.</para>
        <para>The returned point is adjusted for DPI scaling.</para>
      </remarks>
      <param name="d">The event arguments</param>
      <returns>The mouse position</returns>
      <seealso cref="!:Utility.GetScalingLevel" />
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.GetMousePosition(System.Windows.Input.TouchEventArgs)">
      <summary>
            Gets the mouse position from the <see cref="T:System.Windows.Input.TouchEventArgs" />.
            </summary>
      <remarks>
        <para>When using <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> different from <see cref="F:devDept.Eyeshot.rendererType.Native" />, use this method to get the mouse position in event handlers.</para>
        <para>The returned point is adjusted for DPI scaling.</para>
      </remarks>
      <param name="e">The event arguments</param>
      <returns>The mouse position</returns>
      <seealso cref="!:Utility.GetScalingLevel" />
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.GetMousePosition(devDept.Eyeshot.MultiTouch.TouchEventArgs)">
      <summary>
            Gets the mouse position from the <see cref="T:devDept.Eyeshot.MultiTouch.TouchEventArgs" />.
            </summary>
      <remarks>
        <para>When using <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> different from <see cref="F:devDept.Eyeshot.rendererType.Native" />, use this method to get the mouse position in event handlers.</para>
        <para>The returned point is adjusted for DPI scaling.</para>
      </remarks>
      <param name="e">The event arguments</param>
      <returns>The mouse position</returns>
      <seealso cref="!:Utility.GetScalingLevel" />
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.LoadCursors">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.DisableWpfTabletSupport">
      <summary>        
            The Eyeshot WPF control with Native renderer and <see cref="F:devDept.Eyeshot.MultiTouchSettings.UseWindowsMessages" /> set to true, in order to manage multitouch in an efficient way, uses WM_TOUCH to receive touch messages from a WPF window.
            For this reason, if you want to add it dynamically in your application, you need to call this method in the main window constructor.
            </summary>
      <remarks>
            To restore the multitouch functionality on the other WPF controls, have a look here: https://devdept.zendesk.com/hc/en-us/articles/217843288-Enable-multitouch-on-WPF-controls
            </remarks>
      <seealso cref="!:Workspace.Renderer" />
      <seealso cref="F:devDept.Eyeshot.MultiTouchSettings.UseWindowsMessages" />
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.SetCursor(System.IO.Stream)">
      <summary>
            Sets the cursor.
            </summary>
      <param name="cursorStream">The cursor stream</param>
      <seealso cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" />
      <remarks>When <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> is different from <see cref="F:devDept.Eyeshot.rendererType.Native" />, the stream must be of a monochrome cursor image (due to a WindowsForms limitation).</remarks>
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.SetDefaultCursor(System.IO.Stream)">
      <summary>
            Sets the default cursor for the viewport control.
            </summary>
      <param name="cursorStream">The stream of the cursor to set as default</param>
      <remarks>Use this override to set a cursor in WPF when <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> is different from <see cref="F:devDept.Eyeshot.rendererType.Native" />.</remarks>
      <remarks>You can use this override only when the handle of the control is already created (for e.g. in the Windows OnContentRendered override).</remarks>
      <remarks>When <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> is different from <see cref="F:devDept.Eyeshot.rendererType.Native" />, the stream must be of a monochrome cursor image (due to a WindowsForms limitation).</remarks>
      <seealso cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" />
      <seealso cref="P:devDept.Eyeshot.WorkspaceBase.IsHandleCreated" />
      <seealso cref="E:devDept.Eyeshot.WorkspaceBase.InitializeScene" />
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.SetCursor(devDept.Eyeshot.cursorType,System.IO.Stream)">
      <summary>
            Sets a cursor for a specific type/action.
            </summary>
      <param name="cursorType">The type/action of the cursor</param>
      <param name="cursorStream">The stream with the cursor data</param>
      <seealso cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" />
      <seealso cref="M:devDept.Eyeshot.WorkspaceBase.GetCursor(devDept.Eyeshot.cursorType)" />
    </member>
    <member name="M:devDept.Eyeshot.WorkspaceBase.GetCursor(devDept.Eyeshot.cursorType)">
      <summary>
            Gets the stream of the cursor.
            </summary>
      <param name="cursorType">The type of cursor</param>
      <returns>The stream of the cursor that was previously set by the user</returns>
      <remarks>Use this method to get the cursor streams when <see cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" /> is different from <see cref="F:devDept.Eyeshot.rendererType.Native" />.</remarks>
      <seealso cref="P:devDept.Eyeshot.WorkspaceBase.Renderer" />
      <see cref="M:devDept.Eyeshot.WorkspaceBase.SetCursor(devDept.Eyeshot.cursorType,System.IO.Stream)" />
    </member>
    <member name="T:devDept.Eyeshot.Block">
      <summary>
            Block definition. Blocks have to be added to the master block array <see cref="!:Design.Blocks" />
            and inserted in the <see cref="!:Design.Entities" /> list using the <see cref="T:devDept.Eyeshot.Entities.BlockReference" /> entity.
            <para>A block in Eyeshot is a collection of entities that create an object, grouped together
            to make one selectable object. Selecting one particular entity will select all entities contained
            within the block. They can be moved, rotated, mirrored etc and will always be treated by Eyeshot
            as one whole object.</para><para>Blocks are an invaluable way of quickly arranging complex pieces of a design. Selecting the 
            object is a breeze, it is no longer necessary to painstakingly select each individual entities. 
            Blocks also make it easy to duplicate the same object throughout a drawing, and as Eyeshot recognizes
            that each copy of a block is identical to the previous, the memory and processing time required 
            by Eyeshot is reduced.</para></summary>
      <seealso cref="T:devDept.Eyeshot.Entities.BlockReference">BlockReference Class</seealso>
    </member>
    <member name="P:devDept.Eyeshot.Block.ConvexHull">
      <summary>
            The convex hull of the surface.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Block.FullPath">
      <summary>
            Gets or sets the forced full path for saving the file representing this block. Default value is null/Nothing.
            </summary>
      <remarks>
            This property is used when saving a file in a format supporting MultiFile feature, to force the destination output path for the single block (assembly or sub-assembly).
            By design, all files of the same assembly are stored in the same directory, but you can force a different path for a single assembly by using this property.
            It must include absolute path, filename and extension.
            When saving an assembly in Eyeshot MultiFile format, each block is automatically saved in the same directory specified for <see cref="!:WriteMultiFile.FileName" />.
            If the block is not the root one, the name for the exported file is get from the block's <see cref="P:devDept.Eyeshot.Block.Name" /> itself.
            and the extension will be get according to the <see cref="P:devDept.Eyeshot.Translators.WriteMultiFile.AsmSuffix" /> property.
            If the <see cref="P:devDept.Eyeshot.Block.FullPath" /> property is filled, it overrides the above automatism of course.
            </remarks>
      <seealso cref="T:devDept.Eyeshot.Translators.WriteMultiFile" />
    </member>
    <member name="P:devDept.Eyeshot.Block.CustomData">
      <summary>
            Gets or sets a custom object that will be stored to the Eyeshot Proprietary File Format.
            </summary>
      <remarks>
        <para>You need to define the related <see cref="T:devDept.Serialization.Surrogate`1" /> for your custom data
            and you need to use a custom <see cref="T:devDept.Serialization.FileSerializer" /> including definition
            for it.</para>
        <para>If the type implements ICloneable it will be cloned when the Block is cloned.</para>
      </remarks>
      <seealso href="https://devdept.zendesk.com/hc/en-us/articles/360003318873-Eyeshot-Proprietary-File-Format">The
            article about Eyeshot Proprietary File Format.</seealso>
    </member>
    <member name="P:devDept.Eyeshot.Block.Name">
      <summary>
            Gets or sets block name.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.Block.KeyChanged">
      <summary>
            Occurs when the <see cref="P:devDept.Eyeshot.Block.Name" /> changes.
            </summary>
      <seealso cref="E:devDept.Graphics.INotifyKeyChanged.KeyChanged" />
    </member>
    <member name="M:devDept.Eyeshot.Block.OnKeyChanged(System.String,System.String)">
      <summary>
            When the <see cref="P:devDept.Eyeshot.Block.Name" /> changes I need to notify it to the related keyed collections before changing it.
            </summary>
      <param name="newKey">The new <see cref="P:devDept.Eyeshot.Block.Name" /></param>
      <param name="propertyName">The property name that represent the key for the related keyed collections.</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.GetKey">
      <inheritdoc />
    </member>
    <member name="M:devDept.Eyeshot.Block.SetKey(System.String)">
      <inheritdoc />
    </member>
    <member name="P:devDept.Eyeshot.Block.IsResolved">
      <summary>If true, the block is resolved. In DWG/DXF import the Block could be defined as an external reference (XRef), when true it was successfully located.</summary>
    </member>
    <member name="M:devDept.Eyeshot.Block.#ctor(System.String)">
      <summary>
            Standard constructor.
            </summary>
      <param name="name">The block name.</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.#ctor(System.String,System.Double,System.Double,System.Double)">
      <summary>
            Base point individual coordinates constructor.
            </summary>
      <param name="name">The block name.</param>
      <param name="basePointX">Base point's X coordinate</param>
      <param name="basePointY">Base point's Y coordinate</param>
      <param name="basePointZ">Base point's Z coordinate</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.#ctor(System.String,devDept.Geometry.Point3D)">
      <summary>
            Base point constructor.
            </summary>
      <param name="name">The block name.</param>
      <param name="basePoint">Base point</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.#ctor(System.String,devDept.Geometry.Point3D,devDept.Geometry.linearUnitsType)">
      <summary>
            Base point and units constructor.
            </summary>
      <param name="name">The block name.</param>
      <param name="basePoint">Base point</param>
      <param name="units">The linear units</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.#ctor(System.String,devDept.Geometry.linearUnitsType)">
      <summary>
            Units constructor.
            </summary>
      <param name="name">The block name.</param>
      <param name="units">The linear units</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.#ctor(devDept.Eyeshot.Block)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other block</param>
      <remarks>The entities are cloned.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Block.#ctor">
      <summary>
            Deprecated constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Block.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Base point individual coordinates constructor.
            </summary>
      <param name="basePointX">Base point's X coordinate</param>
      <param name="basePointY">Base point's Y coordinate</param>
      <param name="basePointZ">Base point's Z coordinate</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.#ctor(devDept.Geometry.Point3D)">
      <summary>
            Base point constructor.
            </summary>
      <param name="basePoint">Base point</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.#ctor(devDept.Geometry.Point3D,devDept.Geometry.linearUnitsType)">
      <summary>
            Base point and units constructor.
            </summary>
      <param name="basePoint">Base point</param>
      <param name="units">The linear units</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.#ctor(devDept.Geometry.linearUnitsType)">
      <summary>
            Units constructor.
            </summary>
      <param name="units">The linear units</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.Clone">
      <summary>
            Creates a deep copy of the Block (cloning all its entities).
            </summary>
      <returns>The new Block object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Block.GetShallowCopy">
      <summary>
            Creates a deep copy of the Block (without cloning all its entities).
            </summary>
      <returns>The new Block object.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Block.Entities">
      <summary>
            Gets entity collection.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Block.BasePoint">
      <summary>
            Gets or sets block definition base point.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Block.Units">
      <summary>
            Gets or sets block unit system.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Block.MassUnits">
      <summary>
            Gets or sets the block mass units of measurement.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Block.Description">
      <summary>
            Gets or sets a description text for this block definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Block.Groups">
      <summary>
            Groups collection.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Block.Compile(devDept.Eyeshot.CompileParams)">
      <summary>
            Compiles the block entities.
            </summary>
      <param name="data">The data for compilation</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.GroupSelection">
      <summary>
            Creates a single unit from selected entities.
            </summary>
      <returns>The new group index.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Block.Ungroup(System.Int32)">
      <summary>
            Removes the group status from the specified group.
            </summary>
      <param name="groupIndex">Group index</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Block.ToString">
      <inehrit />
    </member>
    <member name="M:devDept.Eyeshot.Block.Equals(devDept.Eyeshot.Block)">
      <summary>
            Compares block names ignoring cases.
            </summary>
      <param name="other">The other block</param>
      <returns>True if the two block names are the same, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Block.GetHashCode">
      <inehrit />
    </member>
    <member name="T:devDept.Eyeshot.Camera">
      <summary>
            35 mm camera definition.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Camera.renderContext">
      <summary>
            The render context.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Camera.Target">
      <summary>Gets or sets camera aiming point.</summary>
      <example>
                The following code fragment demonstrates how to set a new camera target point.
                <code lang="CS" title="[New Example]">
            myViewport.Camera.Target = new Point3D(0, 0, 100);
            myViewport.AdjustNearAndFarPlanes();
            </code><code lang="VB" title="[New Example]">
            MyViewport.Camera.Target = New Point3D(0, 0, 100)
            MyViewport.AdjustNearAndFarPlanes()
            </code></example>
      <seealso cref="!:Design.AdjustNearAndFarPlanes">AdjustNearAndFarPlanes Method (devDept.Eyeshot.Viewport)</seealso>
      <remarks>The set is allowed only if <see cref="P:devDept.Eyeshot.NavigationSettings.Mode" /> is <see cref="F:devDept.Eyeshot.Camera.navigationType.Examine" />, otherwise the <see cref="P:devDept.Eyeshot.Camera.Location" /> must be changed to move the camera.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Camera.Location">
      <summary>Gets or sets the camera location (eye) point.</summary>
      <remarks>The set is allowed only if <see cref="P:devDept.Eyeshot.NavigationSettings.Mode" /> is <see cref="F:devDept.Eyeshot.Camera.navigationType.Walk" /> or <see cref="F:devDept.Eyeshot.Camera.navigationType.Fly" />, otherwise the <see cref="P:devDept.Eyeshot.Camera.Target" /> must be changed to move the camera.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Camera.UpdateLocation">
      <summary>
            Updates the camera location.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Camera.Distance">
      <summary>Gets or sets the distance between camera and target point.</summary>
      <remarks>Must be bigger than zero.</remarks>
      <example>
                The following code fragment demonstrates how to set a new camera distance from the target point.
                <code lang="CS" title="[New Example]">
            myViewport.Camera.Distance = 400;
            myViewport.AdjustNearAndFarPlanes();
            </code><code lang="VB" title="[New Example]">
            MyViewport.Camera.Distance = 400
            MyViewport.AdjustNearAndFarPlanes()
            </code></example>
      <seealso cref="!:Design.AdjustNearAndFarPlanes">AdjustNearAndFarPlanes Method (devDept.Eyeshot.Viewport)</seealso>
    </member>
    <member name="P:devDept.Eyeshot.Camera.Rotation">
      <summary>3D rotation.</summary>
      <example>
                The following code fragment demonstrates how to set a rotation of 30 degrees about
                the X axis and 60 degrees about the Z axis. The default rotation coincide with the
                model Right view.
                <code lang="CS" title="[New Example]">
            myViewport.Camera.Rotation = (new Quaternion(Vector3D.AxisZ, 60)) * (new Quaternion(Vector3D.AxisY, 30));
            myViewport.AdjustNearAndFarPlanes();
            </code><code lang="VB" title="[New Example]">
            MyViewport.Camera.Rotation = (New Quaternion(Vector3D.AxisZ, 60)) * (New Quaternion(Vector3D.AxisY, 30))
            MyViewport.AdjustNearAndFarPlanes()
            </code></example>
      <seealso cref="!:Design.AdjustNearAndFarPlanes">AdjustNearAndFarPlanes Method (devDept.Eyeshot.Viewport)</seealso>
    </member>
    <member name="P:devDept.Eyeshot.Camera.ProjectionMode">
      <summary>Gets or sets the camera projection mode.</summary>
      <example>
                The following code fragment demonstrates how to change camera projection mode.
                <code lang="CS" title="[New Example]">
            myViewport.Camera.ProjectionMode = cameraProjectionType.Orthographic;
            myViewport.AdjustNearAndFarPlanes();
            </code><code lang="VB" title="[New Example]">
            MyViewport.Camera.ProjectionMode = cameraProjectionType.Orthographic
            MyViewport.AdjustNearAndFarPlanes()
            </code></example>
      <seealso cref="P:devDept.Eyeshot.Camera.FocalLength">FocalLength Property</seealso>
      <seealso cref="P:devDept.Eyeshot.Camera.ZoomFactor">ZoomFactor Property</seealso>
      <seealso cref="!:Design.AdjustNearAndFarPlanes">AdjustNearAndFarPlanes Method (devDept.Eyeshot.Viewport)</seealso>
    </member>
    <member name="M:devDept.Eyeshot.Camera.GetFocalLengthFromFieldOfView(System.Double)">
      <summary>
            Gets the focal length from a vertical field of view.
            </summary>
      <param name="fovInDegrees">The vertical field of view</param>
      <returns>The corresponding focal length, relative to the <see cref="P:devDept.Eyeshot.Camera.Frame" /> size.</returns>
      <seealso cref="P:devDept.Eyeshot.Camera.Frame" />
      <seealso cref="P:devDept.Eyeshot.Camera.FocalLength" />
      <seealso cref="P:devDept.Eyeshot.Camera.AngleOfView" />
    </member>
    <member name="M:devDept.Eyeshot.Camera.GetFocalLengthFromFieldOfView(System.Double,devDept.Geometry.Size2D)">
      <summary>
            Gets the focal length from the vertical field of view and the camera film frame.
            </summary>
      <param name="fovInDegrees">The vertical field of view</param>
      <param name="frame">THe size of the camera film frame</param>
      <returns>The corresponding focal length, relative to the <paramref name="frame" /> size.</returns>
      <seealso cref="P:devDept.Eyeshot.Camera.Frame" />
      <seealso cref="P:devDept.Eyeshot.Camera.FocalLength" />
      <seealso cref="P:devDept.Eyeshot.Camera.AngleOfView" />
    </member>
    <member name="P:devDept.Eyeshot.Camera.FocalLength">
      <summary>
            Gets or sets the camera focal length in millimeters. Applies only to Perspective projection mode.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Camera.ProjectionMode">ProjectionMode Property</seealso>
    </member>
    <member name="P:devDept.Eyeshot.Camera.ZoomFactor">
      <summary>
            Gets or sets the current zoom factor. Applies only to Orthographic projection mode.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Camera.ProjectionMode" />
    </member>
    <member name="P:devDept.Eyeshot.Camera.Near">
      <summary>Gets the near clipping plane position.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Camera.Far">
      <summary>Gets the far clipping plane position.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Camera.Frame">
      <summary>
            Defines the size of the camera film frame (affects the perspective camera).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Camera.AngleOfView">
      <summary>Gets the Camera vertical angle of view (in degrees).</summary>
    </member>
    <member name="M:devDept.Eyeshot.Camera.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:devDept.Eyeshot.Camera.#ctor(devDept.Geometry.Point3D,System.Double,devDept.Geometry.Quaternion,devDept.Graphics.projectionType,System.Double,System.Double)">
      <summary>Standard constructor.</summary>
      <example>
                The following code fragment demonstrates how to setup a perspective projection
                camera at 100 units of distance from the origin and with a rotation of 30 degrees
                about the X axis and 60 degrees about the Z axis. The default rotation coincide
                with the model Right view.
                <code lang="CS" title="[New Example]">
            myViewport.Camera = new Camera(Point3D.Origin, 100, (new Quaternion(Vector3D.AxisZ, 60)) * (new Quaternion(Vector3D.AxisY, 30)), cameraProjectionType.Perspective, 50, 1);
            </code><code lang="VB" title="[New Example]">
            MyViewport.Camera = New Camera(Point3D.Origin, 100, (New Quaternion(Vector3D.AxisZ, 60)) * (New Quaternion(Vector3D.AxisY, 30)), cameraProjectionType.Perspective, 50, 1)
            </code></example>
      <param name="target">Aiming point</param>
      <param name="distance">The distance between the camera location and the aiming point</param>
      <param name="rotation">A quaternion object representing the 3D rotation</param>
      <param name="projectionMode">Projection mode</param>
      <param name="focalLength">Focal length</param>
      <param name="zoomFactor">Zoom factor</param>
    </member>
    <member name="M:devDept.Eyeshot.Camera.#ctor(devDept.Geometry.Point3D,System.Double,devDept.Geometry.Quaternion,devDept.Graphics.projectionType,System.Double,System.Double,System.Boolean)">
      <summary>Standard constructor.</summary>
      <example>
                The following code fragment demonstrates how to setup a perspective projection
                camera at 100 units of distance from the origin and with a rotation of 30 degrees
                about the X axis and 60 degrees about the Z axis. The default rotation coincide
                with the model Right view.
                <code lang="CS" title="[New Example]">
            myViewport.Camera = new Camera(Point3D.Origin, 100, (new Quaternion(Vector3D.AxisZ, 60)) * (new Quaternion(Vector3D.AxisY, 30)), cameraProjectionType.Perspective, 50, 1);
            </code><code lang="VB" title="[New Example]">
            MyViewport.Camera = New Camera(Point3D.Origin, 100, (New Quaternion(Vector3D.AxisZ, 60)) * (New Quaternion(Vector3D.AxisY, 30)), cameraProjectionType.Perspective, 50, 1)
            </code></example>
      <param name="target">Aiming point</param>
      <param name="distance">The distance between the camera location and the aiming point</param>
      <param name="rotation">A quaternion object representing the 3D rotation</param>
      <param name="projectionMode">Projection mode</param>
      <param name="focalLength">Focal length</param>
      <param name="zoomFactor">Zoom factor</param>
      <param name="anaglyphic3D">If true enables the anaglyph 3D visualization</param>
    </member>
    <member name="M:devDept.Eyeshot.Camera.#ctor(devDept.Geometry.Point3D,System.Double,devDept.Geometry.Quaternion,devDept.Graphics.projectionType,System.Double,System.Double,System.Boolean,System.Double)">
      <summary>Standard constructor.</summary>
      <example>
                The following code fragment demonstrates how to setup a perspective projection
                camera at 100 units of distance from the origin and with a rotation of 30 degrees
                about the X axis and 60 degrees about the Z axis. The default rotation coincide
                with the model Right view.
                <code lang="CS" title="[New Example]">
            myViewport.Camera = new Camera(Point3D.Origin, 100, (new Quaternion(Vector3D.AxisZ, 60)) * (new Quaternion(Vector3D.AxisY, 30)), cameraProjectionType.Perspective, 50, 1);
            </code><code lang="VB" title="[New Example]">
            MyViewport.Camera = New Camera(Point3D.Origin, 100, (New Quaternion(Vector3D.AxisZ, 60)) * (New Quaternion(Vector3D.AxisY, 30)), cameraProjectionType.Perspective, 50, 1)
            </code></example>
      <param name="target">Aiming point</param>
      <param name="distance">The distance between the camera location and the aiming point</param>
      <param name="rotation">A quaternion object representing the 3D rotation</param>
      <param name="projectionMode">Projection mode</param>
      <param name="focalLength">Focal length</param>
      <param name="zoomFactor">Zoom factor</param>
      <param name="anaglyphic3D">If true enables the anaglyph 3D visualization</param>
      <param name="nearPlaneDistanceFactor">The near plane distance factor</param>
    </member>
    <member name="M:devDept.Eyeshot.Camera.Clone">
      <summary>
            Creates a deep copy of this camera.
            </summary>
      <returns>The new camera object.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Camera.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Constructor for deserializing objects.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="M:devDept.Eyeshot.Camera.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.
            </summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance that defines the serialized data.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> instance that contains the serialized data.</param>
    </member>
    <member name="P:devDept.Eyeshot.Camera.Anaglyph3D">
      <summary>
            Enables the anaglyph 3D visualization.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Camera.GetOffsetForSelection">
      <summary>
            Gets the offset applied to the camera planes for the drawing of the selected entities.
            </summary>
      <returns>The offset value</returns>
      <remarks>A positive value moves the selected entities closer to the viewer, a negative value moves them farther from the viewer.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Camera.GetProjectionMatrix(System.Double,System.Double,devDept.Eyeshot.Workspace.CameraEyePosType)">
      <summary>
            Gets the projection matrix.
            </summary>
      <param name="nearDistance">The near plane distance</param>
      <param name="farDistance">The far plane distance</param>
      <param name="cameraEyePos">The camera 3D position (for anaglyph 3D)</param>
      <returns>The computed projection matrix.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Camera.SetupModelView(System.Boolean,System.Boolean,devDept.Eyeshot.Workspace.CameraEyePosType,System.Boolean)">
      <summary>
             Gives a chance to derived classes to setup camera by two points and a vector.
             </summary>
      <param name="setGraphics">When true, the <see cref="!:devDept.Graphics.RenderContextBase.SetModelView()" /> is called.</param>
      <param name="reflection">When true, reflection is active.</param>
      <param name="cameraEyePos">The camera position</param>
      <param name="applySceneTransformation">When true, the scene transformation is applied as well.</param>
      <example>
        <code lang="C#"><![CDATA[public class myCamera : devDept.Eyeshot.Camera
               {
                   Point3D myLocation = new Point3D(100, 0, 0);
                   Point3D myTarget = Point3D.Origin;
                   Vector3D myUpVector = Vector3D.AxisZ;
               
                   protected override void SetupModelView(bool setGraphics, bool reflection, Workspace.CameraEyePosType cameraEyePos)
                   {
                       modelViewMatrix = LookAt(myLocation, myTarget, myUpVector, reflection);
               
                       if (setGraphics && renderContext != null)
                       {
                           renderContext.SetMatrices(projectionMatrix, modelViewMatrix);
                       }
                   }
               }
               
               public partial class Form1 : Form
               {
                    
                   public Form1()
                   {
               
                       InitializeComponent();
               
                       myViewport.Camera = New myCamera;
               
                   }
               
               }]]></code>
               <code lang="VB"><![CDATA[Public Class myCamera
             	Inherits devDept.Eyeshot.Camera
             
             	Private myLocation As New Point3D(100, 0, 0)
             	Private myTarget As Point3D = Point3D.Origin
             	Private myUpVector As Vector3D = Vector3D.AxisZ
             
             	Protected Overrides Sub SetupModelView(setGraphics As Boolean, reflection As Boolean, cameraEyePos As Workspace.CameraEyePosType)
             		modelViewMatrix = LookAt(myLocation, myTarget, myUpVector, reflection)
             
             		If setGraphics AndAlso renderContext IsNot Nothing Then
             			renderContext.SetMatrices(projectionMatrix, modelViewMatrix)
             		End If
             	End Sub
             
                 End Class
                 
                 Public Class Form1
            
                     Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
            
                         MyViewport.Camera = New MyCamera
            
                     End Sub
            
                 End Class]]></code></example>
    </member>
    <member name="M:devDept.Eyeshot.Camera.IsInFrustum(devDept.Geometry.Point3D,devDept.Geometry.PlaneEquation[])">
      <summary>
            Checks whether a point is inside the given frustum planes.
            </summary>
      <param name="point">The point</param>
      <param name="frustum">The frustum planes</param>
      <returns>True if the point is inside the frustum planes.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Camera.LookAt(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Vector3D,System.Boolean)">
      <summary>
            Aims the camera.
            </summary>
      <param name="eye">Viewer position</param>
      <param name="center">Target point</param>
      <param name="up">Up vector</param>
    </member>
    <member name="M:devDept.Eyeshot.Camera.ComputeOffsetOnCameraAxes(devDept.Geometry.Point3D,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D,devDept.Geometry.Point2D)">
      <summary>
            Computes the intersection of the lines passing from the vertex and oriented like the frustum planes with the X and Y axes of the camera.
            </summary>
      <param name="pt">The vertex in camera coordinates</param>
      <param name="m1">Angular coefficients of right and top frustum lines</param>
      <param name="m2">Angular coefficients of left and bottom frustum lines</param>
      <param name="minQ">Minimum offset of the lines intersections on X and Y camera axes</param>
      <param name="maxQ">Maximum offset of the lines intersections on X and Y camera axes</param>
      <remarks>Used internally for precise fit in perspective mode.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Camera.NearPlaneDistanceFactor">
      <summary>
            Gets or sets the factor used to compute the near plane from the far plane distance.
            </summary>
      <remarks>By default it is 0.001 of the far plane distance. Set it to a smaller value if it's clipping too much geometry near the viewer in big scenes. Beware that too small values affect the scene rendering precision.</remarks>
      <remarks>Call the <see cref="M:devDept.Eyeshot.Viewport.AdjustNearAndFarPlanes" /> and <see cref="!:Design.Invalidate()" /> to see the effect of the change.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Camera.ProjectToCameraPlane(devDept.Geometry.Point3D[])">
      <summary>
            Projects a list of points to the camera plane.
            </summary>
      <param name="points">The list of points to project</param>
      <returns>A list of 3D points. The Z values will be all negative (the camera Z axis is directed away from the design).</returns>
    </member>
    <member name="M:devDept.Eyeshot.Camera.Move(System.Double,System.Double,System.Double)">
      <summary>
            Moves the camera along the axes of its own coordinate system.
            </summary>
      <param name="dx">Amount along X-axis</param>
      <param name="dy">Amount along Y-axis</param>
      <param name="dz">Amount along Z-axis</param>
    </member>
    <member name="M:devDept.Eyeshot.Camera.Tilt(devDept.Geometry.Vector3D)">
      <summary>
            Tilts the camera
            </summary>
      <param name="newUp">New Up Vector</param>
    </member>
    <member name="M:devDept.Eyeshot.Camera.UpdateMatrices">
      <summary>
            Updates the camera matrices, for WorldToScreen and ScreenToWorld purposes.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Camera.ScreenToPlane(System.Drawing.Point,devDept.Geometry.Plane,System.Int32,System.Int32[],devDept.Geometry.Point3D@)">
      <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
      <param name="mousePos">Mouse cursor position (zero on top)</param>
      <param name="plane">The plane</param>
      <param name="controlHeight">The height of the viewport layout control</param>
      <param name="viewFrame">The viewport coordinates</param>
      <param name="intPoint">The intersection point. null/Nothing if the plane perpendicular to the screen.</param>
      <returns>True if the mapping succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Camera.ScreenToPlane(System.Drawing.Point,devDept.Geometry.PlaneEquation,System.Int32,System.Int32[],devDept.Geometry.Point3D@)">
      <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
      <param name="mousePos">Mouse cursor position relative to the viewport (zero on top)</param>
      <param name="pe">The plane equation</param>
      <param name="controlHeight">The height of the viewport layout control</param>
      <param name="viewFrame">The viewport coordinates</param>
      <param name="intPoint">The intersection point. null/Nothing if the plane perpendicular to the screen.</param>
      <returns>True if the mapping succeeded, false otherwise.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Camera.ScreenToPlane(System.Collections.Generic.IList{System.Drawing.Point},devDept.Geometry.PlaneEquation,System.Int32,System.Int32[])">
      <summary>
            Maps screen coordinates to world coordinates. 
            </summary>
      <param name="mousePointList">2D mouse point list (zero on top)</param>
      <param name="controlHeight">The height of the viewport layout control</param>
      <param name="viewFrame">The viewport coordinates</param>
      <param name="pe">The plane equation</param>
      <returns>The associated 3D world point list.</returns>
    </member>
    <member name="M:devDept.Eyeshot.Camera.WorldToScreen(devDept.Geometry.Point3D,System.Int32[])">
      <summary>
            Maps world coordinates to screen mouse coordinates.
            </summary>
      <param name="point">The 3D point to project on screen</param>
      <param name="viewFrame">The viewport coordinates</param>
      <returns>The associated projected screen point relative to the viewport (zero on bottom)</returns>
      <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Camera.WorldToScreen(System.Double,System.Double,System.Double,System.Int32[])">
      <summary>
            Maps world coordinates to screen mouse coordinates. 
            </summary>
      <param name="x">3D point's x-coordinate</param>
      <param name="y">3D point's y-coordinate</param>
      <param name="z">3D point's z-coordinate</param>
      <param name="viewFrame">The viewport coordinates</param>
      <returns>The associated projected screen point relative to the screen (zero on bottom).</returns>
      <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Camera.WorldToScreen(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32[])">
      <summary>
            Maps world coordinates to screen coordinates. 
            </summary>
      <param name="pointList">3D point list</param>
      <param name="viewFrame">The viewport coordinates</param>
      <returns>The associated projected screen point list relative to the screen (zero on bottom).</returns>
      <remarks>The z-component of the returned point is in the normalized device coordinate space [0,1]. 
            A value outside the [0,1] range means that the point is outside the near-far clipping planes of the camera.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.Camera.NearPlane">
      <summary>
            Gets the near plane of the Camera.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Camera.FarPlane">
      <summary>
            Gets the far plane of the Camera.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Camera.navigationType">
      <summary>
            Camera navigation modes.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Camera.navigationType.Examine">
      <summary>
            Rotate the 3D world to study the scene.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Camera.navigationType.Walk">
      <summary>
            Walks around the scene.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Camera.navigationType.Fly">
      <summary>
            Moves and turns the viewer like a flying airplane.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Camera.perspectiveFitType">
      <summary>
            Perspective fit type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Camera.perspectiveFitType.Quick">
      <summary>
            Quick fit.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.Camera.perspectiveFitType.Accurate">
      <summary>
            Accurate fit.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.Legend">
      <summary>
            Legend settings.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.ColorTable">
      <summary>
            Gets or sets the color table.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.Values">
      <summary>
            Gets the legend values.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Legend.GetStringValue(System.Int32)">
      <summary>
            Gets the string corresponding to the n-th value.
            </summary>
      <param name="n">The value index</param>
      <returns>The string of the n-th value.</returns>
      <remarks>Override this method to return a custom string.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.Legend.SetRange(System.Double,System.Double)">
      <summary>
            Sets the range of legend values.
            </summary>
      <param name="min">The legend's minimum value</param>
      <param name="max">The legend's maximum value</param>
    </member>
    <member name="M:devDept.Eyeshot.Legend.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Legend.#ctor(System.Collections.ObjectModel.ObservableCollection{System.Windows.Media.Brush})">
      <summary>
            Color table constructor (WPF).
            </summary>
      <param name="colorTable">The colors collection</param>
    </member>
    <member name="M:devDept.Eyeshot.Legend.#ctor(devDept.Eyeshot.Legend)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The legend object to copy</param>
    </member>
    <member name="M:devDept.Eyeshot.Legend.#ctor(System.Double,System.Double,System.String,System.String,System.Drawing.Point,System.Drawing.Size,System.Boolean,System.Boolean,System.Boolean,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,System.Drawing.Font,System.Collections.ObjectModel.ObservableCollection{System.Windows.Media.Brush},System.Boolean,System.Boolean)">
      <summary>
            Standard constructor (WPF).
            </summary>
      <param name="min">Minimum value</param>
      <param name="max">Maximum value</param>
      <param name="title">Title</param>
      <param name="subtitle">Subtitle</param>
      <param name="position">Top left corner position</param>
      <param name="itemSize">Size of each color rectangle</param>
      <param name="slave">If true, the legend minimum and maximum values are set automatically (FEM only)</param>
      <param name="visible">Visibility status</param>
      <param name="alignRight">If true, values are aligned right</param>
      <param name="formatString">Value's numeric format</param>
      <param name="textBackgroundColor">Text background color</param>
      <param name="titleColor">Title text color</param>
      <param name="textColor">Value text color</param>
      <param name="titleFont">Title font</param>
      <param name="textFont">Value font</param>
      <param name="colorTable">Color table</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
      <param name="alignVerticalMiddle">If true, values are vertically aligned to the middle of the colored rectangles</param>
    </member>
    <member name="P:devDept.Eyeshot.Legend.Min">
      <summary>
            Gets or sets legend minimum value.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.Max">
      <summary>
            Gets or sets legend maximum value.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.Title">
      <summary>
            Gets or sets the legend title.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.Subtitle">
      <summary>
            Gets or sets the legend subtitle.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.IsSlave">
      <summary>
            If true, the legend minimum and maximum values are set automatically (FEM only).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.Position">
      <summary>Top left corner position.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.ItemSize">
      <summary>Size of each color rectangle.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.Visible">
      <summary>
            Visibility status.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.FormatString">
      <summary>
             Value's numeric format. Useful to change number format and decimal places.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.AlignValuesRight">
      <summary>If true, values are aligned right.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.AlignValuesVerticalMiddle">
      <summary>
            If true, the values are vertically aligned to the middle of the colored rectangles.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.TextBackgroundColor">
      <summary>Text background color (supports semi-transparent colors).</summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.TextColor">
      <summary>Value text color.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.TitleColor">
      <summary>Title text color.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.FontFamily">
      <summary>Gets or sets the text font family.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.FontStyle">
      <summary>Gets or sets the text font style.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.FontWeight">
      <summary>Gets or sets the text font weight.</summary>
    </member>
    <member name="M:devDept.Eyeshot.Legend.GetScalingLevelRatio">
      <summary>
            Gets scaling level ratio used to get the correct font size.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.FontSize">
      <summary>Gets or sets the text font size.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.TitleFontSize">
      <summary>Gets or sets the text font size.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.Lighting">
      <summary>
            When false, the UI element is drawn with a flat color.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Legend.BuildGradient(System.Int32)">
      <summary>
            Builds a red to blue gradient array of colors.
            </summary>
      <param name="hueSteps">Number of hue steps</param>
      <returns>The resulting array of colors.</returns>
    </member>
    <member name="P:devDept.Eyeshot.Legend.RedToBlue17">
      <summary>
            Standard Red to Blue color gradient (17 items).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.RedToBlue9">
      <summary>
            Standard Red to Blue color gradient (9 items).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.RedToBlue33">
      <summary>
            Standard Red to Blue color gradient (33 items).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Legend.FactorOfSafety15">
      <summary>
            Factor of safety color gradient (15 items).
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ProgressBar">
      <summary>
            Viewport progress bar.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.AnimationInterval">
      <summary>
            Gets or set the animation interval for continuous progress bar.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.Lighting">
      <summary>
            When false, the UI element is drawn with a flat color.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ProgressBar.styleType">
      <summary>
            Progress bar style type.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ProgressBar.styleType.Linear">
      <summary>
            A linear bar that covers one third of the viewport width and starts from the bottom right corner.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ProgressBar.styleType.Docked">
      <summary>
            A linear bar that spans the complete viewport width and it's docked to the viewport bottom side.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ProgressBar.styleType.Circular">
      <summary>
            A big clock-like circular bar with percent text in the middle.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.CancelButton">
      <summary>
            Gets or sets the Cancel button.
            </summary>
      <remarks>Call <see cref="!:Design.CompileUserInterfaceElements" /> to apply the changes</remarks>
    </member>
    <member name="M:devDept.Eyeshot.ProgressBar.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ProgressBar.#ctor(devDept.Eyeshot.ProgressBar.styleType,System.Int32,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Boolean,devDept.Eyeshot.ToolBarButton)">
      <summary>
            Standard constructor.
            </summary>
      <param name="style">Progress bar style mode</param>
      <param name="value">Progress bar value [0-100]</param>
      <param name="text">Progress bar text</param>
      <param name="textColor">Progress bar text color</param>
      <param name="textBackgroundColor">Progress bar text background color</param>
      <param name="color">Progress bar color</param>
      <param name="drawScale">Drawing scale</param>
      <param name="visible">Visibility status</param>
      <param name="button">The Cancel button</param>
    </member>
    <member name="M:devDept.Eyeshot.ProgressBar.#ctor(devDept.Eyeshot.ProgressBar.styleType,System.Int32,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="style">Progress bar style mode</param>
      <param name="value">Progress bar value [0-100]</param>
      <param name="text">Progress bar text</param>
      <param name="textColor">Progress bar text color</param>
      <param name="textBackgroundColor">Progress bar text background color</param>
      <param name="color">Progress bar color</param>
      <param name="drawScale">Drawing scale</param>
      <param name="visible">Visibility status</param>
    </member>
    <member name="M:devDept.Eyeshot.ProgressBar.#ctor(devDept.Eyeshot.ProgressBar.styleType,System.Int32,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Boolean,devDept.Eyeshot.ToolBarButton,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="style">Progress bar style mode</param>
      <param name="value">Progress bar value [0-100]</param>
      <param name="text">Progress bar text</param>
      <param name="textColor">Progress bar text color</param>
      <param name="textBackgroundColor">Progress bar text background color</param>
      <param name="color">Progress bar color</param>
      <param name="drawScale">Drawing scale</param>
      <param name="visible">Visibility status</param>
      <param name="cancelButton">The cancel button</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.ProgressBar.#ctor(devDept.Eyeshot.ProgressBar.styleType,System.Int32,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Boolean,devDept.Eyeshot.ToolBarButton,System.Boolean,System.Double,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="style">Progress bar style mode</param>
      <param name="value">Progress bar value [0-100]</param>
      <param name="text">Progress bar text</param>
      <param name="textColor">Progress bar text color</param>
      <param name="textBackgroundColor">Progress bar text background color</param>
      <param name="color">Progress bar color</param>
      <param name="drawScale">Drawing scale</param>
      <param name="visible">Visibility status</param>
      <param name="cancelButton">The cancel button</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
      <param name="thicknessFactor">Progress bar thickness factor</param>
      <param name="showPercentText">Percent text visibility status (Circular progress bar only)</param>
    </member>
    <member name="M:devDept.Eyeshot.ProgressBar.#ctor(devDept.Eyeshot.ProgressBar.styleType,System.Int32,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Boolean,devDept.Eyeshot.ToolBarButton,System.Boolean,System.Double,System.Double,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="style">Progress bar style mode</param>
      <param name="value">Progress bar value [0-100]</param>
      <param name="text">Progress bar text</param>
      <param name="textColor">Progress bar text color</param>
      <param name="textBackgroundColor">Progress bar text background color</param>
      <param name="color">Progress bar color</param>
      <param name="drawScale">Drawing scale</param>
      <param name="visible">Visibility status</param>
      <param name="cancelButton">The cancel button</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
      <param name="thicknessFactor">Progress bar thickness factor</param>
      <param name="lengthFactor">Linear progress bar length factor</param>
      <param name="showPercentText">Percent text visibility status (Circular progress bar only)</param>
    </member>
    <member name="M:devDept.Eyeshot.ProgressBar.#ctor(devDept.Eyeshot.ProgressBar)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other ProgressBar object</param>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.ThicknessFactor">
      <summary>
            Gets or sets progress bar thickness factor (range 0-1).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.LengthFactor">
      <summary> 
            Gets or sets the linear progress bar length factor (range 0-1). 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.ShowPercentText">
      <summary>
            Gets or sets the percent text visibility status.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.StyleMode">
      <summary>
            Gets or sets the progress bar style.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.Value">
      <summary>
            Gets or sets the progress bar value.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.Text">
      <summary>
            Gets or sets the progress bar text.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.CancellingText">
      <summary>
            Gets or sets the progress bar "Cancelling..." text shown during the cancelling of the WorkUnit.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.Visible">
      <summary>
            Gets or sets the progress bar visibility during the <see cref="T:devDept.WorkUnit" /> asynchronous execution.
            </summary>
      <remarks>
        <seealso cref="!:Design.StartWork" />
      </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.Color">
      <summary>
            Gets or sets the progress bar color.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.TextColor">
      <summary>
            Gets or sets the progress bar text color.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.TextBackgroundColor">
      <summary>
            Gets or sets the progress bar text background color.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.DrawScale">
      <summary>
            Gets or sets the scale of the progress bar.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ProgressBar.ViewportIndex">
      <summary>
            Gets the index of the viewport on which the progress bar is displayed. 
            </summary>
      <remarks>This index is set to the ActiveViewport when the Workunit is started</remarks>
    </member>
    <member name="T:devDept.Eyeshot.coordinateSystemPositionType">
      <summary>
            Position type.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.IUserInterfaceElement">
      <summary>
            Interface used for Designer purposes.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.IUserInterfaceElement.Disposed">
      <summary>
            Gets a boolean indicating whether the element has been disposed.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.IUserInterfaceElement.GetThumbnail(devDept.Eyeshot.Viewport,System.Drawing.Size,System.Drawing.Color)">
      <summary>
            Gets a bitmap of the user interface element.
            </summary>
      <param name="viewport">The viewport it belongs to</param>
      <param name="size">The desired bitmap size</param>
      <param name="backgroundColor">The color desired for the background</param>
      <returns>The bitmap of the UI element.</returns>
    </member>
    <member name="M:devDept.Eyeshot.IUserInterfaceElement.GetBounds(devDept.Eyeshot.Viewport)">
      <summary>
            Gets the bounds rectangle in screen coordinates.
            </summary>
      <param name="viewport">The viewport</param>
      <returns>The bounds rectangle in screen coordinates (0 on top).</returns>
    </member>
    <member name="M:devDept.Eyeshot.IUserInterfaceElement.Update(devDept.Eyeshot.IUserInterfaceElement)">
      <summary>
            Updates the contents of the element with the data from another element.
            </summary>
      <param name="another">The other element whose contents are copied to this element</param>
    </member>
    <member name="T:devDept.Eyeshot.DisposableBase">
      <summary>
            Base class providing IDisposable interface.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.DisposableBase.PropertyChangedEvent">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.DisposableBase.PropertyChanged">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.DisposableBase.RaisePropertyChangedEvent(System.Object,System.Windows.DependencyProperty)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.DisposableBase.ObservableCollectionPropertyChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            For internal use only.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.UserInterfaceBase">
      <summary>
            Base class for <see cref="T:devDept.Eyeshot.Legend" /> and <see cref="T:devDept.Eyeshot.Viewport" />.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.UserInterfaceBase.GetDefaultLayerName(devDept.Eyeshot.Workspace)">
      <summary>
            Use this method to get the correct layer name for internal Meshes.
            </summary>
      <returns>The name of the default layer. It is got from the Workspace Layers collection.</returns>
    </member>
    <member name="M:devDept.Eyeshot.UserInterfaceBase.GetThumbnail(devDept.Eyeshot.Viewport,System.Drawing.Size,System.Drawing.Color)">
      <summary>
            Gets a thumbnail bitmap of the user interface element.
            </summary>
      <param name="viewport">The viewport it belongs to</param>
      <param name="size">The desired bitmap size</param>
      <param name="backgroundColor">The color desired for the background</param>
      <returns>The bitmap of the UI element.</returns>
      <remarks>Size is limited to 512 x 512</remarks>
    </member>
    <member name="M:devDept.Eyeshot.UserInterfaceBase.GetBounds(devDept.Eyeshot.Viewport)">
      <summary>
            Gets the bounds rectangle in screen coordinates.
            </summary>
      <param name="viewport">The viewport</param>
      <returns>The bounds rectangle in screen coordinates.</returns>
    </member>
    <member name="P:devDept.Eyeshot.UserInterfaceBase.CustomViewport">
      <summary>
            Tells if the UI element is drawn with a custom viewport.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.UserInterfaceBase.LocationAtOrigin">
      <summary>
            When doing a render to Bitmap of the item, must not change the viewport origin.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.UserInterfaceSymbolBase">
      <summary>
             Base class for <see cref="T:devDept.Eyeshot.CoordinateSystemIcon" />, <see cref="T:devDept.Eyeshot.OriginSymbol" /> and <see cref="T:devDept.Eyeshot.ViewCubeIcon" />.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.UserInterfaceSymbolBase.GetScalingLevel">
      <summary>
            Gets the display's scale factor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.UserInterfaceSymbolBase.GetScalingLevelRatio">
      <summary>
            Gets scaling level ratio used to get the correct font size.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.UserInterfaceSymbolBase.Size">
      <summary>
            Gets or sets the size in pixels.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.UserInterfaceSymbolBase.Visible">
      <summary>
            Gets or sets the visibility status.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.UserInterfaceSymbolBase.CheckAndFixDefaultLayerName(devDept.Eyeshot.Workspace)">
      <summary>
            Use this method to check and fix the layer name for internal Meshes when the ui element is assigned to the Viewport.
            </summary>
      <returns>The name of the default layer. It is got from the Workspace Layers collection.</returns>
    </member>
    <member name="P:devDept.Eyeshot.UserInterfaceSymbolBase.Entities">
      <summary>
            Gets or sets the mesh entities used to draw the CoordinateSystemIcon.
            </summary>
      <remarks>To be correctly visualized the entities must have a maximum size of 7.5 units.</remarks>
    </member>
    <member name="F:devDept.Eyeshot.UserInterfaceSymbolBase.PickedEntity">
      <summary>
            The picked part.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.UserInterfaceSymbolBase.OnMouseDown(System.Windows.Input.MouseButtonEventArgs,devDept.Eyeshot.Viewport)">
      <summary>
            Method called when the mouse is pressed on a UI element.
            </summary>
      <param name="e">The mouse data in screen coordinates</param>
      <param name="viewport">
      </param>
      <returns>True when an internal entity is picked, otherwise false.</returns>
    </member>
    <member name="M:devDept.Eyeshot.UserInterfaceSymbolBase.OnMouseUp(System.Windows.Input.MouseButtonEventArgs,devDept.Eyeshot.Viewport)">
      <summary>
            Method called when the mouse is released on a UI element.
            </summary>
      <param name="e">The mouse data in screen coordinates</param>
      <param name="viewport">
      </param>
      <returns>True when an internal entity is picked, otherwise false.</returns>
    </member>
    <member name="P:devDept.Eyeshot.UserInterfaceSymbolBase.Transformation">
      <summary>
            Gets or sets the transformation applied to the object.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.UserInterfaceSymbolBase.GetModelViewMatrix(devDept.Eyeshot.Camera,System.Double)">
      <summary>
            Gets the modelview matrix to draw the user interface symbol.
            </summary>
      <param name="camera">The camera of the viewport</param>
      <param name="dist">The desired distance of the camera from the target</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Eyeshot.UserInterfaceSymbolBase.PreDrawOnDepthBuffer(devDept.Graphics.RenderContextBase)">
      <summary>
            Prepares to draw on the depth buffer.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.UserInterfaceSymbolBase.PostDrawOnDepthBuffer(devDept.Graphics.RenderContextBase)">
      <summary>
            Restores previous states at the end of the draw on depth buffer.
            </summary>
      <param name="data">
      </param>
    </member>
    <member name="T:devDept.Eyeshot.CoordinateSystemBase">
      <summary>
             Base class for <see cref="T:devDept.Eyeshot.CoordinateSystemIcon" />, <see cref="T:devDept.Eyeshot.OriginSymbol" /> and <see cref="T:devDept.Eyeshot.ViewCubeIcon" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.Lighting">
      <summary>
            When false, the UI element is drawn with a flat color.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.EdgeColor">
      <summary>
            Gets or sets the edge color.
            </summary>
      <remarks>In use when <see cref="P:devDept.Eyeshot.CoordinateSystemBase.Lighting" /> is false only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.FontFamily">
      <summary>
            Gets or sets the label font family.
            </summary>
      <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.Workspace.CompileUserInterfaceElements" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.FontStyle">
      <summary>
            Gets or sets the label font style.
            </summary>
      <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.Workspace.CompileUserInterfaceElements" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.FontWeight">
      <summary>Gets or sets the label font weight.</summary>
      <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.Workspace.CompileUserInterfaceElements" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.FontSize">
      <summary>Gets or sets the label font size.</summary>
      <remarks>
                You need to call the <see cref="M:devDept.Eyeshot.Workspace.CompileUserInterfaceElements" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelColorX">
      <summary>
            Gets or sets the label color when Lighting is true.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelColorY">
      <summary>
            Gets or sets the label color when Lighting is true.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelColorZ">
      <summary>
            Gets or sets the label color when Lighting is true.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelColorName">
      <summary>
            Gets or sets the label color when Lighting is true.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.ArrowColorX">
      <summary>
            Gets or sets the color of the X axis arrow, applies only to the coordinate system style mode.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.ArrowColorY">
      <summary>
            Gets or sets the color of the Y axis arrow, applies only to the coordinate system style mode.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.ArrowColorZ">
      <summary>
            Gets or sets the color of the Z axis arrow, applies only to the coordinate system style mode.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelAxisX">
      <summary>
            Gets or sets the X axis label.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelAxisY">
      <summary>
            Gets or sets the Y axis label.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelAxisZ">
      <summary>
            Gets or sets the Z axis label.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.LabelOrigin">
      <summary>
            Gets or sets the origin label.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemBase.CreateLabels(devDept.Graphics.RenderContextBase,devDept.Geometry.Point3D,System.String,devDept.Geometry.Point3D,System.String,devDept.Geometry.Point3D,System.String,devDept.Geometry.Point3D,System.String,devDept.Eyeshot.Viewport,System.Drawing.ContentAlignment)">
      <summary>
            Creates the labels of the object.
            </summary>
      <param name="renderContext">The render context</param>
      <param name="posLabelAxisX">Position of the axis-X label</param>
      <param name="textAxisX">Text of the axis-X label</param>
      <param name="posLabelAxisY">Position of the axis-Y label</param>
      <param name="textAxisY">Text of the axis-Y label</param>
      <param name="posLabelAxisZ">Position of the axis-Z label</param>
      <param name="textAxisZ">Text of the axis-Z label</param>
      <param name="posLabelOrigin">Position of the origin label</param>
      <param name="textOrigin">Text of the origin label</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemBase.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,devDept.Geometry.Transformation,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="labelFont">Label font</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="size">Size in pixels</param>
      <param name="transformation">The symbol transformation</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemBase.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,devDept.Geometry.Transformation,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="labelFont">Label font</param>
      <param name="labelColorName">Label color for Origin</param>
      <param name="labelColorX">Label color X axis</param>
      <param name="labelColorY">Label color Y axis</param>
      <param name="labelColorZ">Label color Z axis</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="size">Size in pixels</param>
      <param name="transformation">The symbol transformation</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemBase.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,devDept.Geometry.Transformation,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="size">Size in pixels</param>
      <param name="transformation">The symbol transformation</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
      <param name="reactToFocus">If true, the UI element is hidden when the viewport is not current</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemBase.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,devDept.Geometry.Transformation,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="labelColorName">Label color for Origin</param>
      <param name="labelColorX">Label color X axis</param>
      <param name="labelColorY">Label color Y axis</param>
      <param name="labelColorZ">Label color Z axis</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="size">Size in pixels</param>
      <param name="transformation">The symbol transformation</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
      <param name="reactToFocus">If true, the UI element is hidden when the viewport is not current</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemBase.Dispose">
      <summary>
            Releases unmanaged resources.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemBase.OptimizedArrow(devDept.Eyeshot.CompileParams,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Removes vertices/triangles/normals on the base face.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemBase.GetFullTransformation">
      <summary>
            Gets the full transformation of the UI element.
            </summary>
      <returns>The transformation.</returns>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemBase.DrawEdgesAndSilho(devDept.Eyeshot.RenderParams)">
      <summary>
            Draws edges and silhouettes.
            </summary>
      <param name="data">The <see cref="T:devDept.Eyeshot.RenderParams" /> data structure</param>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemBase.HasTextureCoords">
      <summary>
            Tells if the element has texture coordinates.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.CoordinateSystemIcon">
      <summary>Coordinate System icon settings.</summary>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.GetDefaultCoordinateSystemIcon">
      <summary>
            Gets the default <see cref="T:devDept.Eyeshot.CoordinateSystemIcon" />.
            </summary>
      <returns>The default <see cref="T:devDept.Eyeshot.CoordinateSystemIcon" />.</returns>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType)">
      <summary>Deprecated constructor.</summary>
      <param name="labelFont">Label font</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="position">Position </param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType,System.Int32)">
      <summary>Deprecated constructor.</summary>
      <param name="labelFont">Label font</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="position">Position</param>
      <param name="size">Size in pixels</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType,System.Int32,devDept.Geometry.Transformation)">
      <summary>Deprecated constructor.</summary>
      <param name="labelFont">Label font</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="position">Position </param>
      <param name="size">Size in pixels</param>
      <param name="transformation">The transformation</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType,System.Int32,devDept.Geometry.Transformation)">
      <summary>Standard constructor.</summary>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="position">Position </param>
      <param name="size">Size in pixels</param>
      <param name="transformation">The transformation</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType,System.Int32,devDept.Geometry.Transformation,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="labelFont">Label font</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="position">Position </param>
      <param name="size">Size in pixels</param>
      <param name="transformation">The symbol transformation</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType,System.Int32,devDept.Geometry.Transformation,System.Boolean)">
      <summary>Constructor for WinForms designer.</summary>
      <param name="labelFont">Label font</param>
      <param name="labelColorName">Label color for Origin</param>
      <param name="labelColorX">Label color X axis</param>
      <param name="labelColorY">Label color Y axis</param>
      <param name="labelColorZ">Label color Z axis</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="position">Position </param>
      <param name="size">Size in pixels</param>
      <param name="transformation">The symbol transformation</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType,System.Int32,devDept.Geometry.Transformation,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="position">Position </param>
      <param name="size">Size in pixels</param>
      <param name="transformation">The symbol transformation</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType,System.Int32,devDept.Geometry.Transformation,System.Boolean)">
      <summary>Standard constructor.</summary>
            /// <param name="labelColorName">Label color origin</param><param name="labelColorX">Label color X axis</param><param name="labelColorY">Label color Y axis</param><param name="labelColorZ">Label color Z axis</param><param name="arrowColorX">X axis arrow color</param><param name="arrowColorY">Y axis arrow color</param><param name="arrowColorZ">Z axis arrow color</param><param name="labelOrigin">Origin label string</param><param name="labelAxisX">X axis label string</param><param name="labelAxisY">Y axis label string</param><param name="labelAxisZ">Z axis label string</param><param name="visible">Visibility status</param><param name="position">Position </param><param name="size">Size in pixels</param><param name="transformation">The symbol transformation</param><param name="lighting">When false, the UI element is drawn with a flat color.</param></member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType,System.Int32,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="labelFont">Label font</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="position">Position </param>
      <param name="size">Size in pixels</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType,System.Int32,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="labelFont">Label font</param>
      <param name="labelColorName">Label color name</param>
      <param name="labelColorX">Label color X axis</param>
      <param name="labelColorY">Label color Y axis</param>
      <param name="labelColorZ">Label color Z axis</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="position">Position </param>
      <param name="size">Size in pixels</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType,System.Int32,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="position">Position </param>
      <param name="size">Size in pixels</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.coordinateSystemPositionType,System.Int32,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="labelColorName">Label color for Origin</param>
      <param name="labelColorX">Label color X axis</param>
      <param name="labelColorY">Label color Y axis</param>
      <param name="labelColorZ">Label color Z axis</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="position">Position </param>
      <param name="size">Size in pixels</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="P:devDept.Eyeshot.CoordinateSystemIcon.Position">
      <summary>
            Gets or sets the position on sceeen.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.CoordinateSystemIcon.Draw(devDept.Eyeshot.RenderParams)">
      <summary>
            Draws the origin symbol.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.originSymbolStyleType">
      <summary>Origin symbol style type.</summary>
    </member>
    <member name="F:devDept.Eyeshot.originSymbolStyleType.Ball">
      <summary>The black and white sphere</summary>
    </member>
    <member name="F:devDept.Eyeshot.originSymbolStyleType.CoordinateSystem">
      <summary>The three XYZ arrows</summary>
    </member>
    <member name="T:devDept.Eyeshot.OriginSymbol">
      <summary>Origin symbol settings.</summary>
    </member>
    <member name="M:devDept.Eyeshot.OriginSymbol.GetDefaultOriginSymbol">
      <summary>
            Gets the default <see cref="T:devDept.Eyeshot.OriginSymbol" />.
            </summary>
      <returns>The default <see cref="T:devDept.Eyeshot.OriginSymbol" />.</returns>
      <remarks>For internal use only.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.OriginSymbol.StyleMode">
      <summary>
            Gets or sets the symbol style.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.OriginSymbol.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:devDept.Eyeshot.OriginSymbol.#ctor(System.Int32,devDept.Eyeshot.originSymbolStyleType,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="styleMode">Style mode</param>
      <param name="labelFont">Label font</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
    </member>
    <member name="M:devDept.Eyeshot.OriginSymbol.#ctor(System.Int32,devDept.Eyeshot.originSymbolStyleType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="styleMode">Style mode</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
    </member>
    <member name="M:devDept.Eyeshot.OriginSymbol.#ctor(System.Int32,devDept.Eyeshot.originSymbolStyleType,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Geometry.Transformation)">
      <summary>Deprecated constructor.</summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="styleMode">Style mode</param>
      <param name="labelFont">Label font</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="transformation">The transformation</param>
    </member>
    <member name="M:devDept.Eyeshot.OriginSymbol.#ctor(System.Int32,devDept.Eyeshot.originSymbolStyleType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Geometry.Transformation)">
      <summary>Deprecated constructor.</summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="styleMode">Style mode</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="transformation">The transformation</param>
    </member>
    <member name="M:devDept.Eyeshot.OriginSymbol.#ctor(System.Int32,devDept.Eyeshot.originSymbolStyleType,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Geometry.Transformation,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="styleMode">Style mode</param>
      <param name="labelFont">Label font</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="transformation">The transformation</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.OriginSymbol.#ctor(System.Int32,devDept.Eyeshot.originSymbolStyleType,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Geometry.Transformation,System.Boolean)">
      <summary>Constructor for WinForms designer.</summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="styleMode">Style mode</param>
      <param name="labelFont">Label font</param>
      <param name="labelColorName">Label color for Origin</param>
      <param name="labelColorX">Label color X axis</param>
      <param name="labelColorY">Label color Y axis</param>
      <param name="labelColorZ">Label color Z axis</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="transformation">The transformation</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.OriginSymbol.#ctor(System.Int32,devDept.Eyeshot.originSymbolStyleType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Geometry.Transformation,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="styleMode">Style mode</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="transformation">The transformation</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.OriginSymbol.#ctor(System.Int32,devDept.Eyeshot.originSymbolStyleType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,devDept.Geometry.Transformation,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="styleMode">Style mode</param>
      <param name="labelColorName">Label color name</param>
      <param name="labelColorX">Label color X axis</param>
      <param name="labelColorY">Label color Y axis</param>
      <param name="labelColorZ">Label color Z axis</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="transformation">The transformation</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.OriginSymbol.#ctor(System.Int32,devDept.Eyeshot.originSymbolStyleType,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="styleMode">Style mode</param>
      <param name="labelFont">Label font</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.OriginSymbol.#ctor(System.Int32,System.String,devDept.Geometry.Transformation,System.Boolean)">
      <summary>Deprecated constructor for OriginSumbols with <see cref="P:devDept.Eyeshot.OriginSymbol.StyleMode" /> == <see cref="F:devDept.Eyeshot.originSymbolStyleType.CoordinateSystem" />.</summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="name">Origin label string</param>
      <param name="transformation">The transformation applied to the new OriginSymbol</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.OriginSymbol.#ctor(System.Int32,devDept.Eyeshot.originSymbolStyleType,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Deprecated constructor.</summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="styleMode">Style mode</param>
      <param name="labelColor">Label color</param>
      <param name="arrowColorX">X axis arrow color</param>
      <param name="arrowColorY">Y axis arrow color</param>
      <param name="arrowColorZ">Z axis arrow color</param>
      <param name="labelOrigin">Origin label string</param>
      <param name="labelAxisX">X axis label string</param>
      <param name="labelAxisY">Y axis label string</param>
      <param name="labelAxisZ">Z axis label string</param>
      <param name="visible">Visibility status</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="T:devDept.Eyeshot.ObjectManipulatorPartProperties">
      <summary>
            Class that holds the properties for the ObjectManipulator parts.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulatorPartProperties.#ctor(System.Drawing.Color,System.Boolean,System.Boolean)">
      <summary>
            Constructor.
            </summary>
      <param name="color">The color</param>
      <param name="visible">The visibility</param>
      <param name="selectable">The selectability</param>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulatorPartProperties.Color">
      <summary>
            Gets or sets the color of the element.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulatorPartProperties.Visible">
      <summary>
            Gets or sets the visibility of the part.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulatorPartProperties.Selectable">
      <summary>
            if true, the part is selectable and is drawn with its <see cref="P:devDept.Eyeshot.ObjectManipulatorPartProperties.Color" />, else it's not selectable and drawn with grey color.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="T:devDept.Eyeshot.ObjectManipulator">
      <summary>
            Object manipulator class.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.FormatString">
      <summary>
             Value's numeric format. Useful to change number format and decimal places.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulator.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulator.#ctor(System.Int32,System.Boolean,System.Boolean,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties)">
      <summary>
            Deprecated constructor.
            </summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="visible">Visibility of the Object Manipulator</param>
      <param name="showOriginalWhileEditing">If true, shows the original entities along with the copies during editing</param>
      <param name="ball">Properties of the sphere on center of Objectmanipulator</param>
      <param name="translateX">Properties of the arrow for translation on X</param>
      <param name="translateY">Properties of the arrow for translation on Y</param>
      <param name="translateZ">Properties of the arrow for translation on Z</param>
      <param name="rotateX">Properties of the arrow for rotation around X</param>
      <param name="rotateY">Properties of the arrow for rotation around Y</param>
      <param name="rotateZ">Properties of the arrow for rotation around Z</param>
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulator.#ctor(System.Int32,System.Boolean,System.Boolean,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,System.Double,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="visible">Visibility of the Object Manipulator</param>
      <param name="showOriginalWhileEditing">If true, shows the original entities along with the copies during editing</param>
      <param name="ball">Properties of the sphere on center of Objectmanipulator</param>
      <param name="translateX">Properties of the arrow for translation on X</param>
      <param name="translateY">Properties of the arrow for translation on Y</param>
      <param name="translateZ">Properties of the arrow for translation on Z</param>
      <param name="rotateX">Properties of the arrow for rotation around X</param>
      <param name="rotateY">Properties of the arrow for rotation around Y</param>
      <param name="rotateZ">Properties of the arrow for rotation around Z</param>
      <param name="rotationStep">Rotation step angle in radians</param>
      <param name="translationStep">Translation step distance</param>
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulator.#ctor(System.Int32,System.Boolean,System.Boolean,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,System.Double,System.Double,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="visible">Visibility of the Object Manipulator</param>
      <param name="showOriginalWhileEditing">If true, shows the original entities along with the copies during editing</param>
      <param name="ball">Properties of the sphere on center of Objectmanipulator</param>
      <param name="translateX">Properties of the arrow for translation on X</param>
      <param name="translateY">Properties of the arrow for translation on Y</param>
      <param name="translateZ">Properties of the arrow for translation on Z</param>
      <param name="rotateX">Properties of the arrow for rotation around X</param>
      <param name="rotateY">Properties of the arrow for rotation around Y</param>
      <param name="rotateZ">Properties of the arrow for rotation around Z</param>
      <param name="rotationStep">Rotation step angle in radians</param>
      <param name="translationStep">Translation step distance</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulator.#ctor(System.Int32,System.Boolean,System.Boolean,devDept.Eyeshot.ObjectManipulator.styleType,devDept.Eyeshot.ObjectManipulator.ballActionType,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,System.Double,System.Double,System.Double,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="visible">Visibility of the Object Manipulator</param>
      <param name="showOriginalWhileEditing">If true, shows the original entities along with the copies during editing</param>
      <param name="styleMode">
      </param>
      <param name="ballActionMode">
      </param>
      <param name="ball">Properties of the sphere on center of Objectmanipulator</param>
      <param name="translateX">Properties of the arrow for translation on X</param>
      <param name="translateY">Properties of the arrow for translation on Y</param>
      <param name="translateZ">Properties of the arrow for translation on Z</param>
      <param name="rotateX">Properties of the arrow for rotation around X</param>
      <param name="rotateY">Properties of the arrow for rotation around Y</param>
      <param name="rotateZ">Properties of the arrow for rotation around Z</param>
      <param name="scaleX">Properties of the box for scaling on X</param>
      <param name="scaleY">Properties of the box for scaling on Y</param>
      <param name="scaleZ">Properties of the box for scaling on Z</param>
      <param name="rotationStep">Rotation step angle in radians</param>
      <param name="translationStep">Translation step distance</param>
      <param name="scalingStep">Scaling step factor</param>
      <param name="transformationLabelFill">
      </param>
      <param name="transformationLabelTextColor">
      </param>
      <param name="labelFont">The transformation label font</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulator.#ctor(System.Int32,System.Boolean,System.Boolean,devDept.Eyeshot.ObjectManipulator.styleType,devDept.Eyeshot.ObjectManipulator.ballActionType,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,devDept.Eyeshot.ObjectManipulatorPartProperties,System.Double,System.Double,System.Double,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
      <summary>
            Standard constructor.
            </summary>
      <param name="ballSize">Size of the sphere in pixels</param>
      <param name="visible">Visibility of the Object Manipulator</param>
      <param name="showOriginalWhileEditing">If true, shows the original entities along with the copies during editing</param>
      <param name="styleMode">
      </param>
      <param name="ballActionMode">
      </param>
      <param name="ball">Properties of the sphere on center of Objectmanipulator</param>
      <param name="translateX">Properties of the arrow for translation on X</param>
      <param name="translateY">Properties of the arrow for translation on Y</param>
      <param name="translateZ">Properties of the arrow for translation on Z</param>
      <param name="rotateX">Properties of the arrow for rotation around X</param>
      <param name="rotateY">Properties of the arrow for rotation around Y</param>
      <param name="rotateZ">Properties of the arrow for rotation around Z</param>
      <param name="scaleX">Properties of the box for scaling on X</param>
      <param name="scaleY">Properties of the box for scaling on Y</param>
      <param name="scaleZ">Properties of the box for scaling on Z</param>
      <param name="rotationStep">Rotation step angle in radians</param>
      <param name="translationStep">Translation step distance</param>
      <param name="scalingStep">Scaling step factor</param>
      <param name="transformationLabelFill">
      </param>
      <param name="transformationLabelTextColor">
      </param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulator.DrawLabel(devDept.Eyeshot.Workspace.DrawSceneParams)">
      <summary>
            Draws the transformation label.
            </summary>
      <param name="myParams">The draw parameters</param>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.TransformationLabelOffset">
      <summary>
            Gets or sets the Transformation Label offset. 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.ShowTransformationLabel">
      <summary>
            If true, a label containing the information about the current transformation is shown
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ObjectManipulator.ShowTransformationLabelUnits">
      <summary>
            If true, the units are displayed next to the transformation label value
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.TransformationLabelFillColor">
      <summary>
            The transformation label fill color
            </summary>
      <remarks>
            You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
            see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.TransformationLabelTextColor">
      <summary>
            The transformation label text color
            </summary>
      <remarks>
            You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
            see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.Position">
      <summary>
            The world position.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.ShowOriginalWhileEditing">
      <summary>
            If true, both the original and edited copies of the entities are shown during editing, else only the edited copies are shown.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.Ball">
      <summary>
            Gets or sets the properties of the translation on view ball.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.TranslateX">
      <summary>
            Gets or sets the properties of the arrow for the translation on X axis.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.TranslateY">
      <summary>
            Gets or sets the properties of the arrow for the translation on Y axis.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.TranslateZ">
      <summary>
            Gets or sets the properties of the arrow for the translation on Z axis.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.RotateX">
      <summary>
            Gets or sets the properties of the arc for the rotation around X axis.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.RotateY">
      <summary>
            Gets or sets the properties of the arc for the rotation around Y axis.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.RotateZ">
      <summary>
            Gets or sets the properties of the arc for the rotation around Z axis.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.ScaleZ">
      <summary>
            Gets or sets the properties of the box for the scale along Z axis.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.ScaleY">
      <summary>
            Gets or sets the properties of the box for the scale along Y axis.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.ScaleX">
      <summary>
            Gets or sets the properties of the box for the scale along X axis.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.RotationStep">
      <summary>
            Gets or sets the rotation step angle in radians.
            </summary>
      <remarks>Use 0 for a continuous movement.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.TranslationStep">
      <summary>
            Gets or sets the translation step distance.
            </summary>
      <remarks>Use 0 for a continuous movement.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.ScalingStep">
      <summary>
            Gets or sets the scaling step distance.
            </summary>
      <remarks>Use 0 for a continuous movement.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.TranslationRange">
      <summary>
            Gets or sets the translation range.
            </summary>
      <remarks>Applies only to the three translation axes, not to the translation on view ball.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.StyleMode">
      <summary>
            Gets or sets the style of the object manipulator.
            </summary>
      <remarks>
                You need to call the <see cref="!:Design.CompileUserInterfaceElements()" /> to
                see the effect of your changes at run-time.
            </remarks>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.BallActionMode">
      <summary>
            Gets or sets the action mode applied to the origin sphere of the manipulator. 
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ObjectManipulator.ObjectManipulatorEventArgs">
      <summary>
            Object manipulator event arguments class.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.ObjectManipulatorEventArgs.ActionMode">
      <summary>
            Gets the current action mode.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.ObjectManipulatorEventArgs.Axis">
      <summary>
            Gets the axis on which the transformation is performed.
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ObjectManipulator.ObjectManipulatorEventHandler">
      <summary>
            Event handler for ObjectManipulator events.
            </summary>
      <param name="sender">The sender</param>
      <param name="e">The arguments</param>
    </member>
    <member name="E:devDept.Eyeshot.ObjectManipulator.MouseDown">
      <summary>
            Mouse down event.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.ObjectManipulator.MouseUp">
      <summary>
            Mouse up event.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.ObjectManipulator.MouseOver">
      <summary>
            Mouse over event.
            </summary>
    </member>
    <member name="E:devDept.Eyeshot.ObjectManipulator.MouseDrag">
      <summary>
            Mouse drag event.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulator.OnDrag(System.Drawing.Point@,System.Drawing.Point,devDept.Eyeshot.Viewport)">
      <summary>
            Method called during the drag.
            </summary>
      <param name="lastPoint">Last mouse point in viewport coordinates</param>
      <param name="curPoint">Current mouse point in viewport coordinates</param>
      <param name="viewport">
      </param>
      <returns>
      </returns>
    </member>
    <member name="F:devDept.Eyeshot.ObjectManipulator.styleType.Standard">
      <summary>
            The style of the object manipulator applyed to the older version of Eyeshot.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ObjectManipulator.styleType.Rings">
      <summary>
            Style with same dimension and proportion of standard one but circle rings for rotation parts.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ObjectManipulator.styleType.Large">
      <summary>
            Rings style with larger arrow axes and rings.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ObjectManipulator.ballActionType.Translate">
      <summary>
            Translation on view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ObjectManipulator.ballActionType.Rotate">
      <summary>
            Rotation on view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ObjectManipulator.ballActionType.Scale">
      <summary>
            Uniform scaling
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.ObjectManipulator.actionType">
      <summary>
            Object manipulator action type enum.
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ObjectManipulator.actionType.TranslateOnView">
      <summary>
            Translation on view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ObjectManipulator.actionType.TranslateOnAxis">
      <summary>
            Translation on one of the three manipulator axes
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ObjectManipulator.actionType.Rotate">
      <summary>
            Rotation on one of the three manipulator axes
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ObjectManipulator.actionType.RotateOnView">
      <summary>
            Rotation on view
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ObjectManipulator.actionType.Scale">
      <summary>
            Scaling on one of the three manipulator axes
            </summary>
    </member>
    <member name="F:devDept.Eyeshot.ObjectManipulator.actionType.UniformScale">
      <summary>
            Uniform scaling
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.Transformation">
      <summary>
            Gets or sets the transformation applied to the entities being edited.
            </summary>
      <remarks>The final transformation applied to the object is given by the product of this transformation and the inverse of <see cref="P:devDept.Eyeshot.ObjectManipulator.InitialTransformation" /></remarks>
      <remarks>To correctly update the drawing of the selected entities preview it's necessary to set a new Transformation object and not change the inner values of the Transformation.Matrix.</remarks>
      <seealso cref="P:devDept.Eyeshot.ObjectManipulator.InitialTransformation" />
    </member>
    <member name="P:devDept.Eyeshot.ObjectManipulator.InitialTransformation">
      <summary>
            Gets or sets the initial transformation applied to the manipulator.
            </summary>
      <remarks>This transformation is not applied to the entities being transformed by the ObjectManipulator.</remarks>
      <seealso cref="P:devDept.Eyeshot.ObjectManipulator.Transformation" />
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulator.Enable(devDept.Geometry.Transformation,System.Boolean)">
      <summary>
             Activates the Manipulator to move the selected entities.
            </summary>
      <param name="initialTransform">The initial transformation</param>
      <param name="centerOnEntities">If true, positions the manipulator in the center of the selected entities</param>
      <seealso cref="T:devDept.Eyeshot.ObjectManipulator" />
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulator.Enable(devDept.Geometry.Transformation,System.Boolean,System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity})">
      <summary>
            Activates the ObjectManipulator to move the given entities.
            </summary>
      <param name="initialTransform">The initial transformation</param>
      <param name="centerOnEntities">If true, positions the manipulator in the center of the entities</param>
      <param name="entities">The entities to move</param>
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulator.Apply">
      <summary>
            Applies the transformation of the <see cref="T:devDept.Eyeshot.ObjectManipulator" /> on the selected entities and hides it.
            </summary>
      <remarks>
            You need to call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> to see the effect of this command.
            </remarks>
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulator.Cancel">
      <summary>
            Cancels the transformation of the <see cref="T:devDept.Eyeshot.ObjectManipulator" /> and hides it.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.ObjectManipulator.UpdateBoundingBox">
      <summary>
            Computes the design bounding box when the ObjectManipulator is enabled.       
            </summary>
      <remarks>It's important to call this method when the ObjectManipulator is enabled and visibility or size of some entities changes.</remarks>
    </member>
    <member name="T:devDept.Eyeshot.Grid">
      <summary>Planar grid definition.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.ActualMin">
      <summary>
            Gets the actual grid minimum 2D point relative to the grid plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.ActualMax">
      <summary>
            Gets the actual grid maximum 2D point relative to the grid plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.Min">
      <summary>Gets or sets the grid minimum 2D point relative to the grid plane.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.Max">
      <summary>Gets or sets the grid maximum 2D point relative to the grid plane.</summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.Step">
      <summary>
            Gets or sets the step between grid lines (meaningful only when <see cref="P:devDept.Eyeshot.Grid.AutoStep" /> is false).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.LineColor">
      <summary>
            Gets or sets the color used to draw lines.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.ColorAxisX">
      <summary>
            Gets or sets the color used to draw axis X.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.ColorAxisY">
      <summary>
            Gets or sets the color used to draw axis Y.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.FillColor">
      <summary>
            Gets or sets the color used to draw the grid plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.BorderColor">
      <summary>
            Gets or sets the color used to draw the grid plane border.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.AutoSize">
      <summary>
            When true, the grid is resized automatically every time the design's bounding box changes.
            </summary>
      <seealso cref="M:devDept.Eyeshot.Grid.ComputeAutomaticSize(devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)" />
    </member>
    <member name="P:devDept.Eyeshot.Grid.Visible">
      <summary>
            Gets or sets the visibility status.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.Plane">
      <summary>
            Grid plane.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.AlwaysBehind">
      <summary>
            When true, the grids is drawn always behind the geometry.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.AutoStep">
      <summary>
            When true, the grid real step is a multiple of the <see cref="P:devDept.Eyeshot.Grid.Step" /> to keep the number of lines between <see cref="P:devDept.Eyeshot.Grid.MinNumberOfLines" /> and <see cref="P:devDept.Eyeshot.Grid.MaxNumberOfLines" />.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.MajorLinesEvery">
      <summary>
            Gets or sets the number of steps between two major lines.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.MajorLineColor">
      <summary>
            Gets or sets the color used to draw major lines.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.MinNumberOfLines">
      <summary>
            When <see cref="P:devDept.Eyeshot.Grid.AutoStep" /> is true, defines the Minimum number of lines.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.Grid.MaxNumberOfLines">
      <summary>
            When <see cref="P:devDept.Eyeshot.Grid.AutoStep" /> is true, defines the maximum number of lines.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.Grid.#ctor">
      <summary>Empty constructor.</summary>
    </member>
    <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double)">
      <summary>Limits and step constructor.</summary>
      <overloads>Set line color to gray and axis color to black.</overloads>
      <param name="min">Minimum 2D grid point</param>
      <param name="max">Maximum 2D grid point</param>
      <param name="step">Grid step</param>
    </member>
    <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane)">
      <summary>Limits and step constructor.</summary>
      <overloads>Set line color to gray and axis color to black.</overloads>
      <param name="min">Minimum 2D grid point</param>
      <param name="max">Maximum 2D grid point</param>
      <param name="step">Grid step</param>
      <param name="plane">Grid plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color)">
      <summary>Standard constructor.</summary>
      <param name="min">Minimum 2D grid point</param>
      <param name="max">Maximum 2D grid point</param>
      <param name="step">Grid step</param>
      <param name="plane">Grid plane</param>
      <param name="lineColor">Color used to draw lines</param>
      <param name="axisColor">Color used to draw axes</param>
    </member>
    <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="min">Minimum 2D grid point</param>
      <param name="max">Maximum 2D grid point</param>
      <param name="step">Grid step</param>
      <param name="plane">Grid plane</param>
      <param name="lineColor">Color used to draw lines</param>
      <param name="axisColor">Color used to draw axes</param>
      <param name="autoSize">If true, the grid is resized automatically.</param>
      <param name="visible">Visibility status</param>
      <param name="alwaysBehind">If true, the grids is drawn always behind the geometry</param>
    </member>
    <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>Standard constructor.</summary>
      <param name="min">Minimum 2D grid point</param>
      <param name="max">Maximum 2D grid point</param>
      <param name="step">Grid step</param>
      <param name="plane">Grid plane</param>
      <param name="lineColor">Color used to draw lines</param>
      <param name="axisColor">Color used to draw axes</param>
      <param name="autoSize">If true, the grid is resized automatically.</param>
      <param name="visible">Visibility status</param>
      <param name="alwaysBehind">If true, the grids is drawn always behind the geometry</param>
      <param name="autoStep">If true, the grid real step is a multiple of the Step to keep the number of lines between MinLines and MaxLines</param>
      <param name="minNumberOfLines">If AutoStep is true, defines the Minimum number of lines</param>
      <param name="maxNumberOfLines">If AutoStep is true, defines the Maximum number of lines</param>
    </member>
    <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>Standard constructor.</summary>
      <param name="min">Minimum 2D grid point</param>
      <param name="max">Maximum 2D grid point</param>
      <param name="step">Grid step</param>
      <param name="plane">Grid plane</param>
      <param name="lineColor">Color used to draw lines</param>
      <param name="axisColor">Color used to draw axes</param>
      <param name="autoSize">If true, the grid is resized automatically.</param>
      <param name="visible">Visibility status</param>
      <param name="alwaysBehind">If true, the grids is drawn always behind the geometry</param>
      <param name="autoStep">If true, the grid real step is a multiple of the Step to keep the number of lines between MinLines and MaxLines</param>
      <param name="minNumberOfLines">If AutoStep is true, defines the Minimum number of lines</param>
      <param name="maxNumberOfLines">If AutoStep is true, defines the Maximum number of lines</param>
      <param name="majorLinesEvery">The number of steps between two major lines</param>
      <param name="majorLineColor">Color used to draw major lines</param>
    </member>
    <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>Standard constructor.</summary>
      <param name="min">Minimum 2D grid point</param>
      <param name="max">Maximum 2D grid point</param>
      <param name="step">Grid step</param>
      <param name="plane">Grid plane</param>
      <param name="lineColor">Color used to draw lines</param>
      <param name="colorAxisX">Color used to draw X axis</param>
      <param name="colorAxisY">Color used to draw Y axis</param>
      <param name="autoSize">If true, the grid is resized automatically.</param>
      <param name="visible">Visibility status</param>
      <param name="alwaysBehind">If true, the grids is drawn always behind the geometry</param>
      <param name="autoStep">If true, the grid real step is a multiple of the Step to keep the number of lines between MinLines and MaxLines</param>
      <param name="minNumberOfLines">If AutoStep is true, defines the Minimum number of lines</param>
      <param name="maxNumberOfLines">If AutoStep is true, defines the Maximum number of lines</param>
      <param name="majorLinesEvery">The number of steps between two major lines</param>
      <param name="majorLineColor">Color used to draw major lines</param>
    </member>
    <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color)">
      <summary>Standard constructor.</summary>
      <param name="min">Minimum 2D grid point</param>
      <param name="max">Maximum 2D grid point</param>
      <param name="step">Grid step</param>
      <param name="plane">Grid plane</param>
      <param name="lineColor">Color used to draw lines</param>
      <param name="colorAxisX">Color used to draw X axis</param>
      <param name="colorAxisY">Color used to draw Y axis</param>
      <param name="autoSize">If true, the grid is resized automatically.</param>
      <param name="visible">Visibility status</param>
      <param name="alwaysBehind">If true, the grids is drawn always behind the geometry</param>
      <param name="autoStep">If true, the grid real step is a multiple of the Step to keep the number of lines between MinLines and MaxLines</param>
      <param name="minNumberOfLines">If AutoStep is true, defines the Minimum number of lines</param>
      <param name="maxNumberOfLines">If AutoStep is true, defines the Maximum number of lines</param>
      <param name="majorLinesEvery">The number of steps between two major lines</param>
      <param name="majorLineColor">Color used to draw major lines</param>
      <param name="fillColor">Color used to draw the grid plane</param>
    </member>
    <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
      <summary>Standard constructor.</summary>
      <param name="min">Minimum 2D grid point</param>
      <param name="max">Maximum 2D grid point</param>
      <param name="step">Grid step</param>
      <param name="plane">Grid plane</param>
      <param name="lineColor">Color used to draw lines</param>
      <param name="colorAxisX">Color used to draw X axis</param>
      <param name="colorAxisY">Color used to draw Y axis</param>
      <param name="autoSize">If true, the grid is resized automatically.</param>
      <param name="visible">Visibility status</param>
      <param name="alwaysBehind">If true, the grids is drawn always behind the geometry</param>
      <param name="autoStep">If true, the grid real step is a multiple of the Step to keep the number of lines between MinLines and MaxLines</param>
      <param name="minNumberOfLines">If AutoStep is true, defines the Minimum number of lines</param>
      <param name="maxNumberOfLines">If AutoStep is true, defines the Maximum number of lines</param>
      <param name="majorLinesEvery">The number of steps between two major lines</param>
      <param name="majorLineColor">Color used to draw major lines</param>
      <param name="fillColor">Color used to draw the grid plane</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
    </member>
    <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double,devDept.Geometry.Plane,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Drawing.Color)">
      <summary>Standard constructor.</summary>
      <param name="min">Minimum 2D grid point</param>
      <param name="max">Maximum 2D grid point</param>
      <param name="step">Grid step</param>
      <param name="plane">Grid plane</param>
      <param name="lineColor">Color used to draw lines</param>
      <param name="colorAxisX">Color used to draw X axis</param>
      <param name="colorAxisY">Color used to draw Y axis</param>
      <param name="autoSize">If true, the grid is resized automatically.</param>
      <param name="visible">Visibility status</param>
      <param name="alwaysBehind">If true, the grids is drawn always behind the geometry</param>
      <param name="autoStep">If true, the grid real step is a multiple of the Step to keep the number of lines between MinLines and MaxLines</param>
      <param name="minNumberOfLines">If AutoStep is true, defines the Minimum number of lines</param>
      <param name="maxNumberOfLines">If AutoStep is true, defines the Maximum number of lines</param>
      <param name="majorLinesEvery">The number of steps between two major lines</param>
      <param name="majorLineColor">Color used to draw major lines</param>
      <param name="fillColor">Color used to draw the grid plane</param>
      <param name="lighting">When false, the UI element is drawn with a flat color.</param>
      <param name="borderColor">Color used to draw the grid plane border.</param>
    </member>
    <member name="M:devDept.Eyeshot.Grid.#ctor(devDept.Eyeshot.Grid)">
      <summary>
            Copy constructor.
            </summary>
      <param name="other">The other grid</param>
    </member>
    <member name="M:devDept.Eyeshot.Grid.ComputeAutomaticSize(devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)">
      <summary>
            Computes the automatic grid size.
            </summary>
      <param name="boxMin">The minimum point of the scene</param>
      <param name="boxMax">The maximum point of the scene</param>
      <param name="extensionFactor">The grid extension factor</param>
      <remarks>Override this method to provide a different scene box or extension.</remarks>
      <seealso cref="P:devDept.Eyeshot.Grid.AutoSize" />
    </member>
    <member name="M:devDept.Eyeshot.Grid.Draw(devDept.Graphics.RenderContextBase,devDept.Eyeshot.Viewport)">
      <summary>
            Draws the grid lines.
            </summary>
      <param name="context">The render context</param>
      <param name="viewport">The viewport</param>
    </member>
    <member name="T:devDept.Eyeshot.SimulationTimeLine">
      <summary>
            Manufacture simulation timeline.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SimulationTimeLine.#ctor">
      <summary>
            Empty constructor.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SimulationTimeLine.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Boolean,System.Double)">
      <summary>
            Standard constructor.
            </summary>
      <param name="thumbColor">The timeline thumb color</param>
      <param name="cursorLocationColor">The color used to highlight the cursor location</param>
      <param name="safeMovementsColor">The SimulationTimeLine color of the movements with no collisions</param>
      <param name="collisionColor">The SimulationTimeLine collision color</param>
      <param name="rapidsColor">The SimulationTimeLine rapid movements color</param>
      <param name="drawScale">The Drawing scale</param>
      <param name="visible">The Visibility status</param>
      <param name="thicknessFactor">SimulationTimeLine thickness factor</param>
    </member>
    <member name="M:devDept.Eyeshot.SimulationTimeLine.#ctor(devDept.Eyeshot.SimulationTimeLine)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other SimulationTimeLine object</param>
    </member>
    <member name="P:devDept.Eyeshot.SimulationTimeLine.ThicknessFactor">
      <summary>
            Gets or sets SimulationTimeLine thickness factor (range 0-1).
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SimulationTimeLine.Init">
      <summary>
            Initialize the TimeLine
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SimulationTimeLine.Visible">
      <summary>
            Gets or sets the SimulationTimeLine visibility.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SimulationTimeLine.HoveringColor">
      <summary>
            Gets or sets the SimulationTimeLine background color.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SimulationTimeLine.RapidColor">
      <summary>
            Gets or sets the SimulationTimeLine color for the rapid movements.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SimulationTimeLine.ThumbColor">
      <summary>
            Gets or sets the SimulationTimeLine color of the timeline thumb.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SimulationTimeLine.Color">
      <summary>
            Gets or sets the SimulationTimeLine color of the movements without collision.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SimulationTimeLine.CollisionColor">
      <summary>
            Gets or sets the SimulationTimeLine collision color.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.SimulationTimeLine.DrawScale">
      <summary>
            Gets or sets the scale of the SimulationTimeLine.
            </summary>
    </member>
    <member name="M:devDept.Eyeshot.SimulationTimeLine.GetToolTipText(devDept.Eyeshot.Entities.Toolpath.Motion,System.Int32,System.Boolean)">
      <summary>
            Gets the tooltip Text.
            </summary>
      <param name="motion">The motion.</param>
      <param name="operationIndex">The operation index.</param>
      <param name="collision">True if the holder collides with the simulation stock.</param>
      <returns>The text of the ToolTip referred to the motion of the timeline under the mouse cursor.</returns>
    </member>
    <member name="P:devDept.Eyeshot.SimulationTimeLine.ViewportIndex">
      <summary>
            Gets the index of the viewport on which the SimulationTimeLine is displayed. 
            </summary>
    </member>
    <member name="T:devDept.Eyeshot.AttributeReference">
      <summary>
            AutoCAD attribute reference.
            </summary>
      <seealso cref="P:devDept.Eyeshot.Entities.BlockReference.Attributes" />
    </member>
    <member name="M:devDept.Eyeshot.AttributeReference.#ctor(System.Double,System.Double,System.Double,System.String,System.Double)">
      <summary>
            Individual coordinates constructor.
            </summary>
      <param name="x">Insertion point X-coordinate (determines the <see cref="P:devDept.Eyeshot.AttributeReference.Plane" /> origin)</param>
      <param name="y">Insertion point X-coordinate (determines the <see cref="P:devDept.Eyeshot.AttributeReference.Plane" /> origin)</param>
      <param name="z">Insertion point X-coordinate (determines the <see cref="P:devDept.Eyeshot.AttributeReference.Plane" /> origin)</param>
      <param name="value">Value text</param>
      <param name="height">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.AttributeReference.#ctor(devDept.Geometry.Point3D,System.String,System.Double)">
      <summary>
            Constructor.
            </summary>
      <param name="insPoint">Insertion point (determines the <see cref="P:devDept.Eyeshot.AttributeReference.Plane" /> origin)</param>
      <param name="value">Value text</param>
      <param name="height">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.AttributeReference.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.Double)">
      <summary>
            Constructor.
            </summary>
      <param name="pln">Orientation plane</param>
      <param name="insPoint">Insertion point (determines the <see cref="P:devDept.Eyeshot.AttributeReference.Plane" /> origin)</param>
      <param name="value">Text</param>
      <param name="height">Text height</param>
    </member>
    <member name="M:devDept.Eyeshot.AttributeReference.#ctor(System.String)">
      <summary>
            Constructor.
            </summary>
      <param name="value">Value text</param>
    </member>
    <member name="M:devDept.Eyeshot.AttributeReference.#ctor(devDept.Eyeshot.AttributeReference)">
      <summary>
            Copy constructor.
            </summary>
      <param name="another">The other AttributeReference</param>
    </member>
    <member name="M:devDept.Eyeshot.AttributeReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Copy constructor.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:devDept.Eyeshot.AttributeReference.SynchronizeAttributes(devDept.Eyeshot.Entities.Attribute)">
      <summary>
            Synchronizes the data of the <see cref="T:devDept.Eyeshot.AttributeReference" /> with the data of the <paramref name="attribute" />, copying all the data except the <see cref="P:devDept.Eyeshot.AttributeReference.Value" />.
            </summary>
      <param name="attribute">The attribute entity from which to copy the data</param>
    </member>
    <member name="M:devDept.Eyeshot.AttributeReference.ConvertToSurrogate">
      <summary>
            Converts the entity to its surrogate, for serialization purpose.
            </summary>
      <returns>The surrogate.</returns>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.Invisible">
      <summary>
            Autodesk attribute mode. The attribute text is invisible. Note that the <see cref="P:devDept.Eyeshot.Workspace.AttributeReferenceVisibilityMode" /> system variable can override this setting. 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.Constant">
      <summary>
            Autodesk attribute mode. The attribute text is a fixed value and the value is preset.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.Verify">
      <summary>
            Autodesk attribute mode. The attribute value is entered twice; upon block insertion, a prompt displays to verify that the attribute value is correct. 
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.Preset">
      <summary>
            Autodesk attribute mode. The attribute is set to the default value if a preset value exists.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.NormalMode">
      <summary>If true, the attribute modes are all false.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.Value">
      <summary>
            Gets or sets the attribute value.
            </summary>
      <remarks>It's an override of the <see cref="P:devDept.Eyeshot.Entities.Text.TextString" /></remarks>
    </member>
    <member name="M:devDept.Eyeshot.AttributeReference.ToString">
      <summary>
            Converts this AttributeReference to a human readable string.
            </summary>
      <returns>A string that represents this 3d point.</returns>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.Height">
      <summary>
            Gets or sets the text height.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.Backward">
      <summary>
            The text is flipped in X.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.UpsideDown">
      <summary>
            The text is flipped in Y.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.WidthFactor">
      <summary>
            Gets or sets the text width factor.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.Alignment">
      <summary>
            Gets or sets the text alignment.
            </summary>
      <remarks>Call <see cref="M:devDept.Eyeshot.EntityList.Regen(devDept.Eyeshot.RegenOptions)" /> after changing this value.</remarks>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.StyleName">
      <summary>
            Gets or sets the text style name.
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.Plane">
      <summary>Gets or sets the planar entity supporting plane.</summary>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.InsertionPoint">
      <summary>
            Gets or sets the insertion point, (it corresponds to the <see cref="P:devDept.Eyeshot.AttributeReference.Plane" /> origin).
            </summary>
    </member>
    <member name="P:devDept.Eyeshot.AttributeReference.LayerName">
            Methods inherited form IEntity
        </member>
    <member name="T:devDept.Geometry.UtilityEx">
      <summary>
            Contains a collection of utility methods and constants for internal use.
            </summary>
      <summary>
            Contains a collection of utility methods and constants for internal use.
            </summary>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.DrawLinearDimPreview(devDept.Eyeshot.Workspace,devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Drawing.Point,devDept.Eyeshot.DimensionPreviewDrawParams)">
      <summary>
            Draws a preview of the linear dimension for the specific couple of extension lines points.
            </summary>
      <param name="workSpace">The workspace.</param>
      <param name="dimPlane">The plane on which the dimension lies (it can be different, but must be coplanar to the dimension plane).</param>
      <param name="extLine1">The first point.</param>
      <param name="extLine2">The second point.</param>
      <param name="mouseLocation">The mouse location</param>
      <param name="previewDrawParams">The preview parameters.</param>
      <returns>The linear dimension.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.DrawLinearDimPreview(devDept.Eyeshot.Workspace,devDept.Geometry.Plane,devDept.Eyeshot.Entities.Line,System.Drawing.Point,devDept.Eyeshot.DimensionPreviewDrawParams)">
      <summary>
            Draws a preview of the linear dimension for the specific line.
            </summary>
      <param name="workSpace">the workspace.</param>
      <param name="dimPlane">The plane on which the dimension lies (it can be different, but must be coplanar to the dimension plane).</param>
      <param name="line">The line.</param>
      <param name="mouseLocation">The mouse location.</param>
      <param name="previewDrawParams">The preview parameters.</param>
      <returns>The linear dimension.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.DrawRadialDimPreview(devDept.Eyeshot.Workspace,devDept.Eyeshot.Entities.Circle,System.Drawing.Point,devDept.Eyeshot.DimensionPreviewDrawParams)">
      <summary>
             Draws a preview of the radial dimension for the specific circle.
            </summary>
      <param name="workSpace">The workspace.</param>
      <param name="circle">The circle.</param>
      <param name="mouseLocation">The mouse location.</param>
      <param name="previewDrawParams">The preview parameters.</param>
      <returns>The radial dimension.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.DrawDiametricDimPreview(devDept.Eyeshot.Workspace,devDept.Eyeshot.Entities.Circle,System.Drawing.Point,devDept.Eyeshot.DimensionPreviewDrawParams)">
      <summary>
             Draws a preview of the diametric dimension for the specific circle.
            </summary>
      <param name="workSpace">The workspace.</param>
      <param name="circle">The circle.</param>
      <param name="mouseLocation">The mouse location.</param>
      <param name="previewDrawParams">The preview parameters.</param>
      <returns>The diametric dimension</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.DrawAngularDimPreview(devDept.Eyeshot.Workspace,devDept.Geometry.Plane,devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Line,System.Drawing.Point,devDept.Eyeshot.DimensionPreviewDrawParams)">
      <summary>
            Draws a preview of the radial dimension for the specific couple of lines.
            </summary>
      <param name="workSpace">The workspace.</param>
      <param name="dimPlane">The plane on which the dimension lies (it can be different, but must be coplanar to the dimension plane).</param>
      <param name="firstLine">The first line.</param>
      <param name="secondLine">the second line.</param>
      <param name="mouseLocation">The mouse location.</param>
      <param name="previewDrawParams">The preview parameters.</param>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.DrawAngularDimPreview(devDept.Eyeshot.Workspace,devDept.Eyeshot.Entities.Arc,System.Drawing.Point,devDept.Eyeshot.DimensionPreviewDrawParams)">
      <summary>
            Draws a preview of the radial dimension for the specific arc.
            </summary>
      <param name="workSpace">The workspace.</param>
      <param name="arc">The arc.</param>
      <param name="mouseLocation">The mouse location.</param>
      <param name="previewDrawParams">The preview parameters.</param>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.DrawAngularDimPreview(devDept.Eyeshot.Workspace,devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Drawing.Point,devDept.Eyeshot.DimensionPreviewDrawParams)">
      <summary>
            Draws a preview of the angular dimension for the specific points.
            </summary>
      <param name="workSpace">The workspace.</param>
      <param name="dimPlane">The plane on which the dimension lies (it can be different, but must be coplanar to the dimension plane).</param>
      <param name="origin">The Origin point</param>
      <param name="extLine1">The first extension line point.</param>
      <param name="extLine2">the second extension line point.</param>
      <param name="mouseLocation">The mouse location.</param>
      <param name="previewDrawParams">The preview parameters.</param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.DrawOrdinateDimPreview(devDept.Eyeshot.Workspace,devDept.Geometry.Plane,devDept.Geometry.Point3D,System.Double,System.Double,System.Boolean,System.Drawing.Point,devDept.Eyeshot.DimensionPreviewDrawParams)">
      <summary>
            Draws a preview of the ordinate dimension for the specific point.
            </summary>
      <param name="workSpace">The workspace.</param>
      <param name="dimPlane">The plane on which the dimension lies (it can be different, but must be coplanar to the dimension plane).</param>
      <param name="definingPoint">The point.</param>
      <param name="vertical">
      </param>
      <param name="mouseLocation">The mouse location.</param>
      <param name="previewDrawParams">The preview parameters.</param>
      <returns>The ordinate dimension.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.CreateBOMTable(devDept.Eyeshot.EntityList,devDept.Eyeshot.BlockKeyedCollection,System.String,System.String,System.String,System.String,System.Boolean,devDept.Eyeshot.Entities.Table.flowDirection,System.Int32)">
      <summary>
            Creates the Bill Of Materials. 
            </summary>
      <param name="entites">The entities collection. </param>
      <param name="blocks">The blocks collection. </param>
      <param name="itemNumberText">The text on the header row of the item number column. </param>
      <param name="partNumberText">The text on the header row of the part number column. </param>
      <param name="descriptionText">The text on the header raw of the description column. </param>
      <param name="quantityText">The text on the header raw of the quantity column. </param>
      <param name="partsOnly">If true, only the block containing geometry are taken in account to create the table. </param>
      <param name="flowDirection">The table's flow direction. </param>
      <param name="maxLevel">The maximum depth level of the Bill of Materials. </param>
      <returns> Returns a Table entity that represents the Bill of Materials. </returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.CreateBillOfMaterials(devDept.Eyeshot.EntityList,devDept.Eyeshot.BlockKeyedCollection,System.Boolean,System.Int32)">
      <summary>
            Creates the data for the Bill Of Materials.
            </summary>
      <param name="entities">The entities collection. </param>
      <param name="blocks">The blocks collection. </param>
      <param name="partsOnly">If true, only the block containing geometry are taken in account to create the table.</param>
      <param name="maxLevel">The maximum depth level of the Bill of Materials.  </param>
      <returns>A DataTable containing the Bill of Materials data.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetMaxGap(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Boolean)">
      <summary>
            Computes the maximum gap between curve segments.Assumes sorted and oriented segments.
            </summary>
      <param name="segments">The list of curve segments</param>
      <param name="closed">When true, we need to check gap between end and start segments as well.</param>
      <returns>The maximum gap between curve segments.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.SmartAdd(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Boolean)">
      <summary>
            Returns a CompositeCurve if the number of curves is bigger than one.
            </summary>
      <param name="curveList">The list of curves</param>
      <param name="sortAndOrient">When true, the curves are properly sorted and oriented.</param>
      <returns>The curve itself or a CompositeCurve if the curve number is bigger than one.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.CheckDataIntegrity(System.String@,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.HashSet{System.String}}}@)">
      <summary>
            Checks the data integrity between the Workspace controls.
            <para>It compares item-by-item all the master collections of all the Workspace instances, searching for objects used in more than one Workspace.</para></summary>
      <param name="log">The log file containing details about shared items.</param>
      <param name="sharedItems">The dictionary containing the shared items.        
            <para>Listed below are the element types you can find in it</para><para>- Layer: items that belong to the <see cref="!:Design.Layers" /> collection.</para><para>- Block: items that belong to the <see cref="!:Design.Blocks" /> collection.</para><para>- Material: items that belong to the <see cref="P:devDept.Eyeshot.Design.Materials" /> collection.</para><para>- TextStyle: items that belong to the <see cref="!:Design.TextStyles" /> collection.</para><para>- LineType: items that belong to the <see cref="!:Design.LineTypes" /> collection.</para><para>- HatchPattern: items that belong to the <see cref="!:Design.HatchPatterns" /> collection.</para><para>- Entity: items that belong to the <see cref="!:Design.Entities" /> collection.</para><para>- BlockEntity: items that belong to the <see cref="P:devDept.Eyeshot.Block.Entities" /> collection.</para><para>- BlockEntity+Entity: items that belong both to the <see cref="P:devDept.Eyeshot.Block.Entities" /> and to the <see cref="!:Design.Entities" /> collections.</para></param>
      <returns>True when no instances are shared between different Workspace controls, otherwise false.</returns>
      <remarks>        
            You can't share objects (i.e. <see cref="T:devDept.Eyeshot.Entities.Entity" />, <see cref="T:devDept.Eyeshot.Block" />, <see cref="T:devDept.Graphics.Material" />, etc.) between different Workspace controls, but you need to clone them before adding to another Workspace control.    
            If you get wrong display results or artifacts, you can use this method to check out shared elements.
            </remarks>
    </member>
    <!-- Badly formed XML comment ignored for member "M:devDept.Geometry.UtilityEx.ReplaceString(System.String,System.String,System.String,System.StringComparison)" -->
    <member name="M:devDept.Geometry.UtilityEx.GetFont(System.Windows.Media.FontFamily,System.Windows.FontStyle,System.Windows.FontWeight,System.Double,System.Single)">
      <summary>
            Gets a <see cref="T:System.Drawing.Font" /> starting from the commons WPF font values.
            </summary>
      <param name="fontFamily">The <see cref="T:System.Windows.Media.FontFamily" />.</param>
      <param name="fontStyle">The <see cref="T:System.Windows.FontStyle" />.</param>
      <param name="fontWeight">The <see cref="T:System.Windows.FontWeight" />.</param>
      <param name="fontSize">The font size.</param>
      <param name="scalingLevelRatio">The scaling level ratio among displays with different dpi scale factors. Used to get the correct font size when per-monitor DPI is enabled.</param>
      <returns>The new <see cref="T:System.Drawing.Font" />.</returns>
      <seealso cref="M:devDept.Eyeshot.WorkspaceBase.GetScalingLevelRatio" />
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetRandomColorDark(System.Random,System.Int32)">
      <summary>
            Generates a dark random color.
            </summary>
      <param name="rand">A <see cref="T:System.Random" /> class instance</param>
      <returns>The random dark color</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetRandomColor(System.Random)">
      <summary>
            Generates a random color.
            </summary>
      <param name="rand">A <see cref="T:System.Random" /> class instance,</param>
      <returns>The random color.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetFrozenColor(System.Drawing.Color,System.Double)">
      <summary>
            Generates a color with increased lightness from the source one.
            </summary>
      <param name="source">The source color</param>
      <param name="lightness">The lightness multiplication factor</param>
      <returns>The resulting color.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetScalingLevel">
      <summary>
            Gets the display scale factor.
            </summary>
      <remarks>
        <para>The result value is returned in a coordinate system in which 96 corresponds to 1 that means 100%.</para>
        <para>WPF only: if you've enabled per-monitor DPI in the app.manifest, use Workspace.GetScalingLevel() method instead.</para>
      </remarks>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.LoadBitmapWithoutLockingFile(System.String)">
      <summary>
            Creates an image without locking the input file.
            </summary>
      <param name="fileName">The file name.</param>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.MakeGrayscale(System.Drawing.Bitmap)">
      <summary>
            Converts an image to grayscale.
            </summary>
      <param name="original">The original bitmap</param>
      <returns>The grayscale bitmap.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.SetImageOpacity(System.Drawing.Image,System.Single)">
      <summary>  
            Changes the opacity of an image.
            </summary>
      <param name="image">The original image</param>
      <param name="opacity">The opacity (range 0-1)</param>
      <returns>The new bitmap</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.FloatArrayToColor(System.Single[])">
      <summary>
            Converts a float[4] to <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.DoubleArrayToColor(System.Double[])">
      <summary>
            Converts a double[3] to <see cref="T:System.Drawing.Color" />.
            </summary>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.ColorToFloatArray(System.Drawing.Color)">
      <summary>
            Converts a <see cref="T:System.Drawing.Color" /> to a float[4] with components in the [0,1] range.
            </summary>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.ColorToDoubleArray(System.Drawing.Color)">
      <summary>
            Converts a <see cref="T:System.Drawing.Color" /> to a double[4] with components in the [0,1] range.
            </summary>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.AllVerticesInScreenPolygon(devDept.Eyeshot.ScreenPolygonParams,System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Int32)">
      <summary>
            Tells if a collection of vertices is fully contained inside a polygon defined in screen coordinates. 
            </summary>
      <param name="data">The screen polygon params</param>
      <param name="vertices">The collection of vertices</param>
      <param name="count">The number of vertices to consider</param>
      <returns>True if all the vertices are contained in the screen polygon.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.VertexInScreenPolygon(devDept.Geometry.Point3D,System.Collections.Generic.IList{devDept.Geometry.Point2D},devDept.Geometry.Point2D,devDept.Geometry.Point2D,System.Double[],System.Int32[])">
      <summary>
            Checks whether a 3D vertex is inside the given screen polygon.
            </summary>
      <param name="pt">The 3D vertex</param>
      <param name="screenPolygon">The 2D screen polygon</param>
      <param name="min">The minimum value of the 2D polygon</param>
      <param name="max">The maximum value of the 2D polygon</param>
      <param name="modelViewProj">The modelview projection matrix</param>
      <param name="viewFrame">The viewport bounds</param>
      <returns>True if the vertex is inside the polygon.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetRevisionCloud(devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Plane,System.Double)">
      <summary>
            Builds a revision cloud from the specified ICurve.
            </summary>
      <param name="sourceCurve">The input curve</param>
      <param name="plane">The plane used to build the revision cloud</param>
      <param name="averageRadius">The radius that each arc of revision cloud should have</param>
      <returns>The resulting revision cloud as a CompositeCurve of arcs.</returns>
      <remarks>The input curve should lie on the input Plane.</remarks>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.ComputeMinMax(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Computes bounding box min/max 3D points of a list of entities.
            </summary>
      <param name="entList">The list of entities</param>
      <param name="boxMin">The resulting min point</param>
      <param name="boxMax">The resulting max point</param>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.SortAndOrient(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
      <summary>
            Chains curves using the minimum distance between individual curve ends.
            </summary>
      <param name="curveList">The list of curves</param>
      <remarks>The curves are not cloned</remarks>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.SortAndOrient(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double)">
      <summary>
            Chains curves using the minimum distance between individual curve ends keeping the first curve first.
            </summary>
      <param name="curveList">The list of curves</param>
      <param name="closureTol">The max distance between the contour start and end points to assume the curve as closed.</param>
      <remarks>The curves are not cloned</remarks>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.SortAndOrient(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Boolean,System.Boolean,System.Double)">
      <summary>
            Chains curves using the minimum distance between individual curve ends keeping the first curve first.
            </summary>
      <param name="curveList">The list of curves</param>
      <param name="reverseVertices">If vertices are present and the curve needs to be reversed the vertices array is reversed as well</param>
      <param name="assumeClosed">In case you already know that the contour is/has to be closed.</param>
      <param name="closureTol">Use zero if you know that the contour is/has to be closed</param>
      <remarks>The curves are not cloned</remarks>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetConnectedCurves(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double)">
      <summary>
            Groups the curves that are connected into CompositeCurves. 
            </summary>
      <param name="unsorted">The list of curves</param>
      <param name="gap">The distance necessary to consider two curves disconnected</param>
      <remarks>Two curves are considered connected if the distance between their endpoints is smaller than gap.</remarks>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.DetectRegionsFromContours(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double,devDept.Geometry.Plane)">
      <summary>
            Creates an array of Regions from the curves list, automatically detecting inner and outer contours.
            </summary>
      <param name="contours"> The list of curves</param>
      <param name="deviation">The regeneration tolerance</param>
      <param name="plane">The plane used to create the regions</param>
      <returns>The resulting Region array.</returns>
      <remarks>Primitives of input curves are cloned.</remarks>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.DrawArrowOnView(devDept.Eyeshot.DrawParams,devDept.Geometry.Vector3D,devDept.Geometry.Point3D)">
      <summary>
            Draw an arrow parallel to the view, oriented along the <paramref name="curveDirection" /> direction.
            </summary>
      <param name="data">The data</param>
      <param name="curveDirection">The arrow direction</param>
      <param name="point">The world point where to draw the arrow</param>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetOuterIndex(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},System.Double)">
      <summary>
            Returns the outer contour index.
            </summary>
      <param name="loops">The list of 2D contours</param>
      <param name="tolerance">The tolerance used to tessellate contours</param>
      <returns>The outer loop index</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.InsideOrCrossingFrustumQuad(devDept.Eyeshot.FrustumParams,System.Collections.Generic.IList{devDept.Geometry.Point3D})">
      <summary>
            Checks whether the quad are inside or crossing the frustum defined by the given planes.
            </summary>
      <param name="myParams">The frustum parameters</param>
      <param name="vertices">Vertices list</param>
      <returns>True if the quad is inside or crossing the frustum.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.InsideOrCrossingFrustum(devDept.Eyeshot.FrustumParams,System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.IndexTriangle})">
      <summary>
            Checks whether the triangles are inside or crossing the frustum defined by the given planes.
            </summary>
      <param name="myParams">The frustum parameters</param>
      <param name="vertices">Vertices list</param>
      <param name="triangles">Triangles list</param>
      <returns>True if the triangles are inside or crossing the frustum.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.InsideOrCrossingScreenPolygonQuad(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Eyeshot.ScreenPolygonParams)">
      <summary>
            Checks whether the quad is inside or crossing the given screen polygon.
            </summary>
      <param name="pt1">The first vertex</param>
      <param name="pt2">The second vertex</param>
      <param name="pt3">The third vertex </param>
      <param name="pt4">The fourth vertex </param>
      <param name="myParams">The screen polygon parameters</param>
      <returns>True if the quad is inside or is crossing the screen polygon.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.InsideOrCrossingScreenPolygon(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Eyeshot.ScreenPolygonParams)">
      <summary>
            Checks whether the triangle is inside or crossing the given screen polygon.
            </summary>
      <param name="pt1">The first  triangle vertex</param>
      <param name="pt2">The second triangle vertex</param>
      <param name="pt3">The third triangle vertex </param>
      <param name="myParams">Screen polygon parameters</param>
      <returns>True if the triangle is inside or is crossing the screen polygon.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetUnusedBlockName``1(System.String,devDept.Eyeshot.BlockKeyedCollection{``0},System.Boolean)">
      <summary>
            Gets a new name for block creation adding a number as suffix to the original name to avoid duplicates block names.
            </summary>
      <typeparam name="T">The <see cref="T:devDept.Eyeshot.Block" /> item belong to the collection.</typeparam>
      <param name="name">The original name to start from.</param>
      <param name="blocks">The blocks collection.</param>
      <param name="addCounterOnlyIfNeeded">When true, the original name is preserved if not used yet, otherwise, the new name counter starts from 1 searching for a non duplicated name.</param>
      <returns>The name that can be used to create a new block not already contained in the blocks collection.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetUnusedLayerName(System.String,devDept.Eyeshot.LayerKeyedCollection,System.Boolean)">
      <summary>
            Gets a new name for layer adding a number as suffix to the original name to avoid duplicates layer names.
            </summary>
      <param name="name">The original name to start from.</param>
      <param name="layers">The layers collection.</param>
      <param name="addCounterOnlyIfNeeded">When true, the original name is preserved if not used yet, otherwise, the new name counter starts from 1 searching for a non duplicated name.</param>
      <returns>The name that can be used to create a new layer not already contained in the layers collection.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.ConvexHull(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Double,System.Boolean,System.Boolean)">
      <summary>
            Computes the Convex Hull of a set of 3D points.
            </summary>
      <param name="points">The 3D point array</param>
      <param name="domainSize">The maximum distance between two points in the input set, zero for automatic estimation.</param>
      <returns>The resulting Mesh object.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.ConvexHull2D(System.Collections.Generic.IList{devDept.Geometry.Point2D})">
      <summary>
            Computes the Convex Hull of a set of 2D points.
            </summary>
      <param name="points">The 2D point list</param>
      <returns>The resulting LinearPath object.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.IsLine(devDept.Eyeshot.Entities.ICurve)">
      <summary>
            Checks if the curve is a line or a linear nurbs segment (Nurbs and Ultimate editions only).
            </summary>
      <param name="itfCurve">The curve to be checked</param>
      <returns>True if the curve is a <see cref="T:devDept.Eyeshot.Entities.Line" /> or a Nurbs curve with two control points and degree one</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetUnitsToMmFactor(devDept.Geometry.linearUnitsType)">
      <summary>
            Gets the factor to convert from units to mm.
            </summary>
      <param name="units">The design units</param>
      <returns>The conversion factor.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.Triangulate(System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{System.Collections.Generic.IList{devDept.Geometry.Point3D}},System.Collections.Generic.IList{devDept.Geometry.Point3D},System.Collections.Generic.IList{devDept.Geometry.Segment3D})">
      <summary>
            Triangulates a set of contours/points.
            </summary>
      <param name="outerLoop">Outer contour</param>
      <param name="innerLoops">A list of inner contours (holes), can be null/Nothing.</param>
      <param name="points">The list of Steiner points, can be null/Nothing.</param>
      <param name="segments">The internal constraint segments, can be null/Nothing.</param>
      <returns>The resulting Mesh, null/Nothing in case of failure.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.Triangulate(devDept.Eyeshot.Entities.Region,System.Double,System.Int32)">
      <summary>
            Triangulates (meshes) the specified Region.
            </summary>
      <param name="region">The region to be meshed</param>
      <param name="elementSize">The desired element size</param>
      <param name="smoothingPasses">The number of smoothing passes</param>
      <returns>The resulting Mesh object, null/Nothing in case of failure.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.Triangulate(System.Collections.Generic.IList{devDept.Geometry.Point3D},devDept.Geometry.Entities.GMesh.natureType)">
      <summary>
            Triangulate a collection of 2.5D points (terrain like).
            </summary>
      <param name="points">The 3D point collection</param>
      <param name="nature">The desired Mesh nature. Affects only mesh smoothing.</param>
      <returns>The resulting Mesh, null/nothing in case of failure.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.CleanDuplicates(System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve})">
      <summary>
            Cleans duplicated curves from a contour.
            </summary>
      <param name="contour">The contour to be checked</param>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetSignificantPointsOnICurve(devDept.Eyeshot.Entities.ICurve)">
      <summary>
            Selects the first and start point of an ICurve, the vertices of a LinearPath, and the startPoints of the segments of a CompositeCurve
            </summary>
      <param name="contour">The contour</param>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetEntitiesStats(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.BlockKeyedCollection,System.Int32@,System.Int32@,System.Int32@,System.Collections.Generic.Dictionary{devDept.Eyeshot.Block,System.Collections.Generic.Dictionary{System.Type,System.Int32}})">
      <summary>
            Get the statistics for a collection of entities.
            </summary>
      <param name="entityList">The collection of entities</param>
      <param name="blocks">The blocks to process.</param>
      <param name="entitiesCount">The count of all the entities.</param>
      <param name="verticesCount">The count of all the vertices.</param>
      <param name="trianglesCount">The count of all the triangles.</param>
      <param name="blocksDetails">The dictionary with the entities details about blocks. Optional, can be null/Nothing.</param>
      <returns>The dictionary with the count of each entity's type.</returns>
      <remarks>The entities inside the blocks are processed only for the counting of vertices and triangles.</remarks>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetEntitiesStats(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.BlockKeyedCollection,System.Boolean,System.Boolean)">
      <summary>
            Get the statistics for a collection of entities.
            </summary>
      <param name="entityList">The collection of entities</param>
      <param name="blocks">The blocks to process. It can be null if showTotals is false.&gt;</param>
      <param name="showTotals">When true it shows also the total's count, otherwise no.</param>
      <param name="showBlocksDetails">When true it shows also the detail of the entities contained into each block.</param>
      <returns>The string with the count of each entity's type.</returns>
      <remarks>The entities inside the blocks are processed only for the counting of vertices and triangles.</remarks>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetEntitiesStats(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.LayerKeyedCollection,devDept.Eyeshot.BlockKeyedCollection,devDept.Eyeshot.MaterialKeyedCollection,devDept.Eyeshot.TextStyleKeyedCollection,devDept.Eyeshot.LineTypeKeyedCollection,devDept.Eyeshot.HatchPatternKeyedCollection,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Get the statistics for a collection of entities.
            </summary>
      <param name="entityList">The collection of entities</param>
      <param name="layers">The layers to process. It can be null if showCollectionsItems is false.&gt;</param>
      <param name="blocks">The blocks to process. It can be null if showTotals is false.&gt;</param>
      <param name="materials">The materials to process. It can be null if showCollectionsItems is false.&gt;</param>
      <param name="textStyles">The textStyles to process. It can be null if showCollectionsItems is false.&gt;</param>
      <param name="hatchPatterns">The hatchPatterns to process. It can be null if showCollectionsItems is false.&gt;</param>
      <param name="lineTypes">The lineTypes to process. It can be null if showCollectionsItems is false.&gt;</param>
      <param name="showTotals">When true it shows also the total's count, otherwise no.</param>
      <param name="showBlocksDetails">When true it shows also the detail of the entities contained into each block.</param>
      <param name="showCollectionsItems">When true it shows also the list of the master collections items.</param>
      <returns>The string with the count of each entity's type.</returns>
      <remarks>The entities inside the blocks are processed only for the counting of vertices and triangles.</remarks>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetEntitiesByType(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.Dictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.List{System.Type})">
      <summary>
            Get a list of entities by type.
            </summary>
      <param name="entityList">The collection of entities.</param>
      <param name="blocks">The blocks to process.</param>
      <param name="includedTypes">If not null then it will consider only the entities which match these types.</param>
      <returns>The dictionary with the collection of entities for each entity's type.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetReferencedBlocksNames(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},System.Collections.Generic.Dictionary{System.String,devDept.Eyeshot.Block},System.Collections.Generic.Dictionary{System.String,devDept.Eyeshot.Block})">
      <summary>
            Returns the set of block in use (referenced by a <see cref="T:devDept.Eyeshot.Entities.BlockReference" />) names.
            </summary>
      <param name="entities">The entity list</param>
      <param name="blocks">The block collection</param>
      <returns>The set of block in use names.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.ComputeItemsCount(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.BlockKeyedCollection)">
      <summary>
            Computes the actual number of items in both plain or structured scene modes.
            </summary>
      <param name="entList">The entity list</param>
      <param name="blocks">The block collection</param>
      <returns>The number of items in the scene.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.ComputeVisibleItemsCount(System.Collections.Generic.IEnumerable{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.BlockKeyedCollection,devDept.Eyeshot.LayerKeyedCollection)">
      <summary>
            Computes the actual number of visible items in both plain or structured scene modes.
            </summary>
      <param name="entList">The entity list</param>
      <param name="blocks">The block collection</param>
      <param name="layers">The layers collection</param>
      <returns>The number of visible items in the scene.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.CountNodes(System.Collections.Generic.IList{devDept.Eyeshot.Entities.Entity},devDept.Eyeshot.BlockKeyedCollection,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
            Computes the scene graph inventory.
            </summary>
      <param name="entList">The entity collection</param>
      <param name="blocks">The block collection</param>
      <param name="fullNodeCount">Total number of tree nodes that contain -at least- one object (leaf)</param>
      <param name="emptyNodeCount">Total number of tree nodes that don't contains any object</param>
      <param name="totalObjectCount">Total number of objects in the scene, if leaf nodes always contain only one object, it is equal to <paramref name="fullNodeCount" />.</param>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.GetLogo">
      <summary>
            Gets the nurbs representation of the devDept logo.
            </summary>
      <returns>An array of <see cref="T:devDept.Eyeshot.Entities.ICurve" />.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.BuildHatch(devDept.Eyeshot.Entities.Region,System.Double,System.Double)">
      <summary>
            Builds a line pattern that fills the specified region.
            </summary>
      <param name="reg">The region (parallel to XY plane)</param>
      <param name="step">The step</param>
      <param name="angle">The line angle in radians</param>
      <returns>An array of array of lines. Each array contains all the segments of the same line.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.IntersectionLineLine(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Plane,devDept.Geometry.Point3D@)">
      <summary>
            Finds the intersection between two coplanar Line entities
            </summary>
      <param name="line1">The first line entity</param>
      <param name="line2">The second line entity</param>
      <param name="pln">The plane where the two entities lay</param>
      <param name="i0">The intersection point (when it exists)</param>
      <returns>True if the intersection is found and inside to both the lines, false when the two entities don't touch.</returns>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle3D(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle3D Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,System.Boolean,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle3D(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle3D Method</seealso>
      <seealso cref="!:Intersection(ICurve, ICurve)">Curve.Intersection(ICurve, ICurve) Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.Intersection(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double)">Curve.Intersection(ICurve, ICurve, double) Method</seealso>
      <seealso cref="!:Intersection2D(ICurve, ICurve, Plane)">Curve.Intersection2D Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Entities.ICurve.IntersectWith(devDept.Eyeshot.Entities.ICurve,System.Boolean)">ICurve.IntersectWith Method</seealso>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.IntersectionLineLine(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Point3D@)">
      <summary>
            Finds the intersection between two Line entities
            </summary>
      <param name="line1">The first line entity</param>
      <param name="line2">The second line entity</param>
      <param name="i0">The intersection point (when it exists)</param>
      <returns>True if the intersection is found, false when the two entities don't touch.</returns>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle3D(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle3D Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,System.Boolean,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle3D(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle3D Method</seealso>
      <seealso cref="!:Intersection(ICurve, ICurve)">Curve.Intersection(ICurve, ICurve) Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.Intersection(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double)">Curve.Intersection(ICurve, ICurve, double) Method</seealso>
      <seealso cref="!:Intersection2D(ICurve, ICurve, Plane)">Curve.Intersection2D Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Entities.ICurve.IntersectWith(devDept.Eyeshot.Entities.ICurve,System.Boolean)">ICurve.IntersectWith Method</seealso>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.IntersectionLineCircle(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Finds the intersection between an Arc/Circle and a Line entity.
            </summary>
      <param name="line">The line entity</param>
      <param name="arc">The arc/circle entity</param>
      <param name="pln">The plane where the two entities lay</param>
      <param name="i0">The first intersection point (when it exists)</param>
      <param name="i1">The second intersection point (when it exists)</param>
      <returns>True if the intersection is found, false when the two entities don't touch.</returns>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.IntersectionLineCircle(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,System.Boolean,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Finds the intersection between an Arc/Circle and a Line entity.
            </summary>
      <param name="line">The line entity</param>
      <param name="arc">The arc/circle entity</param>
      <param name="pln">The plane where the two entities lay</param>
      <param name="infiniteLine">If true, we look for intersections even outside the boundaries of the line.</param>
      <param name="i0">The first intersection point (when it exists)</param>
      <param name="i1">The second intersection point (when it exists)</param>
      <returns>True if the intersection is found, false when the two entities don't touch.</returns>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle3D(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle3D Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineLine(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineLine Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle3D(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle3D Method</seealso>
      <seealso cref="!:Intersection(ICurve, ICurve)">Curve.Intersection(ICurve, ICurve) Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.Intersection(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double)">Curve.Intersection(ICurve, ICurve, double) Method</seealso>
      <seealso cref="!:Intersection2D(ICurve, ICurve, Plane)">Curve.Intersection2D Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Entities.ICurve.IntersectWith(devDept.Eyeshot.Entities.ICurve,System.Boolean)">ICurve.IntersectWith Method</seealso>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.IntersectionLineCircle3D(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Finds the intersection between an Arc/Circle and a Line entity.
            </summary>
      <param name="line">The line entity</param>
      <param name="circ">The arc/circle entity</param>
      <param name="i0">The first intersection point (when it exists)</param>
      <param name="i1">The second intersection point (when it exists)</param>
      <returns>True if the intersection is found, false when the two entities don't touch.</returns>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,System.Boolean,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineLine(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineLine Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle3D(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle3D Method</seealso>
      <seealso cref="!:Intersection(ICurve, ICurve)">Curve.Intersection(ICurve, ICurve) Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.Intersection(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double)">Curve.Intersection(ICurve, ICurve, double) Method</seealso>
      <seealso cref="!:Intersection2D(ICurve, ICurve, Plane)">Curve.Intersection2D Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Entities.ICurve.IntersectWith(devDept.Eyeshot.Entities.ICurve,System.Boolean)">ICurve.IntersectWith Method</seealso>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Finds the intersection between two Arc/Circle entities.
            </summary>
      <param name="arc1">The first arc/circle entity</param>
      <param name="arc2">The second arc/circle entity</param>
      <param name="pln">The plane where the two entities lay</param>
      <param name="i0">The first intersection point (when it exists)</param>
      <param name="i1">The second intersection point (when it exists)</param>
      <returns>True if the intersection is found, false when the two entities don't touch.</returns>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle3D(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle3D Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineLine(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineLine Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,System.Boolean,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle3D(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle3D Method</seealso>
      <seealso cref="!:Intersection(ICurve, ICurve)">Curve.Intersection(ICurve, ICurve) Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.Intersection(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double)">Curve.Intersection(ICurve, ICurve, double) Method</seealso>
      <seealso cref="!:Intersection2D(ICurve, ICurve, Plane)">Curve.Intersection2D Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Entities.ICurve.IntersectWith(devDept.Eyeshot.Entities.ICurve,System.Boolean)">ICurve.IntersectWith Method</seealso>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle3D(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">
      <summary>
            Finds the intersection between two Arc/Circle entities.
            </summary>
      <param name="arc1">The first arc/circle entity</param>
      <param name="arc2">The second arc/circle entity</param>
      <param name="i0">The first intersection point (when it exists)</param>
      <param name="i1">The second intersection point (when it exists)</param>
      <returns>True if the intersection is found, false when the two entities don't touch.</returns>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineLine(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineLine Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,System.Boolean,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle3D(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle3D Method</seealso>
      <seealso cref="!:Intersection(ICurve, ICurve)">Curve.Intersection(ICurve, ICurve) Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.Intersection(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double)">Curve.Intersection(ICurve, ICurve, double) Method</seealso>
      <seealso cref="!:Intersection2D(ICurve, ICurve, Plane)">Curve.Intersection2D Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Entities.ICurve.IntersectWith(devDept.Eyeshot.Entities.ICurve,System.Boolean)">ICurve.IntersectWith Method</seealso>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.Intersection(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Boolean)">
      <summary>
            Finds all 3D points where the provided curves intersect.
            </summary>
      <returns>The list of intersection points.</returns>
      <param name="C1">The first curve</param>
      <param name="C2">The second curve</param>
      <param name="computeParameters">When true intersection points array is filled with InterPoints. False, for a quick computation without curves' paramters data.</param>
      <seealso cref="M:devDept.Geometry.UtilityEx.Intersection(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double)">Curve.Intersection(ICurve, ICurve, double) Method</seealso>
      <seealso cref="!:Intersection2D(ICurve, ICurve, Plane)">Curve.Intersection2D Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Entities.ICurve.IntersectWith(devDept.Eyeshot.Entities.ICurve,System.Boolean)">ICurve.IntersectWith Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineLine(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineLine Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle3D(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle3D Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,System.Boolean,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle3D(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle3D Method</seealso>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.Intersection(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double)">
      <summary>
            Finds all 3D points where the provided curves intersect within the specified gap.
            </summary>
      <returns>The list of intersection points.</returns>
      <param name="C1">The first curve</param>
      <param name="C2">The second curve</param>
      <param name="maxGap">Maximum distance between curves</param>
      <seealso cref="!:Intersection(ICurve, ICurve)">Curve.Intersection(ICurve, ICurve) Method</seealso>
      <seealso cref="!:Intersection2D(ICurve, ICurve, Plane)">Curve.Intersection2D Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Entities.ICurve.IntersectWith(devDept.Eyeshot.Entities.ICurve,System.Boolean)">ICurve.IntersectWith Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineLine(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineLine Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle3D(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle3D Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,System.Boolean,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle3D(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle3D Method</seealso>
    </member>
    <member name="M:devDept.Geometry.UtilityEx.Intersection2D(devDept.Geometry.Entities.IGCurve,devDept.Geometry.Entities.IGCurve,devDept.Geometry.Plane)">
      <summary>
            Finds all 3D points where the provided coplanar curves intersect.
            </summary>
      <returns>The list of intersection points.</returns>
      <param name="C1">The first curve</param>
      <param name="C2">The second curve</param>
      <param name="plane">The plane where the two curves lay</param>
      <seealso cref="M:devDept.Geometry.UtilityEx.Intersection(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,System.Double)">Curve.Intersection(ICurve, ICurve, double) Method</seealso>
      <seealso cref="M:devDept.Eyeshot.Entities.ICurve.IntersectWith(devDept.Eyeshot.Entities.ICurve,System.Boolean)">ICurve.IntersectWith Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineLine(devDept.Eyeshot.Entities.ICurve,devDept.Eyeshot.Entities.ICurve,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineLine Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionCircleCircle3D(devDept.Eyeshot.Entities.Circle,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionCircleCircle3D Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Plane,System.Boolean,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle Method</seealso>
      <seealso cref="M:devDept.Geometry.UtilityEx.IntersectionLineCircle3D(devDept.Eyeshot.Entities.Line,devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D@,devDept.Geometry.Point3D@)">CompositeCurve.IntersectionLineCircle3D Method</seealso>
    </member>
    <member name="M:devDept.Geometry.LockBitmap.LockBits">
      <summary>
            Lock bitmap data
            </summary>
    </member>
    <member name="M:devDept.Geometry.LockBitmap.UnlockBits">
      <summary>
            Unlock bitmap data
            </summary>
    </member>
    <member name="M:devDept.Geometry.LockBitmap.GetPixel(System.Int32,System.Int32)">
      <summary>
            Get the color of the specified pixel
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:devDept.Geometry.LockBitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Set the color of the specified pixel
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
      <param name="color">
      </param>
    </member>
    <member name="T:devDept.Geometry.lineWeightPrintingUnitsType">
      <summary>
            Line weight unit system type used for printing.
            </summary>
      <seealso cref="T:devDept.Eyeshot.HiddenLinesViewOnPaper" />
      <seealso cref="T:devDept.Eyeshot.HiddenLinesViewOnPaperPreview" />
      <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeight" />
    </member>
    <member name="F:devDept.Geometry.lineWeightPrintingUnitsType.Inches">
      <summary>
            The line weight is treated as inches
            </summary>
    </member>
    <member name="F:devDept.Geometry.lineWeightPrintingUnitsType.Millimeters">
      <summary>
            The line weight is treated as millimeters
            </summary>
    </member>
    <member name="F:devDept.Geometry.lineWeightPrintingUnitsType.Pixels">
      <summary>
            The line weight is treated as pixels
            </summary>
    </member>
    <member name="T:devDept.Serialization.AutodeskMiscPropertiesSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.AutodeskMiscProperties" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.AutodeskMiscPropertiesSurrogate.#ctor(devDept.Eyeshot.Entities.AutodeskMiscProperties)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="P:devDept.Serialization.AutodeskMiscPropertiesSurrogate.XData">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AutodeskMiscProperties.XData" />.
            </summary>
            /// <remarks>ProtoBuf does not support serializing/deserializing object.</remarks><seealso cref="T:devDept.Serialization.ProtoObject" /></member>
    <member name="P:devDept.Serialization.AutodeskMiscPropertiesSurrogate.Thickness">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AutodeskMiscProperties.Thickness" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.AutodeskMiscPropertiesSurrogate.ExtrusionDir">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AutodeskMiscProperties.ExtrusionDir" />.
            </summary>
    </member>
    <member name="P:devDept.Serialization.AutodeskMiscPropertiesSurrogate.UnparsedDimensionText">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AutodeskMiscProperties.UnparsedDimensionText" /></summary>
    </member>
    <member name="M:devDept.Serialization.AutodeskMiscPropertiesSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Block.#ctor(System.String,devDept.Geometry.Point3D,devDept.Geometry.linearUnitsType)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.AutodeskMiscPropertiesSurrogate.op_Implicit(devDept.Serialization.AutodeskMiscPropertiesSurrogate)~devDept.Eyeshot.Entities.AutodeskMiscProperties">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.AutodeskMiscPropertiesSurrogate.op_Implicit(devDept.Eyeshot.Entities.AutodeskMiscProperties)~devDept.Serialization.AutodeskMiscPropertiesSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BalloonSurrogate.AnchorPoint">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Balloon.AnchorPoint" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BalloonSurrogate.Style">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Balloon.Style" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BalloonSurrogate.ShowArrowHead">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Balloon.ShowArrowHead" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BalloonSurrogate.Size">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Balloon.Size" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BalloonSurrogate.Scale">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Balloon.Scale" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BalloonSurrogate.ArrowHead">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Balloon.ArrowHead" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BalloonSurrogate.ArrowHeadSize">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Balloon.ArrowHeadSize" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.BalloonSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Balloon.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.String,System.Double)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.StockSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Milling.Stock" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.StockSurrogate.#ctor(devDept.Eyeshot.Milling.Stock)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.StockSurrogate.RangeZ">
      <summary>
            See <see cref="P:devDept.Eyeshot.Milling.Stock.RangeZ" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.StockSurrogate.Normals">
      <summary>
            See <see cref="P:devDept.Eyeshot.Milling.Stock.Normals" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.StockSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Milling.Stock.#ctor(devDept.Serialization.StockSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Milling.Stock" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.Mesh" /> or a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.SimulationStockSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Milling.SimulationStock" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.SimulationStockSurrogate.#ctor(devDept.Eyeshot.Milling.SimulationStock)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SimulationStockSurrogate.PlanarFaces">
      <summary>
            See <see cref="P:devDept.Eyeshot.Milling.SimulationStock.PlanarFaces" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SimulationStockSurrogate.Transformation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Milling.SimulationStock.Transformation" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.SimulationStockSurrogate.ConvertToObject">
      <remarks>
             This method uses the <see cref="T:devDept.Eyeshot.Milling.SimulationStock" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.FastMeshSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.FastMesh" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FastMeshSurrogate.#ctor(devDept.Eyeshot.Entities.FastMesh)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FastMeshSurrogate.PointArray">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.FastMesh.PointArray" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FastMeshSurrogate.TriangleArray">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.FastMesh.TriangleArray" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FastMeshSurrogate.NormalArray">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.FastMesh.PointArray" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FastMeshSurrogate.ColorArray">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.FastMesh.ColorArray" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FastMeshSurrogate.ConvertToObject">
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.FastMesh.#ctor(System.Single[],System.Int32[],System.Single[])" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.HatchSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Hatch" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.HatchSurrogate.#ctor(devDept.Eyeshot.Entities.Hatch)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.HatchSurrogate.Plane">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.PlanarEntity.Plane" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.HatchSurrogate.ContourList">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Hatch.ContourList" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.HatchSurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.HatchSurrogate.Triangles">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Hatch.Triangles" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.HatchSurrogate.PatternName">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Hatch.PatternName" /></summary>
    </member>
    <member name="F:devDept.Serialization.HatchSurrogate.PatternScale">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Hatch.PatternScale" /></summary>
    </member>
    <member name="F:devDept.Serialization.HatchSurrogate.PatternAngle">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Hatch.PatternAngle" /></summary>
    </member>
    <member name="F:devDept.Serialization.HatchSurrogate.PatternOrigin">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Hatch.PatternOrigin" /></summary>
    </member>
    <member name="F:devDept.Serialization.HatchSurrogate.PatternSpacing">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Hatch.PatternSpacing" /></summary>
    </member>
    <member name="F:devDept.Serialization.HatchSurrogate.PatternDouble">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Hatch.PatternDouble" /></summary>
    </member>
    <member name="F:devDept.Serialization.HatchSurrogate.IsUserDefinedPattern">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Hatch.IsUserDefinedPattern" /></summary>
    </member>
    <member name="M:devDept.Serialization.HatchSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.Hatch.#ctor(System.String,System.Collections.Generic.IList{devDept.Eyeshot.Entities.ICurve},devDept.Geometry.Plane)" /> constructor with an empty list. (The <see cref="!:Hatch.ContoursList" /> is filled with the <see cref="M:devDept.Serialization.HatchSurrogate.CopyDataToObject(devDept.Eyeshot.Entities.Entity)" /> method.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.Mesh" /> or a <see cref="T:devDept.Eyeshot.Entities.PointCloud" /> or a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.SketchEntitySurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.SketchEntity" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.SketchEntitySurrogate.#ctor(devDept.Eyeshot.Entities.SketchEntity)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SketchEntitySurrogate.GSketch">
      <summary>
            See <see cref="F:devDept.Eyeshot.Entities.SketchEntity.gSketch" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SketchEntitySurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SketchEntitySurrogate.CurveList">
      <summary>
            The Curve list.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SketchEntitySurrogate.PointList">
      <summary>
            The Point list.
            </summary>
    </member>
    <member name="M:devDept.Serialization.SketchEntitySurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="T:devDept.Geometry.ConstraintSolver.Sketch" /> constructor to create the object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> or a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.HatchPatternLineSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.HatchPatternLine" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.HatchPatternLineSurrogate.#ctor(devDept.Eyeshot.HatchPatternLine)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.HatchPatternLineSurrogate.Angle">
      <summary>
            See <see cref="P:devDept.Eyeshot.HatchPatternLine.Angle" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.HatchPatternLineSurrogate.Origin">
      <summary>
            See <see cref="P:devDept.Eyeshot.HatchPatternLine.Origin" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.HatchPatternLineSurrogate.DeltaX">
      <summary>
            See <see cref="P:devDept.Eyeshot.HatchPatternLine.DeltaX" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.HatchPatternLineSurrogate.DeltaY">
      <summary>
            See <see cref="P:devDept.Eyeshot.HatchPatternLine.DeltaY" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.HatchPatternLineSurrogate.Pattern">
      <summary>
            See <see cref="P:devDept.Eyeshot.HatchPatternLine.Pattern" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.HatchPatternLineSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="T:devDept.Eyeshot.HatchPatternLine" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.HatchPatternLineSurrogate.op_Implicit(devDept.Serialization.HatchPatternLineSurrogate)~devDept.Eyeshot.HatchPatternLine">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.HatchPatternLineSurrogate.op_Implicit(devDept.Eyeshot.HatchPatternLine)~devDept.Serialization.HatchPatternLineSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="T:devDept.Serialization.HatchPatternSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.HatchPattern" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.HatchPatternSurrogate.#ctor(devDept.Eyeshot.HatchPattern)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.HatchPatternSurrogate.Name">
      <summary>
            See <see cref="P:devDept.Eyeshot.HatchPattern.Name" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.HatchPatternSurrogate.Lines">
      <summary>
            See <see cref="P:devDept.Eyeshot.HatchPattern.Lines" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.HatchPatternSurrogate.Description">
      <summary>
            See <see cref="P:devDept.Eyeshot.HatchPattern.Description" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.HatchPatternSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="!:HatchPattern.HatchPattern(string, float[])" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.HatchPatternSurrogate.op_Implicit(devDept.Serialization.HatchPatternSurrogate)~devDept.Eyeshot.HatchPattern">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.HatchPatternSurrogate.op_Implicit(devDept.Eyeshot.HatchPattern)~devDept.Serialization.HatchPatternSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="T:devDept.Serialization.IfcLinearPathSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Translators.IfcLinearPath" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.IfcLinearPathSurrogate.#ctor(devDept.Eyeshot.Translators.IfcLinearPath)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcLinearPathSurrogate.GUID">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcLinearPath.GUID" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcLinearPathSurrogate.Parent">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcLinearPath.Parent" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcLinearPathSurrogate.Systems">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcLinearPath.Systems" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcLinearPathSurrogate.Identification">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcLinearPath.Identification" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcLinearPathSurrogate.Properties">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcLinearPath.Properties" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcLinearPathSurrogate.Materials">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcLinearPath.Materials" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcLinearPathSurrogate.LocalTransformation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcLinearPath.LocalTransformation" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcLinearPathSurrogate.GlobalTransformation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcLinearPath.GlobalTransformation" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcLinearPathSurrogate.Axes">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcLinearPath.Axes" /></summary>
    </member>
    <member name="F:devDept.Serialization.IfcLinearPathSurrogate.Openings">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcLinearPath.Openings" /></summary>
    </member>
    <member name="M:devDept.Serialization.IfcLinearPathSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Translators.IfcLinearPath.#ctor(devDept.Serialization.IfcLinearPathSurrogate)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.AttributeBaseSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.AttributeBase" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.AttributeBaseSurrogate.#ctor(devDept.Eyeshot.Entities.AttributeBase)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AttributeBaseSurrogate.Invisible">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AttributeBase.Invisible" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AttributeBaseSurrogate.Constant">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AttributeBase.Constant" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AttributeBaseSurrogate.Verify">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AttributeBase.Verify" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AttributeBaseSurrogate.Preset">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AttributeBase.Preset" />.
            </summary>
    </member>
    <member name="T:devDept.Serialization.AttributeReferenceDataSurrogate">
      <summary>
            Defines the surrogate for the internal class AttributeReferenceData.
            </summary>
    </member>
    <member name="M:devDept.Serialization.AttributeReferenceDataSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses an internal constructor to create the object.       
             </remarks>
    </member>
    <member name="T:devDept.Serialization.AttributeReferenceSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.AttributeReference" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.AttributeReferenceSurrogate.#ctor(devDept.Eyeshot.AttributeReference)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AttributeReferenceSurrogate.DeserializationContent">
      <summary>
            Gets or sets the <see cref="T:devDept.Serialization.contentType" /> used for deserialization purpose only.
            </summary>
    </member>
    <member name="M:devDept.Serialization.AttributeReferenceSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.AttributeReference.#ctor(devDept.Eyeshot.Entities.AttributeReferenceData)" /> constructor to create the object.       
             </remarks>
    </member>
    <member name="M:devDept.Serialization.AttributeReferenceSurrogate.CopyDataFromObject(devDept.Eyeshot.AttributeReference)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Serialization.AttributeReferenceSurrogate.op_Implicit(devDept.Serialization.AttributeReferenceSurrogate)~devDept.Eyeshot.AttributeReference">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.AttributeReferenceSurrogate.op_Implicit(devDept.Eyeshot.AttributeReference)~devDept.Serialization.AttributeReferenceSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when the <see cref="M:devDept.Eyeshot.AttributeReference.ConvertToSurrogate" /> method returns null value.</exception>
    </member>
    <member name="M:devDept.Serialization.AttributeReferenceSurrogate.BeforeDeserialize(ProtoBuf.SerializationContext)">
      <summary>
            Called before the object deserialization.
            </summary>
      <param name="serializationContext">The serialization context</param>
      <remarks>The override of this method must always call the base at the beginning.</remarks>
      <exception cref="T:System.ArgumentException">Thrown when the serialization context is not a valid <see cref="T:devDept.Serialization.FileSerializer" /> object.</exception>
    </member>
    <member name="T:devDept.Serialization.AttributeSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Attribute" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.AttributeSurrogate.#ctor(devDept.Eyeshot.Entities.Attribute)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AttributeSurrogate.Value">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Attribute.Value" /></summary>
    </member>
    <member name="F:devDept.Serialization.AttributeSurrogate.Prompt">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Attribute.Prompt" /></summary>
    </member>
    <member name="M:devDept.Serialization.AttributeSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Attribute.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,System.String,System.String,System.Double)" /> constructor to create the object.       
             </remarks>
    </member>
    <member name="T:devDept.Serialization.BlockReferenceSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.BlockReference" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.BlockReferenceSurrogate.#ctor(devDept.Eyeshot.Entities.BlockReference)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BlockReferenceSurrogate.BlockName">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.BlockReference.BlockName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BlockReferenceSurrogate.Transformation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.BlockReference.Transformation" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BlockReferenceSurrogate.Attributes">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.BlockReference.Attributes" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.BlockReferenceSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.BlockReference.#ctor(devDept.Geometry.Transformation,System.String)" /> constructor to create the object.               
             </remarks>
    </member>
    <member name="T:devDept.Serialization.contentType">
      <summary>
            The content type of the file for the Eyeshot proprietary file format.
            </summary>
    </member>
    <member name="F:devDept.Serialization.contentType.None">
      <summary>
            No content. This value cannot be used for serialization purpose.
            </summary>
    </member>
    <member name="F:devDept.Serialization.contentType.Geometry">
      <summary>
            Saves or loads geometrical data only.
            </summary>
    </member>
    <member name="F:devDept.Serialization.contentType.Tessellation">
      <summary>
            Saves or loads tessellation data only.
            </summary>
    </member>
    <member name="F:devDept.Serialization.contentType.GeometryAndTessellation">
      <summary>
            Saves or loads both geometrical and tessellation data.
            </summary>
    </member>
    <member name="T:devDept.Serialization.fileType">
      <summary>
            The serialization type for the Eyeshot proprietary file format.
            </summary>
    </member>
    <member name="F:devDept.Serialization.fileType.Standard">
      <summary>
            A standard Eyeshot file containing all data.
            </summary>
      <remarks>Standard file is also generated when using <see cref="T:devDept.Eyeshot.Translators.WriteMultiFile" /> class for "leaf" sub-assemblies.</remarks>
    </member>
    <member name="F:devDept.Serialization.fileType.Assembly">
      <summary>
            An Eyeshot file containing assembly info.
            </summary>
      <remarks>Usually, this file contains BlockReference entities and paths for related blocks.
            Anyway, it can contain also other types of entities if present at the root level of the assembly itself.</remarks>
    </member>
    <member name="T:devDept.Serialization.FileSerializer">
      <summary>
            Defines the protobuf model for the Eyeshot proprietary file format.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FileSerializer.#ctor">
      <summary>
            Empty constructor used in conjunction with the <see cref="T:devDept.Eyeshot.Translators.WriteFile" /> class.
            </summary>
      <remarks>Use this constructor to define the serialization model for the <see cref="T:devDept.Eyeshot.Translators.WriteFile" /> class.</remarks>
    </member>
    <member name="M:devDept.Serialization.FileSerializer.#ctor(devDept.Serialization.contentType)">
      <summary>
            Constructor used in conjunction with the <see cref="T:devDept.Eyeshot.Translators.ReadFile" /> class.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown if the content type is <see cref="F:devDept.Serialization.contentType.None" />.</exception>
      <remarks>Use this constructor to define the serialization model for the <see cref="T:devDept.Eyeshot.Translators.ReadFile" /> class.</remarks>
    </member>
    <member name="P:devDept.Serialization.FileSerializer.Content">
      <summary>
            Gets or sets the <see cref="T:devDept.Serialization.contentType" /> for deserialization purpose. During the serialization process, it is internally initialized with the <see cref="P:devDept.Serialization.FileHeader.Content" />.
            </summary>
      <remarks>When the content type changes, the <see cref="P:devDept.Serialization.Serializer.Model" /> is reset to null. If needed, you can call <see cref="M:devDept.Serialization.Serializer.InitializeModel(System.Boolean)" /> to re-initialize it.</remarks>
    </member>
    <member name="P:devDept.Serialization.FileSerializer.FileBody">
      <summary>
            Gets the file content.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileSerializer.FileHeader">
      <summary>
            Gets the file header.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FileSerializer.FillHeaderModel">
      <inheritdoc />
    </member>
    <member name="M:devDept.Serialization.FileSerializer.FillModel">
      <inheritdoc />
      <exception cref="T:devDept.Eyeshot.EyeshotException">When the <see cref="P:devDept.Serialization.FileSerializer.Content" /> is set to <see cref="F:devDept.Serialization.contentType.None" /> or the <see cref="P:devDept.Serialization.Serializer.Model" /> is already compiled.</exception>
      <seealso cref="M:devDept.Serialization.Serializer.ModelIsCompiled" />
      <seealso cref="M:devDept.Serialization.Serializer.ResetModel" />
    </member>
    <member name="M:devDept.Serialization.FileSerializer.GetTypeForObject(System.String)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Serialization.FileSerializer.Serialize(System.IO.Stream)">
      <summary>
            Serializes the file to the stream.
            </summary>
      <param name="stream">The stream file.</param>
    </member>
    <member name="M:devDept.Serialization.FileSerializer.DeserializeBody(System.IO.Stream,ProtoBuf.SerializationContext)">
      <summary>
            Deserialize the file body.
            </summary>
      <param name="source">The stream file.</param>
      <param name="serializationContext">The serialization context.</param>
    </member>
    <member name="M:devDept.Serialization.FileSerializer.SerializeFile(devDept.Serialization.FileHeader,devDept.Serialization.FileBody,System.IO.Stream)">
      <summary>
            Serializes the file to stream.
            </summary>
      <param name="header">The file header.</param>
      <param name="body">The file body.</param>
      <param name="stream">The file stream.</param>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when the <see cref="P:devDept.Serialization.FileSerializer.FileHeader" /> or <see cref="P:devDept.Serialization.FileSerializer.FileBody" /> are null.</exception>
      <remarks>When the <see cref="P:devDept.Serialization.FileSerializer.Content" /> is <see cref="F:devDept.Serialization.contentType.None" />, it is set equal to the <see cref="P:devDept.Serialization.FileHeader.Content" />.</remarks>
    </member>
    <member name="M:devDept.Serialization.FileSerializer.SerializeFile(System.IO.Stream)">
      <summary>
            Serializes the file to stream.
            </summary>
      <param name="stream">The file stream.</param>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when the <see cref="P:devDept.Serialization.FileSerializer.FileHeader" /> or <see cref="P:devDept.Serialization.FileSerializer.FileBody" /> are null.</exception>
      <remarks>When the <see cref="P:devDept.Serialization.FileSerializer.Content" /> is <see cref="F:devDept.Serialization.contentType.None" />, it is set equal to the <see cref="P:devDept.Serialization.FileHeader.Content" />.</remarks>
    </member>
    <member name="M:devDept.Serialization.FileSerializer.Deserialize(System.IO.Stream)">
      <summary>
            Deserializes the document.
            </summary>
      <param name="stream">The file stream.</param>
      <remarks>The <see cref="P:devDept.Serialization.FileSerializer.Content" /> can be changed according to the file content. For example you cannot obtain a <see cref="F:devDept.Serialization.contentType.Tessellation" /> result if the file contains only <see cref="F:devDept.Serialization.contentType.Geometry" /> data and viceversa.</remarks>
    </member>
    <member name="M:devDept.Serialization.FileSerializer.SerializeHeaderWithLengthPrefix(devDept.Serialization.FileHeader,System.IO.Stream)">
      <summary>
            Serialize the file header data.
            </summary>
      <remarks>
            This method must be called before calling <see cref="M:devDept.Serialization.FileSerializer.SerializeWithLengthPrefix(System.IO.Stream,System.Object,System.Int32)" /></remarks>
      <param name="fileHeader">The <see cref="P:devDept.Serialization.FileSerializer.FileHeader" />.</param>
      <param name="stream">The file stream.</param>
      <seealso cref="M:devDept.Serialization.FileSerializer.SerializeWithLengthPrefix(System.IO.Stream,System.Object,System.Int32)" />
      <seealso cref="M:devDept.Serialization.FileSerializer.DeserializeWithLengthPrefix``1(System.IO.Stream,System.Int64@,System.Boolean@,System.Int32)" />
    </member>
    <member name="M:devDept.Serialization.FileSerializer.DeserializeHeaderWithLengthPrefix(System.IO.Stream)">
      <summary>
            Deserialize the file header data.
            </summary>
      <remarks> This method must be called before calling <see cref="M:devDept.Serialization.FileSerializer.DeserializeWithLengthPrefix(System.IO.Stream,System.Type,System.Int64@,System.Boolean@,System.Int32)" /> or <see cref="M:devDept.Serialization.FileSerializer.DeserializeAllItemsWithLengthPrefix``1(System.IO.Stream,System.Int32)" />. </remarks>
      <param name="stream">The file stream.</param>
      <seealso cref="M:devDept.Serialization.FileSerializer.DeserializeWithLengthPrefix(System.IO.Stream,System.Type,System.Int64@,System.Boolean@,System.Int32)" />
      <seealso cref="M:devDept.Serialization.FileSerializer.DeserializeWithLengthPrefix``1(System.IO.Stream,System.Int64@,System.Boolean@,System.Int32)" />
      <seealso cref="M:devDept.Serialization.FileSerializer.DeserializeAllItemsWithLengthPrefix``1(System.IO.Stream,System.Int32)" />
      <seealso cref="M:devDept.Serialization.FileSerializer.SerializeHeaderWithLengthPrefix(devDept.Serialization.FileHeader,System.IO.Stream)" />
    </member>
    <member name="M:devDept.Serialization.FileSerializer.SerializeWithLengthPrefix(System.IO.Stream,System.Object,System.Int32)">
      <summary>
            Writes a protocol-buffer representation of the given object to the supplied stream with a length-prefix.        
            </summary>
      <param name="stream">The file stream.</param>
      <param name="obj">The object to be serialized.</param>
      <param name="fieldNumber">The tag used as a prefix to each record.</param>
      <remarks>
            You can use this method to write an object as protocol-buffer representation.
            You had to store the FileHeader somewhere to guarantee the backward compatibility when reading.
            The opening and the closing of the stream is delegated to you.
            </remarks>
      <seealso cref="M:devDept.Serialization.FileSerializer.SerializeHeaderWithLengthPrefix(devDept.Serialization.FileHeader,System.IO.Stream)" />
      <seealso cref="M:devDept.Serialization.FileSerializer.DeserializeWithLengthPrefix(System.IO.Stream,System.Type,System.Int64@,System.Boolean@,System.Int32)" />
      <seealso cref="M:devDept.Serialization.FileSerializer.DeserializeWithLengthPrefix``1(System.IO.Stream,System.Int64@,System.Boolean@,System.Int32)" />
      <seealso cref="M:devDept.Serialization.FileSerializer.DeserializeAllItemsWithLengthPrefix``1(System.IO.Stream,System.Int32)" />
      <seealso cref="M:devDept.Serialization.FileSerializer.DeserializeHeaderWithLengthPrefix(System.IO.Stream)" />
    </member>
    <member name="M:devDept.Serialization.FileSerializer.DeserializeWithLengthPrefix``1(System.IO.Stream,System.Int64@,System.Boolean@,System.Int32)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed data.
            </summary>
      <param name="stream">The binary stream to apply to the instance (cannot be null/Nothing)</param>
      <param name="bytesRead">Returns the number of bytes consumed by this operation (includes length-prefix overheads and any skipped data).</param>
      <param name="haveObject">True when an object has been read, otherwise false.</param>
      <param name="expectedField">The tag used as a prefix to each record.</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
      <remarks>
            You can use this method to read an object from a protocol-buffer stream representation.
            You had to serialize the file header before using this method to guarantee the backward compatibility when reading.
            The opening and the closing of the stream is delegated to you.
            </remarks>
      <seealso cref="M:devDept.Serialization.FileSerializer.DeserializeHeaderWithLengthPrefix(System.IO.Stream)" />
      <seealso cref="M:devDept.Serialization.FileSerializer.SerializeHeaderWithLengthPrefix(devDept.Serialization.FileHeader,System.IO.Stream)" />
    </member>
    <member name="M:devDept.Serialization.FileSerializer.DeserializeWithLengthPrefix(System.IO.Stream,System.Type,System.Int64@,System.Boolean@,System.Int32)">
      <summary>
            Applies a protocol-buffer stream to an existing instance (or null), using length-prefixed data.
            </summary>
      <param name="stream">The binary stream to apply to the instance (cannot be null/Nothing)</param>
      <param name="objectType">The type of the object that must be deserialized.</param>
      <param name="bytesRead">Returns the number of bytes consumed by this operation (includes length-prefix overheads and any skipped data).</param>
      <param name="haveObject">True when an object has been read, otherwise false.</param>
      <param name="expectedField">The tag used as a prefix to each record.</param>
      <returns>The updated instance; this may be different to the instance argument if
            either the original instance was null, or the stream defines a known sub-type of the
            original instance.</returns>
      <remarks>
            You can use this method to read an object from a protocol-buffer stream representation.
            You had to serialize the file header before using this method to guarantee the backward compatibility when reading.
            The opening and the closing of the stream is delegated to you.
            </remarks>
      <seealso cref="M:devDept.Serialization.FileSerializer.DeserializeHeaderWithLengthPrefix(System.IO.Stream)" />
      <seealso cref="M:devDept.Serialization.FileSerializer.SerializeHeaderWithLengthPrefix(devDept.Serialization.FileHeader,System.IO.Stream)" />
    </member>
    <member name="M:devDept.Serialization.FileSerializer.DeserializeAllItemsWithLengthPrefix``1(System.IO.Stream,System.Int32)">
      <summary>
            Reads a sequence of consecutive length-prefixed items from a stream, using length-prefixed data.
            </summary>
      <typeparam name="T">The type of object to deserialize.</typeparam>
      <param name="stream">The binary stream containing the serialized records.</param>
      <param name="expectedField">The tag used as a prefix for the type of the object to deserialize.</param>
      <returns>The array of deserialized objects.</returns>
      <remarks>
            You can use this method to read an array of objects from a protocol-buffer stream representation.
            You had to serialize the file header before using this method to guarantee the backward compatibility when reading.
            The opening and the closing of the stream is delegated to you.
            </remarks>
      <seealso cref="M:devDept.Serialization.FileSerializer.DeserializeHeaderWithLengthPrefix(System.IO.Stream)" />
      <seealso cref="M:devDept.Serialization.FileSerializer.SerializeHeaderWithLengthPrefix(devDept.Serialization.FileHeader,System.IO.Stream)" />
    </member>
    <member name="T:devDept.Serialization.BlockSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Block" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.BlockSurrogate.#ctor(devDept.Eyeshot.Block)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BlockSurrogate.Name">
      <summary>
            See <see cref="P:devDept.Eyeshot.Block.Name" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BlockSurrogate.BasePoint">
      <summary>
            See <see cref="P:devDept.Eyeshot.Block.BasePoint" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BlockSurrogate.Units">
      <summary>
            See <see cref="P:devDept.Eyeshot.Block.Units" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BlockSurrogate.Entities">
      <summary>
            See <see cref="P:devDept.Eyeshot.Block.Entities" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BlockSurrogate.Description">
      <summary>
            See <see cref="P:devDept.Eyeshot.Block.Description" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BlockSurrogate.IsResolved">
      <summary>
            See <see cref="P:devDept.Eyeshot.Block.IsResolved" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BlockSurrogate.MassUnits">
      <summary>
            See <see cref="P:devDept.Eyeshot.Block.MassUnits" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BlockSurrogate.FullPath">
      <summary>
            See <see cref="P:devDept.Eyeshot.Block.FullPath" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BlockSurrogate.CustomData">
      <summary>
            The <see cref="P:devDept.Eyeshot.Block.CustomData" /> as <see cref="T:devDept.Serialization.ProtoObject" />.
            </summary>
      <remarks>ProtoBuf does not support serializing/deserializing object.</remarks>
      <seealso cref="T:devDept.Serialization.ProtoObject" />
    </member>
    <member name="M:devDept.Serialization.BlockSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Block.#ctor(System.String,devDept.Geometry.Point3D,devDept.Geometry.linearUnitsType)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.BlockSurrogate.op_Implicit(devDept.Serialization.BlockSurrogate)~devDept.Eyeshot.Block">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.BlockSurrogate.op_Implicit(devDept.Eyeshot.Block)~devDept.Serialization.BlockSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="T:devDept.Serialization.FileBodySurrogate">
      <summary>
            Defines the <see cref="T:devDept.Serialization.FileBody" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FileBodySurrogate.#ctor(devDept.Serialization.FileBody)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DeserializedContent">
      <summary>
            For deserialization purpose only.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.Entities">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.Entities" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.RootBlockEntities">
      <summary>
            The RootBlock's entities.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.Blocks">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.Blocks" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.RootBlockName">
      <summary>
            See <see cref="P:devDept.Eyeshot.BlockKeyedCollection`1.RootBlockName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.Materials">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.Materials" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.Layers">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.Layers" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.LineTypes">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.LineTypes" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.HatchPatterns">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.HatchPatterns" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.TextStyles">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.TextStyles" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.Camera">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.Camera" /></summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingSilhouettesLayerName">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingSilhouettesLayerName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingEdgesLayerName">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingEdgesLayerName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingWiresLayerName">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingWiresLayerName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingHiddenSilhouettesLayerName">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingHiddenSilhouettesLayerName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingHiddenEdgesLayerName">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingHiddenEdgesLayerName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingHiddenWiresLayerName">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingHiddenWiresLayerName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingGhostCirclesLayerName">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingGhostCirclesLayerName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingCenterlinesLayerName">
      <summary>
            See <seealso cref="P:devDept.Serialization.FileBody.DrawingCenterlinesLayerName" /></summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingHiddenSegmentsLineTypeName">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingHiddenSegmentsLineTypeName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingCenterlinesLineTypeName">
      <summary>
            See <seealso cref="P:devDept.Serialization.FileBody.DrawingCenterlinesLineTypeName" /></summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingSheets">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingSheets" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingBlocks">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingBlocks" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingRootBlockName">
      <summary>
            See <see cref="F:devDept.Serialization.FileBodySurrogate.DrawingRootBlockName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingRootBlockEntities">
      <summary>
            The RootBlock's entities of the Drawing.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingLayers">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingLayers" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingLineTypes">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingLineTypes" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingHatchPatterns">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingHatchPatterns" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.DrawingTextStyles">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.DrawingTextStyles" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.Paths">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.Paths" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileBodySurrogate.Types">
      <summary>
            See <see cref="P:devDept.Serialization.FileBody.Types" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FileBodySurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="!:FileBody.FileBody(IList&lt;Entity&gt;)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.FileBodySurrogate.CopyDataToObject(devDept.Serialization.FileBody)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Serialization.FileBodySurrogate.CopyDataFromObject(devDept.Serialization.FileBody)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Serialization.FileBodySurrogate.op_Implicit(devDept.Serialization.FileBodySurrogate)~devDept.Serialization.FileBody">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FileBodySurrogate.op_Implicit(devDept.Serialization.FileBody)~devDept.Serialization.FileBodySurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileHeaderSurrogate.SerializationMode">
      <summary>
            See <see cref="P:devDept.Serialization.FileHeader.SerializationMode" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileHeaderSurrogate.FileMode">
      <summary>
            See <see cref="P:devDept.Serialization.FileHeader.FileMode" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileHeaderSurrogate.Units">
      <summary>
            See <see cref="P:devDept.Serialization.FileHeader.Units" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileHeaderSurrogate.Author">
      <summary>
            See <see cref="P:devDept.Serialization.FileHeader.Author" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileHeaderSurrogate.Organization">
      <summary>
            See <see cref="P:devDept.Serialization.FileHeader.Organization" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileHeaderSurrogate.OriginatingSystem">
      <summary>
            See <see cref="P:devDept.Serialization.FileHeader.OriginatingSystem" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileHeaderSurrogate.ContentType">
      <summary>
            See <see cref="P:devDept.Serialization.FileHeader.Content" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileHeaderSurrogate.EyeshotBuild">
      <summary>
            See <see cref="P:devDept.Serialization.FileHeader.EyeshotBuild" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileHeaderSurrogate.Timestamp">
      <summary>
            See <see cref="P:devDept.Serialization.FileHeader.Timestamp" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileHeaderSurrogate.Thumbnail">
      <summary>
            See <see cref="P:devDept.Serialization.FileHeader.Thumbnail" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FileHeaderSurrogate.FileName">
      <summary>
            See <see cref="P:devDept.Serialization.FileHeader.FileName" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FileHeaderSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="T:devDept.Serialization.FileHeader" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.FileHeaderSurrogate.op_Implicit(devDept.Serialization.FileHeaderSurrogate)~devDept.Serialization.FileHeader">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FileHeaderSurrogate.op_Implicit(devDept.Serialization.FileHeader)~devDept.Serialization.FileHeaderSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="T:devDept.Serialization.FileBody">
      <summary>
            Defines the file body for the Eyeshot proprietary file format.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FileBody.#ctor(devDept.Eyeshot.Translators.WriteFileParams)">
      <summary>
            Standard constructor.
            </summary>
      <param name="writeParams">The params data.</param>
    </member>
    <member name="P:devDept.Serialization.FileBody.Entities">
      <summary>
            Gets or sets the entities collection.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.Blocks">
      <summary>
            Gets or sets the blocks collection.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.Layers">
      <summary>
            Gets or sets the layers collection.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.Materials">
      <summary>
            Gets or sets the materials collection.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.LineTypes">
      <summary>
            Gets or sets the line types collection.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.HatchPatterns">
      <summary>
            Gets or sets the hatch patterns collection.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.TextStyles">
      <summary>
            Gets or sets the text styles collection.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.Camera">
      <summary>
            Gets or sets the Camera to store.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingSilhouettesLayerName">
      <summary>
            Gets or sets the drawing silhouettes layer name.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingEdgesLayerName">
      <summary>
            Gets or sets the drawing edges layer name.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingWiresLayerName">
      <summary>
            Gets or sets the drawing wires layer name.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingHiddenSilhouettesLayerName">
      <summary>
            Gets or sets the drawing hidden silhouettes layer name.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingHiddenEdgesLayerName">
      <summary>
            Gets or sets the drawing hidden edges layer name.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingHiddenWiresLayerName">
      <summary>
            Gets or sets the drawing hidden wires layer name.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingGhostCirclesLayerName">
      <summary>
            Gets or sets the drawing ghost circles layer name.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingCenterlinesLayerName">
      <summary>
            Gets or sets the drawing centerlines layer name.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingHiddenSegmentsLineTypeName">
      <summary>
            Gets or sets the drawing hidden segments line type name.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingCenterlinesLineTypeName">
      <summary>
            Gets or sets the drawing centerlines line type name.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingSheets">
      <summary>
            Gets or sets the drawing sheet collection.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingBlocks">
      <summary>
            Gets or sets the drawing block collection.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingLayers">
      <summary>
            Gets or sets the drawing layers collection.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingLineTypes">
      <summary>
            Gets or sets the drawing line types collection.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingHatchPatterns">
      <summary>
            Gets or sets the drawing hatch patterns collection.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.DrawingTextStyles">
      <summary>
            Gets or sets the drawing text styles collection.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileBody.Paths">
      <summary>
            Gets the array containing the paths of all the files composing the whole assembly.
            </summary>
      <remarks>
            The first element is the full path of the assembly's root block.
            This is helpful to rebuild relative path of sub-assembly files if the folder containing the assembly is moved or renamed.
            </remarks>
    </member>
    <member name="P:devDept.Serialization.FileBody.Types">
      <summary>
            Gets the array containing info about <see cref="T:devDept.Serialization.fileType" /> for all the files composing the whole assembly.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FileBody.ConvertToSurrogate">
      <summary>
            Converts the <see cref="T:devDept.Serialization.FileBody" /> to its surrogate, for serialization purpose.
            </summary>
      <returns>The surrogate.</returns>
    </member>
    <member name="T:devDept.Serialization.FileHeader">
      <summary>
            Defines the file header for the Eyeshot proprietary file format.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FileHeader.#ctor(devDept.Serialization.contentType,devDept.Serialization.serializationType,devDept.Serialization.fileType,devDept.Geometry.linearUnitsType)">
      <summary>
            Standard constructor.
            </summary>
      <param name="contentType">
      </param>
      <param name="serializationType">The serialization type.</param>
      <param name="fileType">The serialization file type.</param>
      <param name="units">
      </param>
    </member>
    <member name="P:devDept.Serialization.FileHeader.Units">
      <summary>
            Gets the units.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileHeader.Author">
      <summary>
            Gets or sets the author.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileHeader.Organization">
      <summary>
            Gets or sets the organization.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileHeader.OriginatingSystem">
      <summary>
            Gets or sets the originating system.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileHeader.Version">
      <summary>
            Gets the file version.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileHeader.SerializationMode">
      <summary>
            Gets the serialization type.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileHeader.FileMode">
      <summary>
            Gets the file type.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileHeader.Content">
      <summary>
            Gets the content type.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileHeader.EyeshotBuild">
      <summary>
            Gets the Eyeshot build used to generate the file.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileHeader.Timestamp">
      <summary>
            Gets the timestamp.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileHeader.Tag">
      <summary>
            Gets or set a custom tag.
            </summary>
      <remarks>You can use this to persist your custom entities with a custom version.</remarks>
    </member>
    <member name="P:devDept.Serialization.FileHeader.Thumbnail">
      <summary>
            Gets the file thumbnail.
            </summary>
    </member>
    <member name="P:devDept.Serialization.FileHeader.FileName">
      <summary>
            Gets the original file name.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FileHeader.ConvertToSurrogate">
      <summary>
            Converts the <see cref="T:devDept.Serialization.FileHeader" /> to its surrogate, for serialization purpose.
            </summary>
      <returns>The surrogate.</returns>
    </member>
    <member name="M:devDept.Serialization.FileHeader.Dump">
      <summary>
            Returns a description of this entity.
            </summary>
      <returns>A multiline string.</returns>
    </member>
    <member name="T:devDept.Serialization.AngularDimSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.AngularDim" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.AngularDimSurrogate.#ctor(devDept.Eyeshot.Entities.AngularDim)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AngularDimSurrogate.ExtLine1">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AngularDim.ExtLine1" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AngularDimSurrogate.ExtLine2">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AngularDim.ExtLine2" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AngularDimSurrogate.ExtLineExt">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AngularDim.ExtLineExt" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AngularDimSurrogate.ExtLineOffset">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AngularDim.ExtLineOffset" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AngularDimSurrogate.LeftArrowhead">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AngularDim.LeftArrowhead" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AngularDimSurrogate.RightArrowhead">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AngularDim.RightArrowhead" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AngularDimSurrogate.AngleFormat">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AngularDim.AngleFormat" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AngularDimSurrogate.ShowExtLine1">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AngularDim.ShowExtLine1" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.AngularDimSurrogate.ShowExtLine2">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AngularDim.ShowExtLine2" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.AngularDimSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.AngularDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.ArcSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Arc" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.ArcSurrogate.#ctor(devDept.Eyeshot.Entities.Arc)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ArcSurrogate.Domain">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="M:devDept.Serialization.ArcSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.Arc.#ctor(devDept.Serialization.ArcSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.Arc" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> or a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.BarSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Bar" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.BarSurrogate.#ctor(devDept.Eyeshot.Entities.Bar)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BarSurrogate.StartPoint">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Bar.StartPoint" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BarSurrogate.EndPoint">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Bar.EndPoint" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BarSurrogate.Radius">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Bar.Radius" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BarSurrogate.Slices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Bar.Slices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BarSurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BarSurrogate.Triangles">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Bar.Triangles" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.BarSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Bar.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double,System.Int32)" /> constructor to create the object.               
             </remarks>
    </member>
    <member name="T:devDept.Serialization.CircleSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Circle" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.CircleSurrogate.#ctor(devDept.Eyeshot.Entities.Circle)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.CircleSurrogate.Plane">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.CircleSurrogate.Radius">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.CircleSurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.CircleSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Circle.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.CircleSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.Circle.#ctor(devDept.Serialization.CircleSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.Circle" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> or a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.CompositeCurveSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.CompositeCurve" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.CompositeCurveSurrogate.#ctor(devDept.Eyeshot.Entities.CompositeCurve)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.CompositeCurveSurrogate.CurveList">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.CompositeCurveSurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.CompositeCurveSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.CompositeCurve.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.CompositeCurveSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.CompositeCurve.#ctor(devDept.Serialization.CompositeCurveSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.CompositeCurve" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> or a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.ConicalBarSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.ConicalBar" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.ConicalBarSurrogate.#ctor(devDept.Eyeshot.Entities.ConicalBar)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ConicalBarSurrogate.TopRadius">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.ConicalBar.TopRadius" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.ConicalBarSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.ConicalBar.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double,System.Double,System.Int32)" /> constructor to create the object.               
             </remarks>
    </member>
    <member name="T:devDept.Serialization.DimensionSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Dimension" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.DimensionSurrogate.#ctor(devDept.Eyeshot.Entities.Dimension)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.ArrowheadSize">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.ArrowheadSize" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.ArrowsLocation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.ArrowsLocation" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.DimLinePosition">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.DimLinePosition" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.Precision">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.Precision" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.SuppressLeadingZeros">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.SuppressLeadingZeros" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.SuppressTrailingZeros">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.SuppressTrailingZeros" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.TextGap">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.TextGap" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.TextLocation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.TextLocation" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.TextPrefix">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.TextPrefix" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.TextOverride">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.TextOverride" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.TextSuffix">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.TextSuffix" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.LinearScale">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.LinearScale" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.ScaleOverall">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.ScaleOverall" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.LinearDimensionUnits">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.LinearDimensionUnits" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.DimStyle">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.DimStyle" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.Distance">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.Distance" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.ToleranceMode">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.ToleranceMode" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.ToleranceAlignment">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.ToleranceAlignment" /></summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.UpperValue">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.UpperValue" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.LowerValue">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.LowerValue" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.ScalingForHeight">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.ScalingForHeight" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.ToleranceSuppressLeadingZeros">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.ToleranceSuppressLeadingZeros" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.ToleranceSuppressTralingZeros">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.ToleranceSuppressTralingZeros" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.TolerancePrecision">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.TolerancePrecision" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.TextColorMethod">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.TextColorMethod" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DimensionSurrogate.TextColor">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Dimension.TextColor" />.
            </summary>
    </member>
    <member name="T:devDept.Serialization.EllipseSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Ellipse" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.EllipseSurrogate.#ctor(devDept.Eyeshot.Entities.Ellipse)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EllipseSurrogate.Plane">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.EllipseSurrogate.RadiusX">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.EllipseSurrogate.RadiusY">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.EllipseSurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EllipseSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Ellipse.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.EllipseSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.Ellipse.#ctor(devDept.Serialization.EllipseSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.Ellipse" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> or a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.EllipticalArcSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.EllipticalArc" /> surrogate.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EllipticalArcSurrogate.Domain">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="M:devDept.Serialization.EllipticalArcSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.EllipticalArc.#ctor(devDept.Serialization.EllipticalArcSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.EllipticalArc" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> or a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.EntitySurrogate">
      <summary>
            Defines the base class for entity surrogates.
            </summary>
      <remarks>This class is not declared as abstract to handle not supported entity.</remarks>
    </member>
    <member name="M:devDept.Serialization.EntitySurrogate.#ctor(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.LayerName">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.LayerName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.ColorMethod">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.ColorMethod" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.Color">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Color" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.MaterialName">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.MaterialName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.LineWeightMethod">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeightMethod" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.LineWeight">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.LineWeight" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.LineTypeMethod">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeMethod" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.LineTypeName">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.LineTypeScale">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.LineTypeScale" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.EntityData">
      <summary>
            The <see cref="P:devDept.Eyeshot.Entities.Entity.EntityData" /> as <see cref="T:devDept.Serialization.ProtoObject" />.
            </summary>
      <remarks>ProtoBuf does not support serializing/deserializing object.</remarks>
      <seealso cref="T:devDept.Serialization.ProtoObject" />
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.Visible">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Visible" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.Selectable">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Selectable" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.Type">
      <summary>
            Gets the entity type for logging purpose (Not supported entity type, i.e. different Eyeshot editions).        
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.BoxMin">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.BoxMin" /></summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.BoxMax">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.BoxMax" /></summary>
    </member>
    <member name="P:devDept.Serialization.EntitySurrogate.Content">
      <summary>
            Gets the <see cref="T:devDept.Serialization.contentType" /> for which this surrogate is used for.
            </summary>
      <remarks>
        <para>It's set before reading and before writing the surrogate, so it can be used only in the below methods:</para>
        <para>- <see cref="M:devDept.Serialization.EntitySurrogate.ConvertToObject" />, <see cref="M:devDept.Serialization.EntitySurrogate.CopyDataToObject(devDept.Eyeshot.Entities.Entity)" /> when reading.</para>
        <para>- <see cref="M:devDept.Serialization.EntitySurrogate.BeforeSerialize(ProtoBuf.SerializationContext)" /> when writing.</para>
        <para>- <see cref="M:devDept.Serialization.EntitySurrogate.CheckSurrogateData(System.String)" /> both when reading or writing.</para>
      </remarks>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.XData">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.AutodeskMiscProperties.XData" />.
            </summary>
      <remarks>ProtoBuf does not support serializing/deserializing object.</remarks>
      <seealso cref="T:devDept.Serialization.ProtoObject" />
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.AutodeskProperties">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.AutodeskProperties" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.EntitySurrogate.PrintOrder">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.PrintOrder" /></summary>
    </member>
    <member name="M:devDept.Serialization.EntitySurrogate.ConvertToObject">
      <summary>
            Creates the entity related to the surrogate.
            </summary>
      <remarks>When this method is called, the <see cref="P:devDept.Serialization.EntitySurrogate.Content" /> field is already initialized.</remarks>
      <returns>The entity created.</returns>
    </member>
    <member name="M:devDept.Serialization.EntitySurrogate.CopyDataToObject(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Copies common data from surrogate to object when reading data.
            </summary>
      <remarks>
        <para>This method is called by <see cref="M:devDept.Serialization.EntitySurrogate.ConvertToObject" /> method after the creation of the object instance.</para>
        <para>When this method is called, the <see cref="P:devDept.Serialization.EntitySurrogate.Content" /> field is already initialized.</para>
      </remarks>
      <seealso cref="M:devDept.Serialization.EntitySurrogate.ConvertToObject" />
    </member>
    <member name="M:devDept.Serialization.EntitySurrogate.CopyDataFromObject(devDept.Eyeshot.Entities.Entity)">
      <summary>
            Copies all data from the object to its surrogate when writing data.
            </summary>
      <remarks>
        <para>Use this method to fill ALL the properties of this surrogate. It is called by the empty constructor to initialize the surrogates properties.</para>
        <para>Beware, when this method is called, both <see cref="P:devDept.Serialization.Surrogate`1.Version" /> and <see cref="P:devDept.Serialization.EntitySurrogate.Content" /> fields are not initialized yet.</para>
      </remarks>
      <seealso cref="M:devDept.Serialization.EntitySurrogate.BeforeSerialize(ProtoBuf.SerializationContext)" />
    </member>
    <member name="M:devDept.Serialization.EntitySurrogate.CheckSurrogateData(System.String)">
      <summary>
            Integrity check according to the <see cref="T:devDept.Serialization.contentType" />.
            </summary>
      <remarks>
        <para>Use this method to add check/warning messages to the <see cref="P:devDept.Serialization.Surrogate`1.Log" />.</para>
        <para>During the serialization process, it is called internally before serializing the surrogate.</para>
        <para>During the deserialization process, you can use it for your custom surrogate checks in <see cref="M:devDept.Serialization.EntitySurrogate.ConvertToObject" /> or in <see cref="M:devDept.Serialization.EntitySurrogate.CopyDataToObject(devDept.Eyeshot.Entities.Entity)" /> methods in conjunction with the <see cref="P:devDept.Serialization.EntitySurrogate.Content" />.</para>
      </remarks>
      <seealso cref="M:devDept.Serialization.Surrogate`1.WriteLog(System.String)" />.
            <seealso cref="M:devDept.Serialization.Surrogate`1.ConvertToObject" />.
            <seealso cref="M:devDept.Serialization.Surrogate`1.CopyDataToObject(`0)" />.
            <seealso cref="M:devDept.Serialization.Surrogate`1.CopyDataFromObject(`0)" />.  
            <seealso cref="M:devDept.Serialization.EntitySurrogate.BeforeSerialize(ProtoBuf.SerializationContext)" />.
            <seealso cref="T:devDept.Eyeshot.Translators.WriteFile" />.
            <seealso cref="T:devDept.Eyeshot.Translators.ReadFile" />.
        </member>
    <member name="M:devDept.Serialization.EntitySurrogate.CreateGhostEntity(System.String)">
      <summary>
            Helper method to create a new <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.
            </summary>
      <param name="description">Optional ghost entity description.</param>
      <returns>The created entity.</returns>
      <remarks>The <see cref="M:devDept.Serialization.EntitySurrogate.CopyDataToObject(devDept.Eyeshot.Entities.Entity)" /> is already called here.</remarks>
      <seealso cref="M:devDept.Serialization.EntitySurrogate.ConvertToObject" />
      <seealso cref="M:devDept.Serialization.EntitySurrogate.CopyDataToObject(devDept.Eyeshot.Entities.Entity)" />
      <seealso cref="T:devDept.Eyeshot.Entities.Ghost" />
    </member>
    <member name="M:devDept.Serialization.EntitySurrogate.CreateLinearPathOrGhostEntity(devDept.Geometry.Point3D[],System.Type)">
      <summary>
            Helper method to create a new <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> or a new <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.
            </summary>
      <param name="vertices">Vertices to generate the linear path.</param>
      <param name="orgEntityType">The original entity type stored in the Eyeshot file format. It's used only in case of Ghost entity creation.</param>
      <returns>Returns a new <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> when the <see cref="M:devDept.Serialization.EntitySurrogate.CheckSurrogateData(System.String)" /> method return true, otherwise it returns a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</returns>
      <remarks>Method used by some surrogates in conjunction with the <see cref="M:devDept.Serialization.EntitySurrogate.ConvertToObject" /> method when the <see cref="T:devDept.Serialization.contentType" /> is <see cref="F:devDept.Serialization.contentType.Tessellation" /></remarks>
      <seealso cref="M:devDept.Serialization.EntitySurrogate.ConvertToObject" />
      <seealso cref="M:devDept.Serialization.EntitySurrogate.CheckSurrogateData(System.String)" />
      <seealso cref="T:devDept.Eyeshot.Entities.LinearPath" />
      <seealso cref="T:devDept.Eyeshot.Entities.Ghost" />
    </member>
    <member name="M:devDept.Serialization.EntitySurrogate.CreateLinearPathOrGhostEntity(devDept.Geometry.Entities.GLinearPath,System.Type)">
      <summary>
            Helper method to create a new <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> or a new <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.
            </summary>
      <param name="gLinearPath">Primitive to generate the linear path.</param>
      <param name="orgEntityType">The original entity type stored in the Eyeshot file format. It's used only in case of Ghost entity creation.</param>
      <returns>Returns a new <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> when the <see cref="M:devDept.Serialization.EntitySurrogate.CheckSurrogateData(System.String)" /> method return true, otherwise it returns a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</returns>
      <remarks>Method used by some surrogates in conjunction with the <see cref="M:devDept.Serialization.EntitySurrogate.ConvertToObject" /> method when the <see cref="T:devDept.Serialization.contentType" /> is <see cref="F:devDept.Serialization.contentType.Tessellation" /></remarks>
      <seealso cref="M:devDept.Serialization.EntitySurrogate.ConvertToObject" />
      <seealso cref="M:devDept.Serialization.EntitySurrogate.CheckSurrogateData(System.String)" />
      <seealso cref="T:devDept.Eyeshot.Entities.LinearPath" />
      <seealso cref="T:devDept.Eyeshot.Entities.Ghost" />
    </member>
    <member name="M:devDept.Serialization.EntitySurrogate.CreateMeshOrGhostEntity(devDept.Geometry.Point3D[],devDept.Geometry.IndexTriangle[],System.Type)">
      <summary>
            Helper method to create a new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> or a new <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.
            </summary>
      <param name="vertices">Vertices to generate the mesh.</param>
      <param name="triangles">Triangle to generate the mesh.</param>
      <param name="orgEntityType">The original entity type stored in the Eyeshot file format. It's used only in case of Ghost entity creation.</param>
      <returns>Returns a new <see cref="T:devDept.Eyeshot.Entities.Mesh" /> when the <see cref="M:devDept.Serialization.EntitySurrogate.CheckSurrogateData(System.String)" /> method return true, otherwise it returns a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</returns>
      <remarks>Method used by some surrogates in conjunction with the <see cref="M:devDept.Serialization.EntitySurrogate.ConvertToObject" /> method when the <see cref="T:devDept.Serialization.contentType" /> is <see cref="F:devDept.Serialization.contentType.Tessellation" /></remarks>
      <seealso cref="M:devDept.Serialization.EntitySurrogate.ConvertToObject" />
      <seealso cref="M:devDept.Serialization.EntitySurrogate.CheckSurrogateData(System.String)" />
      <seealso cref="T:devDept.Eyeshot.Entities.Mesh" />
      <seealso cref="T:devDept.Eyeshot.Entities.Ghost" />
    </member>
    <member name="M:devDept.Serialization.EntitySurrogate.CreatePointCloudOrGhostEntity(devDept.Geometry.Point3D[],System.Type)">
      <summary>
            Helper method to create a new <see cref="T:devDept.Eyeshot.Entities.PointCloud" /> or a new <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.
            </summary>
      <param name="vertices">Vertices to generate the point cloud.</param>
      <param name="orgEntityType">The original entity type stored in the Eyeshot file format. It's used only in case of Ghost entity creation.</param>
      <returns>Returns a new <see cref="T:devDept.Eyeshot.Entities.PointCloud" /> when the <see cref="M:devDept.Serialization.EntitySurrogate.CheckSurrogateData(System.String)" /> method return true, otherwise it returns a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</returns>
      <remarks>Method used by some surrogates in conjunction with the <see cref="M:devDept.Serialization.EntitySurrogate.ConvertToObject" /> method when the <see cref="T:devDept.Serialization.contentType" /> is <see cref="F:devDept.Serialization.contentType.Tessellation" /></remarks>
      <seealso cref="M:devDept.Serialization.EntitySurrogate.ConvertToObject" />
      <seealso cref="M:devDept.Serialization.EntitySurrogate.CheckSurrogateData(System.String)" />
      <seealso cref="T:devDept.Eyeshot.Entities.PointCloud" />
      <seealso cref="T:devDept.Eyeshot.Entities.Ghost" />
    </member>
    <member name="M:devDept.Serialization.EntitySurrogate.op_Implicit(devDept.Serialization.EntitySurrogate)~devDept.Eyeshot.Entities.Entity">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.EntitySurrogate.op_Implicit(devDept.Eyeshot.Entities.Entity)~devDept.Serialization.EntitySurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when the <see cref="M:devDept.Eyeshot.Entities.Entity.ConvertToSurrogate" /> method returns null value.</exception>
    </member>
    <member name="M:devDept.Serialization.EntitySurrogate.BeforeDeserialize(ProtoBuf.SerializationContext)">
      <summary>
            Called before the object deserialization.
            </summary>
      <param name="serializationContext">The serialization context</param>
      <remarks>
        <para>The override of this method must always call the base at the beginning.</para>
        <para>This method initializes the <see cref="P:devDept.Serialization.EntitySurrogate.Content" /> field when reading data.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">Thrown when the serialization context is not a valid <see cref="T:devDept.Serialization.FileSerializer" /> object.</exception>
    </member>
    <member name="M:devDept.Serialization.EntitySurrogate.BeforeSerialize(ProtoBuf.SerializationContext)">
      <summary>
            Called before the object serialization.
            </summary>
      <param name="serializationContext">The serialization context</param>
      <remarks>
        <para>The override of this method must always call the base at the beginning.</para>
        <para>This method initializes the <see cref="P:devDept.Serialization.EntitySurrogate.Content" /> field when writing data.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">Thrown when the serialization context is not a valid <see cref="T:devDept.Serialization.FileSerializer" /> object.</exception>
    </member>
    <member name="T:devDept.Serialization.FastPointCloudSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.FastPointCloud" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FastPointCloudSurrogate.#ctor(devDept.Eyeshot.Entities.FastPointCloud)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FastPointCloudSurrogate.PointArray">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.FastPointCloud.PointArray" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FastPointCloudSurrogate.ColorArray">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.FastPointCloud.ColorArray" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FastPointCloudSurrogate.Nature">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.FastPointCloud.Nature" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FastPointCloudSurrogate.DrawingStyle">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.FastPointCloud.DrawingStyle" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.FastPointCloudSurrogate.ZoomFitSpeed">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.FastPointCloud.ZoomFitSpeed" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.FastPointCloudSurrogate.ConvertToObject">
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.FastPointCloud.#ctor(System.Single[],System.Byte[])" /> constructor to create the object.                
             </remarks>
    </member>
    <member name="T:devDept.Serialization.JointSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Joint" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.JointSurrogate.#ctor(devDept.Eyeshot.Entities.Joint)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.JointSurrogate.Position">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Joint.Position" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.JointSurrogate.Radius">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Joint.Radius" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.JointSurrogate.SubdivisionLevel">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Joint.SubdivisionLevel" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.JointSurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.JointSurrogate.Triangles">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Joint.Triangles" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.JointSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Joint.#ctor(devDept.Geometry.Point3D,System.Double,System.Byte)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.LeaderSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Leader" /> surrogate.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LeaderSurrogate.Plane">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.PlanarEntity.Plane" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LeaderSurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LeaderSurrogate.Arrowhead">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Leader.Arrowhead" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LeaderSurrogate.ArrowheadSize">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Leader.ArrowheadSize" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LeaderSurrogate.Scale">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Leader.Scale" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LeaderSurrogate.ShowArrowHead">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Leader.ShowArrowHead" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LeaderSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Leader.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D[])" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.LinearDimSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.LinearDim" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LinearDimSurrogate.#ctor(devDept.Eyeshot.Entities.LinearDim)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LinearDimSurrogate.ExtLine1">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.LinearDim.ExtLine1" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LinearDimSurrogate.ExtLine2">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.LinearDim.ExtLine2" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LinearDimSurrogate.ExtLineExt">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.LinearDim.ExtLineExt" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LinearDimSurrogate.ExtLineOffset">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.LinearDim.ExtLineOffset" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LinearDimSurrogate.LeftArrowhead">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.LinearDim.LeftArrowhead" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LinearDimSurrogate.RightArrowhead">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.LinearDim.RightArrowhead" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LinearDimSurrogate.ShowExtLine1">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.LinearDim.ShowExtLine1" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LinearDimSurrogate.ShowExtLine2">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.LinearDim.ShowExtLine2" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LinearDimSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.LinearDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Double)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.LinearPathSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LinearPathSurrogate.#ctor(devDept.Eyeshot.Entities.LinearPath)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <!-- Badly formed XML comment ignored for member "F:devDept.Serialization.LinearPathSurrogate.Vertices" -->
    <member name="F:devDept.Serialization.LinearPathSurrogate.GlobalWidth">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.LinearPath.GlobalWidth" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LinearPathSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.LinearPath.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LinearPathSurrogate.ConvertToObject">
      <inheritdoc />
      <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.LinearPath.#ctor(devDept.Serialization.LinearPathSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.LinearPath" /> object.</para>
      <para>Whether the tessellation data is missing a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity is created instead.</para>
      <seealso cref="!:CreateLinearPathOrGhostEntity" />
    </member>
    <!-- Badly formed XML comment ignored for member "M:devDept.Serialization.LinearPathSurrogate.CopyDataFromObject(devDept.Eyeshot.Entities.Entity)" -->
    <member name="T:devDept.Serialization.LineSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Line" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LineSurrogate.#ctor(devDept.Eyeshot.Entities.Line)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LineSurrogate.Vertices">
      <summary>
             See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" /></summary>
      <remarks>
             This array is stored only when a Regen() was called with MaxLength parameter (vertices' count &gt; 2).
             </remarks>
    </member>
    <member name="F:devDept.Serialization.LineSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Line.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LineSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Serialization.LineSurrogate)" /> constructor to create the object.
             </remarks>
    </member>
    <member name="M:devDept.Serialization.LineSurrogate.CopyDataFromObject(devDept.Eyeshot.Entities.Entity)">
      <inheritdoc />
      <remarks>
             Vertices are stored only when a Regen() was called with MaxLength parameter (vertices' count &gt; 2).
             </remarks>
    </member>
    <member name="T:devDept.Serialization.MeshSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Mesh" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.MeshSurrogate.#ctor(devDept.Eyeshot.Entities.Mesh)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.MeshSurrogate.MeshNature">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.MeshSurrogate.EdgeStyle">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.MeshSurrogate.Vertices">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.MeshSurrogate.Triangles">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.MeshSurrogate.TextureCoords">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.MeshSurrogate.Normals">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.MeshSurrogate.Edges">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.MeshSurrogate.SmoothingAngle">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.MeshSurrogate.LightWeight">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.MeshSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Mesh.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.MeshSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.Mesh.#ctor(devDept.Serialization.MeshSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.Mesh" /> object.</para>
        <para>Whether the tessellation data is missing a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity is created instead.</para>
      </remarks>
      <seealso cref="M:devDept.Serialization.MeshSurrogate.CheckSurrogateData(System.String)" />
    </member>
    <member name="T:devDept.Serialization.MultilineTextSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.MultilineText" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.MultilineTextSurrogate.#ctor(devDept.Eyeshot.Entities.MultilineText)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.MultilineTextSurrogate.RectWidth">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.MultilineText.RectWidth" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.MultilineTextSurrogate.RectHeight">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.MultilineText.RectHeight" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.MultilineTextSurrogate.LineSpaceDistance">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.MultilineText.LineSpaceDistance" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.MultilineTextSurrogate.WidthFactors">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.MultilineText.WidthFactors" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.MultilineTextSurrogate.Wrap">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.MultilineText.Wrap" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.MultilineTextSurrogate.Contents">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.MultilineText.Contents" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.MultilineTextSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.MultilineText.#ctor(devDept.Geometry.Plane,System.String,System.Double,System.Double,System.Double)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.PictureSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Picture" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.PictureSurrogate.#ctor(devDept.Eyeshot.Entities.Picture)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.Plane">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.PlanarEntity.Plane" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.Width">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Picture.Width" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.Height">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Picture.Height" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.Image">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Picture.Image" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.Lighted">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Picture.Lighted" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.DrawEdge">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Picture.DrawEdge" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.Accelerated">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Picture.Accelerated" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.MagnifyingFunction">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Picture.MagnifyingFunction" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.MinifyingFunction">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Picture.MinifyingFunction" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.Tiling">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Picture.Tiling" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.AnisotropicFiltering">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Picture.AnisotropicFiltering" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.ShowClipped">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Picture.ShowClipped" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.ClippingBoundary">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Picture.ClippingBoundary" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PictureSurrogate.FullPath">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Picture.FullPath" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.PictureSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="!:Picture.Picture(Geometry.Plane, double, double, Image)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.PlanarEntitySurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.PlanarEntity" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.PlanarEntitySurrogate.#ctor(devDept.Eyeshot.Entities.PlanarEntity)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PlanarEntitySurrogate.Plane">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.PlanarEntity.Plane" />.
            </summary>
      <remarks>Used for backward compatibility when reading a PlanarEntity and for storing TableSurrogate's plane.</remarks>
    </member>
    <member name="F:devDept.Serialization.PlanarEntitySurrogate.SymbolSize">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.PlanarEntity.SymbolSize" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PlanarEntitySurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PlanarEntitySurrogate.Primitive">
      <summary>
            See <see cref="!:PlanarEntity.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.PlanarEntitySurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.PlanarEntity.#ctor(devDept.Serialization.PlanarEntitySurrogate)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.PointCloudSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.PointCloud" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.PointCloudSurrogate.#ctor(devDept.Eyeshot.Entities.PointCloud)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PointCloudSurrogate.Vertices">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.PointCloudSurrogate.Nature">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.PointCloudSurrogate.DrawingStyle">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.PointCloud.DrawingStyle" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PointCloudSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.PointCloud.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.PointCloudSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.PointCloud.#ctor(devDept.Serialization.PointCloudSurrogate)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.PointSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Point" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.PointSurrogate.#ctor(devDept.Eyeshot.Entities.Point)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PointSurrogate.Vertices">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.PointSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Point.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.PointSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Point.#ctor(devDept.Serialization.PointSurrogate)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.QuadSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Quad" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.QuadSurrogate.#ctor(devDept.Eyeshot.Entities.Quad)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.QuadSurrogate.Vertices">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.QuadSurrogate.Normal">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.QuadSurrogate.VisibleEdgeFlag">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Quad.VisibleEdgeFlag" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.QuadSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Quad.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.QuadSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Quad.#ctor(devDept.Serialization.QuadSurrogate)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.RadialDimSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.RadialDim" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.RadialDimSurrogate.#ctor(devDept.Eyeshot.Entities.RadialDim)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.RadialDimSurrogate.Radius">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.RadialDim.Radius" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.RadialDimSurrogate.Arrowhead">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.RadialDim.Arrowhead" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.RadialDimSurrogate.CenterMarkSize">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.RadialDim.CenterMarkSize" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.RadialDimSurrogate.TrimLeader">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.RadialDim.TrimLeader" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.RadialDimSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.RadialDim.#ctor(devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D,System.Double)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.RegionSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Region" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.RegionSurrogate.#ctor(devDept.Eyeshot.Entities.Region)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.RegionSurrogate.Plane">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.RegionSurrogate.ContourList_V9">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.RegionSurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.RegionSurrogate.Triangles">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Region.Triangles" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.RegionSurrogate.Edges">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Region.Edges" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.RegionSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Region.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.RegionSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.Region.#ctor(devDept.Serialization.RegionSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.Region" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.Mesh" /> or a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.TableSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Table" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.TableSurrogate.#ctor(devDept.Eyeshot.Entities.Table)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TableSurrogate.RowsNum">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Table.RowsNum" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TableSurrogate.ColumnsNum">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Table.ColumnsNum" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TableSurrogate.RowsHeights">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Table.RowsHeights" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TableSurrogate.ColumnsWidths">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Table.ColumnsWidths" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TableSurrogate.Direction">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Table.Direction" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TableSurrogate.HorzCellMargin">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Table.HorzCellMargin" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TableSurrogate.VertCellMargin">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Table.VertCellMargin" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.TableSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Table.#ctor(devDept.Geometry.Plane,System.Int32,System.Int32,System.Double[],System.Double[],System.Double,devDept.Eyeshot.Entities.Table.flowDirection)" /> constructor to create the object.
             </remarks>
    </member>
    <member name="T:devDept.Serialization.TextSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Text" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.TextSurrogate.#ctor(devDept.Eyeshot.Entities.Text)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextSurrogate.Plane">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.PlanarEntity.Plane" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextSurrogate.TextString">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Text.TextString" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextSurrogate.Height">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Text.Height" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextSurrogate.Alignment">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Text.Alignment" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextSurrogate.StyleName">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Text.StyleName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextSurrogate.Simplify">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Text.Simplify" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextSurrogate.WidthFactor">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Text.WidthFactor" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextSurrogate.Backward">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Text.Backward" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextSurrogate.UpsideDown">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Text.UpsideDown" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextSurrogate.Billboard">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Text.Billboard" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.TextSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Text.#ctor(devDept.Geometry.Plane,System.String,System.Double)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.TriangleSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Triangle" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.TriangleSurrogate.#ctor(devDept.Eyeshot.Entities.Triangle)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TriangleSurrogate.Vertices">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.TriangleSurrogate.Normal">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.TriangleSurrogate.VisibleEdgeFlag">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Triangle.VisibleEdgeFlag" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TriangleSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Triangle.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.TriangleSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Triangle.#ctor(devDept.Serialization.TriangleSurrogate)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.DiametricDimSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.DiametricDim" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.DiametricDimSurrogate.#ctor(devDept.Eyeshot.Entities.DiametricDim)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DiametricDimSurrogate.LeftArrowhead">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.DiametricDim.LeftArrowhead" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.DiametricDimSurrogate.RightArrowhead">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.DiametricDim.RightArrowhead" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.DiametricDimSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.DiametricDim.#ctor(devDept.Eyeshot.Entities.Circle,devDept.Geometry.Point3D,System.Double)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.OrdinateDimSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.OrdinateDim" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.OrdinateDimSurrogate.#ctor(devDept.Eyeshot.Entities.OrdinateDim)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.OrdinateDimSurrogate.DefiningPoint">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.OrdinateDim.DefiningPoint" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.OrdinateDimSurrogate.IsVertical">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.OrdinateDim.IsVertical" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.OrdinateDimSurrogate.ExtLineOffset">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.OrdinateDim.ExtLineOffset" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.OrdinateDimSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.OrdinateDim.#ctor(devDept.Geometry.Plane,devDept.Geometry.Point3D,devDept.Geometry.Point3D,System.Boolean,System.Double)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.PortionSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Solid.Portion" /> surrogate.
            </summary>
      <remarks>
            This class is used for backward compatibility and for storing data when a Solid entity is saved with Tessellation only.
            </remarks>
    </member>
    <member name="M:devDept.Serialization.PortionSurrogate.#ctor(devDept.Eyeshot.Entities.Solid.Portion)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.MeshNature">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Mesh.MeshNature" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.EdgeStyle">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Mesh.EdgeStyle" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.Triangles">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Mesh.Triangles" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.TextureCoords">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Mesh.TextureCoords" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.Normals">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Mesh.Normals" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.Edges">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Mesh.Edges" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.SmoothingAngle">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Mesh.SmoothingAngle" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.LightWeight">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Mesh.LightWeight" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.Id">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.EdgeDatas">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.Faces">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.Cycles">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.PortionSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Circle.Primitive" />.
            </summary>
      <remarks>Used by the <see cref="T:devDept.Serialization.SolidSurrogate" /> when stored Tessellation only.</remarks>
    </member>
    <member name="M:devDept.Serialization.PortionSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Solid.Portion.#ctor(devDept.Serialization.PortionSurrogate)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.SolidSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Solid" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.SolidSurrogate.#ctor(devDept.Eyeshot.Entities.Solid)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SolidSurrogate.BRepMode">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.SolidSurrogate.TextureMapping">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.SolidSurrogate.SmoothingAngle">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.SolidSurrogate.Portions">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Solid.Portions" />.
            </summary>
      <remarks>Portions are stored only when a Solid is stored with Tessellation only.</remarks>
    </member>
    <member name="F:devDept.Serialization.SolidSurrogate.UseInnerColors">
      <summary>
            See <see cref="F:devDept.Eyeshot.Entities.Solid.UseInnerColors" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SolidSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Solid.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.SolidSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.Solid.#ctor(devDept.Serialization.SolidSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.Solid" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.Mesh" />.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.GhostSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Ghost" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.GhostSurrogate.#ctor(devDept.Eyeshot.Entities.Ghost)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.GhostSurrogate.Description">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Ghost.Description" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.GhostSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Ghost.#ctor(System.String)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.ConicalSurfaceSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.ConicalSurface" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.ConicalSurfaceSurrogate.#ctor(devDept.Eyeshot.Entities.ConicalSurface)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ConicalSurfaceSurrogate.HalfAngle">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.ConicalSurfaceSurrogate.Tip">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="M:devDept.Serialization.ConicalSurfaceSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.ConicalSurface.#ctor(devDept.Serialization.ConicalSurfaceSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.ConicalSurface" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.Mesh" />.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.CylindricalSurfaceSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.CylindricalSurface" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.CylindricalSurfaceSurrogate.#ctor(devDept.Eyeshot.Entities.CylindricalSurface)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.CylindricalSurfaceSurrogate.Radius">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="M:devDept.Serialization.CylindricalSurfaceSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.CylindricalSurface.#ctor(devDept.Serialization.CylindricalSurfaceSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.CylindricalSurface" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.Mesh" />.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.PlanarSurfaceSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.PlanarSurface" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.PlanarSurfaceSurrogate.#ctor(devDept.Eyeshot.Entities.PlanarSurface)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.PlanarSurfaceSurrogate.Plane">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="M:devDept.Serialization.PlanarSurfaceSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.PlanarSurface.#ctor(devDept.Serialization.PlanarSurfaceSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.PlanarSurface" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.Mesh" />.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.RevolvedSurfaceSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.RevolvedSurfaceSurrogate.#ctor(devDept.Eyeshot.Entities.RevolvedSurface)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.RevolvedSurfaceSurrogate.Generatrix">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.RevolvedSurfaceSurrogate.SeamPlane">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="M:devDept.Serialization.RevolvedSurfaceSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.RevolvedSurface.#ctor(devDept.Serialization.RevolvedSurfaceSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.RevolvedSurface" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.Mesh" />.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.SphericalSurfaceSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.SphericalSurface" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.SphericalSurfaceSurrogate.#ctor(devDept.Eyeshot.Entities.SphericalSurface)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SphericalSurfaceSurrogate.Radius">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="M:devDept.Serialization.SphericalSurfaceSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.SphericalSurface.#ctor(devDept.Serialization.SphericalSurfaceSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.SphericalSurface" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.Mesh" />.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.TabulatedSurfaceSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.TabulatedSurface" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.TabulatedSurfaceSurrogate.#ctor(devDept.Eyeshot.Entities.TabulatedSurface)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TabulatedSurfaceSurrogate.Generatrix">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.TabulatedSurfaceSurrogate.Directrix">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="M:devDept.Serialization.TabulatedSurfaceSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.TabulatedSurface.#ctor(devDept.Serialization.TabulatedSurfaceSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.TabulatedSurface" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.Mesh" />.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.ToroidalSurfaceSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.ToroidalSurface" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.ToroidalSurfaceSurrogate.#ctor(devDept.Eyeshot.Entities.ToroidalSurface)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ToroidalSurfaceSurrogate.MajorRadius">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="M:devDept.Serialization.ToroidalSurfaceSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.ToroidalSurface.#ctor(devDept.Serialization.ToroidalSurfaceSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.ToroidalSurface" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.Mesh" />.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.SurfaceSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Surface" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.SurfaceSurrogate.#ctor(devDept.Eyeshot.Entities.Surface)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SurfaceSurrogate.ControlPoints">
      <summary>
            Obsolete starting from version 10. 
            </summary>
      <remarks>ProtoBuf-Net does not support serializing/deserializing multi-dimensional arrays.</remarks>
    </member>
    <member name="F:devDept.Serialization.SurfaceSurrogate.DegreeV">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.SurfaceSurrogate.KnotVectorV">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.SurfaceSurrogate.Trimming">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.SurfaceSurrogate.TextureScaleU">
      <summary>
            Obsolete starting from version 10.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SurfaceSurrogate.TextureScaleV">
      <summary>
            Obsolete starting from version 10.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SurfaceSurrogate.TextureOffsetU">
      <summary>
            Obsolete starting from version 10.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SurfaceSurrogate.TextureOffsetV">
      <summary>
            Obsolete starting from version 10.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SurfaceSurrogate.Triangles">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Surface.Triangles" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SurfaceSurrogate.Primitive">
      <summary>
            See <see cref="!:GSurface.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.SurfaceSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="!:Surface.Surface(GSurfaceSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.Surface" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.Mesh" /></para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.CurveSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Curve" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.CurveSurrogate.#ctor(devDept.Eyeshot.Entities.Curve)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.CurveSurrogate.Pw">
      <summary>
            Obsolete starting from version 10. 
            </summary>
    </member>
    <member name="F:devDept.Serialization.CurveSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Curve.Primitive" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.CurveSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.Curve.#ctor(devDept.Serialization.CurveSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.Curve" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.LinearPath" />.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.NurbsBaseSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.NurbsBase" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.NurbsBaseSurrogate.#ctor(devDept.Eyeshot.Entities.NurbsBase)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.NurbsBaseSurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.NurbsBaseSurrogate.p">
      <summary>
            U degree.
            </summary>
    </member>
    <member name="F:devDept.Serialization.NurbsBaseSurrogate.U">
      <summary>
            U knot vector.
            </summary>
    </member>
    <member name="T:devDept.Serialization.BrepSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Brep" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.BrepSurrogate.#ctor(devDept.Eyeshot.Entities.Brep)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BrepSurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BrepSurrogate.Faces">
      <summary>
            See <see cref="P:devDept.Geometry.Entities.GBrep.Faces" />.
            </summary>
      <remarks>Stored only for Tessellation only.</remarks>
    </member>
    <member name="F:devDept.Serialization.BrepSurrogate.Inners">
      <summary>
            The <see cref="P:devDept.Geometry.Entities.GBrep.Inners" /> as list of <see cref="T:devDept.Serialization.ProtoJaggedArray`1" />.
            </summary>
      <remarks>
            Stored only for Tessellation only.
            ProtoBuf-Net does not support serializing/deserializing jagged arrays.
            </remarks>
    </member>
    <member name="F:devDept.Serialization.BrepSurrogate.RebuildTolerance">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Brep.RebuildTolerance" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BrepSurrogate.Primitive">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Brep.Primitive" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.BrepSurrogate.TessellationFaces">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Brep.TessellationFaces" />.
            </summary>
      <remarks>The array can contain Mesh or Ghost entities.</remarks>
    </member>
    <member name="F:devDept.Serialization.BrepSurrogate.TessellationInners">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Brep.TessellationInners" />.
            </summary>
      <remarks>
        <para>ProtoBuf-Net does not support serializing/deserializing jagged arrays.</para>
        <para>The array can contain Mesh or Ghost entities.</para>
      </remarks>
    </member>
    <member name="M:devDept.Serialization.BrepSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Entities.Brep.#ctor(devDept.Serialization.BrepSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Entities.Brep" /> object.</para>
        <para>When the content is <see cref="F:devDept.Serialization.contentType.Tessellation" /> the resulting object is a <see cref="T:devDept.Eyeshot.Entities.Mesh" /> or a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.IfcBlockReferenceSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Translators.IfcBlockReference" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.IfcBlockReferenceSurrogate.#ctor(devDept.Eyeshot.Translators.IfcBlockReference)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcBlockReferenceSurrogate.GUID">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcBlockReference.GUID" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcBlockReferenceSurrogate.Parent">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcBlockReference.Parent" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcBlockReferenceSurrogate.Systems">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcBlockReference.Systems" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcBlockReferenceSurrogate.Identification">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcBlockReference.Identification" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcBlockReferenceSurrogate.Properties">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcBlockReference.Properties" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcBlockReferenceSurrogate.Materials">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcBlockReference.Materials" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcBlockReferenceSurrogate.LocalTransformation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcBlockReference.LocalTransformation" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcBlockReferenceSurrogate.GlobalTransformation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcBlockReference.GlobalTransformation" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcBlockReferenceSurrogate.Axes">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcBlockReference.Axes" /></summary>
    </member>
    <member name="F:devDept.Serialization.IfcBlockReferenceSurrogate.Openings">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcBlockReference.Openings" /></summary>
    </member>
    <member name="M:devDept.Serialization.IfcBlockReferenceSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Translators.IfcBlockReference.#ctor(devDept.Geometry.Transformation,System.String)" /> constructor to create the object.               
             </remarks>
    </member>
    <member name="T:devDept.Serialization.IfcContainerSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Translators.IfcContainer" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.IfcContainerSurrogate.#ctor(devDept.Eyeshot.Translators.IfcContainer)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcContainerSurrogate.GUID">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcContainer.GUID" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcContainerSurrogate.Identification">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcContainer.Identification" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcContainerSurrogate.Properties">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcContainer.Properties" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcContainerSurrogate.LocalTransformation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcContainer.LocalTransformation" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcContainerSurrogate.GlobalTransformation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcContainer.GlobalTransformation" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcContainerSurrogate.Parent">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcContainer.Parent" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcContainerSurrogate.Childs">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcContainer.Childs" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcContainerSurrogate.Systems">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcContainer.Systems" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcContainerSurrogate.ContainedElements">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcContainer.ContainedElements" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.IfcContainerSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Translators.IfcContainer.#ctor" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.IfcContainerSurrogate.op_Implicit(devDept.Serialization.IfcContainerSurrogate)~devDept.Eyeshot.Translators.IfcContainer">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.IfcContainerSurrogate.op_Implicit(devDept.Eyeshot.Translators.IfcContainer)~devDept.Serialization.IfcContainerSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="T:devDept.Serialization.IfcMeshSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Translators.IfcMesh" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.IfcMeshSurrogate.#ctor(devDept.Eyeshot.Translators.IfcMesh)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcMeshSurrogate.GUID">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcMesh.GUID" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcMeshSurrogate.Parent">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcMesh.Parent" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcMeshSurrogate.Systems">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcMesh.Systems" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcMeshSurrogate.Identification">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcMesh.Identification" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcMeshSurrogate.Properties">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcMesh.Properties" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcMeshSurrogate.Materials">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcMesh.Materials" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcMeshSurrogate.LocalTransformation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcMesh.LocalTransformation" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcMeshSurrogate.GlobalTransformation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcMesh.GlobalTransformation" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcMeshSurrogate.Axes">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcMesh.Axes" /></summary>
    </member>
    <member name="F:devDept.Serialization.IfcMeshSurrogate.Openings">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcMesh.Openings" /></summary>
    </member>
    <member name="M:devDept.Serialization.IfcMeshSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
        <para>This method uses the <see cref="M:devDept.Eyeshot.Translators.IfcMesh.#ctor(devDept.Serialization.IfcMeshSurrogate)" /> constructor to create the <see cref="T:devDept.Eyeshot.Translators.IfcMesh" /> object.</para>
        <para>Whether the tessellation data is missing a <see cref="T:devDept.Eyeshot.Entities.Ghost" /> entity is created instead.</para>
      </remarks>
    </member>
    <member name="T:devDept.Serialization.IfcLayerSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Translators.IfcLayer" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.IfcLayerSurrogate.#ctor(devDept.Eyeshot.Translators.IfcLayer)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcLayerSurrogate.Description">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcLayer.Description" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.IfcLayerSurrogate.Identifier">
      <summary>
            See <see cref="P:devDept.Eyeshot.Translators.IfcLayer.Identifier" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.IfcLayerSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Translators.IfcLayer.#ctor(System.String)" /> constructor to create the object.               
             </remarks>
    </member>
    <member name="T:devDept.Serialization.LayerSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Layer" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LayerSurrogate.#ctor(devDept.Eyeshot.Layer)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LayerSurrogate.Name">
      <summary>
            See <see cref="P:devDept.Eyeshot.Layer.Name" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LayerSurrogate.Color">
      <summary>
            See <see cref="P:devDept.Eyeshot.Layer.Color" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LayerSurrogate.MaterialName">
      <summary>
            See <see cref="P:devDept.Eyeshot.Layer.MaterialName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LayerSurrogate.LineTypeName">
      <summary>
            See <see cref="P:devDept.Eyeshot.Layer.LineTypeName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LayerSurrogate.LineWeight">
      <summary>
            See <see cref="P:devDept.Eyeshot.Layer.LineWeight" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LayerSurrogate.Visible">
      <summary>
            See <see cref="P:devDept.Eyeshot.Layer.Visible" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LayerSurrogate.Locked">
      <summary>
            See <see cref="P:devDept.Eyeshot.Layer.Locked" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LayerSurrogate.Exportable">
      <summary>
            See <see cref="P:devDept.Eyeshot.Layer.Exportable" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LayerSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Layer.#ctor(System.String)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.LayerSurrogate.op_Implicit(devDept.Serialization.LayerSurrogate)~devDept.Eyeshot.Layer">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LayerSurrogate.op_Implicit(devDept.Eyeshot.Layer)~devDept.Serialization.LayerSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="T:devDept.Serialization.LineTypeSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.LineType" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LineTypeSurrogate.#ctor(devDept.Eyeshot.LineType)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LineTypeSurrogate.Name">
      <summary>
            See <see cref="P:devDept.Eyeshot.LineType.Name" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LineTypeSurrogate.Pattern">
      <summary>
            See <see cref="P:devDept.Eyeshot.LineType.Pattern" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LineTypeSurrogate.Description">
      <summary>
            See <see cref="P:devDept.Eyeshot.LineType.Description" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LineTypeSurrogate.Length">
      <summary>
            See <see cref="P:devDept.Eyeshot.LineType.Length" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LineTypeSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.LineType.#ctor(System.Single[],System.String)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.LineTypeSurrogate.op_Implicit(devDept.Serialization.LineTypeSurrogate)~devDept.Eyeshot.LineType">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LineTypeSurrogate.op_Implicit(devDept.Eyeshot.LineType)~devDept.Serialization.LineTypeSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="T:devDept.Serialization.TextStyleSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.TextStyle" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.TextStyleSurrogate.#ctor(devDept.Eyeshot.TextStyle)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextStyleSurrogate.Name">
      <summary>
            See <see cref="P:devDept.Eyeshot.TextStyle.Name" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextStyleSurrogate.FontFamilyName">
      <summary>
            See <see cref="P:devDept.Eyeshot.TextStyle.FontFamilyName" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextStyleSurrogate.Style">
      <summary>
            See <see cref="P:devDept.Eyeshot.TextStyle.Style" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextStyleSurrogate.WidthFactor">
      <summary>
            See <see cref="P:devDept.Eyeshot.TextStyle.WidthFactor" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextStyleSurrogate.FileName">
      <summary>
            See <see cref="P:devDept.Eyeshot.TextStyle.FileName" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.TextStyleSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.TextStyle.#ctor(System.String,System.String,System.Drawing.FontStyle,System.Double)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.TextStyleSurrogate.op_Implicit(devDept.Serialization.TextStyleSurrogate)~devDept.Eyeshot.TextStyle">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.TextStyleSurrogate.op_Implicit(devDept.Eyeshot.TextStyle)~devDept.Serialization.TextStyleSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="T:devDept.Serialization.CameraSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Camera" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.CameraSurrogate.#ctor(devDept.Eyeshot.Camera)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.CameraSurrogate.Target">
      <summary>
            See <see cref="P:devDept.Eyeshot.Camera.Target" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.CameraSurrogate.Distance">
      <summary>
            See <see cref="P:devDept.Eyeshot.Camera.Distance" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.CameraSurrogate.Rotation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Camera.Rotation" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.CameraSurrogate.ProjectionMode">
      <summary>
            See <see cref="P:devDept.Eyeshot.Camera.ProjectionMode" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.CameraSurrogate.FocalLength">
      <summary>
            See <see cref="P:devDept.Eyeshot.Camera.FocalLength" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.CameraSurrogate.ZoomFactor">
      <summary>
            See <see cref="P:devDept.Eyeshot.Camera.ZoomFactor" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.CameraSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Camera.#ctor(devDept.Geometry.Point3D,System.Double,devDept.Geometry.Quaternion,devDept.Graphics.projectionType,System.Double,System.Double)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.CameraSurrogate.op_Implicit(devDept.Serialization.CameraSurrogate)~devDept.Eyeshot.Camera">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.CameraSurrogate.op_Implicit(devDept.Eyeshot.Camera)~devDept.Serialization.CameraSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="T:devDept.Serialization.RasterViewSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.RasterView" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.RasterViewSurrogate.#ctor(devDept.Eyeshot.Entities.RasterView)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.RasterViewSurrogate.Dpi">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.RasterView.Dpi" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.RasterViewSurrogate.DisplayMode">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.RasterView.DisplayMode" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.RasterViewSurrogate.Shadow">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.RasterView.Shadow" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.RasterViewSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.RasterView.#ctor(System.Double,System.Double,devDept.Eyeshot.Camera,System.Double,System.String,System.Double,System.Double)" /> constructor to create the object.               
             </remarks>
    </member>
    <member name="T:devDept.Serialization.SheetSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Sheet" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.SheetSurrogate.#ctor(devDept.Eyeshot.Sheet)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SheetSurrogate.Units">
      <summary>
            See <see cref="P:devDept.Eyeshot.Sheet.Units" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SheetSurrogate.Width">
      <summary>
            See <see cref="P:devDept.Eyeshot.Sheet.Width" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SheetSurrogate.Height">
      <summary>
            See <see cref="P:devDept.Eyeshot.Sheet.Height" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SheetSurrogate.Name">
      <summary>
            See <see cref="P:devDept.Eyeshot.Sheet.Name" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SheetSurrogate.Camera">
      <summary>
            See <see cref="P:devDept.Eyeshot.Sheet.Camera" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.SheetSurrogate.Entities">
      <summary>
            See <see cref="P:devDept.Eyeshot.Sheet.Entities" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.SheetSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Sheet.#ctor(devDept.Geometry.linearUnitsType,System.Double,System.Double,System.String)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.SheetSurrogate.op_Implicit(devDept.Serialization.SheetSurrogate)~devDept.Eyeshot.Sheet">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.SheetSurrogate.op_Implicit(devDept.Eyeshot.Sheet)~devDept.Serialization.SheetSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="T:devDept.Serialization.VectorViewSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.VectorView" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.VectorViewSurrogate.#ctor(devDept.Eyeshot.Entities.VectorView)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.VectorViewSurrogate.HiddenSegments">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.VectorView.HiddenSegments" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.VectorViewSurrogate.IgnoreTransparency">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.VectorView.IgnoreTransparency" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.VectorViewSurrogate.FillTexts">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.VectorView.FillTexts" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.VectorViewSurrogate.FontAccuracy">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.VectorView.FontAccuracy" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.VectorViewSurrogate.FillRegions">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.VectorView.FillRegions" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.VectorViewSurrogate.KeepEntityColor">
      <summary>
            See <seealso cref="P:devDept.Eyeshot.Entities.VectorView.KeepEntityColor" /></summary>
    </member>
    <member name="F:devDept.Serialization.VectorViewSurrogate.TreatWhiteAsBlack">
      <summary>
            See <seealso cref="P:devDept.Eyeshot.Entities.VectorView.TreatWhiteAsBlack" /></summary>
    </member>
    <member name="F:devDept.Serialization.VectorViewSurrogate.CenterlinesExtensionAmount">
      <summary>
            See <seealso cref="P:devDept.Eyeshot.Entities.VectorView.CenterlinesExtensionAmount" /></summary>
    </member>
    <member name="M:devDept.Serialization.VectorViewSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.VectorView.#ctor(System.Double,System.Double,devDept.Eyeshot.Camera,System.Double,System.String,System.Double,System.Double)" /> constructor to create the object.               
             </remarks>
    </member>
    <member name="T:devDept.Serialization.ViewSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.View" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.ViewSurrogate.#ctor(devDept.Eyeshot.Entities.View)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ViewSurrogate.X">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.View.X" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ViewSurrogate.Y">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.View.Y" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ViewSurrogate.Camera">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.View.Camera" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ViewSurrogate.ViewType">
      <summary>
            The view type for the standard views.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ViewSurrogate.Scale">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.View.Scale" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ViewSurrogate.Width">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.View.Width" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ViewSurrogate.Height">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.View.Height" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ViewSurrogate.Window">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.View.Window" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ViewSurrogate.WindowCenter">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.View.WindowCenter" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ViewSurrogate.HasChanged">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.View.HasChanged" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ViewSurrogate.EntitiesToHide">
      <summary>
            See <see cref="F:devDept.Eyeshot.Entities.View.EntitiesToHide" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.ViewSurrogate.ConvertToObject">
      <inheritdoc />
    </member>
    <member name="M:devDept.Serialization.ViewSurrogate.CopyDataToObject(devDept.Eyeshot.Entities.Entity)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Serialization.ViewSurrogate.CopyDataFromObject(devDept.Eyeshot.Entities.Entity)">
      <inheritdoc />
    </member>
    <member name="M:devDept.Serialization.CircularMotionSurrogate.#ctor(devDept.Eyeshot.Entities.Toolpath.CircularMotion)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.CircularMotionSurrogate.Plane">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.CircularMotion.Plane" /></summary>
    </member>
    <member name="F:devDept.Serialization.CircularMotionSurrogate.Radius">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.CircularMotion.Radius" /></summary>
    </member>
    <member name="F:devDept.Serialization.CircularMotionSurrogate.Angle">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.CircularMotion.Angle" /></summary>
    </member>
    <member name="F:devDept.Serialization.CircularMotionSurrogate.Points">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.CircularMotion.Angle" /></summary>
    </member>
    <member name="M:devDept.Serialization.CircularMotionSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Line.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.LinearMotionSurrogate.#ctor(devDept.Eyeshot.Entities.Toolpath.LinearMotion)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LinearMotionSurrogate.From">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.LinearMotion.From" /></summary>
    </member>
    <member name="F:devDept.Serialization.LinearMotionSurrogate.To">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.LinearMotion.To" /></summary>
    </member>
    <member name="M:devDept.Serialization.LinearMotionSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Toolpath.LinearMotion.#ctor(devDept.Geometry.Point3D,devDept.Geometry.Point3D,devDept.Eyeshot.Entities.motionType,System.Double,System.Double,System.String)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="M:devDept.Serialization.MotionSurrogate.#ctor(devDept.Eyeshot.Entities.Toolpath.Motion)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.MotionSurrogate.Speed">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.Motion.Speed" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.MotionSurrogate.Feed">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.Motion.Feed" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.MotionSurrogate.Code">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.Motion.Code" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.MotionSurrogate.CodeLine">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.Motion.CodeLine" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.MotionSurrogate.Approach">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.Motion.Approach" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.MotionSurrogate.op_Implicit(devDept.Serialization.MotionSurrogate)~devDept.Eyeshot.Entities.Toolpath.Motion">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.MotionSurrogate.op_Implicit(devDept.Eyeshot.Entities.Toolpath.Motion)~devDept.Serialization.MotionSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
    </member>
    <member name="T:devDept.Serialization.PointCLSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.PointCL" /> surrogate.
            </summary>
    </member>
    <member name="T:devDept.Serialization.ToolpathSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Entities.Toolpath" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.ToolpathSurrogate.#ctor(devDept.Eyeshot.Entities.Toolpath)">
      <summary>
            Standard Constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ToolpathSurrogate.Vertices">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Entity.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ToolpathSurrogate.AllVertices">
      <summary>
            See <see cref="!:Toolpath.Vertices" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ToolpathSurrogate.Tool">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.Tool" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ToolpathSurrogate.MotionList">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.MotionList" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ToolpathSurrogate.RapidColor">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.RapidColor" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ToolpathSurrogate.LeadColor">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.LeadColor" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ToolpathSurrogate.RampColor">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.RampColor" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ToolpathSurrogate.Transformation">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.Transformation" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ToolpathSurrogate.RapidPattern">
      <summary>
            See <see cref="P:devDept.Eyeshot.Entities.Toolpath.RapidPattern" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.ToolpathSurrogate.ConvertToObject">
      <inheritdoc />
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Entities.Toolpath.#ctor(System.Collections.Generic.ICollection{devDept.Eyeshot.Entities.Toolpath.Motion},System.Int32)" /> constructor to create the object.        
             </remarks>
    </member>
    <member name="T:devDept.Serialization.LeaderAndTextSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Labels.LeaderAndText" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LeaderAndTextSurrogate.#ctor(devDept.Eyeshot.Labels.LeaderAndText)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LeaderAndTextSurrogate.Offset">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.LeaderAndText.Offset" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LeaderAndTextSurrogate.ConvertToObject">
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Labels.LeaderAndText.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color,devDept.Geometry.Vector2D)" /> constructor to create the object.
             </remarks>
    </member>
    <member name="T:devDept.Serialization.OutlinedTextSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Labels.OutlinedText" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.OutlinedTextSurrogate.#ctor(devDept.Eyeshot.Labels.OutlinedText)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="M:devDept.Serialization.OutlinedTextSurrogate.ConvertToObject">
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Labels.OutlinedText.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color)" /> constructor to create the object.
             </remarks>
    </member>
    <member name="T:devDept.Serialization.TextOnlySurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Labels.TextOnly" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.TextOnlySurrogate.#ctor(devDept.Eyeshot.Labels.TextOnly)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextOnlySurrogate.Text">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.TextOnly.Text" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextOnlySurrogate.Font">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.TextOnly.Font" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextOnlySurrogate.Vertical">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.TextOnly.Vertical" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextOnlySurrogate.FillColor">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.TextOnly.FillColor" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextOnlySurrogate.ColorForSelection">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.TextOnly.ColorForSelection" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextOnlySurrogate.FillColorForSelection">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.TextOnly.FillColorForSelection" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.TextOnlySurrogate.CornerRadius">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.TextOnly.CornerRadius" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.TextOnlySurrogate.ConvertToObject">
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Labels.TextOnly.#ctor(devDept.Geometry.Point3D,System.String,System.Drawing.Font,System.Drawing.Color)" /> constructor to create the object.
             </remarks>
    </member>
    <member name="T:devDept.Serialization.LeaderAndImageSurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Labels.LeaderAndImage" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LeaderAndImageSurrogate.#ctor(devDept.Eyeshot.Labels.LeaderAndImage)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LeaderAndImageSurrogate.Offset">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.LeaderAndImage.Offset" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LeaderAndImageSurrogate.ConvertToObject">
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Labels.LeaderAndImage.#ctor(devDept.Geometry.Point3D,System.Drawing.Bitmap,System.Drawing.Color,System.Int32,System.Int32,devDept.Geometry.Vector2D)" /> constructor to create the object.
             </remarks>
    </member>
    <member name="T:devDept.Serialization.ImageOnlySurrogate">
      <summary>
            Defines the <see cref="T:devDept.Eyeshot.Labels.ImageOnly" /> surrogate.
            </summary>
    </member>
    <member name="M:devDept.Serialization.ImageOnlySurrogate.#ctor(devDept.Eyeshot.Labels.ImageOnly)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ImageOnlySurrogate.HotSpot">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.ImageOnly.HotSpot" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.ImageOnlySurrogate.ImageForSelection">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.ImageOnly.ImageForSelection" />.
            </summary>
    </member>
    <member name="M:devDept.Serialization.ImageOnlySurrogate.ConvertToObject">
      <remarks>
             This method uses the <see cref="M:devDept.Eyeshot.Labels.ImageOnly.#ctor(devDept.Geometry.Point3D,System.Drawing.Bitmap,System.Int32,System.Int32)" /> constructor to create the object.
             </remarks>
    </member>
    <member name="T:devDept.Serialization.LabelSurrogate">
      <summary>
            Defines the base class for label surrogates.
            </summary>
      <remarks>This class is not declared as abstract to handle not supported label.</remarks>
    </member>
    <member name="M:devDept.Serialization.LabelSurrogate.#ctor(devDept.Eyeshot.Labels.Label)">
      <summary>
            Standard constructor.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LabelSurrogate.Color">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.Label.Color" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LabelSurrogate.AnchorPoint">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.Label.AnchorPoint" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LabelSurrogate.Image">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.Label.Image" />.
            </summary>
      <remarks>Stored only for <see cref="T:devDept.Eyeshot.Labels.ImageOnly" /> labels.</remarks>
    </member>
    <member name="F:devDept.Serialization.LabelSurrogate.Visible">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.Label.Visible" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LabelSurrogate.LabelData">
      <summary>
            The <see cref="P:devDept.Eyeshot.Labels.Label.LabelData" /> as <see cref="T:devDept.Serialization.ProtoObject" />.
            </summary>
      <remarks>ProtoBuf does not support serializing/deserializing object.</remarks>
      <seealso cref="T:devDept.Serialization.ProtoObject" />
    </member>
    <member name="F:devDept.Serialization.LabelSurrogate.Selectable">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.Label.Selectable" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LabelSurrogate.Alignment">
      <summary>
            See <see cref="P:devDept.Eyeshot.Labels.Label.Alignment" />.
            </summary>
    </member>
    <member name="F:devDept.Serialization.LabelSurrogate.Type">
      <summary>
            Gets the label type for logging purpose (Not supported label type, i.e. different Eyeshot editions).        
            </summary>
    </member>
    <member name="M:devDept.Serialization.LabelSurrogate.ConvertToObject">
      <summary>
            Creates the label related to the surrogate.
            </summary>
      <remarks>When this method is called, the <see cref="!:Content" /> field is already initialized.</remarks>
      <returns>The label created.</returns>
    </member>
    <member name="M:devDept.Serialization.LabelSurrogate.CopyDataToObject(devDept.Eyeshot.Labels.Label)">
      <summary>
            Copies common data from surrogate to object when reading data.
            </summary>
      <remarks>
        <para>This method is called by <see cref="M:devDept.Serialization.LabelSurrogate.ConvertToObject" /> method after the creation of the object instance.</para>
        <para>When this method is called, the <see cref="!:Content" /> field is already initialized.</para>
      </remarks>
      <seealso cref="M:devDept.Serialization.LabelSurrogate.ConvertToObject" />
    </member>
    <member name="M:devDept.Serialization.LabelSurrogate.CopyDataFromObject(devDept.Eyeshot.Labels.Label)">
      <summary>
            Copies all data from the object to its surrogate when writing data.
            </summary>
      <remarks>
        <para>Use this method to fill ALL the properties of this surrogate. It is called by the empty constructor to initialize the surrogates properties.</para>
        <para>Beware, when this method is called, both <see cref="P:devDept.Serialization.Surrogate`1.Version" /> and <see cref="!:Content" /> fields are not initialized yet.</para>
      </remarks>
      <seealso cref="M:devDept.Serialization.LabelSurrogate.BeforeSerialize(ProtoBuf.SerializationContext)" />
    </member>
    <member name="M:devDept.Serialization.LabelSurrogate.CheckSurrogateData(System.String)">
      <summary>
            Integrity check according to the <see cref="T:devDept.Serialization.contentType" />.
            </summary>
      <remarks>
        <para>Use this method to add check/warning messages to the <see cref="P:devDept.Serialization.Surrogate`1.Log" />.</para>
        <para>During the serialization process, it is called internally before serializing the surrogate.</para>
        <para>During the deserialization process, you can use it for your custom surrogate checks in <see cref="M:devDept.Serialization.LabelSurrogate.ConvertToObject" /> or in <see cref="M:devDept.Serialization.LabelSurrogate.CopyDataToObject(devDept.Eyeshot.Labels.Label)" /> methods in conjunction with the <see cref="!:Content" />.</para>
      </remarks>
      <seealso cref="M:devDept.Serialization.Surrogate`1.WriteLog(System.String)" />.
            <seealso cref="M:devDept.Serialization.Surrogate`1.ConvertToObject" />.
            <seealso cref="M:devDept.Serialization.Surrogate`1.CopyDataToObject(`0)" />.
            <seealso cref="M:devDept.Serialization.Surrogate`1.CopyDataFromObject(`0)" />.  
            <seealso cref="M:devDept.Serialization.LabelSurrogate.BeforeSerialize(ProtoBuf.SerializationContext)" />.
            <seealso cref="T:devDept.Eyeshot.Translators.WriteFile" />.
            <seealso cref="T:devDept.Eyeshot.Translators.ReadFile" />.
        </member>
    <member name="M:devDept.Serialization.LabelSurrogate.op_Implicit(devDept.Serialization.LabelSurrogate)~devDept.Eyeshot.Labels.Label">
      <summary>
            Converts the surrogate to the related object during the deserialization process.
            </summary>
    </member>
    <member name="M:devDept.Serialization.LabelSurrogate.op_Implicit(devDept.Eyeshot.Labels.Label)~devDept.Serialization.LabelSurrogate">
      <summary>
            Converts the object to the related surrogate during the serialization process.
            </summary>
      <exception cref="T:devDept.Eyeshot.EyeshotException">Thrown when the <see cref="M:devDept.Eyeshot.Labels.Label.ConvertToSurrogate" /> method returns null value.</exception>
    </member>
    <member name="M:devDept.Serialization.LabelSurrogate.BeforeDeserialize(ProtoBuf.SerializationContext)">
      <summary>
            Called before the object deserialization.
            </summary>
      <param name="serializationContext">The serialization context</param>
      <remarks>
        <para>The override of this method must always call the base at the beginning.</para>
        <para>This method initializes the <see cref="!:Content" /> field when reading data.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">Thrown when the serialization context is not a valid <see cref="T:devDept.Serialization.FileSerializer" /> object.</exception>
    </member>
    <member name="M:devDept.Serialization.LabelSurrogate.BeforeSerialize(ProtoBuf.SerializationContext)">
      <summary>
            Called before the object serialization.
            </summary>
      <param name="serializationContext">The serialization context</param>
      <remarks>
        <para>The override of this method must always call the base at the beginning.</para>
        <para>This method initializes the <see cref="!:Content" /> field when writing data.</para>
      </remarks>
      <exception cref="T:System.ArgumentException">Thrown when the serialization context is not a valid <see cref="T:devDept.Serialization.FileSerializer" /> object.</exception>
    </member>
  </members>
</doc>